
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\4B2B2DB2748FD3CB713EB84C0453CE8C/BMWI3BMS.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
{
  return CUVFaults;
}

bool BMSModule::readModuleValues()
{
       0:	00 80 00 20 bd 01 00 00 79 99 00 00 35 99 00 00     ... ....y...5...
  bool retVal = false;
  int retLen;
  float tempCalc;
  float tempTemp;

  payload[0] = moduleAddress << 1;
      10:	35 99 00 00 35 99 00 00 35 99 00 00 35 99 00 00     5...5...5...5...

  readStatus();
  Logger::debug("Module %i   alerts=%X   faults=%X   COV=%X   CUV=%X", moduleAddress, alerts, faults, COVFaults, CUVFaults);
      20:	35 99 00 00 35 99 00 00 35 99 00 00 79 99 00 00     5...5...5...y...
      30:	79 99 00 00 35 99 00 00 45 8e 00 00 49 8e 00 00     y...5...E...I...

  payload[1] = REG_ADC_CTRL;
  payload[2] = 0b00111101; //ADC Auto mode, read every ADC input we can (Both Temps, Pack, 6 cells)
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
      40:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
  payload[1] = REG_IO_CTRL;
  payload[2] = 0b00000011; //enable temperature measurement VSS pins
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);

  payload[1] = REG_ADC_CONV; //start all ADC conversions
  payload[2] = 1;
      50:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
      60:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
  BMSUtil::sendDataWithReply(payload, 3, true, buff, 3);
      70:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      80:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...

  payload[1] = REG_GPAI; //start reading registers at the module voltage registers
  payload[2] = 0x12; //read 18 bytes (Each value takes 2 - ModuleV, CellV1-6, Temp1, Temp2)
  retLen = BMSUtil::sendDataWithReply(payload, 3, false, buff, 22);
      90:	25 71 00 00 79 99 00 00 79 99 00 00 79 99 00 00     %q..y...y...y...
    static uint8_t genCRC(uint8_t *input, int lenInput)
    {
        uint8_t generator = 0x07;
        uint8_t crc = 0;
  
        for (int x = 0; x < lenInput; x++)
      a0:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
        {
            crc ^= input[x]; /* XOR-in the next input byte */
      b0:	79 99 00 00 e5 83 00 00 f1 83 00 00 f5 83 00 00     y...............

            for (int i = 0; i < 8; i++)
            {
                if ((crc & 0x80) != 0)
                {
                    crc = (uint8_t)((crc << 1) ^ generator);
      c0:	01 84 00 00 05 84 00 00 09 84 00 00 79 99 00 00     ............y...

  calcCRC = BMSUtil::genCRC(buff, retLen - 1);
  Logger::debug("Sent CRC: %x     Calculated CRC: %x", buff[21], calcCRC);
      d0:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...

  //18 data bytes, address, command, length, and CRC = 22 bytes returned
  //Also validate CRC to ensure we didn't get garbage data.
  if ( (retLen == 22) && (buff[21] == calcCRC) )
      e0:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      retVal = true;
    }
  }
  else
  {
    Logger::error("Invalid module response received for module %i  len: %i   crc: %i   calc: %i",
      f0:	79 99 00 00 79 99 00 00 79 99 00 00 9d a8 00 00     y...y...y.......
    if (buff[0] == (moduleAddress << 1) && buff[1] == REG_GPAI && buff[2] == 0x12) //Also ensure this is actually the reply to our intended query
     100:	79 99 00 00 c5 af 00 00 79 99 00 00 79 99 00 00     y.......y...y...
  // BMSUtil::sendData(payload, 3, true);
  // delay(3);
  // BMSUtil::getReply(buff, 50);    //TODO: we're not validating the reply here. Perhaps check to see if a valid reply came back

  return retVal;
}
     110:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
    if (buff[0] == (moduleAddress << 1) && buff[1] == REG_GPAI && buff[2] == 0x12) //Also ensure this is actually the reply to our intended query
     120:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      moduleVolt = (buff[3] * 256 + buff[4]) * 0.002034609f;
     130:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
     140:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      if (moduleVolt > highestModuleVolt) highestModuleVolt = moduleVolt;
     150:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      if (moduleVolt < lowestModuleVolt) lowestModuleVolt = moduleVolt;
     160:	79 99 00 00 c5 b2 00 00 79 99 00 00 79 99 00 00     y.......y...y...
        cellVolt[i] = (buff[5 + (i * 2)] * 256 + buff[6 + (i * 2)]) * 0.000381493f;
     170:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
     180:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
        if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     190:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
     1a0:	79 99 00 00 79 99 00 00 79 99 00 00 79 99 00 00     y...y...y...y...
      for (int i = 0; i < 12; i++)
     1b0:	79 99 00 00 79 99 00 00 79 99 00 00                 y...y...y...

000001bc <ResetHandler>:
      tempTemp = (1.78f / ((buff[17] * 256 + buff[18] + 2) / 33046.0f) - 3.57f);
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
     1ce:	bf00      	nop
     1d0:	f009 fbd6 	bl	9980 <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
      tempTemp *= 1000.0f;
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
      tempCalc =  1.0f / (0.0007610373573f + (0.0002728524832 * logf(tempTemp)) + (powf(logf(tempTemp), 3) * 0.0000001022822735f));
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
      temperatures[0] = tempCalc - 273.15f;
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
     222:	f009 fab3 	bl	978c <memcpy>
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
     22a:	1cda      	adds	r2, r3, #3
      temperatures[0] = tempCalc - 273.15f;
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     230:	f022 0203 	bic.w	r2, r2, #3
      temperatures[0] = tempCalc - 273.15f;
     234:	4299      	cmp	r1, r3
      tempTemp = 1.78f / ((buff[19] * 256 + buff[20] + 9) / 33068.0f) - 3.57f;
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00d fc6c 	bl	db18 <memset>
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f009 faa0 	bl	978c <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
      tempTemp *= 1000.0f;
     252:	f803 1b01 	strb.w	r1, [r3], #1
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
      tempCalc = 1.0f / (0.0007610373573f + (0.0002728524832 * logf(tempTemp)) + (powf(logf(tempTemp), 3) * 0.0000001022822735f));
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
      temperatures[1] = tempCalc - 273.15f;
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
      templow = temperatures[g];
    }
    }
    return (templow);
  */
  if (temperatures[0] < temperatures[1] )
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
  {
    return (temperatures[0]);
  }
  else
  {
    return (temperatures[1]);
     2ae:	2120      	movs	r1, #32
      if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
    }
    }
    return (temphigh);
  */

  if (temperatures[0] > temperatures[1])
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
  {
    return (temperatures[0]);
  }
  else
  {
    return (temperatures[1]);
     2ca:	619a      	str	r2, [r3, #24]
      if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 fc7c 	bl	9bd4 <_init_Teensyduino_internal_>
      Logger::debug("Got voltage and temperature readings");
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
      retVal = true;
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
    return (temperatures[0]);
     2e6:	f009 fc69 	bl	9bbc <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f009 fc5a 	bl	9bbc <rtc_set>
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
     30c:	f009 fb3e 	bl	998c <startup_late_hook>
     310:	f00d fcf8 	bl	dd04 <__libc_init_array>
     314:	f009 fa32 	bl	977c <main>
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     32c:	4003d000 	.word	0x4003d000
      {
        Logger::console("  MODULE IS FAULTED:");
        if (faults & 1)
        {
          SERIALCONSOLE.print("    Overvoltage Cell Numbers (1-6): ");
          for (int i = 0; i < 12; i++)
     330:	4007d000 	.word	0x4007d000
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff9170 	.word	0x1fff9170
            {
              SERIALCONSOLE.print(i + 1);
              SERIALCONSOLE.print(" ");
            }
          }
          SERIALCONSOLE.println();
     340:	0001562c 	.word	0x0001562c
     344:	1fffd630 	.word	0x1fffd630
     348:	1fff9170 	.word	0x1fff9170
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
	startup_late_hook();
	__libc_init_array();

	main();
	
	while (1) ;
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645c1f45 	.word	0x645c1f45
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9170 	.word	0x1fff9170
     42c:	1fff9170 	.word	0x1fff9170
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9170 	.word	0x1fff9170
     454:	0001562c 	.word	0x0001562c

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2230      	movs	r2, #48	; 0x30
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00d fb5a 	bl	db18 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4916      	ldr	r1, [pc, #88]	; (4c0 <BMSModule::BMSModule()+0x68>)
     466:	f104 032c 	add.w	r3, r4, #44	; 0x2c
     46a:	f104 025c 	add.w	r2, r4, #92	; 0x5c
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 12; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2230      	movs	r2, #48	; 0x30
     478:	2100      	movs	r1, #0
     47a:	f104 0060 	add.w	r0, r4, #96	; 0x60
     47e:	f00d fb4b 	bl	db18 <memset>
  exists = false;
     482:	2200      	movs	r2, #0
  moduleVolt = 0.0f;
     484:	2300      	movs	r3, #0
  lowestTemperature = 200.0f;
     486:	490f      	ldr	r1, [pc, #60]	; (4c4 <BMSModule::BMSModule()+0x6c>)
  highestTemperature = -100.0f;
     488:	480f      	ldr	r0, [pc, #60]	; (4c8 <BMSModule::BMSModule()+0x70>)
  moduleAddress = 0;
     48a:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
  highestTemperature = -100.0f;
     48e:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
  moduleVolt = 0.0f;
     492:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  temperatures[0] = 0.0f;
     496:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  temperatures[1] = 0.0f;
     49a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  temperatures[2] = 0.0f;
     49e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  temperatures[3] = 0.0f;
     4a2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  lowestTemperature = 200.0f;
     4a6:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
  lowestModuleVolt = 200.0f;
     4aa:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  highestModuleVolt = 0.0f;
     4ae:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
  exists = false;
     4b2:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
  error = 0;
     4b6:	f8c4 20dc 	str.w	r2, [r4, #220]	; 0xdc
}
     4ba:	4620      	mov	r0, r4
     4bc:	bd10      	pop	{r4, pc}
     4be:	bf00      	nop
     4c0:	40a00000 	.word	0x40a00000
     4c4:	43480000 	.word	0x43480000
     4c8:	c2c80000 	.word	0xc2c80000

000004cc <BMSModule::clearmodule()>:
{
     4cc:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     4ce:	2230      	movs	r2, #48	; 0x30
{
     4d0:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     4d2:	2100      	movs	r1, #0
     4d4:	f00d fb20 	bl	db18 <memset>
  variant = 0;
     4d8:	2200      	movs	r2, #0
  moduleVolt = 0.0f;
     4da:	2300      	movs	r3, #0
  moduleAddress = 0;
     4dc:	f884 20d0 	strb.w	r2, [r4, #208]	; 0xd0
  moduleVolt = 0.0f;
     4e0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  temperatures[0] = 0.0f;
     4e4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  temperatures[1] = 0.0f;
     4e8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
  temperatures[2] = 0.0f;
     4ec:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  temperatures[3] = 0.0f;
     4f0:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  variant = 0;
     4f4:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
  exists = false;
     4f8:	f8a4 20b8 	strh.w	r2, [r4, #184]	; 0xb8
}
     4fc:	bd10      	pop	{r4, pc}
     4fe:	bf00      	nop

00000500 <BMSModule::decodetemp(CAN_message_t&, int)>:
{
     500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (temperatures[g] > -40)
     504:	f8df 9040 	ldr.w	r9, [pc, #64]	; 548 <BMSModule::decodetemp(CAN_message_t&, int)+0x48>
{
     508:	4607      	mov	r7, r0
  for (int g = 0; g < 4; g++)
     50a:	1dce      	adds	r6, r1, #7
     50c:	f100 0594 	add.w	r5, r0, #148	; 0x94
     510:	f100 08a4 	add.w	r8, r0, #164	; 0xa4
    temperatures[g] = msg.buf[g] - 40;
     514:	f816 0f01 	ldrb.w	r0, [r6, #1]!
     518:	3828      	subs	r0, #40	; 0x28
     51a:	f00c fa27 	bl	c96c <__aeabi_i2f>
    if (temperatures[g] > -40)
     51e:	4649      	mov	r1, r9
    temperatures[g] = msg.buf[g] - 40;
     520:	f845 0b04 	str.w	r0, [r5], #4
     524:	4604      	mov	r4, r0
    if (temperatures[g] > -40)
     526:	f00c fc31 	bl	cd8c <__aeabi_fcmpgt>
     52a:	b140      	cbz	r0, 53e <BMSModule::decodetemp(CAN_message_t&, int)+0x3e>
      temperatures[g] = temperatures[g] + TempOff;
     52c:	f9b7 00e4 	ldrsh.w	r0, [r7, #228]	; 0xe4
     530:	f00c fa1c 	bl	c96c <__aeabi_i2f>
     534:	4621      	mov	r1, r4
     536:	f00c f965 	bl	c804 <__addsf3>
     53a:	f845 0c04 	str.w	r0, [r5, #-4]
  for (int g = 0; g < 4; g++)
     53e:	4545      	cmp	r5, r8
     540:	d1e8      	bne.n	514 <BMSModule::decodetemp(CAN_message_t&, int)+0x14>
}
     542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     546:	bf00      	nop
     548:	c2200000 	.word	0xc2200000

0000054c <BMSModule::decodecan(int, CAN_message_t&, int)>:
{
     54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     550:	4680      	mov	r8, r0
     552:	b084      	sub	sp, #16
     554:	4614      	mov	r4, r2
  switch (Id)
     556:	2904      	cmp	r1, #4
     558:	d818      	bhi.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
     55a:	e8df f001 	tbb	[pc, r1]
     55e:	6403      	.short	0x6403
     560:	b990      	.short	0xb990
     562:	3c          	.byte	0x3c
     563:	00          	.byte	0x00
      error = msg.buf[0] + (msg.buf[1] << 8) + (msg.buf[2] << 16) + (msg.buf[3] << 24);
     564:	7a61      	ldrb	r1, [r4, #9]
     566:	7a23      	ldrb	r3, [r4, #8]
     568:	7aa2      	ldrb	r2, [r4, #10]
     56a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
     56e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
     572:	7ae2      	ldrb	r2, [r4, #11]
     574:	eb03 6302 	add.w	r3, r3, r2, lsl #24
     578:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
      balstat = ((msg.buf[5] & 0x0F ) << 8) + msg.buf[4];
     57c:	7b63      	ldrb	r3, [r4, #13]
     57e:	7b22      	ldrb	r2, [r4, #12]
     580:	021b      	lsls	r3, r3, #8
     582:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
     586:	4413      	add	r3, r2
     588:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     58c:	4f6e      	ldr	r7, [pc, #440]	; (748 <BMSModule::decodecan(int, CAN_message_t&, int)+0x1fc>)
     58e:	f1a8 0404 	sub.w	r4, r8, #4
     592:	f108 062c 	add.w	r6, r8, #44	; 0x2c
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     596:	6b60      	ldr	r0, [r4, #52]	; 0x34
     598:	f854 5f04 	ldr.w	r5, [r4, #4]!
     59c:	4629      	mov	r1, r5
     59e:	f00c fbf5 	bl	cd8c <__aeabi_fcmpgt>
     5a2:	4603      	mov	r3, r0
     5a4:	4628      	mov	r0, r5
     5a6:	b12b      	cbz	r3, 5b4 <BMSModule::decodecan(int, CAN_message_t&, int)+0x68>
     5a8:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
     5ac:	f00c fbe4 	bl	cd78 <__aeabi_fcmpge>
     5b0:	b100      	cbz	r0, 5b4 <BMSModule::decodecan(int, CAN_message_t&, int)+0x68>
     5b2:	6325      	str	r5, [r4, #48]	; 0x30
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     5b4:	6e21      	ldr	r1, [r4, #96]	; 0x60
     5b6:	4628      	mov	r0, r5
     5b8:	f00c fbe8 	bl	cd8c <__aeabi_fcmpgt>
     5bc:	4603      	mov	r3, r0
     5be:	4639      	mov	r1, r7
     5c0:	4628      	mov	r0, r5
     5c2:	b11b      	cbz	r3, 5cc <BMSModule::decodecan(int, CAN_message_t&, int)+0x80>
     5c4:	f00c fbe2 	bl	cd8c <__aeabi_fcmpgt>
     5c8:	b100      	cbz	r0, 5cc <BMSModule::decodecan(int, CAN_message_t&, int)+0x80>
     5ca:	6625      	str	r5, [r4, #96]	; 0x60
  for (int i = 0; i < 12; i++)
     5cc:	42b4      	cmp	r4, r6
     5ce:	d1e2      	bne.n	596 <BMSModule::decodecan(int, CAN_message_t&, int)+0x4a>
}
     5d0:	b004      	add	sp, #16
     5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (msg.buf[1] < 0x40)
     5d6:	7a63      	ldrb	r3, [r4, #9]
     5d8:	2b3f      	cmp	r3, #63	; 0x3f
     5da:	d809      	bhi.n	5f0 <BMSModule::decodecan(int, CAN_message_t&, int)+0xa4>
        cellVolt[9] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     5dc:	7a20      	ldrb	r0, [r4, #8]
     5de:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     5e2:	f00c f9c3 	bl	c96c <__aeabi_i2f>
     5e6:	4959      	ldr	r1, [pc, #356]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     5e8:	f00c fac8 	bl	cb7c <__aeabi_fdiv>
     5ec:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
      if (msg.buf[3] < 0x40)
     5f0:	7ae3      	ldrb	r3, [r4, #11]
     5f2:	2b3f      	cmp	r3, #63	; 0x3f
     5f4:	d809      	bhi.n	60a <BMSModule::decodecan(int, CAN_message_t&, int)+0xbe>
        cellVolt[10] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     5f6:	7aa0      	ldrb	r0, [r4, #10]
     5f8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     5fc:	f00c f9b6 	bl	c96c <__aeabi_i2f>
     600:	4952      	ldr	r1, [pc, #328]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     602:	f00c fabb 	bl	cb7c <__aeabi_fdiv>
     606:	f8c8 0028 	str.w	r0, [r8, #40]	; 0x28
      if (msg.buf[5] < 0x40)
     60a:	7b63      	ldrb	r3, [r4, #13]
     60c:	2b3f      	cmp	r3, #63	; 0x3f
     60e:	d8bd      	bhi.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
        cellVolt[11] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     610:	7b20      	ldrb	r0, [r4, #12]
     612:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     616:	f00c f9a9 	bl	c96c <__aeabi_i2f>
     61a:	494c      	ldr	r1, [pc, #304]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     61c:	f00c faae 	bl	cb7c <__aeabi_fdiv>
     620:	f8c8 002c 	str.w	r0, [r8, #44]	; 0x2c
     624:	e7b2      	b.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
      if (msg.buf[1] < 0x40)
     626:	7a62      	ldrb	r2, [r4, #9]
     628:	9303      	str	r3, [sp, #12]
     62a:	2a3f      	cmp	r2, #63	; 0x3f
     62c:	d80c      	bhi.n	648 <BMSModule::decodecan(int, CAN_message_t&, int)+0xfc>
        cellVolt[0] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     62e:	7a20      	ldrb	r0, [r4, #8]
     630:	eb00 2002 	add.w	r0, r0, r2, lsl #8
     634:	f00c f99a 	bl	c96c <__aeabi_i2f>
     638:	4944      	ldr	r1, [pc, #272]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     63a:	f00c fa9f 	bl	cb7c <__aeabi_fdiv>
        if (debug == 1)
     63e:	9b03      	ldr	r3, [sp, #12]
        cellVolt[0] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     640:	f8c8 0000 	str.w	r0, [r8]
        if (debug == 1)
     644:	2b01      	cmp	r3, #1
     646:	d06c      	beq.n	722 <BMSModule::decodecan(int, CAN_message_t&, int)+0x1d6>
      if (msg.buf[3] < 0x40)
     648:	7ae3      	ldrb	r3, [r4, #11]
     64a:	2b3f      	cmp	r3, #63	; 0x3f
     64c:	d809      	bhi.n	662 <BMSModule::decodecan(int, CAN_message_t&, int)+0x116>
        cellVolt[1] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     64e:	7aa0      	ldrb	r0, [r4, #10]
     650:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     654:	f00c f98a 	bl	c96c <__aeabi_i2f>
     658:	493c      	ldr	r1, [pc, #240]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     65a:	f00c fa8f 	bl	cb7c <__aeabi_fdiv>
     65e:	f8c8 0004 	str.w	r0, [r8, #4]
      if (msg.buf[5] < 0x40)
     662:	7b63      	ldrb	r3, [r4, #13]
     664:	2b3f      	cmp	r3, #63	; 0x3f
     666:	d891      	bhi.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
        cellVolt[2] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     668:	7b20      	ldrb	r0, [r4, #12]
     66a:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     66e:	f00c f97d 	bl	c96c <__aeabi_i2f>
     672:	4936      	ldr	r1, [pc, #216]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     674:	f00c fa82 	bl	cb7c <__aeabi_fdiv>
     678:	f8c8 0008 	str.w	r0, [r8, #8]
     67c:	e786      	b.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
      if (msg.buf[1] < 0x40)
     67e:	7a63      	ldrb	r3, [r4, #9]
     680:	2b3f      	cmp	r3, #63	; 0x3f
     682:	d809      	bhi.n	698 <BMSModule::decodecan(int, CAN_message_t&, int)+0x14c>
        cellVolt[3] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     684:	7a20      	ldrb	r0, [r4, #8]
     686:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     68a:	f00c f96f 	bl	c96c <__aeabi_i2f>
     68e:	492f      	ldr	r1, [pc, #188]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     690:	f00c fa74 	bl	cb7c <__aeabi_fdiv>
     694:	f8c8 000c 	str.w	r0, [r8, #12]
      if (msg.buf[3] < 0x40)
     698:	7ae3      	ldrb	r3, [r4, #11]
     69a:	2b3f      	cmp	r3, #63	; 0x3f
     69c:	d809      	bhi.n	6b2 <BMSModule::decodecan(int, CAN_message_t&, int)+0x166>
        cellVolt[4] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     69e:	7aa0      	ldrb	r0, [r4, #10]
     6a0:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6a4:	f00c f962 	bl	c96c <__aeabi_i2f>
     6a8:	4928      	ldr	r1, [pc, #160]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     6aa:	f00c fa67 	bl	cb7c <__aeabi_fdiv>
     6ae:	f8c8 0010 	str.w	r0, [r8, #16]
      if (msg.buf[5] < 0x40)
     6b2:	7b63      	ldrb	r3, [r4, #13]
     6b4:	2b3f      	cmp	r3, #63	; 0x3f
     6b6:	f63f af69 	bhi.w	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
        cellVolt[5] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     6ba:	7b20      	ldrb	r0, [r4, #12]
     6bc:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6c0:	f00c f954 	bl	c96c <__aeabi_i2f>
     6c4:	4921      	ldr	r1, [pc, #132]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     6c6:	f00c fa59 	bl	cb7c <__aeabi_fdiv>
     6ca:	f8c8 0014 	str.w	r0, [r8, #20]
     6ce:	e75d      	b.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
      if (msg.buf[1] < 0x40)
     6d0:	7a63      	ldrb	r3, [r4, #9]
     6d2:	2b3f      	cmp	r3, #63	; 0x3f
     6d4:	d809      	bhi.n	6ea <BMSModule::decodecan(int, CAN_message_t&, int)+0x19e>
        cellVolt[6] = float(msg.buf[0] + (msg.buf[1] & 0x3F) * 256) / 1000;
     6d6:	7a20      	ldrb	r0, [r4, #8]
     6d8:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6dc:	f00c f946 	bl	c96c <__aeabi_i2f>
     6e0:	491a      	ldr	r1, [pc, #104]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     6e2:	f00c fa4b 	bl	cb7c <__aeabi_fdiv>
     6e6:	f8c8 0018 	str.w	r0, [r8, #24]
      if (msg.buf[3] < 0x40)
     6ea:	7ae3      	ldrb	r3, [r4, #11]
     6ec:	2b3f      	cmp	r3, #63	; 0x3f
     6ee:	d809      	bhi.n	704 <BMSModule::decodecan(int, CAN_message_t&, int)+0x1b8>
        cellVolt[7] = float(msg.buf[2] + (msg.buf[3] & 0x3F) * 256) / 1000;
     6f0:	7aa0      	ldrb	r0, [r4, #10]
     6f2:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     6f6:	f00c f939 	bl	c96c <__aeabi_i2f>
     6fa:	4914      	ldr	r1, [pc, #80]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     6fc:	f00c fa3e 	bl	cb7c <__aeabi_fdiv>
     700:	f8c8 001c 	str.w	r0, [r8, #28]
      if (msg.buf[5] < 0x40)
     704:	7b63      	ldrb	r3, [r4, #13]
     706:	2b3f      	cmp	r3, #63	; 0x3f
     708:	f63f af40 	bhi.w	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
        cellVolt[8] = float(msg.buf[4] + (msg.buf[5] & 0x3F) * 256) / 1000;
     70c:	7b20      	ldrb	r0, [r4, #12]
     70e:	eb00 2003 	add.w	r0, r0, r3, lsl #8
     712:	f00c f92b 	bl	c96c <__aeabi_i2f>
     716:	490d      	ldr	r1, [pc, #52]	; (74c <BMSModule::decodecan(int, CAN_message_t&, int)+0x200>)
     718:	f00c fa30 	bl	cb7c <__aeabi_fdiv>
     71c:	f8c8 0020 	str.w	r0, [r8, #32]
     720:	e734      	b.n	58c <BMSModule::decodecan(int, CAN_message_t&, int)+0x40>
          Serial.println();
     722:	480b      	ldr	r0, [pc, #44]	; (750 <BMSModule::decodecan(int, CAN_message_t&, int)+0x204>)
     724:	f008 fd52 	bl	91cc <Print::println()>
          Serial.println(cellVolt[0]);
     728:	f8d8 0000 	ldr.w	r0, [r8]
     72c:	f00b ff4e 	bl	c5cc <__aeabi_f2d>
     730:	460b      	mov	r3, r1
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     732:	2102      	movs	r1, #2
     734:	4602      	mov	r2, r0
     736:	9100      	str	r1, [sp, #0]
     738:	4805      	ldr	r0, [pc, #20]	; (750 <BMSModule::decodecan(int, CAN_message_t&, int)+0x204>)
     73a:	f008 fd69 	bl	9210 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     73e:	4804      	ldr	r0, [pc, #16]	; (750 <BMSModule::decodecan(int, CAN_message_t&, int)+0x204>)
     740:	f008 fd44 	bl	91cc <Print::println()>
     744:	e780      	b.n	648 <BMSModule::decodecan(int, CAN_message_t&, int)+0xfc>
     746:	bf00      	nop
     748:	40a00000 	.word	0x40a00000
     74c:	447a0000 	.word	0x447a0000
     750:	1fff8a04 	.word	0x1fff8a04

00000754 <BMSModule::getFaults()>:
}
     754:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
     758:	4770      	bx	lr
     75a:	bf00      	nop

0000075c <BMSModule::getAlerts()>:
}
     75c:	f890 00bc 	ldrb.w	r0, [r0, #188]	; 0xbc
     760:	4770      	bx	lr
     762:	bf00      	nop

00000764 <BMSModule::getCOVCells()>:
}
     764:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
     768:	4770      	bx	lr
     76a:	bf00      	nop

0000076c <BMSModule::getCUVCells()>:
}
     76c:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
     770:	4770      	bx	lr
     772:	bf00      	nop

00000774 <BMSModule::getCellVoltage(int)>:
  if (cell < 0 || cell > 12) return 0.0f;
     774:	290c      	cmp	r1, #12
  return cellVolt[cell];
     776:	bf94      	ite	ls
     778:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 12) return 0.0f;
     77c:	2000      	movhi	r0, #0
}
     77e:	4770      	bx	lr

00000780 <BMSModule::getLowCellV()>:
{
     780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     784:	4e0c      	ldr	r6, [pc, #48]	; (7b8 <BMSModule::getLowCellV()+0x38>)
{
     786:	4680      	mov	r8, r0
     788:	1f05      	subs	r5, r0, #4
     78a:	f100 072c 	add.w	r7, r0, #44	; 0x2c
  for (int i = 0; i < 12; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     78e:	f855 4f04 	ldr.w	r4, [r5, #4]!
     792:	4631      	mov	r1, r6
     794:	4620      	mov	r0, r4
     796:	f00c fadb 	bl	cd50 <__aeabi_fcmplt>
     79a:	4603      	mov	r3, r0
     79c:	4620      	mov	r0, r4
     79e:	b12b      	cbz	r3, 7ac <BMSModule::getLowCellV()+0x2c>
     7a0:	f8d8 10b4 	ldr.w	r1, [r8, #180]	; 0xb4
     7a4:	f00c faf2 	bl	cd8c <__aeabi_fcmpgt>
     7a8:	b100      	cbz	r0, 7ac <BMSModule::getLowCellV()+0x2c>
     7aa:	4626      	mov	r6, r4
     7ac:	42bd      	cmp	r5, r7
     7ae:	d1ee      	bne.n	78e <BMSModule::getLowCellV()+0xe>
}
     7b0:	4630      	mov	r0, r6
     7b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     7b6:	bf00      	nop
     7b8:	41200000 	.word	0x41200000

000007bc <BMSModule::getHighCellV()>:
{
     7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     7c0:	f8d0 80b4 	ldr.w	r8, [r0, #180]	; 0xb4
     7c4:	4f0f      	ldr	r7, [pc, #60]	; (804 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     7c6:	f04f 0900 	mov.w	r9, #0
     7ca:	1f05      	subs	r5, r0, #4
     7cc:	f100 062c 	add.w	r6, r0, #44	; 0x2c
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     7d0:	f855 4f04 	ldr.w	r4, [r5, #4]!
     7d4:	4641      	mov	r1, r8
     7d6:	4620      	mov	r0, r4
     7d8:	f00c fad8 	bl	cd8c <__aeabi_fcmpgt>
     7dc:	4603      	mov	r3, r0
     7de:	4639      	mov	r1, r7
     7e0:	4620      	mov	r0, r4
     7e2:	b14b      	cbz	r3, 7f8 <BMSModule::getHighCellV()+0x3c>
     7e4:	f00c fab4 	bl	cd50 <__aeabi_fcmplt>
     7e8:	4603      	mov	r3, r0
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     7ea:	4649      	mov	r1, r9
     7ec:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     7ee:	b11b      	cbz	r3, 7f8 <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     7f0:	f00c facc 	bl	cd8c <__aeabi_fcmpgt>
     7f4:	b100      	cbz	r0, 7f8 <BMSModule::getHighCellV()+0x3c>
     7f6:	46a1      	mov	r9, r4
  for (int i = 0; i < 12; i++)
     7f8:	42b5      	cmp	r5, r6
     7fa:	d1e9      	bne.n	7d0 <BMSModule::getHighCellV()+0x14>
}
     7fc:	4648      	mov	r0, r9
     7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     802:	bf00      	nop
     804:	40a00000 	.word	0x40a00000

00000808 <BMSModule::getAverageV()>:
{
     808:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     80c:	f8d0 90b4 	ldr.w	r9, [r0, #180]	; 0xb4
     810:	4f14      	ldr	r7, [pc, #80]	; (864 <BMSModule::getAverageV()+0x5c>)
{
     812:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     814:	2600      	movs	r6, #0
     816:	1f05      	subs	r5, r0, #4
     818:	f100 082c 	add.w	r8, r0, #44	; 0x2c
  int x = 0;
     81c:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     820:	f855 4f04 	ldr.w	r4, [r5, #4]!
     824:	4649      	mov	r1, r9
     826:	4620      	mov	r0, r4
     828:	f00c fab0 	bl	cd8c <__aeabi_fcmpgt>
     82c:	4603      	mov	r3, r0
     82e:	4639      	mov	r1, r7
     830:	4620      	mov	r0, r4
     832:	b14b      	cbz	r3, 848 <BMSModule::getAverageV()+0x40>
     834:	f00c fa8c 	bl	cd50 <__aeabi_fcmplt>
     838:	b130      	cbz	r0, 848 <BMSModule::getAverageV()+0x40>
      avgVal += cellVolt[i];
     83a:	4630      	mov	r0, r6
     83c:	4621      	mov	r1, r4
     83e:	f00b ffe1 	bl	c804 <__addsf3>
      x++;
     842:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     846:	4606      	mov	r6, r0
  for (int i = 0; i < 12; i++)
     848:	4545      	cmp	r5, r8
     84a:	d1e9      	bne.n	820 <BMSModule::getAverageV()+0x18>
  scells = x;
     84c:	f8cb a0d4 	str.w	sl, [fp, #212]	; 0xd4
  avgVal /= x;
     850:	4650      	mov	r0, sl
     852:	f00c f88b 	bl	c96c <__aeabi_i2f>
     856:	4601      	mov	r1, r0
     858:	4630      	mov	r0, r6
     85a:	f00c f98f 	bl	cb7c <__aeabi_fdiv>
}
     85e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     862:	bf00      	nop
     864:	40a00000 	.word	0x40a00000

00000868 <BMSModule::getscells()>:
}
     868:	f8d0 00d4 	ldr.w	r0, [r0, #212]	; 0xd4
     86c:	4770      	bx	lr
     86e:	bf00      	nop

00000870 <BMSModule::getbalstat()>:
}
     870:	f8d0 00d8 	ldr.w	r0, [r0, #216]	; 0xd8
     874:	4770      	bx	lr
     876:	bf00      	nop

00000878 <BMSModule::getLowTemp()>:
{
     878:	b538      	push	{r3, r4, r5, lr}
  if (temperatures[0] < temperatures[1] )
     87a:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
     87e:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
     882:	4629      	mov	r1, r5
     884:	4620      	mov	r0, r4
     886:	f00c fa63 	bl	cd50 <__aeabi_fcmplt>
     88a:	b900      	cbnz	r0, 88e <BMSModule::getLowTemp()+0x16>
    return (temperatures[1]);
     88c:	462c      	mov	r4, r5
}
     88e:	4620      	mov	r0, r4
     890:	bd38      	pop	{r3, r4, r5, pc}
     892:	bf00      	nop

00000894 <BMSModule::getHighTemp()>:
{
     894:	b538      	push	{r3, r4, r5, lr}
  if (temperatures[0] > temperatures[1])
     896:	f8d0 5098 	ldr.w	r5, [r0, #152]	; 0x98
     89a:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
     89e:	4629      	mov	r1, r5
     8a0:	4620      	mov	r0, r4
     8a2:	f00c fa73 	bl	cd8c <__aeabi_fcmpgt>
     8a6:	b900      	cbnz	r0, 8aa <BMSModule::getHighTemp()+0x16>
    return (temperatures[1]);
     8a8:	462c      	mov	r4, r5
  }
}
     8aa:	4620      	mov	r0, r4
     8ac:	bd38      	pop	{r3, r4, r5, pc}
     8ae:	bf00      	nop

000008b0 <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
     8b0:	b570      	push	{r4, r5, r6, lr}
  float avgtemp = 0;
  int num = 0;
  for (int g = 0; g < 2; g++)
  {
    if (temperatures[g] > -40)
     8b2:	f8d0 6094 	ldr.w	r6, [r0, #148]	; 0x94
     8b6:	4912      	ldr	r1, [pc, #72]	; (900 <BMSModule::getAvgTemp()+0x50>)
{
     8b8:	4605      	mov	r5, r0
    if (temperatures[g] > -40)
     8ba:	4630      	mov	r0, r6
     8bc:	f00c fa66 	bl	cd8c <__aeabi_fcmpgt>
     8c0:	b1d0      	cbz	r0, 8f8 <BMSModule::getAvgTemp()+0x48>
    {
      avgtemp = avgtemp + temperatures[g];
     8c2:	4630      	mov	r0, r6
     8c4:	2100      	movs	r1, #0
     8c6:	f00b ff9d 	bl	c804 <__addsf3>
      num++;
     8ca:	2401      	movs	r4, #1
      avgtemp = avgtemp + temperatures[g];
     8cc:	4606      	mov	r6, r0
    if (temperatures[g] > -40)
     8ce:	f8d5 5098 	ldr.w	r5, [r5, #152]	; 0x98
     8d2:	490b      	ldr	r1, [pc, #44]	; (900 <BMSModule::getAvgTemp()+0x50>)
     8d4:	4628      	mov	r0, r5
     8d6:	f00c fa59 	bl	cd8c <__aeabi_fcmpgt>
     8da:	b128      	cbz	r0, 8e8 <BMSModule::getAvgTemp()+0x38>
      avgtemp = avgtemp + temperatures[g];
     8dc:	4630      	mov	r0, r6
     8de:	4629      	mov	r1, r5
     8e0:	f00b ff90 	bl	c804 <__addsf3>
      num++;
     8e4:	3401      	adds	r4, #1
      avgtemp = avgtemp + temperatures[g];
     8e6:	4606      	mov	r6, r0
    }
  }
  avgtemp = avgtemp / (float)(num);
     8e8:	4620      	mov	r0, r4
     8ea:	f00c f83f 	bl	c96c <__aeabi_i2f>
     8ee:	4601      	mov	r1, r0
     8f0:	4630      	mov	r0, r6
     8f2:	f00c f943 	bl	cb7c <__aeabi_fdiv>
  return (avgtemp);
}
     8f6:	bd70      	pop	{r4, r5, r6, pc}
     8f8:	4604      	mov	r4, r0
  float avgtemp = 0;
     8fa:	2600      	movs	r6, #0
     8fc:	e7e7      	b.n	8ce <BMSModule::getAvgTemp()+0x1e>
     8fe:	bf00      	nop
     900:	c2200000 	.word	0xc2200000

00000904 <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     908:	2600      	movs	r6, #0
  for (int I; I < 12; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     90a:	f8d0 90b4 	ldr.w	r9, [r0, #180]	; 0xb4
     90e:	4f10      	ldr	r7, [pc, #64]	; (950 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     910:	f8c0 6090 	str.w	r6, [r0, #144]	; 0x90
{
     914:	4682      	mov	sl, r0
     916:	1f05      	subs	r5, r0, #4
     918:	f100 082c 	add.w	r8, r0, #44	; 0x2c
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     91c:	f855 4f04 	ldr.w	r4, [r5, #4]!
     920:	4649      	mov	r1, r9
     922:	4620      	mov	r0, r4
     924:	f00c fa32 	bl	cd8c <__aeabi_fcmpgt>
     928:	4603      	mov	r3, r0
     92a:	4639      	mov	r1, r7
     92c:	4620      	mov	r0, r4
     92e:	b153      	cbz	r3, 946 <BMSModule::getModuleVoltage()+0x42>
     930:	f00c fa0e 	bl	cd50 <__aeabi_fcmplt>
     934:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     936:	4621      	mov	r1, r4
     938:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     93a:	b123      	cbz	r3, 946 <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     93c:	f00b ff62 	bl	c804 <__addsf3>
     940:	4606      	mov	r6, r0
     942:	f8ca 0090 	str.w	r0, [sl, #144]	; 0x90
  for (int I; I < 12; I++)
     946:	4545      	cmp	r5, r8
     948:	d1e8      	bne.n	91c <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     94a:	4630      	mov	r0, r6
     94c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     950:	40a00000 	.word	0x40a00000

00000954 <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 3) return 0.0f;
     954:	2903      	cmp	r1, #3
  return temperatures[temp];
     956:	bf9a      	itte	ls
     958:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
     95c:	f8d0 0094 	ldrls.w	r0, [r0, #148]	; 0x94
  if (temp < 0 || temp > 3) return 0.0f;
     960:	2000      	movhi	r0, #0
}
     962:	4770      	bx	lr

00000964 <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     964:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     966:	bf98      	it	ls
     968:	f880 10d0 	strbls.w	r1, [r0, #208]	; 0xd0
}
     96c:	4770      	bx	lr
     96e:	bf00      	nop

00000970 <BMSModule::getError()>:
}

uint32_t BMSModule::getError()
{
  return error;
}
     970:	f8d0 00dc 	ldr.w	r0, [r0, #220]	; 0xdc
     974:	4770      	bx	lr
     976:	bf00      	nop

00000978 <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     978:	f890 00b8 	ldrb.w	r0, [r0, #184]	; 0xb8
     97c:	4770      	bx	lr
     97e:	bf00      	nop

00000980 <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     980:	f890 00b9 	ldrb.w	r0, [r0, #185]	; 0xb9
     984:	4770      	bx	lr
     986:	bf00      	nop

00000988 <BMSModule::settempsensor(int)>:


void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     988:	f8c0 10cc 	str.w	r1, [r0, #204]	; 0xcc
}
     98c:	4770      	bx	lr
     98e:	bf00      	nop

00000990 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     990:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
}
     994:	4770      	bx	lr
     996:	bf00      	nop

00000998 <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     998:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
}
     99c:	4770      	bx	lr
     99e:	bf00      	nop

000009a0 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
  IgnoreCell = Ignore;
     9a0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
    Serial.println();
    Serial.println();
    Serial.println(Ignore);
    Serial.println();
  */
}
     9a4:	4770      	bx	lr
     9a6:	bf00      	nop

000009a8 <BMSModule::setTempOff(short)>:

void  BMSModule::setTempOff( int16_t tempoff)
{
  TempOff = tempoff;
     9a8:	f8a0 10e4 	strh.w	r1, [r0, #228]	; 0xe4
}
     9ac:	4770      	bx	lr
     9ae:	bf00      	nop

000009b0 <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     9b0:	b570      	push	{r4, r5, r6, lr}
     9b2:	f500 5565 	add.w	r5, r0, #14656	; 0x3940
     9b6:	4606      	mov	r6, r0
     9b8:	f100 042c 	add.w	r4, r0, #44	; 0x2c
     9bc:	3504      	adds	r5, #4
     9be:	4620      	mov	r0, r4
     9c0:	34e8      	adds	r4, #232	; 0xe8
     9c2:	f7ff fd49 	bl	458 <BMSModule::BMSModule()>
     9c6:	42ac      	cmp	r4, r5
     9c8:	d1f9      	bne.n	9be <BMSModuleManager::BMSModuleManager()+0xe>
     9ca:	f506 758a 	add.w	r5, r6, #276	; 0x114
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     9ce:	2401      	movs	r4, #1
    modules[i].setExists(false);
     9d0:	4628      	mov	r0, r5
     9d2:	2100      	movs	r1, #0
     9d4:	f7ff ffdc 	bl	990 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     9d8:	4621      	mov	r1, r4
     9da:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     9dc:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     9de:	f7ff ffc1 	bl	964 <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     9e2:	2c3f      	cmp	r4, #63	; 0x3f
     9e4:	f105 05e8 	add.w	r5, r5, #232	; 0xe8
     9e8:	d1f2      	bne.n	9d0 <BMSModuleManager::BMSModuleManager()+0x20>
  lowestPackVolt = 1000.0f;
     9ea:	4907      	ldr	r1, [pc, #28]	; (a08 <BMSModuleManager::BMSModuleManager()+0x58>)
     9ec:	6171      	str	r1, [r6, #20]
  isFaulted = false;
     9ee:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
  highestPackVolt = 0.0f;
     9f2:	2200      	movs	r2, #0
     9f4:	61b2      	str	r2, [r6, #24]
  lowestPackTemp = 200.0f;
     9f6:	4805      	ldr	r0, [pc, #20]	; (a0c <BMSModuleManager::BMSModuleManager()+0x5c>)
  highestPackTemp = -100.0f;
     9f8:	4905      	ldr	r1, [pc, #20]	; (a10 <BMSModuleManager::BMSModuleManager()+0x60>)
  lowestPackTemp = 200.0f;
     9fa:	61f0      	str	r0, [r6, #28]
  isFaulted = false;
     9fc:	2200      	movs	r2, #0
  highestPackTemp = -100.0f;
     9fe:	6231      	str	r1, [r6, #32]
}
     a00:	4630      	mov	r0, r6
  isFaulted = false;
     a02:	f883 294c 	strb.w	r2, [r3, #2380]	; 0x94c
}
     a06:	bd70      	pop	{r4, r5, r6, pc}
     a08:	447a0000 	.word	0x447a0000
     a0c:	43480000 	.word	0x43480000
     a10:	c2c80000 	.word	0xc2c80000

00000a14 <BMSModuleManager::checkcomms()>:
{
     a14:	b570      	push	{r4, r5, r6, lr}
     a16:	f500 5665 	add.w	r6, r0, #14656	; 0x3940
     a1a:	f500 748a 	add.w	r4, r0, #276	; 0x114
     a1e:	3604      	adds	r6, #4
  int g = 0;
     a20:	2500      	movs	r5, #0
     a22:	e007      	b.n	a34 <BMSModuleManager::checkcomms()+0x20>
      g = 1;
     a24:	2501      	movs	r5, #1
    modules[y].setReset(false);
     a26:	4620      	mov	r0, r4
     a28:	2100      	movs	r1, #0
  for (int y = 1; y < 63; y++)
     a2a:	34e8      	adds	r4, #232	; 0xe8
    modules[y].setReset(false);
     a2c:	f7ff ffb4 	bl	998 <BMSModule::setReset(bool)>
  for (int y = 1; y < 63; y++)
     a30:	42b4      	cmp	r4, r6
     a32:	d00b      	beq.n	a4c <BMSModuleManager::checkcomms()+0x38>
    if (modules[y].isExisting())
     a34:	4620      	mov	r0, r4
     a36:	f7ff ff9f 	bl	978 <BMSModule::isExisting()>
     a3a:	4603      	mov	r3, r0
      if (modules[y].isReset())
     a3c:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     a3e:	2b00      	cmp	r3, #0
     a40:	d0f1      	beq.n	a26 <BMSModuleManager::checkcomms()+0x12>
      if (modules[y].isReset())
     a42:	f7ff ff9d 	bl	980 <BMSModule::isReset()>
     a46:	2800      	cmp	r0, #0
     a48:	d1ec      	bne.n	a24 <BMSModuleManager::checkcomms()+0x10>
}
     a4a:	bd70      	pop	{r4, r5, r6, pc}
  if ( g == 0)
     a4c:	4628      	mov	r0, r5
}
     a4e:	bd70      	pop	{r4, r5, r6, pc}

00000a50 <BMSModuleManager::checkstatus()>:
{
     a50:	b570      	push	{r4, r5, r6, lr}
     a52:	f500 5692 	add.w	r6, r0, #4672	; 0x1240
     a56:	f500 748a 	add.w	r4, r0, #276	; 0x114
     a5a:	360c      	adds	r6, #12
     a5c:	e002      	b.n	a64 <BMSModuleManager::checkstatus()+0x14>
  for (int y = 1; y < 20; y++)
     a5e:	34e8      	adds	r4, #232	; 0xe8
     a60:	42b4      	cmp	r4, r6
     a62:	d00c      	beq.n	a7e <BMSModuleManager::checkstatus()+0x2e>
    if (modules[y].isExisting())
     a64:	4620      	mov	r0, r4
     a66:	f7ff ff87 	bl	978 <BMSModule::isExisting()>
     a6a:	4605      	mov	r5, r0
     a6c:	2800      	cmp	r0, #0
     a6e:	d0f6      	beq.n	a5e <BMSModuleManager::checkstatus()+0xe>
      if (modules[y].getError() & 0x2000 >= 0)
     a70:	4620      	mov	r0, r4
     a72:	f7ff ff7d 	bl	970 <BMSModule::getError()>
     a76:	07c3      	lsls	r3, r0, #31
     a78:	d5f1      	bpl.n	a5e <BMSModuleManager::checkstatus()+0xe>
}
     a7a:	4628      	mov	r0, r5
     a7c:	bd70      	pop	{r4, r5, r6, pc}
  return false;
     a7e:	2500      	movs	r5, #0
}
     a80:	4628      	mov	r0, r5
     a82:	bd70      	pop	{r4, r5, r6, pc}

00000a84 <BMSModuleManager::seriescells()>:
{
     a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
     a86:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
     a8a:	2300      	movs	r3, #0
     a8c:	f500 5665 	add.w	r6, r0, #14656	; 0x3940
     a90:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  for (int y = 1; y < 63; y++)
     a94:	f500 748a 	add.w	r4, r0, #276	; 0x114
     a98:	3604      	adds	r6, #4
     a9a:	e002      	b.n	aa2 <BMSModuleManager::seriescells()+0x1e>
     a9c:	34e8      	adds	r4, #232	; 0xe8
     a9e:	42b4      	cmp	r4, r6
     aa0:	d00f      	beq.n	ac2 <BMSModuleManager::seriescells()+0x3e>
    if (modules[y].isExisting())
     aa2:	4620      	mov	r0, r4
     aa4:	f7ff ff68 	bl	978 <BMSModule::isExisting()>
     aa8:	2800      	cmp	r0, #0
     aaa:	d0f7      	beq.n	a9c <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
     aac:	4620      	mov	r0, r4
     aae:	f8d7 5950 	ldr.w	r5, [r7, #2384]	; 0x950
     ab2:	f7ff fed9 	bl	868 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
     ab6:	34e8      	adds	r4, #232	; 0xe8
      spack = spack + modules[y].getscells();
     ab8:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
     aba:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
     abc:	f8c7 5950 	str.w	r5, [r7, #2384]	; 0x950
  for (int y = 1; y < 63; y++)
     ac0:	d1ef      	bne.n	aa2 <BMSModuleManager::seriescells()+0x1e>
}
     ac2:	f8d7 0950 	ldr.w	r0, [r7, #2384]	; 0x950
     ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000ac8 <BMSModuleManager::clearmodules()>:
{
     ac8:	b538      	push	{r3, r4, r5, lr}
     aca:	f500 748a 	add.w	r4, r0, #276	; 0x114
  for (int y = 1; y < 63; y++)
     ace:	2501      	movs	r5, #1
     ad0:	e004      	b.n	adc <BMSModuleManager::clearmodules()+0x14>
     ad2:	3501      	adds	r5, #1
     ad4:	2d3f      	cmp	r5, #63	; 0x3f
     ad6:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
     ada:	d014      	beq.n	b06 <BMSModuleManager::clearmodules()+0x3e>
    if (modules[y].isExisting())
     adc:	4620      	mov	r0, r4
     ade:	f7ff ff4b 	bl	978 <BMSModule::isExisting()>
     ae2:	2800      	cmp	r0, #0
     ae4:	d0f5      	beq.n	ad2 <BMSModuleManager::clearmodules()+0xa>
      modules[y].clearmodule();
     ae6:	4620      	mov	r0, r4
     ae8:	f7ff fcf0 	bl	4cc <BMSModule::clearmodule()>
      modules[y].setExists(false);
     aec:	4620      	mov	r0, r4
     aee:	2100      	movs	r1, #0
     af0:	f7ff ff4e 	bl	990 <BMSModule::setExists(bool)>
      modules[y].setAddress(y);
     af4:	4629      	mov	r1, r5
     af6:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     af8:	3501      	adds	r5, #1
      modules[y].setAddress(y);
     afa:	f7ff ff33 	bl	964 <BMSModule::setAddress(int)>
  for (int y = 1; y < 63; y++)
     afe:	2d3f      	cmp	r5, #63	; 0x3f
     b00:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
     b04:	d1ea      	bne.n	adc <BMSModuleManager::clearmodules()+0x14>
}
     b06:	bd38      	pop	{r3, r4, r5, pc}

00000b08 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
     b08:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
}
     b0c:	f8d0 0948 	ldr.w	r0, [r0, #2376]	; 0x948
     b10:	4770      	bx	lr
     b12:	bf00      	nop

00000b14 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>:
{
     b14:	b538      	push	{r3, r4, r5, lr}
  int CMU = (msg.id & 0x00F) + 1;
     b16:	680c      	ldr	r4, [r1, #0]
{
     b18:	4615      	mov	r5, r2
  int CMU = (msg.id & 0x00F) + 1;
     b1a:	f004 0c0f 	and.w	ip, r4, #15
  modules[CMU].decodetemp(msg, CSC);
     b1e:	461a      	mov	r2, r3
     b20:	23e8      	movs	r3, #232	; 0xe8
     b22:	fb0c 3303 	mla	r3, ip, r3, r3
     b26:	332c      	adds	r3, #44	; 0x2c
     b28:	4418      	add	r0, r3
  int CMU = (msg.id & 0x00F) + 1;
     b2a:	f10c 0401 	add.w	r4, ip, #1
  modules[CMU].decodetemp(msg, CSC);
     b2e:	f7ff fce7 	bl	500 <BMSModule::decodetemp(CAN_message_t&, int)>
  if (debug == 1 && CMU > 0)
     b32:	2d01      	cmp	r5, #1
     b34:	d000      	beq.n	b38 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x24>
}
     b36:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
     b38:	4806      	ldr	r0, [pc, #24]	; (b54 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x40>)
     b3a:	f008 fb47 	bl	91cc <Print::println()>
	size_t print(int n)				{ return print((long)n); }
     b3e:	4621      	mov	r1, r4
     b40:	4804      	ldr	r0, [pc, #16]	; (b54 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x40>)
     b42:	f008 fb3b 	bl	91bc <Print::print(long)>
}
     b46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     b4a:	4803      	ldr	r0, [pc, #12]	; (b58 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x44>)
     b4c:	210b      	movs	r1, #11
     b4e:	f00b b881 	b.w	bc54 <usb_serial_write>
     b52:	bf00      	nop
     b54:	1fff8a04 	.word	0x1fff8a04
     b58:	0001374c 	.word	0x0001374c

00000b5c <BMSModuleManager::decodecan(CAN_message_t&, int)>:
{
     b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  int Id = (msg.id & 0x0F0);
     b60:	680d      	ldr	r5, [r1, #0]
     b62:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  switch (Id)
     b66:	2e30      	cmp	r6, #48	; 0x30
  int CMU = (msg.id & 0x00F) + 1;
     b68:	f005 050f 	and.w	r5, r5, #15
{
     b6c:	460f      	mov	r7, r1
     b6e:	4604      	mov	r4, r0
     b70:	4690      	mov	r8, r2
  int CMU = (msg.id & 0x00F) + 1;
     b72:	f105 0501 	add.w	r5, r5, #1
  switch (Id)
     b76:	d03a      	beq.n	bee <BMSModuleManager::decodecan(CAN_message_t&, int)+0x92>
     b78:	dd1e      	ble.n	bb8 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x5c>
     b7a:	2e40      	cmp	r6, #64	; 0x40
     b7c:	d039      	beq.n	bf2 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x96>
     b7e:	2e50      	cmp	r6, #80	; 0x50
      Id = 4;
     b80:	bf08      	it	eq
     b82:	2604      	moveq	r6, #4
  switch (Id)
     b84:	d104      	bne.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
  if (CMU < 8 && Id < 5)
     b86:	2d07      	cmp	r5, #7
     b88:	d802      	bhi.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
    if (debug == 1)
     b8a:	f1b8 0f01 	cmp.w	r8, #1
     b8e:	d01e      	beq.n	bce <BMSModuleManager::decodecan(CAN_message_t&, int)+0x72>
  modules[CMU].setExists(true);
     b90:	23e8      	movs	r3, #232	; 0xe8
     b92:	fb03 4405 	mla	r4, r3, r5, r4
     b96:	342c      	adds	r4, #44	; 0x2c
     b98:	4620      	mov	r0, r4
     b9a:	2101      	movs	r1, #1
     b9c:	f7ff fef8 	bl	990 <BMSModule::setExists(bool)>
  modules[CMU].setReset(true);
     ba0:	4620      	mov	r0, r4
     ba2:	2101      	movs	r1, #1
     ba4:	f7ff fef8 	bl	998 <BMSModule::setReset(bool)>
  modules[CMU].decodecan(Id, msg, debug);
     ba8:	4643      	mov	r3, r8
     baa:	463a      	mov	r2, r7
     bac:	4631      	mov	r1, r6
     bae:	4620      	mov	r0, r4
}
     bb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  modules[CMU].decodecan(Id, msg, debug);
     bb4:	f7ff bcca 	b.w	54c <BMSModule::decodecan(int, CAN_message_t&, int)>
  switch (Id)
     bb8:	2e00      	cmp	r6, #0
     bba:	d0e4      	beq.n	b86 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2a>
     bbc:	2e20      	cmp	r6, #32
      Id = 1;
     bbe:	bf08      	it	eq
     bc0:	2601      	moveq	r6, #1
  switch (Id)
     bc2:	d0e0      	beq.n	b86 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2a>
  if (CMU < 8 && Id < 5)
     bc4:	2d07      	cmp	r5, #7
     bc6:	d8e3      	bhi.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
     bc8:	2e04      	cmp	r6, #4
     bca:	dce1      	bgt.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
     bcc:	e7dd      	b.n	b8a <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2e>
     bce:	4629      	mov	r1, r5
     bd0:	480a      	ldr	r0, [pc, #40]	; (bfc <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>)
     bd2:	f008 faf3 	bl	91bc <Print::print(long)>
     bd6:	4641      	mov	r1, r8
     bd8:	4809      	ldr	r0, [pc, #36]	; (c00 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa4>)
     bda:	f00b f83b 	bl	bc54 <usb_serial_write>
     bde:	4631      	mov	r1, r6
     be0:	4806      	ldr	r0, [pc, #24]	; (bfc <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>)
     be2:	f008 faeb 	bl	91bc <Print::print(long)>
      Serial.println();
     be6:	4805      	ldr	r0, [pc, #20]	; (bfc <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>)
     be8:	f008 faf0 	bl	91cc <Print::println()>
     bec:	e7d0      	b.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
      Id = 2;
     bee:	2602      	movs	r6, #2
     bf0:	e7c9      	b.n	b86 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2a>
  if (CMU < 8 && Id < 5)
     bf2:	2d07      	cmp	r5, #7
      Id = 3;
     bf4:	f04f 0603 	mov.w	r6, #3
  if (CMU < 8 && Id < 5)
     bf8:	d9c7      	bls.n	b8a <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2e>
     bfa:	e7c9      	b.n	b90 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x34>
     bfc:	1fff8a04 	.word	0x1fff8a04
     c00:	00013758 	.word	0x00013758

00000c04 <BMSModuleManager::getAllVoltTemp()>:
{
     c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
     c08:	2300      	movs	r3, #0
      Logger::debug("");
     c0a:	f8df 9164 	ldr.w	r9, [pc, #356]	; d70 <BMSModuleManager::getAllVoltTemp()+0x16c>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     c0e:	f8df 8164 	ldr.w	r8, [pc, #356]	; d74 <BMSModuleManager::getAllVoltTemp()+0x170>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     c12:	4f59      	ldr	r7, [pc, #356]	; (d78 <BMSModuleManager::getAllVoltTemp()+0x174>)
  packVolt = 0.0f;
     c14:	6043      	str	r3, [r0, #4]
{
     c16:	b083      	sub	sp, #12
     c18:	4606      	mov	r6, r0
     c1a:	f500 748a 	add.w	r4, r0, #276	; 0x114
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     c1e:	2501      	movs	r5, #1
     c20:	e004      	b.n	c2c <BMSModuleManager::getAllVoltTemp()+0x28>
     c22:	3501      	adds	r5, #1
     c24:	2d3f      	cmp	r5, #63	; 0x3f
     c26:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
     c2a:	d068      	beq.n	cfe <BMSModuleManager::getAllVoltTemp()+0xfa>
    if (modules[x].isExisting())
     c2c:	4620      	mov	r0, r4
     c2e:	f7ff fea3 	bl	978 <BMSModule::isExisting()>
     c32:	2800      	cmp	r0, #0
     c34:	d0f5      	beq.n	c22 <BMSModuleManager::getAllVoltTemp()+0x1e>
      Logger::debug("");
     c36:	4648      	mov	r0, r9
     c38:	f006 fe6c 	bl	7914 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
     c3c:	4629      	mov	r1, r5
     c3e:	4640      	mov	r0, r8
     c40:	f006 fe68 	bl	7914 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
     c44:	4620      	mov	r0, r4
     c46:	f7ff fe5d 	bl	904 <BMSModule::getModuleVoltage()>
     c4a:	f00b fcbf 	bl	c5cc <__aeabi_f2d>
     c4e:	4602      	mov	r2, r0
     c50:	460b      	mov	r3, r1
     c52:	4638      	mov	r0, r7
     c54:	f006 fe5e 	bl	7914 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
     c58:	4620      	mov	r0, r4
     c5a:	f7ff fd91 	bl	780 <BMSModule::getLowCellV()>
     c5e:	4682      	mov	sl, r0
     c60:	4620      	mov	r0, r4
     c62:	f7ff fdab 	bl	7bc <BMSModule::getHighCellV()>
     c66:	4683      	mov	fp, r0
     c68:	4650      	mov	r0, sl
     c6a:	f00b fcaf 	bl	c5cc <__aeabi_f2d>
     c6e:	4602      	mov	r2, r0
     c70:	4658      	mov	r0, fp
     c72:	4692      	mov	sl, r2
     c74:	468b      	mov	fp, r1
     c76:	f00b fca9 	bl	c5cc <__aeabi_f2d>
     c7a:	465b      	mov	r3, fp
     c7c:	4652      	mov	r2, sl
     c7e:	e9cd 0100 	strd	r0, r1, [sp]
     c82:	483e      	ldr	r0, [pc, #248]	; (d7c <BMSModuleManager::getAllVoltTemp()+0x178>)
     c84:	f006 fe46 	bl	7914 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
     c88:	2100      	movs	r1, #0
     c8a:	4620      	mov	r0, r4
     c8c:	f7ff fe62 	bl	954 <BMSModule::getTemperature(int)>
     c90:	2101      	movs	r1, #1
     c92:	4682      	mov	sl, r0
     c94:	4620      	mov	r0, r4
     c96:	f7ff fe5d 	bl	954 <BMSModule::getTemperature(int)>
     c9a:	4683      	mov	fp, r0
     c9c:	4650      	mov	r0, sl
     c9e:	f00b fc95 	bl	c5cc <__aeabi_f2d>
     ca2:	4602      	mov	r2, r0
     ca4:	4658      	mov	r0, fp
     ca6:	4692      	mov	sl, r2
     ca8:	468b      	mov	fp, r1
     caa:	f00b fc8f 	bl	c5cc <__aeabi_f2d>
     cae:	4652      	mov	r2, sl
     cb0:	e9cd 0100 	strd	r0, r1, [sp]
     cb4:	465b      	mov	r3, fp
     cb6:	4832      	ldr	r0, [pc, #200]	; (d80 <BMSModuleManager::getAllVoltTemp()+0x17c>)
     cb8:	f006 fe2c 	bl	7914 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
     cbc:	4620      	mov	r0, r4
     cbe:	f7ff fe21 	bl	904 <BMSModule::getModuleVoltage()>
     cc2:	4601      	mov	r1, r0
     cc4:	6870      	ldr	r0, [r6, #4]
     cc6:	f00b fd9d 	bl	c804 <__addsf3>
     cca:	6070      	str	r0, [r6, #4]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
     ccc:	4620      	mov	r0, r4
     cce:	f7ff fdd3 	bl	878 <BMSModule::getLowTemp()>
     cd2:	69f1      	ldr	r1, [r6, #28]
     cd4:	f00c f83c 	bl	cd50 <__aeabi_fcmplt>
     cd8:	2800      	cmp	r0, #0
     cda:	d133      	bne.n	d44 <BMSModuleManager::getAllVoltTemp()+0x140>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     cdc:	4620      	mov	r0, r4
     cde:	f7ff fdd9 	bl	894 <BMSModule::getHighTemp()>
     ce2:	6a31      	ldr	r1, [r6, #32]
     ce4:	f00c f852 	bl	cd8c <__aeabi_fcmpgt>
     ce8:	2800      	cmp	r0, #0
     cea:	d09a      	beq.n	c22 <BMSModuleManager::getAllVoltTemp()+0x1e>
     cec:	4620      	mov	r0, r4
     cee:	f7ff fdd1 	bl	894 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cf2:	3501      	adds	r5, #1
     cf4:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
     cf6:	6230      	str	r0, [r6, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     cf8:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
     cfc:	d196      	bne.n	c2c <BMSModuleManager::getAllVoltTemp()+0x28>
  packVolt = packVolt / Pstring;
     cfe:	68b0      	ldr	r0, [r6, #8]
     d00:	f00b fe34 	bl	c96c <__aeabi_i2f>
     d04:	4601      	mov	r1, r0
     d06:	6870      	ldr	r0, [r6, #4]
     d08:	f00b ff38 	bl	cb7c <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
     d0c:	69b1      	ldr	r1, [r6, #24]
  packVolt = packVolt / Pstring;
     d0e:	6070      	str	r0, [r6, #4]
     d10:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
     d12:	f00c f83b 	bl	cd8c <__aeabi_fcmpgt>
     d16:	b100      	cbz	r0, d1a <BMSModuleManager::getAllVoltTemp()+0x116>
     d18:	61b4      	str	r4, [r6, #24]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
     d1a:	6971      	ldr	r1, [r6, #20]
     d1c:	4620      	mov	r0, r4
     d1e:	f00c f817 	bl	cd50 <__aeabi_fcmplt>
     d22:	b100      	cbz	r0, d26 <BMSModuleManager::getAllVoltTemp()+0x122>
     d24:	6174      	str	r4, [r6, #20]
  if (digitalRead(11) == LOW) {
     d26:	200b      	movs	r0, #11
     d28:	f009 f948 	bl	9fbc <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     d2c:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
     d30:	f896 394c 	ldrb.w	r3, [r6, #2380]	; 0x94c
  if (digitalRead(11) == LOW) {
     d34:	b958      	cbnz	r0, d4e <BMSModuleManager::getAllVoltTemp()+0x14a>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     d36:	b1b3      	cbz	r3, d66 <BMSModuleManager::getAllVoltTemp()+0x162>
    isFaulted = true;
     d38:	2301      	movs	r3, #1
     d3a:	f886 394c 	strb.w	r3, [r6, #2380]	; 0x94c
}
     d3e:	b003      	add	sp, #12
     d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
     d44:	4620      	mov	r0, r4
     d46:	f7ff fd97 	bl	878 <BMSModule::getLowTemp()>
     d4a:	61f0      	str	r0, [r6, #28]
     d4c:	e7c6      	b.n	cdc <BMSModuleManager::getAllVoltTemp()+0xd8>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
     d4e:	b92b      	cbnz	r3, d5c <BMSModuleManager::getAllVoltTemp()+0x158>
    isFaulted = false;
     d50:	2300      	movs	r3, #0
    isFaulted = true;
     d52:	f886 394c 	strb.w	r3, [r6, #2380]	; 0x94c
}
     d56:	b003      	add	sp, #12
     d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (isFaulted) Logger::info("All modules have exited a faulted state");
     d5c:	4809      	ldr	r0, [pc, #36]	; (d84 <BMSModuleManager::getAllVoltTemp()+0x180>)
     d5e:	f006 fdeb 	bl	7938 <Logger::info(char*, ...)>
    isFaulted = false;
     d62:	2300      	movs	r3, #0
     d64:	e7f5      	b.n	d52 <BMSModuleManager::getAllVoltTemp()+0x14e>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
     d66:	4808      	ldr	r0, [pc, #32]	; (d88 <BMSModuleManager::getAllVoltTemp()+0x184>)
     d68:	f006 fdfa 	bl	7960 <Logger::error(char*, ...)>
     d6c:	e7e4      	b.n	d38 <BMSModuleManager::getAllVoltTemp()+0x134>
     d6e:	bf00      	nop
     d70:	00014b70 	.word	0x00014b70
     d74:	0001375c 	.word	0x0001375c
     d78:	00013798 	.word	0x00013798
     d7c:	000137ac 	.word	0x000137ac
     d80:	000137d8 	.word	0x000137d8
     d84:	0001382c 	.word	0x0001382c
     d88:	000137f4 	.word	0x000137f4

00000d8c <BMSModuleManager::getLowCellVolt()>:
{
     d8c:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
     d8e:	4b11      	ldr	r3, [pc, #68]	; (dd4 <BMSModuleManager::getLowCellVolt()+0x48>)
     d90:	60c3      	str	r3, [r0, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     d92:	f500 5565 	add.w	r5, r0, #14656	; 0x3940
{
     d96:	4606      	mov	r6, r0
     d98:	f500 748a 	add.w	r4, r0, #276	; 0x114
     d9c:	3504      	adds	r5, #4
     d9e:	e002      	b.n	da6 <BMSModuleManager::getLowCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     da0:	34e8      	adds	r4, #232	; 0xe8
     da2:	42ac      	cmp	r4, r5
     da4:	d013      	beq.n	dce <BMSModuleManager::getLowCellVolt()+0x42>
    if (modules[x].isExisting())
     da6:	4620      	mov	r0, r4
     da8:	f7ff fde6 	bl	978 <BMSModule::isExisting()>
     dac:	2800      	cmp	r0, #0
     dae:	d0f7      	beq.n	da0 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     db0:	4620      	mov	r0, r4
     db2:	f7ff fce5 	bl	780 <BMSModule::getLowCellV()>
     db6:	68f1      	ldr	r1, [r6, #12]
     db8:	f00b ffca 	bl	cd50 <__aeabi_fcmplt>
     dbc:	2800      	cmp	r0, #0
     dbe:	d0ef      	beq.n	da0 <BMSModuleManager::getLowCellVolt()+0x14>
     dc0:	4620      	mov	r0, r4
     dc2:	f7ff fcdd 	bl	780 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dc6:	34e8      	adds	r4, #232	; 0xe8
     dc8:	42ac      	cmp	r4, r5
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
     dca:	60f0      	str	r0, [r6, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     dcc:	d1eb      	bne.n	da6 <BMSModuleManager::getLowCellVolt()+0x1a>
}
     dce:	68f0      	ldr	r0, [r6, #12]
     dd0:	bd70      	pop	{r4, r5, r6, pc}
     dd2:	bf00      	nop
     dd4:	40a00000 	.word	0x40a00000

00000dd8 <BMSModuleManager::getHighCellVolt()>:
{
     dd8:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
     dda:	2300      	movs	r3, #0
     ddc:	f500 5565 	add.w	r5, r0, #14656	; 0x3940
{
     de0:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
     de2:	6103      	str	r3, [r0, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     de4:	f500 748a 	add.w	r4, r0, #276	; 0x114
     de8:	3504      	adds	r5, #4
     dea:	e002      	b.n	df2 <BMSModuleManager::getHighCellVolt()+0x1a>
     dec:	34e8      	adds	r4, #232	; 0xe8
     dee:	42ac      	cmp	r4, r5
     df0:	d013      	beq.n	e1a <BMSModuleManager::getHighCellVolt()+0x42>
    if (modules[x].isExisting())
     df2:	4620      	mov	r0, r4
     df4:	f7ff fdc0 	bl	978 <BMSModule::isExisting()>
     df8:	2800      	cmp	r0, #0
     dfa:	d0f7      	beq.n	dec <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     dfc:	4620      	mov	r0, r4
     dfe:	f7ff fcdd 	bl	7bc <BMSModule::getHighCellV()>
     e02:	6931      	ldr	r1, [r6, #16]
     e04:	f00b ffc2 	bl	cd8c <__aeabi_fcmpgt>
     e08:	2800      	cmp	r0, #0
     e0a:	d0ef      	beq.n	dec <BMSModuleManager::getHighCellVolt()+0x14>
     e0c:	4620      	mov	r0, r4
     e0e:	f7ff fcd5 	bl	7bc <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e12:	34e8      	adds	r4, #232	; 0xe8
     e14:	42ac      	cmp	r4, r5
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
     e16:	6130      	str	r0, [r6, #16]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e18:	d1eb      	bne.n	df2 <BMSModuleManager::getHighCellVolt()+0x1a>
}
     e1a:	6930      	ldr	r0, [r6, #16]
     e1c:	bd70      	pop	{r4, r5, r6, pc}
     e1e:	bf00      	nop

00000e20 <BMSModuleManager::getPackVoltage()>:
}
     e20:	6840      	ldr	r0, [r0, #4]
     e22:	4770      	bx	lr

00000e24 <BMSModuleManager::setBalIgnore(bool)>:
  BalIgnore = BalIgn;
     e24:	7001      	strb	r1, [r0, #0]
}
     e26:	4770      	bx	lr

00000e28 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
     e28:	6081      	str	r1, [r0, #8]
}
     e2a:	4770      	bx	lr

00000e2c <BMSModuleManager::setSensors(int, float, int)>:
{
     e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     e30:	f500 5565 	add.w	r5, r0, #14656	; 0x3940
     e34:	4688      	mov	r8, r1
     e36:	4617      	mov	r7, r2
     e38:	f500 748a 	add.w	r4, r0, #276	; 0x114
     e3c:	3504      	adds	r5, #4
      modules[x].setTempOff(tempoff);
     e3e:	b21e      	sxth	r6, r3
     e40:	e002      	b.n	e48 <BMSModuleManager::setSensors(int, float, int)+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e42:	34e8      	adds	r4, #232	; 0xe8
     e44:	42ac      	cmp	r4, r5
     e46:	d013      	beq.n	e70 <BMSModuleManager::setSensors(int, float, int)+0x44>
    if (modules[x].isExisting())
     e48:	4620      	mov	r0, r4
     e4a:	f7ff fd95 	bl	978 <BMSModule::isExisting()>
     e4e:	2800      	cmp	r0, #0
     e50:	d0f7      	beq.n	e42 <BMSModuleManager::setSensors(int, float, int)+0x16>
      modules[x].settempsensor(sensor);
     e52:	4620      	mov	r0, r4
     e54:	4641      	mov	r1, r8
     e56:	f7ff fd97 	bl	988 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
     e5a:	4620      	mov	r0, r4
     e5c:	4639      	mov	r1, r7
     e5e:	f7ff fd9f 	bl	9a0 <BMSModule::setIgnoreCell(float)>
      modules[x].setTempOff(tempoff);
     e62:	4620      	mov	r0, r4
     e64:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e66:	34e8      	adds	r4, #232	; 0xe8
      modules[x].setTempOff(tempoff);
     e68:	f7ff fd9e 	bl	9a8 <BMSModule::setTempOff(short)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     e6c:	42ac      	cmp	r4, r5
     e6e:	d1eb      	bne.n	e48 <BMSModuleManager::setSensors(int, float, int)+0x1c>
}
     e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000e74 <BMSModuleManager::getAvgTemperature()>:
{
     e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  numFoundModules = 0;
     e78:	f500 5640 	add.w	r6, r0, #12288	; 0x3000
  lowTemp = 999.0f;
     e7c:	4a2d      	ldr	r2, [pc, #180]	; (f34 <BMSModuleManager::getAvgTemperature()+0xc0>)
  highTemp = -999.0f;
     e7e:	4b2e      	ldr	r3, [pc, #184]	; (f38 <BMSModuleManager::getAvgTemperature()+0xc4>)
  lowTemp = 999.0f;
     e80:	6282      	str	r2, [r0, #40]	; 0x28
  numFoundModules = 0;
     e82:	2700      	movs	r7, #0
     e84:	f500 5565 	add.w	r5, r0, #14656	; 0x3940
  highTemp = -999.0f;
     e88:	6243      	str	r3, [r0, #36]	; 0x24
      if (modules[x].getAvgTemp() > -70)
     e8a:	f8df a0b0 	ldr.w	sl, [pc, #176]	; f3c <BMSModuleManager::getAvgTemperature()+0xc8>
  numFoundModules = 0;
     e8e:	f8c6 7948 	str.w	r7, [r6, #2376]	; 0x948
{
     e92:	4681      	mov	r9, r0
     e94:	f500 748a 	add.w	r4, r0, #276	; 0x114
     e98:	3504      	adds	r5, #4
  float avg = 0.0f;
     e9a:	f04f 0800 	mov.w	r8, #0
     e9e:	e002      	b.n	ea6 <BMSModuleManager::getAvgTemperature()+0x32>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ea0:	34e8      	adds	r4, #232	; 0xe8
     ea2:	42a5      	cmp	r5, r4
     ea4:	d015      	beq.n	ed2 <BMSModuleManager::getAvgTemperature()+0x5e>
    if (modules[x].isExisting())
     ea6:	4620      	mov	r0, r4
     ea8:	f7ff fd66 	bl	978 <BMSModule::isExisting()>
     eac:	2800      	cmp	r0, #0
     eae:	d0f7      	beq.n	ea0 <BMSModuleManager::getAvgTemperature()+0x2c>
      numFoundModules++;
     eb0:	f8d6 3948 	ldr.w	r3, [r6, #2376]	; 0x948
     eb4:	3301      	adds	r3, #1
      if (modules[x].getAvgTemp() > -70)
     eb6:	4620      	mov	r0, r4
      numFoundModules++;
     eb8:	f8c6 3948 	str.w	r3, [r6, #2376]	; 0x948
      if (modules[x].getAvgTemp() > -70)
     ebc:	f7ff fcf8 	bl	8b0 <BMSModule::getAvgTemp()>
     ec0:	4651      	mov	r1, sl
     ec2:	f00b ff63 	bl	cd8c <__aeabi_fcmpgt>
     ec6:	b978      	cbnz	r0, ee8 <BMSModuleManager::getAvgTemperature()+0x74>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ec8:	34e8      	adds	r4, #232	; 0xe8
     eca:	42a5      	cmp	r5, r4
        y++;
     ecc:	f107 0701 	add.w	r7, r7, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     ed0:	d1e9      	bne.n	ea6 <BMSModuleManager::getAvgTemperature()+0x32>
  avg = avg / (float)(numFoundModules - y);
     ed2:	f8d6 0948 	ldr.w	r0, [r6, #2376]	; 0x948
     ed6:	1bc0      	subs	r0, r0, r7
     ed8:	f00b fd48 	bl	c96c <__aeabi_i2f>
     edc:	4601      	mov	r1, r0
     ede:	4640      	mov	r0, r8
     ee0:	f00b fe4c 	bl	cb7c <__aeabi_fdiv>
}
     ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        avg += modules[x].getAvgTemp();
     ee8:	4620      	mov	r0, r4
     eea:	f7ff fce1 	bl	8b0 <BMSModule::getAvgTemp()>
     eee:	4601      	mov	r1, r0
     ef0:	4640      	mov	r0, r8
     ef2:	f00b fc87 	bl	c804 <__addsf3>
     ef6:	4680      	mov	r8, r0
        if (modules[x].getHighTemp() > highTemp)
     ef8:	4620      	mov	r0, r4
     efa:	f7ff fccb 	bl	894 <BMSModule::getHighTemp()>
     efe:	f8d9 1024 	ldr.w	r1, [r9, #36]	; 0x24
     f02:	f00b ff43 	bl	cd8c <__aeabi_fcmpgt>
     f06:	b970      	cbnz	r0, f26 <BMSModuleManager::getAvgTemperature()+0xb2>
        if (modules[x].getLowTemp() < lowTemp)
     f08:	4620      	mov	r0, r4
     f0a:	f7ff fcb5 	bl	878 <BMSModule::getLowTemp()>
     f0e:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
     f12:	f00b ff1d 	bl	cd50 <__aeabi_fcmplt>
     f16:	2800      	cmp	r0, #0
     f18:	d0c2      	beq.n	ea0 <BMSModuleManager::getAvgTemperature()+0x2c>
          lowTemp = modules[x].getLowTemp();
     f1a:	4620      	mov	r0, r4
     f1c:	f7ff fcac 	bl	878 <BMSModule::getLowTemp()>
     f20:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
     f24:	e7bc      	b.n	ea0 <BMSModuleManager::getAvgTemperature()+0x2c>
          highTemp = modules[x].getHighTemp();
     f26:	4620      	mov	r0, r4
     f28:	f7ff fcb4 	bl	894 <BMSModule::getHighTemp()>
     f2c:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
     f30:	e7ea      	b.n	f08 <BMSModuleManager::getAvgTemperature()+0x94>
     f32:	bf00      	nop
     f34:	4479c000 	.word	0x4479c000
     f38:	c479c000 	.word	0xc479c000
     f3c:	c28c0000 	.word	0xc28c0000

00000f40 <BMSModuleManager::getHighTemperature()>:
}
     f40:	6a40      	ldr	r0, [r0, #36]	; 0x24
     f42:	4770      	bx	lr

00000f44 <BMSModuleManager::getLowTemperature()>:
}
     f44:	6a80      	ldr	r0, [r0, #40]	; 0x28
     f46:	4770      	bx	lr

00000f48 <BMSModuleManager::getAvgCellVolt()>:
{
     f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     f4a:	f500 5665 	add.w	r6, r0, #14656	; 0x3940
     f4e:	4607      	mov	r7, r0
  float avg = 0.0f;
     f50:	2500      	movs	r5, #0
     f52:	f500 748a 	add.w	r4, r0, #276	; 0x114
     f56:	3604      	adds	r6, #4
     f58:	e002      	b.n	f60 <BMSModuleManager::getAvgCellVolt()+0x18>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f5a:	34e8      	adds	r4, #232	; 0xe8
     f5c:	42b4      	cmp	r4, r6
     f5e:	d00f      	beq.n	f80 <BMSModuleManager::getAvgCellVolt()+0x38>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
     f60:	4620      	mov	r0, r4
     f62:	f7ff fd09 	bl	978 <BMSModule::isExisting()>
     f66:	2800      	cmp	r0, #0
     f68:	d0f7      	beq.n	f5a <BMSModuleManager::getAvgCellVolt()+0x12>
     f6a:	4620      	mov	r0, r4
     f6c:	f7ff fc4c 	bl	808 <BMSModule::getAverageV()>
     f70:	4601      	mov	r1, r0
     f72:	4628      	mov	r0, r5
     f74:	f00b fc46 	bl	c804 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f78:	34e8      	adds	r4, #232	; 0xe8
     f7a:	42b4      	cmp	r4, r6
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
     f7c:	4605      	mov	r5, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
     f7e:	d1ef      	bne.n	f60 <BMSModuleManager::getAvgCellVolt()+0x18>
  avg = avg / (float)numFoundModules;
     f80:	f507 5740 	add.w	r7, r7, #12288	; 0x3000
     f84:	f8d7 0948 	ldr.w	r0, [r7, #2376]	; 0x948
     f88:	f00b fcf0 	bl	c96c <__aeabi_i2f>
     f8c:	4601      	mov	r1, r0
     f8e:	4628      	mov	r0, r5
     f90:	f00b fdf4 	bl	cb7c <__aeabi_fdiv>
}
     f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     f96:	bf00      	nop

00000f98 <BMSModuleManager::printPackDetails(int, int)>:
    }
  }
}

void BMSModuleManager::printPackDetails(int digits, int CSCvariant)
{
     f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     f9c:	b095      	sub	sp, #84	; 0x54
     f9e:	4680      	mov	r8, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
     fa0:	48c7      	ldr	r0, [pc, #796]	; (12c0 <BMSModuleManager::printPackDetails(int, int)+0x328>)
{
     fa2:	910f      	str	r1, [sp, #60]	; 0x3c
     fa4:	920d      	str	r2, [sp, #52]	; 0x34
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     fa6:	f508 5740 	add.w	r7, r8, #12288	; 0x3000
  Logger::console("");
     faa:	f006 fc59 	bl	7860 <Logger::console(char*, ...)>
  Logger::console("");
     fae:	48c4      	ldr	r0, [pc, #784]	; (12c0 <BMSModuleManager::printPackDetails(int, int)+0x328>)
     fb0:	f006 fc56 	bl	7860 <Logger::console(char*, ...)>
  Logger::console("");
     fb4:	48c2      	ldr	r0, [pc, #776]	; (12c0 <BMSModuleManager::printPackDetails(int, int)+0x328>)
     fb6:	f006 fc53 	bl	7860 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     fba:	f8d7 3948 	ldr.w	r3, [r7, #2376]	; 0x948
     fbe:	930e      	str	r3, [sp, #56]	; 0x38
  spack = 0;
     fc0:	f508 748a 	add.w	r4, r8, #276	; 0x114
     fc4:	2300      	movs	r3, #0
     fc6:	f508 5565 	add.w	r5, r8, #14656	; 0x3940
     fca:	f8c7 3950 	str.w	r3, [r7, #2384]	; 0x950
  for (int y = 1; y < 63; y++)
     fce:	3504      	adds	r5, #4
  spack = 0;
     fd0:	4626      	mov	r6, r4
     fd2:	46a1      	mov	r9, r4
     fd4:	e002      	b.n	fdc <BMSModuleManager::printPackDetails(int, int)+0x44>
  for (int y = 1; y < 63; y++)
     fd6:	36e8      	adds	r6, #232	; 0xe8
     fd8:	42ae      	cmp	r6, r5
     fda:	d00f      	beq.n	ffc <BMSModuleManager::printPackDetails(int, int)+0x64>
    if (modules[y].isExisting())
     fdc:	4630      	mov	r0, r6
     fde:	f7ff fccb 	bl	978 <BMSModule::isExisting()>
     fe2:	2800      	cmp	r0, #0
     fe4:	d0f7      	beq.n	fd6 <BMSModuleManager::printPackDetails(int, int)+0x3e>
      spack = spack + modules[y].getscells();
     fe6:	4630      	mov	r0, r6
     fe8:	f8d7 4950 	ldr.w	r4, [r7, #2384]	; 0x950
     fec:	f7ff fc3c 	bl	868 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
     ff0:	36e8      	adds	r6, #232	; 0xe8
      spack = spack + modules[y].getscells();
     ff2:	4404      	add	r4, r0
  for (int y = 1; y < 63; y++)
     ff4:	42ae      	cmp	r6, r5
      spack = spack + modules[y].getscells();
     ff6:	f8c7 4950 	str.w	r4, [r7, #2384]	; 0x950
  for (int y = 1; y < 63; y++)
     ffa:	d1ef      	bne.n	fdc <BMSModuleManager::printPackDetails(int, int)+0x44>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
     ffc:	f8d8 0004 	ldr.w	r0, [r8, #4]
    1000:	f00b fae4 	bl	c5cc <__aeabi_f2d>
    1004:	464c      	mov	r4, r9
    1006:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  return spack;
    100a:	f8d7 b950 	ldr.w	fp, [r7, #2384]	; 0x950
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    100e:	f8d8 a008 	ldr.w	sl, [r8, #8]
  float avg = 0.0f;
    1012:	2600      	movs	r6, #0
    1014:	e003      	b.n	101e <BMSModuleManager::printPackDetails(int, int)+0x86>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1016:	f109 09e8 	add.w	r9, r9, #232	; 0xe8
    101a:	45a9      	cmp	r9, r5
    101c:	d010      	beq.n	1040 <BMSModuleManager::printPackDetails(int, int)+0xa8>
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    101e:	4648      	mov	r0, r9
    1020:	f7ff fcaa 	bl	978 <BMSModule::isExisting()>
    1024:	2800      	cmp	r0, #0
    1026:	d0f6      	beq.n	1016 <BMSModuleManager::printPackDetails(int, int)+0x7e>
    1028:	4648      	mov	r0, r9
    102a:	f7ff fbed 	bl	808 <BMSModule::getAverageV()>
    102e:	4601      	mov	r1, r0
    1030:	4630      	mov	r0, r6
    1032:	f00b fbe7 	bl	c804 <__addsf3>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1036:	f109 09e8 	add.w	r9, r9, #232	; 0xe8
    103a:	45a9      	cmp	r9, r5
    if (modules[x].isExisting()) avg += modules[x].getAverageV();
    103c:	4606      	mov	r6, r0
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    103e:	d1ee      	bne.n	101e <BMSModuleManager::printPackDetails(int, int)+0x86>
  avg = avg / (float)numFoundModules;
    1040:	f8d7 0948 	ldr.w	r0, [r7, #2376]	; 0x948
    1044:	f00b fc92 	bl	c96c <__aeabi_i2f>
    1048:	4601      	mov	r1, r0
    104a:	4630      	mov	r0, r6
    104c:	f00b fd96 	bl	cb7c <__aeabi_fdiv>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1050:	f00b fabc 	bl	c5cc <__aeabi_f2d>
    1054:	4602      	mov	r2, r0
    1056:	460b      	mov	r3, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1058:	4640      	mov	r0, r8
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    105a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    105e:	f8d8 500c 	ldr.w	r5, [r8, #12]
    1062:	f8d8 6010 	ldr.w	r6, [r8, #16]
    1066:	f7ff ff05 	bl	e74 <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    106a:	f00b faaf 	bl	c5cc <__aeabi_f2d>
    106e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1072:	4629      	mov	r1, r5
    1074:	4630      	mov	r0, r6
    1076:	f00b fbc3 	bl	c800 <__aeabi_fsub>
    107a:	4992      	ldr	r1, [pc, #584]	; (12c4 <BMSModuleManager::printPackDetails(int, int)+0x32c>)
    107c:	f00b fcca 	bl	ca14 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1080:	f00b faa4 	bl	c5cc <__aeabi_f2d>
    1084:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1088:	4630      	mov	r0, r6
    108a:	f00b fa9f 	bl	c5cc <__aeabi_f2d>
    108e:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1092:	4628      	mov	r0, r5
    1094:	f00b fa9a 	bl	c5cc <__aeabi_f2d>
    1098:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    109c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    10a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    10a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
    10a8:	e9cd 2300 	strd	r2, r3, [sp]
    10ac:	990e      	ldr	r1, [sp, #56]	; 0x38
    10ae:	4886      	ldr	r0, [pc, #536]	; (12c8 <BMSModuleManager::printPackDetails(int, int)+0x330>)
    10b0:	4d86      	ldr	r5, [pc, #536]	; (12cc <BMSModuleManager::printPackDetails(int, int)+0x334>)
    10b2:	4653      	mov	r3, sl
    10b4:	465a      	mov	r2, fp
    10b6:	f006 fbd3 	bl	7860 <Logger::console(char*, ...)>
  Logger::console("");
    10ba:	4881      	ldr	r0, [pc, #516]	; (12c0 <BMSModuleManager::printPackDetails(int, int)+0x328>)
    10bc:	f006 fbd0 	bl	7860 <Logger::console(char*, ...)>
  int cellNum = 0;
    10c0:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    10c2:	2701      	movs	r7, #1
  int cellNum = 0;
    10c4:	930e      	str	r3, [sp, #56]	; 0x38
    10c6:	e004      	b.n	10d2 <BMSModuleManager::printPackDetails(int, int)+0x13a>
  for (int y = 1; y < 63; y++)
    10c8:	3701      	adds	r7, #1
    10ca:	2f3f      	cmp	r7, #63	; 0x3f
    10cc:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
    10d0:	d07e      	beq.n	11d0 <BMSModuleManager::printPackDetails(int, int)+0x238>
  {
    if (modules[y].isExisting())
    10d2:	4620      	mov	r0, r4
    10d4:	f7ff fc50 	bl	978 <BMSModule::isExisting()>
    10d8:	2800      	cmp	r0, #0
    10da:	d0f5      	beq.n	10c8 <BMSModuleManager::printPackDetails(int, int)+0x130>
    {
      faults = modules[y].getFaults();
    10dc:	4620      	mov	r0, r4
    10de:	f7ff fb39 	bl	754 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    10e2:	4620      	mov	r0, r4
    10e4:	f7ff fb3a 	bl	75c <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    10e8:	4620      	mov	r0, r4
    10ea:	f7ff fb3b 	bl	764 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    10ee:	4620      	mov	r0, r4
    10f0:	f7ff fb3c 	bl	76c <BMSModule::getCUVCells()>
    10f4:	2108      	movs	r1, #8
    10f6:	4876      	ldr	r0, [pc, #472]	; (12d0 <BMSModuleManager::printPackDetails(int, int)+0x338>)
    10f8:	f00a fdac 	bl	bc54 <usb_serial_write>
    10fc:	4639      	mov	r1, r7
    10fe:	4628      	mov	r0, r5
    1100:	f008 f85c 	bl	91bc <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1104:	2f09      	cmp	r7, #9
    1106:	f340 80d6 	ble.w	12b6 <BMSModuleManager::printPackDetails(int, int)+0x31e>
    110a:	2102      	movs	r1, #2
    110c:	4871      	ldr	r0, [pc, #452]	; (12d4 <BMSModuleManager::printPackDetails(int, int)+0x33c>)
    110e:	f00a fda1 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    1112:	4620      	mov	r0, r4
    1114:	f7ff fbf6 	bl	904 <BMSModule::getModuleVoltage()>
    1118:	f00b fa58 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    111c:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
    1120:	f8cd 8000 	str.w	r8, [sp]
    1124:	460b      	mov	r3, r1
    1126:	4602      	mov	r2, r0
    1128:	4628      	mov	r0, r5
    112a:	f008 f871 	bl	9210 <Print::printFloat(double, unsigned char)>
    112e:	486a      	ldr	r0, [pc, #424]	; (12d8 <BMSModuleManager::printPackDetails(int, int)+0x340>)
    1130:	2101      	movs	r1, #1
    1132:	f00a fd8f 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print("V");
      if (CSCvariant == 0)
    1136:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1138:	2b00      	cmp	r3, #0
    113a:	d04c      	beq.n	11d6 <BMSModuleManager::printPackDetails(int, int)+0x23e>
          SERIALCONSOLE.print(": ");
          SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
          SERIALCONSOLE.print("V");
        }
      }
      if (CSCvariant == 1)
    113c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    113e:	2b01      	cmp	r3, #1
    1140:	f000 8081 	beq.w	1246 <BMSModuleManager::printPackDetails(int, int)+0x2ae>
          SERIALCONSOLE.print(": ");
          SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
          SERIALCONSOLE.print("V");
        }
      }
      SERIALCONSOLE.println();
    1144:	4628      	mov	r0, r5
    1146:	f008 f841 	bl	91cc <Print::println()>
    114a:	2109      	movs	r1, #9
    114c:	4863      	ldr	r0, [pc, #396]	; (12dc <BMSModuleManager::printPackDetails(int, int)+0x344>)
    114e:	f00a fd81 	bl	bc54 <usb_serial_write>

      SERIALCONSOLE.print(" Temp 1: ");
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1152:	2100      	movs	r1, #0
    1154:	4620      	mov	r0, r4
    1156:	f7ff fbfd 	bl	954 <BMSModule::getTemperature(int)>
    115a:	f00b fa37 	bl	c5cc <__aeabi_f2d>
    115e:	2602      	movs	r6, #2
    1160:	4602      	mov	r2, r0
    1162:	460b      	mov	r3, r1
    1164:	9600      	str	r6, [sp, #0]
    1166:	4628      	mov	r0, r5
    1168:	f008 f852 	bl	9210 <Print::printFloat(double, unsigned char)>
    116c:	210a      	movs	r1, #10
    116e:	485c      	ldr	r0, [pc, #368]	; (12e0 <BMSModuleManager::printPackDetails(int, int)+0x348>)
    1170:	f00a fd70 	bl	bc54 <usb_serial_write>

      SERIALCONSOLE.print("C Temp 2: ");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1174:	2101      	movs	r1, #1
    1176:	4620      	mov	r0, r4
    1178:	f7ff fbec 	bl	954 <BMSModule::getTemperature(int)>
    117c:	f00b fa26 	bl	c5cc <__aeabi_f2d>
    1180:	9600      	str	r6, [sp, #0]
    1182:	4602      	mov	r2, r0
    1184:	460b      	mov	r3, r1
    1186:	4628      	mov	r0, r5
    1188:	f008 f842 	bl	9210 <Print::printFloat(double, unsigned char)>
    118c:	210c      	movs	r1, #12
    118e:	4855      	ldr	r0, [pc, #340]	; (12e4 <BMSModuleManager::printPackDetails(int, int)+0x34c>)
    1190:	f00a fd60 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print("C Status: 0x");
      SERIALCONSOLE.print(modules[y].getError(), HEX);
    1194:	4620      	mov	r0, r4
    1196:	f7ff fbeb 	bl	970 <BMSModule::getError()>
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    119a:	2300      	movs	r3, #0
    119c:	2210      	movs	r2, #16
    119e:	4601      	mov	r1, r0
    11a0:	4628      	mov	r0, r5
    11a2:	f008 f82b 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    11a6:	2108      	movs	r1, #8
    11a8:	484f      	ldr	r0, [pc, #316]	; (12e8 <BMSModuleManager::printPackDetails(int, int)+0x350>)
    11aa:	f00a fd53 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print(" Bal: 0x");
      SERIALCONSOLE.println(modules[y].getbalstat(), HEX);
    11ae:	4620      	mov	r0, r4
    11b0:	f7ff fb5e 	bl	870 <BMSModule::getbalstat()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    11b4:	2300      	movs	r3, #0
    11b6:	4601      	mov	r1, r0
    11b8:	2210      	movs	r2, #16
    11ba:	4628      	mov	r0, r5
    11bc:	f008 f81e 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (int y = 1; y < 63; y++)
    11c0:	3701      	adds	r7, #1
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    11c2:	4628      	mov	r0, r5
    11c4:	f008 f802 	bl	91cc <Print::println()>
    11c8:	2f3f      	cmp	r7, #63	; 0x3f
    11ca:	f104 04e8 	add.w	r4, r4, #232	; 0xe8
    11ce:	d180      	bne.n	10d2 <BMSModuleManager::printPackDetails(int, int)+0x13a>

    }
  }
}
    11d0:	b015      	add	sp, #84	; 0x54
    11d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (int i = 0; i < 12; i++)
    11d6:	461e      	mov	r6, r3
    11d8:	4623      	mov	r3, r4
    11da:	f8df b110 	ldr.w	fp, [pc, #272]	; 12ec <BMSModuleManager::printPackDetails(int, int)+0x354>
    11de:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    11e2:	4644      	mov	r4, r8
    11e4:	4698      	mov	r8, r3
    11e6:	e01f      	b.n	1228 <BMSModuleManager::printPackDetails(int, int)+0x290>
    11e8:	2106      	movs	r1, #6
    11ea:	4841      	ldr	r0, [pc, #260]	; (12f0 <BMSModuleManager::printPackDetails(int, int)+0x358>)
    11ec:	f00a fd32 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    11f0:	4651      	mov	r1, sl
    11f2:	4628      	mov	r0, r5
    11f4:	f007 ffe2 	bl	91bc <Print::print(long)>
    11f8:	2102      	movs	r1, #2
    11fa:	483e      	ldr	r0, [pc, #248]	; (12f4 <BMSModuleManager::printPackDetails(int, int)+0x35c>)
    11fc:	f00a fd2a 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1200:	4631      	mov	r1, r6
    1202:	4640      	mov	r0, r8
    1204:	f7ff fab6 	bl	774 <BMSModule::getCellVoltage(int)>
    1208:	f00b f9e0 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    120c:	9400      	str	r4, [sp, #0]
    120e:	4602      	mov	r2, r0
    1210:	460b      	mov	r3, r1
    1212:	4628      	mov	r0, r5
    1214:	f007 fffc 	bl	9210 <Print::printFloat(double, unsigned char)>
        for (int i = 0; i < 12; i++)
    1218:	3601      	adds	r6, #1
    121a:	482f      	ldr	r0, [pc, #188]	; (12d8 <BMSModuleManager::printPackDetails(int, int)+0x340>)
    121c:	2101      	movs	r1, #1
    121e:	f00a fd19 	bl	bc54 <usb_serial_write>
    1222:	2e0c      	cmp	r6, #12
    1224:	d00a      	beq.n	123c <BMSModuleManager::printPackDetails(int, int)+0x2a4>
          SERIALCONSOLE.print(cellNum++);
    1226:	46ca      	mov	sl, r9
          if (cellNum < 10) SERIALCONSOLE.print(" ");
    1228:	f1ba 0f09 	cmp.w	sl, #9
          SERIALCONSOLE.print(cellNum++);
    122c:	f10a 0901 	add.w	r9, sl, #1
          if (cellNum < 10) SERIALCONSOLE.print(" ");
    1230:	dcda      	bgt.n	11e8 <BMSModuleManager::printPackDetails(int, int)+0x250>
    1232:	2101      	movs	r1, #1
    1234:	4658      	mov	r0, fp
    1236:	f00a fd0d 	bl	bc54 <usb_serial_write>
    123a:	e7d5      	b.n	11e8 <BMSModuleManager::printPackDetails(int, int)+0x250>
          SERIALCONSOLE.print(cellNum++);
    123c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    123e:	330c      	adds	r3, #12
    1240:	4644      	mov	r4, r8
    1242:	930e      	str	r3, [sp, #56]	; 0x38
    1244:	e77e      	b.n	1144 <BMSModuleManager::printPackDetails(int, int)+0x1ac>
    1246:	4623      	mov	r3, r4
    1248:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
    124c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 12ec <BMSModuleManager::printPackDetails(int, int)+0x354>
    1250:	4644      	mov	r4, r8
        for (int i = 0; i < 8; i++)
    1252:	2600      	movs	r6, #0
    1254:	4698      	mov	r8, r3
    1256:	e01f      	b.n	1298 <BMSModuleManager::printPackDetails(int, int)+0x300>
    1258:	2106      	movs	r1, #6
    125a:	4825      	ldr	r0, [pc, #148]	; (12f0 <BMSModuleManager::printPackDetails(int, int)+0x358>)
    125c:	f00a fcfa 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1260:	4659      	mov	r1, fp
    1262:	4628      	mov	r0, r5
    1264:	f007 ffaa 	bl	91bc <Print::print(long)>
    1268:	2102      	movs	r1, #2
    126a:	4822      	ldr	r0, [pc, #136]	; (12f4 <BMSModuleManager::printPackDetails(int, int)+0x35c>)
    126c:	f00a fcf2 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1270:	4631      	mov	r1, r6
    1272:	4640      	mov	r0, r8
    1274:	f7ff fa7e 	bl	774 <BMSModule::getCellVoltage(int)>
    1278:	f00b f9a8 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    127c:	9400      	str	r4, [sp, #0]
    127e:	4602      	mov	r2, r0
    1280:	460b      	mov	r3, r1
    1282:	4628      	mov	r0, r5
    1284:	f007 ffc4 	bl	9210 <Print::printFloat(double, unsigned char)>
        for (int i = 0; i < 8; i++)
    1288:	3601      	adds	r6, #1
    128a:	4813      	ldr	r0, [pc, #76]	; (12d8 <BMSModuleManager::printPackDetails(int, int)+0x340>)
    128c:	2101      	movs	r1, #1
    128e:	f00a fce1 	bl	bc54 <usb_serial_write>
    1292:	2e08      	cmp	r6, #8
    1294:	d00a      	beq.n	12ac <BMSModuleManager::printPackDetails(int, int)+0x314>
          SERIALCONSOLE.print(cellNum++);
    1296:	46cb      	mov	fp, r9
          if (cellNum < 10) SERIALCONSOLE.print(" ");
    1298:	f1bb 0f09 	cmp.w	fp, #9
          SERIALCONSOLE.print(cellNum++);
    129c:	f10b 0901 	add.w	r9, fp, #1
          if (cellNum < 10) SERIALCONSOLE.print(" ");
    12a0:	dcda      	bgt.n	1258 <BMSModuleManager::printPackDetails(int, int)+0x2c0>
    12a2:	2101      	movs	r1, #1
    12a4:	4650      	mov	r0, sl
    12a6:	f00a fcd5 	bl	bc54 <usb_serial_write>
    12aa:	e7d5      	b.n	1258 <BMSModuleManager::printPackDetails(int, int)+0x2c0>
          SERIALCONSOLE.print(cellNum++);
    12ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    12ae:	3308      	adds	r3, #8
    12b0:	4644      	mov	r4, r8
    12b2:	930e      	str	r3, [sp, #56]	; 0x38
    12b4:	e746      	b.n	1144 <BMSModuleManager::printPackDetails(int, int)+0x1ac>
    12b6:	2101      	movs	r1, #1
    12b8:	480c      	ldr	r0, [pc, #48]	; (12ec <BMSModuleManager::printPackDetails(int, int)+0x354>)
    12ba:	f00a fccb 	bl	bc54 <usb_serial_write>
    12be:	e724      	b.n	110a <BMSModuleManager::printPackDetails(int, int)+0x172>
    12c0:	00014b70 	.word	0x00014b70
    12c4:	447a0000 	.word	0x447a0000
    12c8:	00013adc 	.word	0x00013adc
    12cc:	1fff8a04 	.word	0x1fff8a04
    12d0:	00013b7c 	.word	0x00013b7c
    12d4:	00014a64 	.word	0x00014a64
    12d8:	00013b88 	.word	0x00013b88
    12dc:	00013b94 	.word	0x00013b94
    12e0:	00013ba0 	.word	0x00013ba0
    12e4:	00013bac 	.word	0x00013bac
    12e8:	00013bbc 	.word	0x00013bbc
    12ec:	00014b80 	.word	0x00014b80
    12f0:	00013b8c 	.word	0x00013b8c
    12f4:	00013bf4 	.word	0x00013bf4

000012f8 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:

void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    12f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12fc:	b087      	sub	sp, #28
    12fe:	f500 758a 	add.w	r5, r0, #276	; 0x114
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1302:	f8df 9230 	ldr.w	r9, [pc, #560]	; 1534 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x23c>
    1306:	f8df a230 	ldr.w	sl, [pc, #560]	; 1538 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x240>
    130a:	9103      	str	r1, [sp, #12]
    130c:	9204      	str	r2, [sp, #16]
    130e:	4698      	mov	r8, r3
    1310:	462e      	mov	r6, r5
  for (int y = 1; y < 63; y++)
    1312:	2701      	movs	r7, #1
    1314:	9505      	str	r5, [sp, #20]
    1316:	4693      	mov	fp, r2
    1318:	e004      	b.n	1324 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    131a:	3701      	adds	r7, #1
    131c:	2f3f      	cmp	r7, #63	; 0x3f
    131e:	f106 06e8 	add.w	r6, r6, #232	; 0xe8
    1322:	d075      	beq.n	1410 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1324:	4630      	mov	r0, r6
    1326:	f7ff fb27 	bl	978 <BMSModule::isExisting()>
    132a:	2800      	cmp	r0, #0
    132c:	d0f5      	beq.n	131a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    132e:	2300      	movs	r3, #0
    1330:	220a      	movs	r2, #10
    1332:	9903      	ldr	r1, [sp, #12]
    1334:	4648      	mov	r0, r9
    1336:	f007 ff61 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    133a:	2101      	movs	r1, #1
    133c:	4650      	mov	r0, sl
    133e:	f00a fc89 	bl	bc54 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    1342:	4658      	mov	r0, fp
    1344:	f00b f942 	bl	c5cc <__aeabi_f2d>
    1348:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    134a:	2100      	movs	r1, #0
    134c:	4602      	mov	r2, r0
    134e:	9100      	str	r1, [sp, #0]
    1350:	4648      	mov	r0, r9
    1352:	f007 ff5d 	bl	9210 <Print::printFloat(double, unsigned char)>
    1356:	2101      	movs	r1, #1
    1358:	4650      	mov	r0, sl
    135a:	f00a fc7b 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    135e:	4641      	mov	r1, r8
    1360:	4648      	mov	r0, r9
    1362:	f007 ff2b 	bl	91bc <Print::print(long)>
    1366:	2101      	movs	r1, #1
    1368:	4650      	mov	r0, sl
    136a:	f00a fc73 	bl	bc54 <usb_serial_write>
    136e:	4639      	mov	r1, r7
    1370:	4648      	mov	r0, r9
    1372:	f007 ff23 	bl	91bc <Print::print(long)>
    1376:	2101      	movs	r1, #1
    1378:	4650      	mov	r0, sl
    137a:	f00a fc6b 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    137e:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1380:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    1382:	4621      	mov	r1, r4
    1384:	4630      	mov	r0, r6
    1386:	f7ff f9f5 	bl	774 <BMSModule::getCellVoltage(int)>
    138a:	f00b f91f 	bl	c5cc <__aeabi_f2d>
    138e:	9500      	str	r5, [sp, #0]
    1390:	4602      	mov	r2, r0
    1392:	460b      	mov	r3, r1
    1394:	4648      	mov	r0, r9
    1396:	f007 ff3b 	bl	9210 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    139a:	3401      	adds	r4, #1
    139c:	2101      	movs	r1, #1
    139e:	4650      	mov	r0, sl
    13a0:	f00a fc58 	bl	bc54 <usb_serial_write>
    13a4:	2c08      	cmp	r4, #8
    13a6:	d1ec      	bne.n	1382 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    13a8:	2100      	movs	r1, #0
    13aa:	4630      	mov	r0, r6
    13ac:	f7ff fad2 	bl	954 <BMSModule::getTemperature(int)>
    13b0:	f00b f90c 	bl	c5cc <__aeabi_f2d>
    13b4:	9500      	str	r5, [sp, #0]
    13b6:	4602      	mov	r2, r0
    13b8:	460b      	mov	r3, r1
    13ba:	4648      	mov	r0, r9
    13bc:	f007 ff28 	bl	9210 <Print::printFloat(double, unsigned char)>
    13c0:	2101      	movs	r1, #1
    13c2:	4650      	mov	r0, sl
    13c4:	f00a fc46 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    13c8:	2101      	movs	r1, #1
    13ca:	4630      	mov	r0, r6
    13cc:	f7ff fac2 	bl	954 <BMSModule::getTemperature(int)>
    13d0:	f00b f8fc 	bl	c5cc <__aeabi_f2d>
    13d4:	9500      	str	r5, [sp, #0]
    13d6:	4602      	mov	r2, r0
    13d8:	460b      	mov	r3, r1
    13da:	4648      	mov	r0, r9
    13dc:	f007 ff18 	bl	9210 <Print::printFloat(double, unsigned char)>
    13e0:	2101      	movs	r1, #1
    13e2:	4650      	mov	r0, sl
    13e4:	f00a fc36 	bl	bc54 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    13e8:	2102      	movs	r1, #2
    13ea:	4630      	mov	r0, r6
    13ec:	f7ff fab2 	bl	954 <BMSModule::getTemperature(int)>
    13f0:	f00b f8ec 	bl	c5cc <__aeabi_f2d>
    13f4:	9500      	str	r5, [sp, #0]
    13f6:	4602      	mov	r2, r0
    13f8:	460b      	mov	r3, r1
    13fa:	4648      	mov	r0, r9
    13fc:	f007 ff08 	bl	9210 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    1400:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    1402:	4648      	mov	r0, r9
    1404:	f007 fee2 	bl	91cc <Print::println()>
  for (int y = 1; y < 63; y++)
    1408:	2f3f      	cmp	r7, #63	; 0x3f
    140a:	f106 06e8 	add.w	r6, r6, #232	; 0xe8
    140e:	d189      	bne.n	1324 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    1410:	9d05      	ldr	r5, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1412:	4f4a      	ldr	r7, [pc, #296]	; (153c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x244>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1414:	f8df 9120 	ldr.w	r9, [pc, #288]	; 1538 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x240>
    1418:	2601      	movs	r6, #1
    141a:	f04f 0b00 	mov.w	fp, #0
    141e:	e004      	b.n	142a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    1420:	3601      	adds	r6, #1
    1422:	2e3f      	cmp	r6, #63	; 0x3f
    1424:	f105 05e8 	add.w	r5, r5, #232	; 0xe8
    1428:	d07a      	beq.n	1520 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x228>
  {
    if (modules[y].isExisting())
    142a:	4628      	mov	r0, r5
    142c:	f7ff faa4 	bl	978 <BMSModule::isExisting()>
    1430:	2800      	cmp	r0, #0
    1432:	d0f5      	beq.n	1420 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1434:	2300      	movs	r3, #0
    1436:	220a      	movs	r2, #10
    1438:	9903      	ldr	r1, [sp, #12]
    143a:	4638      	mov	r0, r7
    143c:	f007 fede 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1440:	2101      	movs	r1, #1
    1442:	4648      	mov	r0, r9
    1444:	f009 f8da 	bl	a5fc <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    1448:	9804      	ldr	r0, [sp, #16]
    144a:	f00b f8bf 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    144e:	f8cd b000 	str.w	fp, [sp]
    1452:	4602      	mov	r2, r0
    1454:	460b      	mov	r3, r1
    1456:	4638      	mov	r0, r7
    1458:	f007 feda 	bl	9210 <Print::printFloat(double, unsigned char)>
    145c:	2101      	movs	r1, #1
    145e:	4648      	mov	r0, r9
    1460:	f009 f8cc 	bl	a5fc <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1464:	4641      	mov	r1, r8
    1466:	4638      	mov	r0, r7
    1468:	f007 fea8 	bl	91bc <Print::print(long)>
    146c:	2101      	movs	r1, #1
    146e:	4648      	mov	r0, r9
    1470:	f009 f8c4 	bl	a5fc <serial2_write>
    1474:	4631      	mov	r1, r6
    1476:	4638      	mov	r0, r7
    1478:	f007 fea0 	bl	91bc <Print::print(long)>
    147c:	2101      	movs	r1, #1
    147e:	4648      	mov	r0, r9
    1480:	f009 f8bc 	bl	a5fc <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 8; i++)
    1484:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1486:	f04f 0a02 	mov.w	sl, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    148a:	4621      	mov	r1, r4
    148c:	4628      	mov	r0, r5
    148e:	f7ff f971 	bl	774 <BMSModule::getCellVoltage(int)>
    1492:	f00b f89b 	bl	c5cc <__aeabi_f2d>
    1496:	f8cd a000 	str.w	sl, [sp]
    149a:	4602      	mov	r2, r0
    149c:	460b      	mov	r3, r1
    149e:	4638      	mov	r0, r7
    14a0:	f007 feb6 	bl	9210 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    14a4:	3401      	adds	r4, #1
    14a6:	2101      	movs	r1, #1
    14a8:	4648      	mov	r0, r9
    14aa:	f009 f8a7 	bl	a5fc <serial2_write>
    14ae:	2c08      	cmp	r4, #8
    14b0:	d1eb      	bne.n	148a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      Serial2.print(modules[y].getTemperature(0));
    14b2:	2100      	movs	r1, #0
    14b4:	4628      	mov	r0, r5
    14b6:	f7ff fa4d 	bl	954 <BMSModule::getTemperature(int)>
    14ba:	f00b f887 	bl	c5cc <__aeabi_f2d>
    14be:	f8cd a000 	str.w	sl, [sp]
    14c2:	4602      	mov	r2, r0
    14c4:	460b      	mov	r3, r1
    14c6:	4638      	mov	r0, r7
    14c8:	f007 fea2 	bl	9210 <Print::printFloat(double, unsigned char)>
    14cc:	2101      	movs	r1, #1
    14ce:	4648      	mov	r0, r9
    14d0:	f009 f894 	bl	a5fc <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(1));
    14d4:	2101      	movs	r1, #1
    14d6:	4628      	mov	r0, r5
    14d8:	f7ff fa3c 	bl	954 <BMSModule::getTemperature(int)>
    14dc:	f00b f876 	bl	c5cc <__aeabi_f2d>
    14e0:	f8cd a000 	str.w	sl, [sp]
    14e4:	4602      	mov	r2, r0
    14e6:	460b      	mov	r3, r1
    14e8:	4638      	mov	r0, r7
    14ea:	f007 fe91 	bl	9210 <Print::printFloat(double, unsigned char)>
    14ee:	2101      	movs	r1, #1
    14f0:	4648      	mov	r0, r9
    14f2:	f009 f883 	bl	a5fc <serial2_write>
      Serial2.print(",");
      Serial2.print(modules[y].getTemperature(2));
    14f6:	2102      	movs	r1, #2
    14f8:	4628      	mov	r0, r5
    14fa:	f7ff fa2b 	bl	954 <BMSModule::getTemperature(int)>
    14fe:	f00b f865 	bl	c5cc <__aeabi_f2d>
    1502:	f8cd a000 	str.w	sl, [sp]
    1506:	4602      	mov	r2, r0
    1508:	460b      	mov	r3, r1
    150a:	4638      	mov	r0, r7
    150c:	f007 fe80 	bl	9210 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    1510:	3601      	adds	r6, #1
      Serial2.println();
    1512:	4638      	mov	r0, r7
    1514:	f007 fe5a 	bl	91cc <Print::println()>
  for (int y = 1; y < 63; y++)
    1518:	2e3f      	cmp	r6, #63	; 0x3f
    151a:	f105 05e8 	add.w	r5, r5, #232	; 0xe8
    151e:	d184      	bne.n	142a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    1520:	4807      	ldr	r0, [pc, #28]	; (1540 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x248>)
    1522:	2105      	movs	r1, #5
    1524:	f009 f86a 	bl	a5fc <serial2_write>
    }
  }
  Serial2.print("12345");
  Serial2.println();
    1528:	4804      	ldr	r0, [pc, #16]	; (153c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x244>)
}
    152a:	b007      	add	sp, #28
    152c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  Serial2.println();
    1530:	f007 be4c 	b.w	91cc <Print::println()>
    1534:	1fff8a04 	.word	0x1fff8a04
    1538:	00013758 	.word	0x00013758
    153c:	1fff88c4 	.word	0x1fff88c4
    1540:	00013bc8 	.word	0x00013bc8

00001544 <isrCP()>:
    Serial.print(CANmilliamps);
    Serial.print("mA ");
  }
}

void isrCP() {
    1544:	b510      	push	{r4, lr}
  if (digitalRead(IN4) == HIGH) {
    1546:	2013      	movs	r0, #19
    1548:	f008 fd38 	bl	9fbc <digitalRead>
    154c:	2801      	cmp	r0, #1
    154e:	d015      	beq.n	157c <isrCP()+0x38>
    duration = micros() - pilottimer;
    pilottimer = micros();
  } else {
    accurlim = (micros() - pilottimer) * 100 / duration * 600;  //Calculate the duty cycle then multiply by 600 to get mA current limit
    1550:	f008 fd7e 	bl	a050 <micros>
    1554:	4a0f      	ldr	r2, [pc, #60]	; (1594 <isrCP()+0x50>)
    1556:	4b10      	ldr	r3, [pc, #64]	; (1598 <isrCP()+0x54>)
    1558:	6812      	ldr	r2, [r2, #0]
    155a:	881b      	ldrh	r3, [r3, #0]
    155c:	1a80      	subs	r0, r0, r2
    155e:	2264      	movs	r2, #100	; 0x64
    1560:	b29b      	uxth	r3, r3
    1562:	fb02 f000 	mul.w	r0, r2, r0
    1566:	fbb0 f0f3 	udiv	r0, r0, r3
    156a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    156e:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    1572:	4b0a      	ldr	r3, [pc, #40]	; (159c <isrCP()+0x58>)
    1574:	00c0      	lsls	r0, r0, #3
    1576:	b280      	uxth	r0, r0
    1578:	8018      	strh	r0, [r3, #0]
  }
}  // ******** end of isr CP ********
    157a:	bd10      	pop	{r4, pc}
    duration = micros() - pilottimer;
    157c:	4c05      	ldr	r4, [pc, #20]	; (1594 <isrCP()+0x50>)
    157e:	f008 fd67 	bl	a050 <micros>
    1582:	6822      	ldr	r2, [r4, #0]
    1584:	4b04      	ldr	r3, [pc, #16]	; (1598 <isrCP()+0x54>)
    1586:	1a80      	subs	r0, r0, r2
    1588:	b280      	uxth	r0, r0
    158a:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    158c:	f008 fd60 	bl	a050 <micros>
    1590:	6020      	str	r0, [r4, #0]
}  // ******** end of isr CP ********
    1592:	bd10      	pop	{r4, pc}
    1594:	1fffcde0 	.word	0x1fffcde0
    1598:	1fffccd8 	.word	0x1fffccd8
    159c:	1fff91c0 	.word	0x1fff91c0

000015a0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    15a0:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    15a4:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    15a6:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    15aa:	d01c      	beq.n	15e6 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    15ac:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    15ae:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    15b2:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    15b6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    15ba:	db09      	blt.n	15d0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    15bc:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    15c0:	fb00 f102 	mul.w	r1, r0, r2
    15c4:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    15c6:	fb90 f0f2 	sdiv	r0, r0, r2
    15ca:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    15cc:	db10      	blt.n	15f0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    15ce:	4770      	bx	lr
		num -= in_range / 2;
    15d0:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    15d4:	fb00 f102 	mul.w	r1, r0, r2
    15d8:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    15da:	fb90 f0f2 	sdiv	r0, r0, r2
    15de:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    15e0:	dbf5      	blt.n	15ce <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    15e2:	3001      	adds	r0, #1
}
    15e4:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    15e6:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    15ea:	eb03 006c 	add.w	r0, r3, ip, asr #1
    15ee:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    15f0:	3801      	subs	r0, #1
    15f2:	4770      	bx	lr

000015f4 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    15f4:	b538      	push	{r3, r4, r5, lr}
    15f6:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    15f8:	b149      	cbz	r1, 160e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    15fa:	4608      	mov	r0, r1
    15fc:	460d      	mov	r5, r1
    15fe:	f00c fbbf 	bl	dd80 <strlen>
    1602:	6823      	ldr	r3, [r4, #0]
    1604:	4602      	mov	r2, r0
    1606:	685b      	ldr	r3, [r3, #4]
    1608:	4629      	mov	r1, r5
    160a:	4620      	mov	r0, r4
    160c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    160e:	4620      	mov	r0, r4
    1610:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1614:	f007 bdda 	b.w	91cc <Print::println()>

00001618 <loadSettings()>:
void loadSettings() {
    1618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Logger::console("Resetting to factory defaults");
    161c:	4848      	ldr	r0, [pc, #288]	; (1740 <loadSettings()+0x128>)
  settings.OverVSetpoint = 4.2f;
    161e:	4c49      	ldr	r4, [pc, #292]	; (1744 <loadSettings()+0x12c>)
  settings.convhigh = 58;      // mV/A current sensor high range channel
    1620:	f8df 8124 	ldr.w	r8, [pc, #292]	; 1748 <loadSettings()+0x130>
  settings.offset1 = 1750;     //mV mid point of channel 1
    1624:	4f49      	ldr	r7, [pc, #292]	; (174c <loadSettings()+0x134>)
  Logger::console("Resetting to factory defaults");
    1626:	f006 f91b 	bl	7860 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    162a:	4b49      	ldr	r3, [pc, #292]	; (1750 <loadSettings()+0x138>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    162c:	4949      	ldr	r1, [pc, #292]	; (1754 <loadSettings()+0x13c>)
  settings.OverVSetpoint = 4.2f;
    162e:	60dc      	str	r4, [r3, #12]
  settings.ChargeTSetpoint = 0.0f;
    1630:	2600      	movs	r6, #0
    1632:	639e      	str	r6, [r3, #56]	; 0x38
  settings.DisTSetpoint = 40.0f;
    1634:	4e48      	ldr	r6, [pc, #288]	; (1758 <loadSettings()+0x140>)
  settings.UnderVSetpoint = 3.0f;
    1636:	4c49      	ldr	r4, [pc, #292]	; (175c <loadSettings()+0x144>)
  settings.DisTSetpoint = 40.0f;
    1638:	63de      	str	r6, [r3, #60]	; 0x3c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    163a:	4e49      	ldr	r6, [pc, #292]	; (1760 <loadSettings()+0x148>)
  settings.UnderVSetpoint = 3.0f;
    163c:	611c      	str	r4, [r3, #16]
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    163e:	6219      	str	r1, [r3, #32]
  settings.ChargeVsetpoint = 4.1f;
    1640:	4c48      	ldr	r4, [pc, #288]	; (1764 <loadSettings()+0x14c>)
  settings.DischHys = 0.2f;  // Discharge voltage offset
    1642:	6159      	str	r1, [r3, #20]
  settings.CellGap = 0.2f;   //max delta between high and low cell
    1644:	6459      	str	r1, [r3, #68]	; 0x44
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    1646:	641e      	str	r6, [r3, #64]	; 0x40
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1648:	f44f 7196 	mov.w	r1, #300	; 0x12c
  settings.canSpeed = 500000;
    164c:	4e46      	ldr	r6, [pc, #280]	; (1768 <loadSettings()+0x150>)
  settings.ChargeVsetpoint = 4.1f;
    164e:	619c      	str	r4, [r3, #24]
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    1650:	6659      	str	r1, [r3, #100]	; 0x64
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    1652:	4c46      	ldr	r4, [pc, #280]	; (176c <loadSettings()+0x154>)
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    1654:	66d9      	str	r1, [r3, #108]	; 0x6c
  settings.canSpeed = 500000;
    1656:	605e      	str	r6, [r3, #4]
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1658:	f640 411c 	movw	r1, #3100	; 0xc1c
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    165c:	4e44      	ldr	r6, [pc, #272]	; (1770 <loadSettings()+0x158>)
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    165e:	629c      	str	r4, [r3, #40]	; 0x28
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    1660:	6719      	str	r1, [r3, #112]	; 0x70
  settings.DischVsetpoint = 3.2f;
    1662:	4c44      	ldr	r4, [pc, #272]	; (1774 <loadSettings()+0x15c>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    1664:	625e      	str	r6, [r3, #36]	; 0x24
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1666:	210a      	movs	r1, #10
  settings.IgnoreVolt = 0.5;  //
    1668:	f04f 567c 	mov.w	r6, #1056964608	; 0x3f000000
  settings.triptime = 500;  //mS of delay before counting over or undervoltage
    166c:	f44f 7afa 	mov.w	sl, #500	; 0x1f4
  settings.version = EEPROM_VERSION;
    1670:	f240 2511 	movw	r5, #529	; 0x211
  settings.DischVsetpoint = 3.2f;
    1674:	61dc      	str	r4, [r3, #28]
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    1676:	6759      	str	r1, [r3, #116]	; 0x74
  settings.OverTSetpoint = 65.0f;
    1678:	4c3f      	ldr	r4, [pc, #252]	; (1778 <loadSettings()+0x160>)
  settings.IgnoreVolt = 0.5;  //
    167a:	64de      	str	r6, [r3, #76]	; 0x4c
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    167c:	f241 0104 	movw	r1, #4100	; 0x1004
  settings.balanceVoltage = 3.9f;
    1680:	4e3e      	ldr	r6, [pc, #248]	; (177c <loadSettings()+0x164>)
  settings.triptime = 500;  //mS of delay before counting over or undervoltage
    1682:	f8a3 a034 	strh.w	sl, [r3, #52]	; 0x34
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    1686:	f240 2a01 	movw	sl, #513	; 0x201
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    168a:	2200      	movs	r2, #0
  settings.curcan = LemCAB300;
    168c:	2001      	movs	r0, #1
  settings.version = EEPROM_VERSION;
    168e:	801d      	strh	r5, [r3, #0]
  settings.OverTSetpoint = 65.0f;
    1690:	62dc      	str	r4, [r3, #44]	; 0x2c
  settings.CAP = 100;               //battery size in Ah
    1692:	2564      	movs	r5, #100	; 0x64
  settings.UnderTSetpoint = -10.0f;
    1694:	4c3a      	ldr	r4, [pc, #232]	; (1780 <loadSettings()+0x168>)
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    1696:	6799      	str	r1, [r3, #120]	; 0x78
  settings.balanceVoltage = 3.9f;
    1698:	651e      	str	r6, [r3, #80]	; 0x50
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    169a:	2132      	movs	r1, #50	; 0x32
  settings.balanceHyst = 0.04f;
    169c:	4e39      	ldr	r6, [pc, #228]	; (1784 <loadSettings()+0x16c>)
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    169e:	f8a3 a008 	strh.w	sl, [r3, #8]
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    16a2:	f04f 095a 	mov.w	r9, #90	; 0x5a
  settings.Scells = 12;             //Cells in series
    16a6:	f04f 0a0c 	mov.w	sl, #12
  settings.UnderTSetpoint = -10.0f;
    16aa:	631c      	str	r4, [r3, #48]	; 0x30
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    16ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  settings.curcan = LemCAB300;
    16b0:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    16b4:	65d8      	str	r0, [r3, #92]	; 0x5c
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    16b6:	6699      	str	r1, [r3, #104]	; 0x68
  settings.balanceHyst = 0.04f;
    16b8:	655e      	str	r6, [r3, #84]	; 0x54
  settings.CAP = 100;               //battery size in Ah
    16ba:	661d      	str	r5, [r3, #96]	; 0x60
  settings.Scells = 12;             //Cells in series
    16bc:	f8c3 a058 	str.w	sl, [r3, #88]	; 0x58
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    16c0:	f8c3 907c 	str.w	r9, [r3, #124]	; 0x7c
  settings.conthold = 50;      //holding duty cycle for contactor 0-255
    16c4:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  settings.gaugelow = 50;      //empty fuel gauge pwm
    16c8:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  settings.gaugehigh = 255;    //full fuel gauge pwm
    16cc:	21ff      	movs	r1, #255	; 0xff
  settings.cursens = 2;
    16ce:	2402      	movs	r4, #2
  settings.gaugehigh = 255;    //full fuel gauge pwm
    16d0:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    16d4:	f240 1101 	movw	r1, #257	; 0x101
  settings.convlow = 643;      // mV/A current sensor low range channel
    16d8:	f8df e0ac 	ldr.w	lr, [pc, #172]	; 1788 <loadSettings()+0x170>
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    16dc:	4e2b      	ldr	r6, [pc, #172]	; (178c <loadSettings()+0x174>)
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    16de:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 1790 <loadSettings()+0x178>
  settings.ncur = 1;           //number of multiples to use for current measurement
    16e2:	f8c3 00b8 	str.w	r0, [r3, #184]	; 0xb8
  settings.invertcur = 0;           //Invert current sensor direction
    16e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  settings.cursens = 2;
    16ea:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  settings.chargertype = 2;    // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    16ee:	f8c3 40bc 	str.w	r4, [r3, #188]	; 0xbc
  settings.voltsoc = 0;        //SOC purely voltage based
    16f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  settings.ESSmode = 0;        //activate ESS mode
    16f6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    16fa:	f8a3 10cc 	strh.w	r1, [r3, #204]	; 0xcc
  settings.CSCvariant = 0;     //0 BMW I3 - 1 Mini-E
    16fe:	f883 20ce 	strb.w	r2, [r3, #206]	; 0xce
  settings.TempOff = 0;        //Temperature offset
    1702:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
  settings.Pretime = 5000;     //ms of precharge time
    1706:	f241 3488 	movw	r4, #5000	; 0x1388
  settings.Precurrent = 1000;  //ma before closing main contator
    170a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  settings.changecur = 20000;  //mA change overpoint
    170e:	f644 6120 	movw	r1, #20000	; 0x4e20
  settings.balanceDuty = 60;
    1712:	223c      	movs	r2, #60	; 0x3c
  settings.convhigh = 58;      // mV/A current sensor high range channel
    1714:	f8c3 8098 	str.w	r8, [r3, #152]	; 0x98
  settings.convlow = 643;      // mV/A current sensor low range channel
    1718:	f8c3 e09c 	str.w	lr, [r3, #156]	; 0x9c
  settings.offset1 = 1750;     //mV mid point of channel 1
    171c:	f8c3 70a0 	str.w	r7, [r3, #160]	; 0xa0
  settings.chargerspd = 100;   //ms per message
    1720:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    1724:	f8c3 60c4 	str.w	r6, [r3, #196]	; 0xc4
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    1728:	f8c3 c0c8 	str.w	ip, [r3, #200]	; 0xc8
  settings.Pretime = 5000;     //ms of precharge time
    172c:	f8c3 408c 	str.w	r4, [r3, #140]	; 0x8c
  settings.Precurrent = 1000;  //ma before closing main contator
    1730:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
  settings.changecur = 20000;  //mA change overpoint
    1734:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  settings.balanceDuty = 60;
    1738:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
    173c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1740:	00013bd0 	.word	0x00013bd0
    1744:	40866666 	.word	0x40866666
    1748:	42680000 	.word	0x42680000
    174c:	06d606d6 	.word	0x06d606d6
    1750:	1fffcde8 	.word	0x1fffcde8
    1754:	3e4ccccd 	.word	0x3e4ccccd
    1758:	42200000 	.word	0x42200000
    175c:	40400000 	.word	0x40400000
    1760:	40a00000 	.word	0x40a00000
    1764:	40833333 	.word	0x40833333
    1768:	0007a120 	.word	0x0007a120
    176c:	3dcccccd 	.word	0x3dcccccd
    1770:	40733333 	.word	0x40733333
    1774:	404ccccd 	.word	0x404ccccd
    1778:	42820000 	.word	0x42820000
    177c:	4079999a 	.word	0x4079999a
    1780:	c1200000 	.word	0xc1200000
    1784:	3d23d70a 	.word	0x3d23d70a
    1788:	4420c000 	.word	0x4420c000
    178c:	00051388 	.word	0x00051388
    1790:	3e99999a 	.word	0x3e99999a

00001794 <alarmupdate()>:
void alarmupdate() {
    1794:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    1796:	4d45      	ldr	r5, [pc, #276]	; (18ac <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    1798:	4c45      	ldr	r4, [pc, #276]	; (18b0 <alarmupdate()+0x11c>)
    179a:	4846      	ldr	r0, [pc, #280]	; (18b4 <alarmupdate()+0x120>)
    179c:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    179e:	2300      	movs	r3, #0
    17a0:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    17a2:	f7ff fb19 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    17a6:	4601      	mov	r1, r0
    17a8:	4630      	mov	r0, r6
    17aa:	f00b fad1 	bl	cd50 <__aeabi_fcmplt>
    17ae:	b108      	cbz	r0, 17b4 <alarmupdate()+0x20>
    alarm[0] = 0x04;
    17b0:	2304      	movs	r3, #4
    17b2:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    17b4:	483f      	ldr	r0, [pc, #252]	; (18b4 <alarmupdate()+0x120>)
    17b6:	f7ff fae9 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    17ba:	6921      	ldr	r1, [r4, #16]
    17bc:	f00b fac8 	bl	cd50 <__aeabi_fcmplt>
    17c0:	b118      	cbz	r0, 17ca <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    17c2:	782b      	ldrb	r3, [r5, #0]
    17c4:	f043 0310 	orr.w	r3, r3, #16
    17c8:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    17ca:	483a      	ldr	r0, [pc, #232]	; (18b4 <alarmupdate()+0x120>)
    17cc:	f7ff fbb8 	bl	f40 <BMSModuleManager::getHighTemperature()>
    17d0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    17d2:	f00b fadb 	bl	cd8c <__aeabi_fcmpgt>
    17d6:	b118      	cbz	r0, 17e0 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    17d8:	782b      	ldrb	r3, [r5, #0]
    17da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    17de:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    17e0:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    17e2:	4834      	ldr	r0, [pc, #208]	; (18b4 <alarmupdate()+0x120>)
  alarm[1] = 0;
    17e4:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    17e6:	f7ff fbad 	bl	f44 <BMSModuleManager::getLowTemperature()>
    17ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
    17ec:	f00b fab0 	bl	cd50 <__aeabi_fcmplt>
    17f0:	b108      	cbz	r0, 17f6 <alarmupdate()+0x62>
    alarm[1] = 0x01;
    17f2:	2301      	movs	r3, #1
    17f4:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    17f6:	2300      	movs	r3, #0
    17f8:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    17fa:	482e      	ldr	r0, [pc, #184]	; (18b4 <alarmupdate()+0x120>)
    17fc:	f7ff faec 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    1800:	4606      	mov	r6, r0
    1802:	482c      	ldr	r0, [pc, #176]	; (18b4 <alarmupdate()+0x120>)
    1804:	f7ff fac2 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1808:	4601      	mov	r1, r0
    180a:	4630      	mov	r0, r6
    180c:	f00a fff8 	bl	c800 <__aeabi_fsub>
    1810:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1812:	f00b fabb 	bl	cd8c <__aeabi_fcmpgt>
    1816:	b108      	cbz	r0, 181c <alarmupdate()+0x88>
    alarm[3] = 0x01;
    1818:	2301      	movs	r3, #1
    181a:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    181c:	4d26      	ldr	r5, [pc, #152]	; (18b8 <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    181e:	4825      	ldr	r0, [pc, #148]	; (18b4 <alarmupdate()+0x120>)
  warning[0] = 0;
    1820:	2300      	movs	r3, #0
    1822:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    1824:	f7ff fad8 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    1828:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    182a:	4606      	mov	r6, r0
    182c:	68e0      	ldr	r0, [r4, #12]
    182e:	f00a ffe7 	bl	c800 <__aeabi_fsub>
    1832:	4601      	mov	r1, r0
    1834:	4630      	mov	r0, r6
    1836:	f00b faa9 	bl	cd8c <__aeabi_fcmpgt>
    183a:	b108      	cbz	r0, 1840 <alarmupdate()+0xac>
    warning[0] = 0x04;
    183c:	2304      	movs	r3, #4
    183e:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    1840:	481c      	ldr	r0, [pc, #112]	; (18b4 <alarmupdate()+0x120>)
    1842:	f7ff faa3 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1846:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    1848:	4606      	mov	r6, r0
    184a:	6920      	ldr	r0, [r4, #16]
    184c:	f00a ffda 	bl	c804 <__addsf3>
    1850:	4601      	mov	r1, r0
    1852:	4630      	mov	r0, r6
    1854:	f00b fa7c 	bl	cd50 <__aeabi_fcmplt>
    1858:	b118      	cbz	r0, 1862 <alarmupdate()+0xce>
    warning[0] |= 0x10;
    185a:	782b      	ldrb	r3, [r5, #0]
    185c:	f043 0310 	orr.w	r3, r3, #16
    1860:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    1862:	4814      	ldr	r0, [pc, #80]	; (18b4 <alarmupdate()+0x120>)
    1864:	f7ff fb6c 	bl	f40 <BMSModuleManager::getHighTemperature()>
    1868:	6c21      	ldr	r1, [r4, #64]	; 0x40
    186a:	4606      	mov	r6, r0
    186c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    186e:	f00a ffc7 	bl	c800 <__aeabi_fsub>
    1872:	4601      	mov	r1, r0
    1874:	4630      	mov	r0, r6
    1876:	f00b fa89 	bl	cd8c <__aeabi_fcmpgt>
    187a:	b118      	cbz	r0, 1884 <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    187c:	782b      	ldrb	r3, [r5, #0]
    187e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1882:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    1884:	2300      	movs	r3, #0
    1886:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    1888:	480a      	ldr	r0, [pc, #40]	; (18b4 <alarmupdate()+0x120>)
    188a:	f7ff fb5b 	bl	f44 <BMSModuleManager::getLowTemperature()>
    188e:	6c21      	ldr	r1, [r4, #64]	; 0x40
    1890:	4603      	mov	r3, r0
    1892:	6b20      	ldr	r0, [r4, #48]	; 0x30
    1894:	461c      	mov	r4, r3
    1896:	f00a ffb5 	bl	c804 <__addsf3>
    189a:	4601      	mov	r1, r0
    189c:	4620      	mov	r0, r4
    189e:	f00b fa57 	bl	cd50 <__aeabi_fcmplt>
    18a2:	b108      	cbz	r0, 18a8 <alarmupdate()+0x114>
    warning[1] = 0x01;
    18a4:	2301      	movs	r3, #1
    18a6:	706b      	strb	r3, [r5, #1]
}
    18a8:	bd70      	pop	{r4, r5, r6, pc}
    18aa:	bf00      	nop
    18ac:	1fff91c8 	.word	0x1fff91c8
    18b0:	1fffcde8 	.word	0x1fffcde8
    18b4:	1fff91e0 	.word	0x1fff91e0
    18b8:	1fffced8 	.word	0x1fffced8

000018bc <gaugeupdate()>:
  if (gaugedebug != 0) {
    18bc:	4b53      	ldr	r3, [pc, #332]	; (1a0c <gaugeupdate()+0x150>)
    18be:	681b      	ldr	r3, [r3, #0]
    18c0:	2b00      	cmp	r3, #0
    18c2:	d07c      	beq.n	19be <gaugeupdate()+0x102>
void gaugeupdate() {
    18c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    SOCtest = SOCtest + 5;
    18c6:	4e52      	ldr	r6, [pc, #328]	; (1a10 <gaugeupdate()+0x154>)
    18c8:	6830      	ldr	r0, [r6, #0]
    18ca:	3005      	adds	r0, #5
    if (SOCtest > 1000) {
    18cc:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
void gaugeupdate() {
    18d0:	b083      	sub	sp, #12
    if (SOCtest > 1000) {
    18d2:	dc70      	bgt.n	19b6 <gaugeupdate()+0xfa>
    SOCtest = SOCtest + 5;
    18d4:	6030      	str	r0, [r6, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    18d6:	f00b f849 	bl	c96c <__aeabi_i2f>
    18da:	494e      	ldr	r1, [pc, #312]	; (1a14 <gaugeupdate()+0x158>)
    18dc:	f00b f89a 	bl	ca14 <__aeabi_fmul>
    18e0:	4607      	mov	r7, r0
    18e2:	4d4d      	ldr	r5, [pc, #308]	; (1a18 <gaugeupdate()+0x15c>)
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    18e4:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
    18e8:	f00b f840 	bl	c96c <__aeabi_i2f>
    18ec:	4604      	mov	r4, r0
    18ee:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    18f2:	f00b f83b 	bl	c96c <__aeabi_i2f>
    18f6:	4621      	mov	r1, r4
    18f8:	f00a ff82 	bl	c800 <__aeabi_fsub>
    18fc:	4639      	mov	r1, r7
    18fe:	f00b f889 	bl	ca14 <__aeabi_fmul>
    1902:	4946      	ldr	r1, [pc, #280]	; (1a1c <gaugeupdate()+0x160>)
    1904:	f00b f93a 	bl	cb7c <__aeabi_fdiv>
    1908:	4621      	mov	r1, r4
    190a:	f00a ff7b 	bl	c804 <__addsf3>
    190e:	f00b fa47 	bl	cda0 <__aeabi_f2iz>
    1912:	4601      	mov	r1, r0
    1914:	2006      	movs	r0, #6
    1916:	f008 f9af 	bl	9c78 <analogWrite>
    191a:	2102      	movs	r1, #2
    191c:	4840      	ldr	r0, [pc, #256]	; (1a20 <gaugeupdate()+0x164>)
    191e:	f00a f999 	bl	bc54 <usb_serial_write>
    1922:	4840      	ldr	r0, [pc, #256]	; (1a24 <gaugeupdate()+0x168>)
    1924:	f007 fc52 	bl	91cc <Print::println()>
    1928:	2106      	movs	r1, #6
    192a:	483f      	ldr	r0, [pc, #252]	; (1a28 <gaugeupdate()+0x16c>)
    192c:	f00a f992 	bl	bc54 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    1930:	6830      	ldr	r0, [r6, #0]
    1932:	f00b f81b 	bl	c96c <__aeabi_i2f>
    1936:	4937      	ldr	r1, [pc, #220]	; (1a14 <gaugeupdate()+0x158>)
    1938:	f00b f86c 	bl	ca14 <__aeabi_fmul>
    193c:	f00a fe46 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1940:	2702      	movs	r7, #2
    1942:	4602      	mov	r2, r0
    1944:	460b      	mov	r3, r1
    1946:	9700      	str	r7, [sp, #0]
    1948:	4836      	ldr	r0, [pc, #216]	; (1a24 <gaugeupdate()+0x168>)
    194a:	f007 fc61 	bl	9210 <Print::printFloat(double, unsigned char)>
    194e:	210d      	movs	r1, #13
    1950:	4836      	ldr	r0, [pc, #216]	; (1a2c <gaugeupdate()+0x170>)
    1952:	f00a f97f 	bl	bc54 <usb_serial_write>
    1956:	f8d5 00b0 	ldr.w	r0, [r5, #176]	; 0xb0
    195a:	f00b f807 	bl	c96c <__aeabi_i2f>
    195e:	4604      	mov	r4, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    1960:	6830      	ldr	r0, [r6, #0]
    1962:	f00b f803 	bl	c96c <__aeabi_i2f>
    1966:	492b      	ldr	r1, [pc, #172]	; (1a14 <gaugeupdate()+0x158>)
    1968:	f00b f854 	bl	ca14 <__aeabi_fmul>
    196c:	4603      	mov	r3, r0
    196e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
    1972:	461d      	mov	r5, r3
    1974:	f00a fffa 	bl	c96c <__aeabi_i2f>
    1978:	4621      	mov	r1, r4
    197a:	f00a ff41 	bl	c800 <__aeabi_fsub>
    197e:	4601      	mov	r1, r0
    1980:	4628      	mov	r0, r5
    1982:	f00b f847 	bl	ca14 <__aeabi_fmul>
    1986:	4925      	ldr	r1, [pc, #148]	; (1a1c <gaugeupdate()+0x160>)
    1988:	f00b f8f8 	bl	cb7c <__aeabi_fdiv>
    198c:	4621      	mov	r1, r4
    198e:	f00a ff39 	bl	c804 <__addsf3>
    1992:	f00a fe1b 	bl	c5cc <__aeabi_f2d>
    1996:	9700      	str	r7, [sp, #0]
    1998:	4602      	mov	r2, r0
    199a:	460b      	mov	r3, r1
    199c:	4821      	ldr	r0, [pc, #132]	; (1a24 <gaugeupdate()+0x168>)
    199e:	f007 fc37 	bl	9210 <Print::printFloat(double, unsigned char)>
    19a2:	4639      	mov	r1, r7
    19a4:	481e      	ldr	r0, [pc, #120]	; (1a20 <gaugeupdate()+0x164>)
    19a6:	f00a f955 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    19aa:	481e      	ldr	r0, [pc, #120]	; (1a24 <gaugeupdate()+0x168>)
}
    19ac:	b003      	add	sp, #12
    19ae:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    19b2:	f007 bc0b 	b.w	91cc <Print::println()>
      SOCtest = 0;
    19b6:	2300      	movs	r3, #0
    19b8:	2700      	movs	r7, #0
    19ba:	6033      	str	r3, [r6, #0]
    19bc:	e791      	b.n	18e2 <gaugeupdate()+0x26>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    19be:	4b16      	ldr	r3, [pc, #88]	; (1a18 <gaugeupdate()+0x15c>)
    19c0:	481b      	ldr	r0, [pc, #108]	; (1a30 <gaugeupdate()+0x174>)
    19c2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
	long out_range = out_max - out_min;
    19c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
	long num = (x - in_min) * out_range;
    19ca:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    19cc:	4819      	ldr	r0, [pc, #100]	; (1a34 <gaugeupdate()+0x178>)
	long out_range = out_max - out_min;
    19ce:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    19d0:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    19d2:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    19d6:	db0b      	blt.n	19f0 <gaugeupdate()+0x134>
		num += in_range / 2;
    19d8:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    19da:	fb80 2003 	smull	r2, r0, r0, r3
    19de:	17da      	asrs	r2, r3, #31
    19e0:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    19e4:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    19e6:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    19e8:	db0d      	blt.n	1a06 <gaugeupdate()+0x14a>
    19ea:	2006      	movs	r0, #6
    19ec:	f008 b944 	b.w	9c78 <analogWrite>
		num -= in_range / 2;
    19f0:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    19f2:	fb80 2003 	smull	r2, r0, r0, r3
    19f6:	17da      	asrs	r2, r3, #31
    19f8:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    19fc:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    19fe:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    1a00:	dbf3      	blt.n	19ea <gaugeupdate()+0x12e>
    1a02:	3101      	adds	r1, #1
    1a04:	e7f1      	b.n	19ea <gaugeupdate()+0x12e>
		if (in_range * num < 0) return result - 1;
    1a06:	3901      	subs	r1, #1
    1a08:	e7ef      	b.n	19ea <gaugeupdate()+0x12e>
    1a0a:	bf00      	nop
    1a0c:	1fffcce4 	.word	0x1fffcce4
    1a10:	1fff91b8 	.word	0x1fff91b8
    1a14:	3dcccccd 	.word	0x3dcccccd
    1a18:	1fffcde8 	.word	0x1fffcde8
    1a1c:	42c80000 	.word	0x42c80000
    1a20:	00014a64 	.word	0x00014a64
    1a24:	1fff8a04 	.word	0x1fff8a04
    1a28:	00013bf0 	.word	0x00013bf0
    1a2c:	00013bf8 	.word	0x00013bf8
    1a30:	1fff8828 	.word	0x1fff8828
    1a34:	51eb851f 	.word	0x51eb851f

00001a38 <printbmsstat()>:
void printbmsstat() {
    1a38:	b530      	push	{r4, r5, lr}
  SERIALCONSOLE.println();
    1a3a:	48a7      	ldr	r0, [pc, #668]	; (1cd8 <printbmsstat()+0x2a0>)
  if (settings.ESSmode == 1) {
    1a3c:	4ca7      	ldr	r4, [pc, #668]	; (1cdc <printbmsstat()+0x2a4>)
void printbmsstat() {
    1a3e:	b085      	sub	sp, #20
  SERIALCONSOLE.println();
    1a40:	f007 fbc4 	bl	91cc <Print::println()>
  SERIALCONSOLE.println();
    1a44:	48a4      	ldr	r0, [pc, #656]	; (1cd8 <printbmsstat()+0x2a0>)
    1a46:	f007 fbc1 	bl	91cc <Print::println()>
  SERIALCONSOLE.println();
    1a4a:	48a3      	ldr	r0, [pc, #652]	; (1cd8 <printbmsstat()+0x2a0>)
    1a4c:	f007 fbbe 	bl	91cc <Print::println()>
    1a50:	48a3      	ldr	r0, [pc, #652]	; (1ce0 <printbmsstat()+0x2a8>)
    1a52:	210d      	movs	r1, #13
    1a54:	f00a f8fe 	bl	bc54 <usb_serial_write>
  if (settings.ESSmode == 1) {
    1a58:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
    1a5c:	2b01      	cmp	r3, #1
    1a5e:	d011      	beq.n	1a84 <printbmsstat()+0x4c>
    SERIALCONSOLE.print(bmsstatus);
    1a60:	4da0      	ldr	r5, [pc, #640]	; (1ce4 <printbmsstat()+0x2ac>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1a62:	489d      	ldr	r0, [pc, #628]	; (1cd8 <printbmsstat()+0x2a0>)
    1a64:	7829      	ldrb	r1, [r5, #0]
    1a66:	2300      	movs	r3, #0
    1a68:	220a      	movs	r2, #10
    1a6a:	f007 fbc7 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    1a6e:	782b      	ldrb	r3, [r5, #0]
    1a70:	2b05      	cmp	r3, #5
    1a72:	d84f      	bhi.n	1b14 <printbmsstat()+0xdc>
    1a74:	e8df f013 	tbh	[pc, r3, lsl #1]
    1a78:	019e0199 	.word	0x019e0199
    1a7c:	01a801a3 	.word	0x01a801a3
    1a80:	01b201ad 	.word	0x01b201ad
    1a84:	2109      	movs	r1, #9
    1a86:	4898      	ldr	r0, [pc, #608]	; (1ce8 <printbmsstat()+0x2b0>)
    1a88:	f00a f8e4 	bl	bc54 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    1a8c:	4897      	ldr	r0, [pc, #604]	; (1cec <printbmsstat()+0x2b4>)
    1a8e:	f7ff f97d 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1a92:	6921      	ldr	r1, [r4, #16]
    1a94:	f00b f95c 	bl	cd50 <__aeabi_fcmplt>
    1a98:	2800      	cmp	r0, #0
    1a9a:	f040 81d7 	bne.w	1e4c <printbmsstat()+0x414>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    1a9e:	4893      	ldr	r0, [pc, #588]	; (1cec <printbmsstat()+0x2b4>)
    1aa0:	f7ff f99a 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    1aa4:	68e1      	ldr	r1, [r4, #12]
    1aa6:	f00b f971 	bl	cd8c <__aeabi_fcmpgt>
    1aaa:	2800      	cmp	r0, #0
    1aac:	f040 81c9 	bne.w	1e42 <printbmsstat()+0x40a>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    1ab0:	488e      	ldr	r0, [pc, #568]	; (1cec <printbmsstat()+0x2b4>)
    1ab2:	f7ff f991 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    1ab6:	4605      	mov	r5, r0
    1ab8:	488c      	ldr	r0, [pc, #560]	; (1cec <printbmsstat()+0x2b4>)
    1aba:	f7ff f967 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1abe:	4601      	mov	r1, r0
    1ac0:	4628      	mov	r0, r5
    1ac2:	f00a fe9d 	bl	c800 <__aeabi_fsub>
    1ac6:	6c61      	ldr	r1, [r4, #68]	; 0x44
    1ac8:	f00b f960 	bl	cd8c <__aeabi_fcmpgt>
    1acc:	2800      	cmp	r0, #0
    1ace:	f040 81c7 	bne.w	1e60 <printbmsstat()+0x428>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    1ad2:	4886      	ldr	r0, [pc, #536]	; (1cec <printbmsstat()+0x2b4>)
    1ad4:	f7ff f9ce 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    1ad8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    1ada:	f00b f957 	bl	cd8c <__aeabi_fcmpgt>
    1ade:	2800      	cmp	r0, #0
    1ae0:	f040 81b9 	bne.w	1e56 <printbmsstat()+0x41e>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    1ae4:	4881      	ldr	r0, [pc, #516]	; (1cec <printbmsstat()+0x2b4>)
    1ae6:	f7ff f9c5 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    1aea:	6b21      	ldr	r1, [r4, #48]	; 0x30
    1aec:	f00b f930 	bl	cd50 <__aeabi_fcmplt>
    1af0:	2800      	cmp	r0, #0
    1af2:	f040 81a1 	bne.w	1e38 <printbmsstat()+0x400>
    if (storagemode == 1) {
    1af6:	4b7e      	ldr	r3, [pc, #504]	; (1cf0 <printbmsstat()+0x2b8>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    1af8:	487c      	ldr	r0, [pc, #496]	; (1cec <printbmsstat()+0x2b4>)
    if (storagemode == 1) {
    1afa:	681b      	ldr	r3, [r3, #0]
    1afc:	2b01      	cmp	r3, #1
    1afe:	f000 818b 	beq.w	1e18 <printbmsstat()+0x3e0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1b02:	f7ff f943 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1b06:	6921      	ldr	r1, [r4, #16]
    1b08:	f00b f940 	bl	cd8c <__aeabi_fcmpgt>
    1b0c:	2800      	cmp	r0, #0
    1b0e:	f040 816a 	bne.w	1de6 <printbmsstat()+0x3ae>
    1b12:	4d74      	ldr	r5, [pc, #464]	; (1ce4 <printbmsstat()+0x2ac>)
    1b14:	4877      	ldr	r0, [pc, #476]	; (1cf4 <printbmsstat()+0x2bc>)
    1b16:	2102      	movs	r1, #2
    1b18:	f00a f89c 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    1b1c:	2012      	movs	r0, #18
    1b1e:	f008 fa4d 	bl	9fbc <digitalRead>
    1b22:	2801      	cmp	r0, #1
    1b24:	f000 813c 	beq.w	1da0 <printbmsstat()+0x368>
  if (digitalRead(IN1) == HIGH) {
    1b28:	2011      	movs	r0, #17
    1b2a:	f008 fa47 	bl	9fbc <digitalRead>
    1b2e:	2801      	cmp	r0, #1
    1b30:	f000 8131 	beq.w	1d96 <printbmsstat()+0x35e>
  if (balancecells == 1) {
    1b34:	4b70      	ldr	r3, [pc, #448]	; (1cf8 <printbmsstat()+0x2c0>)
    1b36:	681c      	ldr	r4, [r3, #0]
    1b38:	2c01      	cmp	r4, #1
    1b3a:	f000 8101 	beq.w	1d40 <printbmsstat()+0x308>
    1b3e:	2102      	movs	r1, #2
    1b40:	486c      	ldr	r0, [pc, #432]	; (1cf4 <printbmsstat()+0x2bc>)
  if ((contstat & 1) == 1) {
    1b42:	4c6e      	ldr	r4, [pc, #440]	; (1cfc <printbmsstat()+0x2c4>)
    1b44:	f00a f886 	bl	bc54 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    1b48:	4b6d      	ldr	r3, [pc, #436]	; (1d00 <printbmsstat()+0x2c8>)
	size_t print(int n)				{ return print((long)n); }
    1b4a:	4863      	ldr	r0, [pc, #396]	; (1cd8 <printbmsstat()+0x2a0>)
    1b4c:	6819      	ldr	r1, [r3, #0]
    1b4e:	f007 fb35 	bl	91bc <Print::print(long)>
  SERIALCONSOLE.println();
    1b52:	4861      	ldr	r0, [pc, #388]	; (1cd8 <printbmsstat()+0x2a0>)
    1b54:	f007 fb3a 	bl	91cc <Print::println()>
    1b58:	2104      	movs	r1, #4
    1b5a:	486a      	ldr	r0, [pc, #424]	; (1d04 <printbmsstat()+0x2cc>)
    1b5c:	f00a f87a 	bl	bc54 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    1b60:	200b      	movs	r0, #11
    1b62:	f008 fa2b 	bl	9fbc <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1b66:	2300      	movs	r3, #0
    1b68:	4601      	mov	r1, r0
    1b6a:	220a      	movs	r2, #10
    1b6c:	485a      	ldr	r0, [pc, #360]	; (1cd8 <printbmsstat()+0x2a0>)
    1b6e:	f007 fb45 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    1b72:	200c      	movs	r0, #12
    1b74:	f008 fa22 	bl	9fbc <digitalRead>
    1b78:	2300      	movs	r3, #0
    1b7a:	4601      	mov	r1, r0
    1b7c:	220a      	movs	r2, #10
    1b7e:	4856      	ldr	r0, [pc, #344]	; (1cd8 <printbmsstat()+0x2a0>)
    1b80:	f007 fb3c 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    1b84:	2014      	movs	r0, #20
    1b86:	f008 fa19 	bl	9fbc <digitalRead>
    1b8a:	2300      	movs	r3, #0
    1b8c:	4601      	mov	r1, r0
    1b8e:	220a      	movs	r2, #10
    1b90:	4851      	ldr	r0, [pc, #324]	; (1cd8 <printbmsstat()+0x2a0>)
    1b92:	f007 fb33 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    1b96:	2015      	movs	r0, #21
    1b98:	f008 fa10 	bl	9fbc <digitalRead>
    1b9c:	220a      	movs	r2, #10
    1b9e:	4601      	mov	r1, r0
    1ba0:	2300      	movs	r3, #0
    1ba2:	484d      	ldr	r0, [pc, #308]	; (1cd8 <printbmsstat()+0x2a0>)
    1ba4:	f007 fb2a 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1ba8:	2106      	movs	r1, #6
    1baa:	4857      	ldr	r0, [pc, #348]	; (1d08 <printbmsstat()+0x2d0>)
    1bac:	f00a f852 	bl	bc54 <usb_serial_write>
  if ((contstat & 1) == 1) {
    1bb0:	6823      	ldr	r3, [r4, #0]
    1bb2:	07d8      	lsls	r0, r3, #31
    1bb4:	bf4b      	itete	mi
    1bb6:	2101      	movmi	r1, #1
    1bb8:	2101      	movpl	r1, #1
    1bba:	4854      	ldrmi	r0, [pc, #336]	; (1d0c <printbmsstat()+0x2d4>)
    1bbc:	4854      	ldrpl	r0, [pc, #336]	; (1d10 <printbmsstat()+0x2d8>)
    1bbe:	f00a f849 	bl	bc54 <usb_serial_write>
  if ((contstat & 2) == 2) {
    1bc2:	6823      	ldr	r3, [r4, #0]
    1bc4:	0799      	lsls	r1, r3, #30
    1bc6:	bf4b      	itete	mi
    1bc8:	2101      	movmi	r1, #1
    1bca:	2101      	movpl	r1, #1
    1bcc:	484f      	ldrmi	r0, [pc, #316]	; (1d0c <printbmsstat()+0x2d4>)
    1bce:	4850      	ldrpl	r0, [pc, #320]	; (1d10 <printbmsstat()+0x2d8>)
    1bd0:	f00a f840 	bl	bc54 <usb_serial_write>
  if ((contstat & 4) == 4) {
    1bd4:	6823      	ldr	r3, [r4, #0]
    1bd6:	075a      	lsls	r2, r3, #29
    1bd8:	bf4b      	itete	mi
    1bda:	2101      	movmi	r1, #1
    1bdc:	2101      	movpl	r1, #1
    1bde:	484b      	ldrmi	r0, [pc, #300]	; (1d0c <printbmsstat()+0x2d4>)
    1be0:	484b      	ldrpl	r0, [pc, #300]	; (1d10 <printbmsstat()+0x2d8>)
    1be2:	f00a f837 	bl	bc54 <usb_serial_write>
  if ((contstat & 8) == 8) {
    1be6:	6823      	ldr	r3, [r4, #0]
    1be8:	071b      	lsls	r3, r3, #28
    1bea:	bf4b      	itete	mi
    1bec:	2101      	movmi	r1, #1
    1bee:	2101      	movpl	r1, #1
    1bf0:	4846      	ldrmi	r0, [pc, #280]	; (1d0c <printbmsstat()+0x2d4>)
    1bf2:	4847      	ldrpl	r0, [pc, #284]	; (1d10 <printbmsstat()+0x2d8>)
    1bf4:	f00a f82e 	bl	bc54 <usb_serial_write>
    1bf8:	2104      	movs	r1, #4
    1bfa:	4846      	ldr	r0, [pc, #280]	; (1d14 <printbmsstat()+0x2dc>)
    1bfc:	f00a f82a 	bl	bc54 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    1c00:	2011      	movs	r0, #17
    1c02:	f008 f9db 	bl	9fbc <digitalRead>
    1c06:	2300      	movs	r3, #0
    1c08:	4601      	mov	r1, r0
    1c0a:	220a      	movs	r2, #10
    1c0c:	4832      	ldr	r0, [pc, #200]	; (1cd8 <printbmsstat()+0x2a0>)
    1c0e:	f007 faf5 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    1c12:	2010      	movs	r0, #16
    1c14:	f008 f9d2 	bl	9fbc <digitalRead>
    1c18:	2300      	movs	r3, #0
    1c1a:	4601      	mov	r1, r0
    1c1c:	220a      	movs	r2, #10
    1c1e:	482e      	ldr	r0, [pc, #184]	; (1cd8 <printbmsstat()+0x2a0>)
    1c20:	f007 faec 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    1c24:	2012      	movs	r0, #18
    1c26:	f008 f9c9 	bl	9fbc <digitalRead>
    1c2a:	2300      	movs	r3, #0
    1c2c:	4601      	mov	r1, r0
    1c2e:	220a      	movs	r2, #10
    1c30:	4829      	ldr	r0, [pc, #164]	; (1cd8 <printbmsstat()+0x2a0>)
    1c32:	f007 fae3 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    1c36:	2013      	movs	r0, #19
    1c38:	f008 f9c0 	bl	9fbc <digitalRead>
    1c3c:	220a      	movs	r2, #10
    1c3e:	4601      	mov	r1, r0
    1c40:	2300      	movs	r3, #0
    1c42:	4825      	ldr	r0, [pc, #148]	; (1cd8 <printbmsstat()+0x2a0>)
    1c44:	f007 fada 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1c48:	2118      	movs	r1, #24
    1c4a:	4833      	ldr	r0, [pc, #204]	; (1d18 <printbmsstat()+0x2e0>)
    1c4c:	f00a f802 	bl	bc54 <usb_serial_write>
  SERIALCONSOLE.print(chargecurrent * 0.1, 0);
    1c50:	4b32      	ldr	r3, [pc, #200]	; (1d1c <printbmsstat()+0x2e4>)
    1c52:	6818      	ldr	r0, [r3, #0]
    1c54:	f00a fe8a 	bl	c96c <__aeabi_i2f>
    1c58:	4931      	ldr	r1, [pc, #196]	; (1d20 <printbmsstat()+0x2e8>)
    1c5a:	f00a fedb 	bl	ca14 <__aeabi_fmul>
    1c5e:	f00a fcb5 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1c62:	2400      	movs	r4, #0
    1c64:	4602      	mov	r2, r0
    1c66:	460b      	mov	r3, r1
    1c68:	481b      	ldr	r0, [pc, #108]	; (1cd8 <printbmsstat()+0x2a0>)
    1c6a:	9400      	str	r4, [sp, #0]
    1c6c:	f007 fad0 	bl	9210 <Print::printFloat(double, unsigned char)>
    1c70:	211d      	movs	r1, #29
    1c72:	482c      	ldr	r0, [pc, #176]	; (1d24 <printbmsstat()+0x2ec>)
    1c74:	f009 ffee 	bl	bc54 <usb_serial_write>
  SERIALCONSOLE.print(discurrent * 0.1, 0);
    1c78:	4b2b      	ldr	r3, [pc, #172]	; (1d28 <printbmsstat()+0x2f0>)
    1c7a:	6818      	ldr	r0, [r3, #0]
    1c7c:	f00a fe76 	bl	c96c <__aeabi_i2f>
    1c80:	4927      	ldr	r1, [pc, #156]	; (1d20 <printbmsstat()+0x2e8>)
    1c82:	f00a fec7 	bl	ca14 <__aeabi_fmul>
    1c86:	f00a fca1 	bl	c5cc <__aeabi_f2d>
    1c8a:	9400      	str	r4, [sp, #0]
    1c8c:	460b      	mov	r3, r1
    1c8e:	4602      	mov	r2, r0
    1c90:	4811      	ldr	r0, [pc, #68]	; (1cd8 <printbmsstat()+0x2a0>)
    1c92:	f007 fabd 	bl	9210 <Print::printFloat(double, unsigned char)>
    1c96:	4825      	ldr	r0, [pc, #148]	; (1d2c <printbmsstat()+0x2f4>)
    1c98:	2102      	movs	r1, #2
    1c9a:	f009 ffdb 	bl	bc54 <usb_serial_write>
  if (bmsstatus == Charge || CPdebug == 1) {
    1c9e:	782b      	ldrb	r3, [r5, #0]
    1ca0:	2b03      	cmp	r3, #3
    1ca2:	d002      	beq.n	1caa <printbmsstat()+0x272>
    1ca4:	4b22      	ldr	r3, [pc, #136]	; (1d30 <printbmsstat()+0x2f8>)
    1ca6:	781b      	ldrb	r3, [r3, #0]
    1ca8:	b1a3      	cbz	r3, 1cd4 <printbmsstat()+0x29c>
    1caa:	2114      	movs	r1, #20
    1cac:	4821      	ldr	r0, [pc, #132]	; (1d34 <printbmsstat()+0x2fc>)
    1cae:	f009 ffd1 	bl	bc54 <usb_serial_write>
    Serial.print(accurlim * 0.001, 0);
    1cb2:	4b21      	ldr	r3, [pc, #132]	; (1d38 <printbmsstat()+0x300>)
    1cb4:	8818      	ldrh	r0, [r3, #0]
    1cb6:	b280      	uxth	r0, r0
    1cb8:	f00a fe58 	bl	c96c <__aeabi_i2f>
    1cbc:	491f      	ldr	r1, [pc, #124]	; (1d3c <printbmsstat()+0x304>)
    1cbe:	f00a fea9 	bl	ca14 <__aeabi_fmul>
    1cc2:	f00a fc83 	bl	c5cc <__aeabi_f2d>
    1cc6:	460b      	mov	r3, r1
    1cc8:	2100      	movs	r1, #0
    1cca:	4602      	mov	r2, r0
    1ccc:	9100      	str	r1, [sp, #0]
    1cce:	4802      	ldr	r0, [pc, #8]	; (1cd8 <printbmsstat()+0x2a0>)
    1cd0:	f007 fa9e 	bl	9210 <Print::printFloat(double, unsigned char)>
}
    1cd4:	b005      	add	sp, #20
    1cd6:	bd30      	pop	{r4, r5, pc}
    1cd8:	1fff8a04 	.word	0x1fff8a04
    1cdc:	1fffcde8 	.word	0x1fffcde8
    1ce0:	00013c08 	.word	0x00013c08
    1ce4:	1fffcb34 	.word	0x1fffcb34
    1ce8:	00013c18 	.word	0x00013c18
    1cec:	1fff91e0 	.word	0x1fff91e0
    1cf0:	1fffcec0 	.word	0x1fffcec0
    1cf4:	00014a64 	.word	0x00014a64
    1cf8:	1fff91d0 	.word	0x1fff91d0
    1cfc:	1fffcbbc 	.word	0x1fffcbbc
    1d00:	1fffcb3c 	.word	0x1fffcb3c
    1d04:	00013d20 	.word	0x00013d20
    1d08:	00013d28 	.word	0x00013d28
    1d0c:	00013d30 	.word	0x00013d30
    1d10:	00013d34 	.word	0x00013d34
    1d14:	00013d38 	.word	0x00013d38
    1d18:	00013d40 	.word	0x00013d40
    1d1c:	1fffcb40 	.word	0x1fffcb40
    1d20:	3dcccccd 	.word	0x3dcccccd
    1d24:	00013d5c 	.word	0x00013d5c
    1d28:	1fffccd4 	.word	0x1fffccd4
    1d2c:	00013d7c 	.word	0x00013d7c
    1d30:	1fff918c 	.word	0x1fff918c
    1d34:	00013d80 	.word	0x00013d80
    1d38:	1fff91c0 	.word	0x1fff91c0
    1d3c:	3a83126f 	.word	0x3a83126f
    1d40:	2111      	movs	r1, #17
    1d42:	484d      	ldr	r0, [pc, #308]	; (1e78 <printbmsstat()+0x440>)
    1d44:	f009 ff86 	bl	bc54 <usb_serial_write>
    1d48:	4621      	mov	r1, r4
    1d4a:	484c      	ldr	r0, [pc, #304]	; (1e7c <printbmsstat()+0x444>)
    1d4c:	f009 ff82 	bl	bc54 <usb_serial_write>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1d50:	4a4b      	ldr	r2, [pc, #300]	; (1e80 <printbmsstat()+0x448>)
    SERIALCONSOLE.print((balancetimer - millis()) * 0.001, 0);
    1d52:	4b4c      	ldr	r3, [pc, #304]	; (1e84 <printbmsstat()+0x44c>)
    1d54:	6812      	ldr	r2, [r2, #0]
    1d56:	9203      	str	r2, [sp, #12]
    1d58:	6818      	ldr	r0, [r3, #0]
	return ret;
    1d5a:	9b03      	ldr	r3, [sp, #12]
    1d5c:	1ac0      	subs	r0, r0, r3
    1d5e:	f00a fe01 	bl	c964 <__aeabi_ui2f>
    1d62:	4949      	ldr	r1, [pc, #292]	; (1e88 <printbmsstat()+0x450>)
    1d64:	f00a fe56 	bl	ca14 <__aeabi_fmul>
    1d68:	f00a fc30 	bl	c5cc <__aeabi_f2d>
    1d6c:	460b      	mov	r3, r1
    1d6e:	2100      	movs	r1, #0
    1d70:	4602      	mov	r2, r0
    1d72:	9100      	str	r1, [sp, #0]
    1d74:	4845      	ldr	r0, [pc, #276]	; (1e8c <printbmsstat()+0x454>)
    1d76:	f007 fa4b 	bl	9210 <Print::printFloat(double, unsigned char)>
    1d7a:	4621      	mov	r1, r4
    1d7c:	483f      	ldr	r0, [pc, #252]	; (1e7c <printbmsstat()+0x444>)
    1d7e:	f009 ff69 	bl	bc54 <usb_serial_write>
    SERIALCONSOLE.print(balpauzecnt);
    1d82:	4b43      	ldr	r3, [pc, #268]	; (1e90 <printbmsstat()+0x458>)
	size_t print(int n)				{ return print((long)n); }
    1d84:	4841      	ldr	r0, [pc, #260]	; (1e8c <printbmsstat()+0x454>)
    1d86:	6819      	ldr	r1, [r3, #0]
    1d88:	f007 fa18 	bl	91bc <Print::print(long)>
    1d8c:	4621      	mov	r1, r4
    1d8e:	483b      	ldr	r0, [pc, #236]	; (1e7c <printbmsstat()+0x444>)
    1d90:	f009 ff60 	bl	bc54 <usb_serial_write>
    1d94:	e6d3      	b.n	1b3e <printbmsstat()+0x106>
    1d96:	210a      	movs	r1, #10
    1d98:	483e      	ldr	r0, [pc, #248]	; (1e94 <printbmsstat()+0x45c>)
    1d9a:	f009 ff5b 	bl	bc54 <usb_serial_write>
    1d9e:	e6c9      	b.n	1b34 <printbmsstat()+0xfc>
    1da0:	210e      	movs	r1, #14
    1da2:	483d      	ldr	r0, [pc, #244]	; (1e98 <printbmsstat()+0x460>)
    1da4:	f009 ff56 	bl	bc54 <usb_serial_write>
    1da8:	e6be      	b.n	1b28 <printbmsstat()+0xf0>
    1daa:	2106      	movs	r1, #6
    1dac:	483b      	ldr	r0, [pc, #236]	; (1e9c <printbmsstat()+0x464>)
    1dae:	f009 ff51 	bl	bc54 <usb_serial_write>
    1db2:	e6af      	b.n	1b14 <printbmsstat()+0xdc>
    1db4:	2107      	movs	r1, #7
    1db6:	483a      	ldr	r0, [pc, #232]	; (1ea0 <printbmsstat()+0x468>)
    1db8:	f009 ff4c 	bl	bc54 <usb_serial_write>
    1dbc:	e6aa      	b.n	1b14 <printbmsstat()+0xdc>
    1dbe:	2107      	movs	r1, #7
    1dc0:	4838      	ldr	r0, [pc, #224]	; (1ea4 <printbmsstat()+0x46c>)
    1dc2:	f009 ff47 	bl	bc54 <usb_serial_write>
    1dc6:	e6a5      	b.n	1b14 <printbmsstat()+0xdc>
    1dc8:	2108      	movs	r1, #8
    1dca:	4837      	ldr	r0, [pc, #220]	; (1ea8 <printbmsstat()+0x470>)
    1dcc:	f009 ff42 	bl	bc54 <usb_serial_write>
    1dd0:	e6a0      	b.n	1b14 <printbmsstat()+0xdc>
    1dd2:	210b      	movs	r1, #11
    1dd4:	4835      	ldr	r0, [pc, #212]	; (1eac <printbmsstat()+0x474>)
    1dd6:	f009 ff3d 	bl	bc54 <usb_serial_write>
    1dda:	e69b      	b.n	1b14 <printbmsstat()+0xdc>
    1ddc:	2107      	movs	r1, #7
    1dde:	4834      	ldr	r0, [pc, #208]	; (1eb0 <printbmsstat()+0x478>)
    1de0:	f009 ff38 	bl	bc54 <usb_serial_write>
    1de4:	e696      	b.n	1b14 <printbmsstat()+0xdc>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1de6:	4833      	ldr	r0, [pc, #204]	; (1eb4 <printbmsstat()+0x47c>)
        if (bmsstatus == Error) {
    1de8:	4d33      	ldr	r5, [pc, #204]	; (1eb8 <printbmsstat()+0x480>)
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    1dea:	f7fe fff5 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    1dee:	68e1      	ldr	r1, [r4, #12]
    1df0:	f00a ffae 	bl	cd50 <__aeabi_fcmplt>
    1df4:	2800      	cmp	r0, #0
    1df6:	f43f ae8d 	beq.w	1b14 <printbmsstat()+0xdc>
        if (bmsstatus == Error) {
    1dfa:	782b      	ldrb	r3, [r5, #0]
    1dfc:	2b05      	cmp	r3, #5
    1dfe:	bf0b      	itete	eq
    1e00:	210a      	moveq	r1, #10
    1e02:	2109      	movne	r1, #9
    1e04:	482d      	ldreq	r0, [pc, #180]	; (1ebc <printbmsstat()+0x484>)
    1e06:	482e      	ldrne	r0, [pc, #184]	; (1ec0 <printbmsstat()+0x488>)
    1e08:	f009 ff24 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(ErrorReason);
    1e0c:	4b2d      	ldr	r3, [pc, #180]	; (1ec4 <printbmsstat()+0x48c>)
    1e0e:	481f      	ldr	r0, [pc, #124]	; (1e8c <printbmsstat()+0x454>)
    1e10:	6819      	ldr	r1, [r3, #0]
    1e12:	f007 f9d3 	bl	91bc <Print::print(long)>
    1e16:	e67d      	b.n	1b14 <printbmsstat()+0xdc>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    1e18:	f7fe ffb8 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    1e1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    1e1e:	f00a ffb5 	bl	cd8c <__aeabi_fcmpgt>
    1e22:	b310      	cbz	r0, 1e6a <printbmsstat()+0x432>
    1e24:	2116      	movs	r1, #22
    1e26:	4828      	ldr	r0, [pc, #160]	; (1ec8 <printbmsstat()+0x490>)
    1e28:	4d23      	ldr	r5, [pc, #140]	; (1eb8 <printbmsstat()+0x480>)
    1e2a:	f009 ff13 	bl	bc54 <usb_serial_write>
    1e2e:	4823      	ldr	r0, [pc, #140]	; (1ebc <printbmsstat()+0x484>)
    1e30:	210a      	movs	r1, #10
    1e32:	f009 ff0f 	bl	bc54 <usb_serial_write>
    1e36:	e66d      	b.n	1b14 <printbmsstat()+0xdc>
    1e38:	210d      	movs	r1, #13
    1e3a:	4824      	ldr	r0, [pc, #144]	; (1ecc <printbmsstat()+0x494>)
    1e3c:	f009 ff0a 	bl	bc54 <usb_serial_write>
    1e40:	e659      	b.n	1af6 <printbmsstat()+0xbe>
    1e42:	210e      	movs	r1, #14
    1e44:	4822      	ldr	r0, [pc, #136]	; (1ed0 <printbmsstat()+0x498>)
    1e46:	f009 ff05 	bl	bc54 <usb_serial_write>
    1e4a:	e631      	b.n	1ab0 <printbmsstat()+0x78>
    1e4c:	210f      	movs	r1, #15
    1e4e:	4821      	ldr	r0, [pc, #132]	; (1ed4 <printbmsstat()+0x49c>)
    1e50:	f009 ff00 	bl	bc54 <usb_serial_write>
    1e54:	e623      	b.n	1a9e <printbmsstat()+0x66>
    1e56:	210c      	movs	r1, #12
    1e58:	481f      	ldr	r0, [pc, #124]	; (1ed8 <printbmsstat()+0x4a0>)
    1e5a:	f009 fefb 	bl	bc54 <usb_serial_write>
    1e5e:	e641      	b.n	1ae4 <printbmsstat()+0xac>
    1e60:	2111      	movs	r1, #17
    1e62:	481e      	ldr	r0, [pc, #120]	; (1edc <printbmsstat()+0x4a4>)
    1e64:	f009 fef6 	bl	bc54 <usb_serial_write>
    1e68:	e633      	b.n	1ad2 <printbmsstat()+0x9a>
    1e6a:	481d      	ldr	r0, [pc, #116]	; (1ee0 <printbmsstat()+0x4a8>)
    1e6c:	4d12      	ldr	r5, [pc, #72]	; (1eb8 <printbmsstat()+0x480>)
    1e6e:	2108      	movs	r1, #8
    1e70:	f009 fef0 	bl	bc54 <usb_serial_write>
    1e74:	e64e      	b.n	1b14 <printbmsstat()+0xdc>
    1e76:	bf00      	nop
    1e78:	00013d08 	.word	0x00013d08
    1e7c:	00013d1c 	.word	0x00013d1c
    1e80:	1fffd0e4 	.word	0x1fffd0e4
    1e84:	1fff91d8 	.word	0x1fff91d8
    1e88:	3a83126f 	.word	0x3a83126f
    1e8c:	1fff8a04 	.word	0x1fff8a04
    1e90:	1fff91dc 	.word	0x1fff91dc
    1e94:	00013cfc 	.word	0x00013cfc
    1e98:	00013cec 	.word	0x00013cec
    1e9c:	00013cb4 	.word	0x00013cb4
    1ea0:	00013cbc 	.word	0x00013cbc
    1ea4:	00013cd0 	.word	0x00013cd0
    1ea8:	00013cd8 	.word	0x00013cd8
    1eac:	00013cc4 	.word	0x00013cc4
    1eb0:	00013ce4 	.word	0x00013ce4
    1eb4:	1fff91e0 	.word	0x1fff91e0
    1eb8:	1fffcb34 	.word	0x1fffcb34
    1ebc:	00013c90 	.word	0x00013c90
    1ec0:	00013ca8 	.word	0x00013ca8
    1ec4:	1fff919c 	.word	0x1fff919c
    1ec8:	00013c78 	.word	0x00013c78
    1ecc:	00013c68 	.word	0x00013c68
    1ed0:	00013c34 	.word	0x00013c34
    1ed4:	00013c24 	.word	0x00013c24
    1ed8:	00013c58 	.word	0x00013c58
    1edc:	00013c44 	.word	0x00013c44
    1ee0:	00013c9c 	.word	0x00013c9c

00001ee4 <getcurrent()>:
void getcurrent() {
    1ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    1ee8:	4c9a      	ldr	r4, [pc, #616]	; (2154 <getcurrent()+0x270>)
    1eea:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    1eee:	2b01      	cmp	r3, #1
void getcurrent() {
    1ef0:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    1ef2:	d04c      	beq.n	1f8e <getcurrent()+0xaa>
    1ef4:	2b03      	cmp	r3, #3
    1ef6:	4f98      	ldr	r7, [pc, #608]	; (2158 <getcurrent()+0x274>)
    1ef8:	d060      	beq.n	1fbc <getcurrent()+0xd8>
    1efa:	4d98      	ldr	r5, [pc, #608]	; (215c <getcurrent()+0x278>)
    1efc:	4e98      	ldr	r6, [pc, #608]	; (2160 <getcurrent()+0x27c>)
  if (settings.invertcur == 1) {
    1efe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
  lowpassFilter.input(RawCur);
    1f02:	4898      	ldr	r0, [pc, #608]	; (2164 <getcurrent()+0x280>)
  if (settings.invertcur == 1) {
    1f04:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    1f06:	bf09      	itett	eq
    1f08:	6831      	ldreq	r1, [r6, #0]
    1f0a:	6831      	ldrne	r1, [r6, #0]
    1f0c:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    1f10:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    1f12:	f006 feff 	bl	8d14 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    1f16:	682b      	ldr	r3, [r5, #0]
    1f18:	2b00      	cmp	r3, #0
    1f1a:	f040 810d 	bne.w	2138 <getcurrent()+0x254>
  currentact = lowpassFilter.output();
    1f1e:	4891      	ldr	r0, [pc, #580]	; (2164 <getcurrent()+0x280>)
    1f20:	f006 fecc 	bl	8cbc <FilterOnePole::output()>
  if (settings.cursens == Analoguedual) {
    1f24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  currentact = lowpassFilter.output();
    1f28:	6038      	str	r0, [r7, #0]
  if (settings.cursens == Analoguedual) {
    1f2a:	2b01      	cmp	r3, #1
  currentact = lowpassFilter.output();
    1f2c:	4605      	mov	r5, r0
  if (settings.cursens == Analoguedual) {
    1f2e:	f000 80c8 	beq.w	20c2 <getcurrent()+0x1de>
    if (currentact > 500 || currentact < -500) {
    1f32:	498d      	ldr	r1, [pc, #564]	; (2168 <getcurrent()+0x284>)
    1f34:	f00a ff2a 	bl	cd8c <__aeabi_fcmpgt>
    1f38:	b930      	cbnz	r0, 1f48 <getcurrent()+0x64>
    1f3a:	498c      	ldr	r1, [pc, #560]	; (216c <getcurrent()+0x288>)
    1f3c:	4628      	mov	r0, r5
    1f3e:	f00a ff07 	bl	cd50 <__aeabi_fcmplt>
    1f42:	2800      	cmp	r0, #0
    1f44:	f000 81b5 	beq.w	22b2 <getcurrent()+0x3ce>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f48:	4f89      	ldr	r7, [pc, #548]	; (2170 <getcurrent()+0x28c>)
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    1f4a:	4c8a      	ldr	r4, [pc, #552]	; (2174 <getcurrent()+0x290>)
    1f4c:	683b      	ldr	r3, [r7, #0]
    1f4e:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    1f50:	980a      	ldr	r0, [sp, #40]	; 0x28
    1f52:	6823      	ldr	r3, [r4, #0]
    1f54:	f8df 8220 	ldr.w	r8, [pc, #544]	; 2178 <getcurrent()+0x294>
    1f58:	1ac0      	subs	r0, r0, r3
    1f5a:	f00a fd03 	bl	c964 <__aeabi_ui2f>
    1f5e:	4629      	mov	r1, r5
    1f60:	f00a fd58 	bl	ca14 <__aeabi_fmul>
    1f64:	4985      	ldr	r1, [pc, #532]	; (217c <getcurrent()+0x298>)
    1f66:	f00a fe09 	bl	cb7c <__aeabi_fdiv>
    1f6a:	4984      	ldr	r1, [pc, #528]	; (217c <getcurrent()+0x298>)
    1f6c:	f00a fe06 	bl	cb7c <__aeabi_fdiv>
    1f70:	f8d8 1000 	ldr.w	r1, [r8]
    1f74:	f00a fc46 	bl	c804 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1f78:	683b      	ldr	r3, [r7, #0]
    1f7a:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    1f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1f7e:	f8c8 0000 	str.w	r0, [r8]
      lasttime = millis();
    1f82:	6023      	str	r3, [r4, #0]
  RawCur = 0;
    1f84:	2300      	movs	r3, #0
    1f86:	6033      	str	r3, [r6, #0]
}
    1f88:	b00c      	add	sp, #48	; 0x30
    1f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    1f8e:	4f72      	ldr	r7, [pc, #456]	; (2158 <getcurrent()+0x274>)
    1f90:	f8d4 60a4 	ldr.w	r6, [r4, #164]	; 0xa4
    1f94:	683d      	ldr	r5, [r7, #0]
    1f96:	4630      	mov	r0, r6
    1f98:	f00a fce8 	bl	c96c <__aeabi_i2f>
    1f9c:	4629      	mov	r1, r5
    1f9e:	f00a fef5 	bl	cd8c <__aeabi_fcmpgt>
    1fa2:	2800      	cmp	r0, #0
    1fa4:	f000 80fa 	beq.w	219c <getcurrent()+0x2b8>
    1fa8:	4270      	negs	r0, r6
    1faa:	f00a fcdf 	bl	c96c <__aeabi_i2f>
    1fae:	4601      	mov	r1, r0
    1fb0:	4628      	mov	r0, r5
    1fb2:	f00a feeb 	bl	cd8c <__aeabi_fcmpgt>
    1fb6:	2800      	cmp	r0, #0
    1fb8:	f000 80f0 	beq.w	219c <getcurrent()+0x2b8>
        adc->startContinuous(ACUR1, ADC_0);
    1fbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 2180 <getcurrent()+0x29c>
        sensor = 1;
    1fc0:	4d70      	ldr	r5, [pc, #448]	; (2184 <getcurrent()+0x2a0>)
        adc->startContinuous(ACUR1, ADC_0);
    1fc2:	f8d8 0000 	ldr.w	r0, [r8]
        sensor = 1;
    1fc6:	2301      	movs	r3, #1
        adc->startContinuous(ACUR1, ADC_0);
    1fc8:	2200      	movs	r2, #0
    1fca:	210f      	movs	r1, #15
        sensor = 1;
    1fcc:	602b      	str	r3, [r5, #0]
        adc->startContinuous(ACUR1, ADC_0);
    1fce:	f006 fa51 	bl	8474 <ADC::startContinuous(unsigned char, signed char)>
    if (sensor == 1) {
    1fd2:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    1fd4:	4d61      	ldr	r5, [pc, #388]	; (215c <getcurrent()+0x278>)
    if (sensor == 1) {
    1fd6:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    1fd8:	682b      	ldr	r3, [r5, #0]
    if (sensor == 1) {
    1fda:	f000 80f0 	beq.w	21be <getcurrent()+0x2da>
      if (debugCur != 0) {
    1fde:	2b00      	cmp	r3, #0
    1fe0:	f040 817f 	bne.w	22e2 <getcurrent()+0x3fe>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    1fe4:	f8d8 3000 	ldr.w	r3, [r8]
    1fe8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 2188 <getcurrent()+0x2a4>
    1fec:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    1ff0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    1ff2:	691e      	ldr	r6, [r3, #16]
    1ff4:	b2b6      	uxth	r6, r6
    1ff6:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0001);
    1ffa:	f006 fa91 	bl	8520 <ADC_Module::getMaxValue()>
    1ffe:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    2002:	f640 43e4 	movw	r3, #3300	; 0xce4
    2006:	fb06 f303 	mul.w	r3, r6, r3
    200a:	fbb3 f0f0 	udiv	r0, r3, r0
    200e:	1a80      	subs	r0, r0, r2
    2010:	b200      	sxth	r0, r0
    2012:	f00a fcab 	bl	c96c <__aeabi_i2f>
    2016:	495d      	ldr	r1, [pc, #372]	; (218c <getcurrent()+0x2a8>)
    2018:	4606      	mov	r6, r0
    201a:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    201e:	f00a fcf9 	bl	ca14 <__aeabi_fmul>
    2022:	4601      	mov	r1, r0
    2024:	4630      	mov	r0, r6
    2026:	f00a fda9 	bl	cb7c <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    202a:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0001);
    202e:	4e4c      	ldr	r6, [pc, #304]	; (2160 <getcurrent()+0x27c>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2030:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0001);
    2032:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2034:	f300 8148 	bgt.w	22c8 <getcurrent()+0x3e4>
        RawCur = 0;
    2038:	2300      	movs	r3, #0
    203a:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    203c:	682b      	ldr	r3, [r5, #0]
    203e:	2b00      	cmp	r3, #0
    2040:	f43f af5d 	beq.w	1efe <getcurrent()+0x1a>
    2044:	2102      	movs	r1, #2
    2046:	4852      	ldr	r0, [pc, #328]	; (2190 <getcurrent()+0x2ac>)
    2048:	f009 fe04 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    204c:	f8d8 2000 	ldr.w	r2, [r8]
    2050:	f8d9 3000 	ldr.w	r3, [r9]
    2054:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    2058:	f640 42e4 	movw	r2, #3300	; 0xce4
    205c:	fb02 f803 	mul.w	r8, r2, r3
    2060:	f006 fa5e 	bl	8520 <ADC_Module::getMaxValue()>
    2064:	fbb8 f0f0 	udiv	r0, r8, r0
    2068:	f00a fc7c 	bl	c964 <__aeabi_ui2f>
    206c:	4680      	mov	r8, r0
    206e:	f8b4 00a2 	ldrh.w	r0, [r4, #162]	; 0xa2
    2072:	f00a fc7b 	bl	c96c <__aeabi_i2f>
    2076:	4601      	mov	r1, r0
    2078:	4640      	mov	r0, r8
    207a:	f00a fbc1 	bl	c800 <__aeabi_fsub>
    207e:	f00a faa5 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2082:	f04f 0802 	mov.w	r8, #2
    2086:	4602      	mov	r2, r0
    2088:	460b      	mov	r3, r1
    208a:	f8cd 8000 	str.w	r8, [sp]
    208e:	4841      	ldr	r0, [pc, #260]	; (2194 <getcurrent()+0x2b0>)
    2090:	f007 f8be 	bl	9210 <Print::printFloat(double, unsigned char)>
    2094:	4641      	mov	r1, r8
    2096:	483e      	ldr	r0, [pc, #248]	; (2190 <getcurrent()+0x2ac>)
    2098:	f009 fddc 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    209c:	6830      	ldr	r0, [r6, #0]
    209e:	f00a fa95 	bl	c5cc <__aeabi_f2d>
    20a2:	f8cd 8000 	str.w	r8, [sp]
    20a6:	4602      	mov	r2, r0
    20a8:	460b      	mov	r3, r1
    20aa:	483a      	ldr	r0, [pc, #232]	; (2194 <getcurrent()+0x2b0>)
    20ac:	f007 f8b0 	bl	9210 <Print::printFloat(double, unsigned char)>
    20b0:	4641      	mov	r1, r8
    20b2:	4839      	ldr	r0, [pc, #228]	; (2198 <getcurrent()+0x2b4>)
    20b4:	f009 fdce 	bl	bc54 <usb_serial_write>
    20b8:	4641      	mov	r1, r8
    20ba:	4835      	ldr	r0, [pc, #212]	; (2190 <getcurrent()+0x2ac>)
    20bc:	f009 fdca 	bl	bc54 <usb_serial_write>
    20c0:	e71d      	b.n	1efe <getcurrent()+0x1a>
    if (sensor == 1) {
    20c2:	4b30      	ldr	r3, [pc, #192]	; (2184 <getcurrent()+0x2a0>)
    20c4:	681b      	ldr	r3, [r3, #0]
    20c6:	2b01      	cmp	r3, #1
    20c8:	f000 8142 	beq.w	2350 <getcurrent()+0x46c>
    if (sensor == 2) {
    20cc:	2b02      	cmp	r3, #2
    20ce:	f47f af59 	bne.w	1f84 <getcurrent()+0xa0>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    20d2:	f8d4 40a4 	ldr.w	r4, [r4, #164]	; 0xa4
    20d6:	4620      	mov	r0, r4
    20d8:	f00a fc48 	bl	c96c <__aeabi_i2f>
    20dc:	4601      	mov	r1, r0
    20de:	4628      	mov	r0, r5
    20e0:	f00a fe54 	bl	cd8c <__aeabi_fcmpgt>
    20e4:	b948      	cbnz	r0, 20fa <getcurrent()+0x216>
    20e6:	4260      	negs	r0, r4
    20e8:	f00a fc40 	bl	c96c <__aeabi_i2f>
    20ec:	4601      	mov	r1, r0
    20ee:	4628      	mov	r0, r5
    20f0:	f00a fe2e 	bl	cd50 <__aeabi_fcmplt>
    20f4:	2800      	cmp	r0, #0
    20f6:	f000 8197 	beq.w	2428 <getcurrent()+0x544>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    20fa:	4f1d      	ldr	r7, [pc, #116]	; (2170 <getcurrent()+0x28c>)
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    20fc:	4c1d      	ldr	r4, [pc, #116]	; (2174 <getcurrent()+0x290>)
    20fe:	683b      	ldr	r3, [r7, #0]
    2100:	9307      	str	r3, [sp, #28]
	return ret;
    2102:	9807      	ldr	r0, [sp, #28]
    2104:	6823      	ldr	r3, [r4, #0]
    2106:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2178 <getcurrent()+0x294>
    210a:	1ac0      	subs	r0, r0, r3
    210c:	f00a fc2a 	bl	c964 <__aeabi_ui2f>
    2110:	4629      	mov	r1, r5
    2112:	f00a fc7f 	bl	ca14 <__aeabi_fmul>
    2116:	4919      	ldr	r1, [pc, #100]	; (217c <getcurrent()+0x298>)
    2118:	f00a fd30 	bl	cb7c <__aeabi_fdiv>
    211c:	4917      	ldr	r1, [pc, #92]	; (217c <getcurrent()+0x298>)
    211e:	f00a fd2d 	bl	cb7c <__aeabi_fdiv>
    2122:	f8d8 1000 	ldr.w	r1, [r8]
    2126:	f00a fb6d 	bl	c804 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    212a:	683b      	ldr	r3, [r7, #0]
    212c:	9306      	str	r3, [sp, #24]
	return ret;
    212e:	9b06      	ldr	r3, [sp, #24]
    2130:	f8c8 0000 	str.w	r0, [r8]
        lasttime = millis();
    2134:	6023      	str	r3, [r4, #0]
    2136:	e725      	b.n	1f84 <getcurrent()+0xa0>
    SERIALCONSOLE.print(lowpassFilter.output());
    2138:	480a      	ldr	r0, [pc, #40]	; (2164 <getcurrent()+0x280>)
    213a:	f006 fdbf 	bl	8cbc <FilterOnePole::output()>
    213e:	f00a fa45 	bl	c5cc <__aeabi_f2d>
    2142:	460b      	mov	r3, r1
    2144:	2102      	movs	r1, #2
    2146:	4602      	mov	r2, r0
    2148:	9100      	str	r1, [sp, #0]
    214a:	4812      	ldr	r0, [pc, #72]	; (2194 <getcurrent()+0x2b0>)
    214c:	f007 f860 	bl	9210 <Print::printFloat(double, unsigned char)>
    2150:	e6e5      	b.n	1f1e <getcurrent()+0x3a>
    2152:	bf00      	nop
    2154:	1fffcde8 	.word	0x1fffcde8
    2158:	1fffcccc 	.word	0x1fffcccc
    215c:	1fffccd0 	.word	0x1fffccd0
    2160:	1fff91ac 	.word	0x1fff91ac
    2164:	1fffcd14 	.word	0x1fffcd14
    2168:	43fa0000 	.word	0x43fa0000
    216c:	c3fa0000 	.word	0xc3fa0000
    2170:	1fffd0e4 	.word	0x1fffd0e4
    2174:	1fffcd08 	.word	0x1fffcd08
    2178:	1fff91cc 	.word	0x1fff91cc
    217c:	447a0000 	.word	0x447a0000
    2180:	1fff91c4 	.word	0x1fff91c4
    2184:	1fff887c 	.word	0x1fff887c
    2188:	1fffcecc 	.word	0x1fffcecc
    218c:	38d1b717 	.word	0x38d1b717
    2190:	00014a64 	.word	0x00014a64
    2194:	1fff8a04 	.word	0x1fff8a04
    2198:	00013dd4 	.word	0x00013dd4
        adc->startContinuous(ACUR2, ADC_0);
    219c:	f8df 8298 	ldr.w	r8, [pc, #664]	; 2438 <getcurrent()+0x554>
        sensor = 2;
    21a0:	4da6      	ldr	r5, [pc, #664]	; (243c <getcurrent()+0x558>)
        adc->startContinuous(ACUR2, ADC_0);
    21a2:	f8d8 0000 	ldr.w	r0, [r8]
        sensor = 2;
    21a6:	2302      	movs	r3, #2
        adc->startContinuous(ACUR2, ADC_0);
    21a8:	2200      	movs	r2, #0
    21aa:	210e      	movs	r1, #14
        sensor = 2;
    21ac:	602b      	str	r3, [r5, #0]
        adc->startContinuous(ACUR2, ADC_0);
    21ae:	f006 f961 	bl	8474 <ADC::startContinuous(unsigned char, signed char)>
    if (sensor == 1) {
    21b2:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    21b4:	4da2      	ldr	r5, [pc, #648]	; (2440 <getcurrent()+0x55c>)
    if (sensor == 1) {
    21b6:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    21b8:	682b      	ldr	r3, [r5, #0]
    if (sensor == 1) {
    21ba:	f47f af10 	bne.w	1fde <getcurrent()+0xfa>
      if (debugCur != 0) {
    21be:	2b00      	cmp	r3, #0
    21c0:	f040 80ef 	bne.w	23a2 <getcurrent()+0x4be>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    21c4:	f8d8 3000 	ldr.w	r3, [r8]
    21c8:	f8df 9278 	ldr.w	r9, [pc, #632]	; 2444 <getcurrent()+0x560>
    21cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    21d0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    21d2:	691e      	ldr	r6, [r3, #16]
    21d4:	b2b6      	uxth	r6, r6
    21d6:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0001);
    21da:	f006 f9a1 	bl	8520 <ADC_Module::getMaxValue()>
    21de:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    21e2:	f640 4ae4 	movw	sl, #3300	; 0xce4
    21e6:	fb0a f606 	mul.w	r6, sl, r6
    21ea:	fbb6 f6f0 	udiv	r6, r6, r0
    21ee:	1af0      	subs	r0, r6, r3
    21f0:	b200      	sxth	r0, r0
    21f2:	f00a fbbb 	bl	c96c <__aeabi_i2f>
    21f6:	4994      	ldr	r1, [pc, #592]	; (2448 <getcurrent()+0x564>)
    21f8:	4606      	mov	r6, r0
    21fa:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    21fe:	f00a fc09 	bl	ca14 <__aeabi_fmul>
    2202:	4601      	mov	r1, r0
    2204:	4630      	mov	r0, r6
    2206:	f00a fcb9 	bl	cb7c <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    220a:	f8d8 3000 	ldr.w	r3, [r8]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0001);
    220e:	4e8f      	ldr	r6, [pc, #572]	; (244c <getcurrent()+0x568>)
    2210:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    2212:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2216:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0001);
    221a:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    221c:	fb0a fa03 	mul.w	sl, sl, r3
    2220:	f006 f97e 	bl	8520 <ADC_Module::getMaxValue()>
    2224:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    2228:	fbba f3f0 	udiv	r3, sl, r0
    222c:	b21b      	sxth	r3, r3
    222e:	1a9b      	subs	r3, r3, r2
    2230:	2b00      	cmp	r3, #0
    2232:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
    2236:	bfb8      	it	lt
    2238:	425b      	neglt	r3, r3
    223a:	429a      	cmp	r2, r3
        RawCur = 0;
    223c:	bfc4      	itt	gt
    223e:	2300      	movgt	r3, #0
    2240:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    2242:	682b      	ldr	r3, [r5, #0]
    2244:	2b00      	cmp	r3, #0
    2246:	f43f ae5a 	beq.w	1efe <getcurrent()+0x1a>
    224a:	2102      	movs	r1, #2
    224c:	4880      	ldr	r0, [pc, #512]	; (2450 <getcurrent()+0x56c>)
    224e:	f009 fd01 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    2252:	f8d8 2000 	ldr.w	r2, [r8]
    2256:	f8d9 3000 	ldr.w	r3, [r9]
    225a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    225e:	f640 42e4 	movw	r2, #3300	; 0xce4
    2262:	fb02 f803 	mul.w	r8, r2, r3
    2266:	f006 f95b 	bl	8520 <ADC_Module::getMaxValue()>
    226a:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    226e:	fbb8 f8f0 	udiv	r8, r8, r0
    2272:	fa0f f888 	sxth.w	r8, r8
	size_t print(int n)				{ return print((long)n); }
    2276:	eba8 0101 	sub.w	r1, r8, r1
    227a:	4876      	ldr	r0, [pc, #472]	; (2454 <getcurrent()+0x570>)
    227c:	f006 ff9e 	bl	91bc <Print::print(long)>
    2280:	2102      	movs	r1, #2
    2282:	4873      	ldr	r0, [pc, #460]	; (2450 <getcurrent()+0x56c>)
    2284:	f009 fce6 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2288:	6830      	ldr	r0, [r6, #0]
    228a:	f00a f99f 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    228e:	f04f 0802 	mov.w	r8, #2
    2292:	4602      	mov	r2, r0
    2294:	460b      	mov	r3, r1
    2296:	f8cd 8000 	str.w	r8, [sp]
    229a:	486e      	ldr	r0, [pc, #440]	; (2454 <getcurrent()+0x570>)
    229c:	f006 ffb8 	bl	9210 <Print::printFloat(double, unsigned char)>
    22a0:	2103      	movs	r1, #3
    22a2:	486d      	ldr	r0, [pc, #436]	; (2458 <getcurrent()+0x574>)
    22a4:	f009 fcd6 	bl	bc54 <usb_serial_write>
    22a8:	4641      	mov	r1, r8
    22aa:	4869      	ldr	r0, [pc, #420]	; (2450 <getcurrent()+0x56c>)
    22ac:	f009 fcd2 	bl	bc54 <usb_serial_write>
    22b0:	e625      	b.n	1efe <getcurrent()+0x1a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    22b2:	4a6a      	ldr	r2, [pc, #424]	; (245c <getcurrent()+0x578>)
      lasttime = millis();
    22b4:	4b6a      	ldr	r3, [pc, #424]	; (2460 <getcurrent()+0x57c>)
    22b6:	6812      	ldr	r2, [r2, #0]
    22b8:	920b      	str	r2, [sp, #44]	; 0x2c
	return ret;
    22ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    22bc:	601a      	str	r2, [r3, #0]
  RawCur = 0;
    22be:	2300      	movs	r3, #0
    22c0:	6033      	str	r3, [r6, #0]
}
    22c2:	b00c      	add	sp, #48	; 0x30
    22c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    22c8:	f8d8 3000 	ldr.w	r3, [r8]
    22cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    22d0:	f006 f926 	bl	8520 <ADC_Module::getMaxValue()>
    22d4:	f8d9 3000 	ldr.w	r3, [r9]
    22d8:	3864      	subs	r0, #100	; 0x64
    22da:	4298      	cmp	r0, r3
    22dc:	f4ff aeac 	bcc.w	2038 <getcurrent()+0x154>
    22e0:	e6ac      	b.n	203c <getcurrent()+0x158>
        SERIALCONSOLE.println();
    22e2:	485c      	ldr	r0, [pc, #368]	; (2454 <getcurrent()+0x570>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    22e4:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2444 <getcurrent()+0x560>
        SERIALCONSOLE.println();
    22e8:	f006 ff70 	bl	91cc <Print::println()>
    22ec:	210c      	movs	r1, #12
    22ee:	485d      	ldr	r0, [pc, #372]	; (2464 <getcurrent()+0x580>)
    22f0:	f009 fcb0 	bl	bc54 <usb_serial_write>
    22f4:	485c      	ldr	r0, [pc, #368]	; (2468 <getcurrent()+0x584>)
    22f6:	210c      	movs	r1, #12
    22f8:	f009 fcac 	bl	bc54 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    22fc:	f8d8 3000 	ldr.w	r3, [r8]
      if (debugCur != 0) {
    2300:	682a      	ldr	r2, [r5, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2302:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2306:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2308:	691e      	ldr	r6, [r3, #16]
    230a:	b2b6      	uxth	r6, r6
    230c:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    2310:	2a00      	cmp	r2, #0
    2312:	f43f ae72 	beq.w	1ffa <getcurrent()+0x116>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    2316:	f006 f903 	bl	8520 <ADC_Module::getMaxValue()>
    231a:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    231e:	2300      	movs	r3, #0
    2320:	fb06 f202 	mul.w	r2, r6, r2
    2324:	fbb2 f1f0 	udiv	r1, r2, r0
    2328:	220a      	movs	r2, #10
    232a:	484a      	ldr	r0, [pc, #296]	; (2454 <getcurrent()+0x570>)
    232c:	f006 ff66 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2330:	2102      	movs	r1, #2
    2332:	4847      	ldr	r0, [pc, #284]	; (2450 <getcurrent()+0x56c>)
    2334:	f009 fc8e 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2338:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    233c:	4845      	ldr	r0, [pc, #276]	; (2454 <getcurrent()+0x570>)
    233e:	f006 ff3d 	bl	91bc <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.0001);
    2342:	f8d8 3000 	ldr.w	r3, [r8]
    2346:	f8d9 6000 	ldr.w	r6, [r9]
    234a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    234e:	e654      	b.n	1ffa <getcurrent()+0x116>
      if (currentact > 500 || currentact < -500) {
    2350:	4946      	ldr	r1, [pc, #280]	; (246c <getcurrent()+0x588>)
    2352:	f00a fd1b 	bl	cd8c <__aeabi_fcmpgt>
    2356:	b928      	cbnz	r0, 2364 <getcurrent()+0x480>
    2358:	4945      	ldr	r1, [pc, #276]	; (2470 <getcurrent()+0x58c>)
    235a:	4628      	mov	r0, r5
    235c:	f00a fcf8 	bl	cd50 <__aeabi_fcmplt>
    2360:	2800      	cmp	r0, #0
    2362:	d05a      	beq.n	241a <getcurrent()+0x536>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2364:	4f3d      	ldr	r7, [pc, #244]	; (245c <getcurrent()+0x578>)
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2366:	4c3e      	ldr	r4, [pc, #248]	; (2460 <getcurrent()+0x57c>)
    2368:	683b      	ldr	r3, [r7, #0]
    236a:	9304      	str	r3, [sp, #16]
	return ret;
    236c:	9804      	ldr	r0, [sp, #16]
    236e:	6823      	ldr	r3, [r4, #0]
    2370:	f8df 8100 	ldr.w	r8, [pc, #256]	; 2474 <getcurrent()+0x590>
    2374:	1ac0      	subs	r0, r0, r3
    2376:	f00a faf5 	bl	c964 <__aeabi_ui2f>
    237a:	4629      	mov	r1, r5
    237c:	f00a fb4a 	bl	ca14 <__aeabi_fmul>
    2380:	493d      	ldr	r1, [pc, #244]	; (2478 <getcurrent()+0x594>)
    2382:	f00a fbfb 	bl	cb7c <__aeabi_fdiv>
    2386:	493c      	ldr	r1, [pc, #240]	; (2478 <getcurrent()+0x594>)
    2388:	f00a fbf8 	bl	cb7c <__aeabi_fdiv>
    238c:	f8d8 1000 	ldr.w	r1, [r8]
    2390:	f00a fa38 	bl	c804 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2394:	683b      	ldr	r3, [r7, #0]
    2396:	9303      	str	r3, [sp, #12]
	return ret;
    2398:	9b03      	ldr	r3, [sp, #12]
    239a:	f8c8 0000 	str.w	r0, [r8]
        lasttime = millis();
    239e:	6023      	str	r3, [r4, #0]
    23a0:	e5f0      	b.n	1f84 <getcurrent()+0xa0>
        SERIALCONSOLE.println();
    23a2:	482c      	ldr	r0, [pc, #176]	; (2454 <getcurrent()+0x570>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    23a4:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2444 <getcurrent()+0x560>
        SERIALCONSOLE.println();
    23a8:	f006 ff10 	bl	91cc <Print::println()>
        if (settings.cursens == Analoguedual) {
    23ac:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    23b0:	2b01      	cmp	r3, #1
    23b2:	bf0c      	ite	eq
    23b4:	4831      	ldreq	r0, [pc, #196]	; (247c <getcurrent()+0x598>)
    23b6:	4832      	ldrne	r0, [pc, #200]	; (2480 <getcurrent()+0x59c>)
    23b8:	210b      	movs	r1, #11
    23ba:	f009 fc4b 	bl	bc54 <usb_serial_write>
    23be:	482a      	ldr	r0, [pc, #168]	; (2468 <getcurrent()+0x584>)
    23c0:	210c      	movs	r1, #12
    23c2:	f009 fc47 	bl	bc54 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    23c6:	f8d8 2000 	ldr.w	r2, [r8]
      if (debugCur != 0) {
    23ca:	682b      	ldr	r3, [r5, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    23cc:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    23d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    23d2:	6916      	ldr	r6, [r2, #16]
    23d4:	b2b6      	uxth	r6, r6
    23d6:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    23da:	2b00      	cmp	r3, #0
    23dc:	f43f aefd 	beq.w	21da <getcurrent()+0x2f6>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    23e0:	f006 f89e 	bl	8520 <ADC_Module::getMaxValue()>
    23e4:	f640 43e4 	movw	r3, #3300	; 0xce4
    23e8:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    23ec:	220a      	movs	r2, #10
    23ee:	fbb3 f1f0 	udiv	r1, r3, r0
    23f2:	2300      	movs	r3, #0
    23f4:	4817      	ldr	r0, [pc, #92]	; (2454 <getcurrent()+0x570>)
    23f6:	f006 ff01 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    23fa:	2101      	movs	r1, #1
    23fc:	4821      	ldr	r0, [pc, #132]	; (2484 <getcurrent()+0x5a0>)
    23fe:	f009 fc29 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    2402:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    2406:	4813      	ldr	r0, [pc, #76]	; (2454 <getcurrent()+0x570>)
    2408:	f006 fed8 	bl	91bc <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.0001);
    240c:	f8d8 3000 	ldr.w	r3, [r8]
    2410:	f8d9 6000 	ldr.w	r6, [r9]
    2414:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2418:	e6df      	b.n	21da <getcurrent()+0x2f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    241a:	4a10      	ldr	r2, [pc, #64]	; (245c <getcurrent()+0x578>)
        lasttime = millis();
    241c:	4b10      	ldr	r3, [pc, #64]	; (2460 <getcurrent()+0x57c>)
    241e:	6812      	ldr	r2, [r2, #0]
    2420:	9205      	str	r2, [sp, #20]
	return ret;
    2422:	9a05      	ldr	r2, [sp, #20]
    2424:	601a      	str	r2, [r3, #0]
    2426:	e5ad      	b.n	1f84 <getcurrent()+0xa0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2428:	4a0c      	ldr	r2, [pc, #48]	; (245c <getcurrent()+0x578>)
        lasttime = millis();
    242a:	4b0d      	ldr	r3, [pc, #52]	; (2460 <getcurrent()+0x57c>)
    242c:	6812      	ldr	r2, [r2, #0]
    242e:	9208      	str	r2, [sp, #32]
	return ret;
    2430:	9a08      	ldr	r2, [sp, #32]
    2432:	601a      	str	r2, [r3, #0]
    2434:	e5a6      	b.n	1f84 <getcurrent()+0xa0>
    2436:	bf00      	nop
    2438:	1fff91c4 	.word	0x1fff91c4
    243c:	1fff887c 	.word	0x1fff887c
    2440:	1fffccd0 	.word	0x1fffccd0
    2444:	1fffcecc 	.word	0x1fffcecc
    2448:	38d1b717 	.word	0x38d1b717
    244c:	1fff91ac 	.word	0x1fff91ac
    2450:	00014a64 	.word	0x00014a64
    2454:	1fff8a04 	.word	0x1fff8a04
    2458:	00013dc0 	.word	0x00013dc0
    245c:	1fffd0e4 	.word	0x1fffd0e4
    2460:	1fffcd08 	.word	0x1fffcd08
    2464:	00013dc4 	.word	0x00013dc4
    2468:	00013db0 	.word	0x00013db0
    246c:	43fa0000 	.word	0x43fa0000
    2470:	c3fa0000 	.word	0xc3fa0000
    2474:	1fff91cc 	.word	0x1fff91cc
    2478:	447a0000 	.word	0x447a0000
    247c:	00013d98 	.word	0x00013d98
    2480:	00013da4 	.word	0x00013da4
    2484:	00014b80 	.word	0x00014b80

00002488 <updateSOC()>:
void updateSOC() {
    2488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCset == 0 && SOCmem == 0) {
    248c:	4a8d      	ldr	r2, [pc, #564]	; (26c4 <updateSOC()+0x23c>)
    248e:	4d8e      	ldr	r5, [pc, #568]	; (26c8 <updateSOC()+0x240>)
    2490:	6812      	ldr	r2, [r2, #0]
    2492:	682b      	ldr	r3, [r5, #0]
    2494:	4313      	orrs	r3, r2
void updateSOC() {
    2496:	b084      	sub	sp, #16
  if (SOCset == 0 && SOCmem == 0) {
    2498:	d13b      	bne.n	2512 <updateSOC()+0x8a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    249a:	4e8c      	ldr	r6, [pc, #560]	; (26cc <updateSOC()+0x244>)
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    249c:	4c8c      	ldr	r4, [pc, #560]	; (26d0 <updateSOC()+0x248>)
    249e:	6832      	ldr	r2, [r6, #0]
    24a0:	9202      	str	r2, [sp, #8]
	return ret;
    24a2:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    24a4:	f242 3328 	movw	r3, #9000	; 0x2328
    24a8:	429a      	cmp	r2, r3
    24aa:	f200 80c5 	bhi.w	2638 <updateSOC()+0x1b0>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    24ae:	6833      	ldr	r3, [r6, #0]
    24b0:	9303      	str	r3, [sp, #12]
	return ret;
    24b2:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    24b4:	f242 7310 	movw	r3, #10000	; 0x2710
    24b8:	429a      	cmp	r2, r3
    24ba:	f200 80c6 	bhi.w	264a <updateSOC()+0x1c2>
  if (settings.voltsoc == 1) {
    24be:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    24c2:	4e84      	ldr	r6, [pc, #528]	; (26d4 <updateSOC()+0x24c>)
    24c4:	4f84      	ldr	r7, [pc, #528]	; (26d8 <updateSOC()+0x250>)
    24c6:	f8df 8214 	ldr.w	r8, [pc, #532]	; 26dc <updateSOC()+0x254>
    24ca:	2b01      	cmp	r3, #1
    24cc:	d12a      	bne.n	2524 <updateSOC()+0x9c>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    24ce:	4884      	ldr	r0, [pc, #528]	; (26e0 <updateSOC()+0x258>)
    24d0:	f7fe fc5c 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    24d4:	4983      	ldr	r1, [pc, #524]	; (26e4 <updateSOC()+0x25c>)
    24d6:	f00a fa9d 	bl	ca14 <__aeabi_fmul>
    24da:	f00a fc87 	bl	cdec <__aeabi_f2uiz>
    24de:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
    24e0:	6f63      	ldr	r3, [r4, #116]	; 0x74
    24e2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
    24e4:	6f21      	ldr	r1, [r4, #112]	; 0x70
    24e6:	9500      	str	r5, [sp, #0]
    24e8:	b280      	uxth	r0, r0
    24ea:	f7ff f859 	bl	15a0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    24ee:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    24f2:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    24f4:	fb0a f000 	mul.w	r0, sl, r0
    24f8:	fb05 f000 	mul.w	r0, r5, r0
    24fc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2500:	0040      	lsls	r0, r0, #1
    2502:	f00a fa33 	bl	c96c <__aeabi_i2f>
    2506:	4978      	ldr	r1, [pc, #480]	; (26e8 <updateSOC()+0x260>)
    2508:	f00a fb38 	bl	cb7c <__aeabi_fdiv>
    250c:	4681      	mov	r9, r0
    250e:	6038      	str	r0, [r7, #0]
    2510:	e00d      	b.n	252e <updateSOC()+0xa6>
    2512:	4c6f      	ldr	r4, [pc, #444]	; (26d0 <updateSOC()+0x248>)
    2514:	4e6f      	ldr	r6, [pc, #444]	; (26d4 <updateSOC()+0x24c>)
    2516:	4f70      	ldr	r7, [pc, #448]	; (26d8 <updateSOC()+0x250>)
    2518:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 26dc <updateSOC()+0x254>
  if (settings.voltsoc == 1) {
    251c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
    2520:	2b01      	cmp	r3, #1
    2522:	d0d4      	beq.n	24ce <updateSOC()+0x46>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    2524:	f8d7 9000 	ldr.w	r9, [r7]
    2528:	f8d4 a060 	ldr.w	sl, [r4, #96]	; 0x60
    252c:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    252e:	fb0a f505 	mul.w	r5, sl, r5
    2532:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2536:	fb05 f000 	mul.w	r0, r5, r0
    253a:	f00a fa17 	bl	c96c <__aeabi_i2f>
    253e:	496a      	ldr	r1, [pc, #424]	; (26e8 <updateSOC()+0x260>)
    2540:	4605      	mov	r5, r0
    2542:	4648      	mov	r0, r9
    2544:	f00a fa66 	bl	ca14 <__aeabi_fmul>
    2548:	4629      	mov	r1, r5
    254a:	f00a fb17 	bl	cb7c <__aeabi_fdiv>
    254e:	4967      	ldr	r1, [pc, #412]	; (26ec <updateSOC()+0x264>)
    2550:	f00a fa60 	bl	ca14 <__aeabi_fmul>
    2554:	f00a fc24 	bl	cda0 <__aeabi_f2iz>
  if (SOC >= 100) {
    2558:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    255a:	6030      	str	r0, [r6, #0]
  if (SOC >= 100) {
    255c:	dd47      	ble.n	25ee <updateSOC()+0x166>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    255e:	4962      	ldr	r1, [pc, #392]	; (26e8 <updateSOC()+0x260>)
    2560:	4628      	mov	r0, r5
    2562:	f00a fb0b 	bl	cb7c <__aeabi_fdiv>
    SOC = 100;
    2566:	2364      	movs	r3, #100	; 0x64
    2568:	6033      	str	r3, [r6, #0]
  if (debug != 0) {
    256a:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    256e:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    2570:	2b00      	cmp	r3, #0
    2572:	d044      	beq.n	25fe <updateSOC()+0x176>
    if (settings.cursens == Analoguedual) {
    2574:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    2578:	2b01      	cmp	r3, #1
    257a:	d043      	beq.n	2604 <updateSOC()+0x17c>
    if (settings.cursens == Analoguesing) {
    257c:	2b03      	cmp	r3, #3
    257e:	d04e      	beq.n	261e <updateSOC()+0x196>
    if (settings.cursens == Canbus) {
    2580:	2b02      	cmp	r3, #2
    2582:	d054      	beq.n	262e <updateSOC()+0x1a6>
    2584:	2102      	movs	r1, #2
    2586:	485a      	ldr	r0, [pc, #360]	; (26f0 <updateSOC()+0x268>)
    2588:	f009 fb64 	bl	bc54 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    258c:	4b59      	ldr	r3, [pc, #356]	; (26f4 <updateSOC()+0x26c>)
    258e:	6818      	ldr	r0, [r3, #0]
    2590:	f00a f81c 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2594:	2402      	movs	r4, #2
    2596:	4602      	mov	r2, r0
    2598:	460b      	mov	r3, r1
    259a:	9400      	str	r4, [sp, #0]
    259c:	4856      	ldr	r0, [pc, #344]	; (26f8 <updateSOC()+0x270>)
    259e:	f006 fe37 	bl	9210 <Print::printFloat(double, unsigned char)>
    25a2:	4621      	mov	r1, r4
    25a4:	4855      	ldr	r0, [pc, #340]	; (26fc <updateSOC()+0x274>)
    25a6:	f009 fb55 	bl	bc54 <usb_serial_write>
    25aa:	4621      	mov	r1, r4
    25ac:	4850      	ldr	r0, [pc, #320]	; (26f0 <updateSOC()+0x268>)
    25ae:	f009 fb51 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    25b2:	6831      	ldr	r1, [r6, #0]
    25b4:	4850      	ldr	r0, [pc, #320]	; (26f8 <updateSOC()+0x270>)
    25b6:	f006 fe01 	bl	91bc <Print::print(long)>
    25ba:	2106      	movs	r1, #6
    25bc:	4850      	ldr	r0, [pc, #320]	; (2700 <updateSOC()+0x278>)
    25be:	f009 fb49 	bl	bc54 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    25c2:	6838      	ldr	r0, [r7, #0]
    25c4:	4948      	ldr	r1, [pc, #288]	; (26e8 <updateSOC()+0x260>)
    25c6:	f00a fa25 	bl	ca14 <__aeabi_fmul>
    25ca:	f009 ffff 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    25ce:	9400      	str	r4, [sp, #0]
    25d0:	4602      	mov	r2, r0
    25d2:	460b      	mov	r3, r1
    25d4:	4848      	ldr	r0, [pc, #288]	; (26f8 <updateSOC()+0x270>)
    25d6:	f006 fe1b 	bl	9210 <Print::printFloat(double, unsigned char)>
    25da:	2103      	movs	r1, #3
    25dc:	4849      	ldr	r0, [pc, #292]	; (2704 <updateSOC()+0x27c>)
    25de:	f009 fb39 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    25e2:	4845      	ldr	r0, [pc, #276]	; (26f8 <updateSOC()+0x270>)
}
    25e4:	b004      	add	sp, #16
    25e6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    25ea:	f006 bdef 	b.w	91cc <Print::println()>
  if (SOC < 0) {
    25ee:	2800      	cmp	r0, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    25f0:	bfbc      	itt	lt
    25f2:	2300      	movlt	r3, #0
    25f4:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    25f6:	f8d8 3000 	ldr.w	r3, [r8]
    25fa:	2b00      	cmp	r3, #0
    25fc:	d1ba      	bne.n	2574 <updateSOC()+0xec>
}
    25fe:	b004      	add	sp, #16
    2600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (sensor == 1) {
    2604:	4b40      	ldr	r3, [pc, #256]	; (2708 <updateSOC()+0x280>)
    2606:	681b      	ldr	r3, [r3, #0]
    2608:	2b01      	cmp	r3, #1
    260a:	bf0c      	ite	eq
    260c:	483f      	ldreq	r0, [pc, #252]	; (270c <updateSOC()+0x284>)
    260e:	4840      	ldrne	r0, [pc, #256]	; (2710 <updateSOC()+0x288>)
    2610:	210a      	movs	r1, #10
    2612:	f009 fb1f 	bl	bc54 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    2616:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    261a:	2b03      	cmp	r3, #3
    261c:	d1b0      	bne.n	2580 <updateSOC()+0xf8>
    261e:	483d      	ldr	r0, [pc, #244]	; (2714 <updateSOC()+0x28c>)
    2620:	2110      	movs	r1, #16
    2622:	f009 fb17 	bl	bc54 <usb_serial_write>
    if (settings.cursens == Canbus) {
    2626:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    262a:	2b02      	cmp	r3, #2
    262c:	d1aa      	bne.n	2584 <updateSOC()+0xfc>
    262e:	2107      	movs	r1, #7
    2630:	4839      	ldr	r0, [pc, #228]	; (2718 <updateSOC()+0x290>)
    2632:	f009 fb0f 	bl	bc54 <usb_serial_write>
    2636:	e7a5      	b.n	2584 <updateSOC()+0xfc>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    2638:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    263c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
    263e:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    2642:	4827      	ldr	r0, [pc, #156]	; (26e0 <updateSOC()+0x258>)
    2644:	f7fe fbf2 	bl	e2c <BMSModuleManager::setSensors(int, float, int)>
    2648:	e731      	b.n	24ae <updateSOC()+0x26>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    264a:	4825      	ldr	r0, [pc, #148]	; (26e0 <updateSOC()+0x258>)
      if (debug != 0) {
    264c:	f8df 808c 	ldr.w	r8, [pc, #140]	; 26dc <updateSOC()+0x254>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2650:	f7fe fb9c 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    2654:	4923      	ldr	r1, [pc, #140]	; (26e4 <updateSOC()+0x25c>)
    2656:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    2658:	6f67      	ldr	r7, [r4, #116]	; 0x74
    265a:	f00a f9db 	bl	ca14 <__aeabi_fmul>
    265e:	f00a fbc5 	bl	cdec <__aeabi_f2uiz>
    2662:	4632      	mov	r2, r6
    2664:	6fe6      	ldr	r6, [r4, #124]	; 0x7c
    2666:	6f21      	ldr	r1, [r4, #112]	; 0x70
    2668:	9600      	str	r6, [sp, #0]
    266a:	463b      	mov	r3, r7
    266c:	b280      	uxth	r0, r0
    266e:	f7fe ff97 	bl	15a0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    2672:	4e18      	ldr	r6, [pc, #96]	; (26d4 <updateSOC()+0x24c>)
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2674:	6e23      	ldr	r3, [r4, #96]	; 0x60
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    2676:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2678:	fb03 f000 	mul.w	r0, r3, r0
    267c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    267e:	4f16      	ldr	r7, [pc, #88]	; (26d8 <updateSOC()+0x250>)
    2680:	fb03 f000 	mul.w	r0, r3, r0
    2684:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2688:	0040      	lsls	r0, r0, #1
    268a:	f00a f96f 	bl	c96c <__aeabi_i2f>
    268e:	4916      	ldr	r1, [pc, #88]	; (26e8 <updateSOC()+0x260>)
    2690:	f00a fa74 	bl	cb7c <__aeabi_fdiv>
      if (debug != 0) {
    2694:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    2698:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    269a:	2201      	movs	r2, #1
    269c:	602a      	str	r2, [r5, #0]
      if (debug != 0) {
    269e:	2b00      	cmp	r3, #0
    26a0:	f43f af3c 	beq.w	251c <updateSOC()+0x94>
    26a4:	2102      	movs	r1, #2
    26a6:	4812      	ldr	r0, [pc, #72]	; (26f0 <updateSOC()+0x268>)
    26a8:	f009 fad4 	bl	bc54 <usb_serial_write>
    26ac:	4812      	ldr	r0, [pc, #72]	; (26f8 <updateSOC()+0x270>)
    26ae:	f006 fd8d 	bl	91cc <Print::println()>
    26b2:	2159      	movs	r1, #89	; 0x59
    26b4:	4819      	ldr	r0, [pc, #100]	; (271c <updateSOC()+0x294>)
    26b6:	f009 facd 	bl	bc54 <usb_serial_write>
    26ba:	480f      	ldr	r0, [pc, #60]	; (26f8 <updateSOC()+0x270>)
    26bc:	f006 fd86 	bl	91cc <Print::println()>
    26c0:	e72c      	b.n	251c <updateSOC()+0x94>
    26c2:	bf00      	nop
    26c4:	1fff91b0 	.word	0x1fff91b0
    26c8:	1fff91b4 	.word	0x1fff91b4
    26cc:	1fffd0e4 	.word	0x1fffd0e4
    26d0:	1fffcde8 	.word	0x1fffcde8
    26d4:	1fff8828 	.word	0x1fff8828
    26d8:	1fff91cc 	.word	0x1fff91cc
    26dc:	1fff8850 	.word	0x1fff8850
    26e0:	1fff91e0 	.word	0x1fff91e0
    26e4:	447a0000 	.word	0x447a0000
    26e8:	3e8e38e4 	.word	0x3e8e38e4
    26ec:	42c80000 	.word	0x42c80000
    26f0:	00014a64 	.word	0x00014a64
    26f4:	1fffcccc 	.word	0x1fffcccc
    26f8:	1fff8a04 	.word	0x1fff8a04
    26fc:	00013dd4 	.word	0x00013dd4
    2700:	00013e68 	.word	0x00013e68
    2704:	00013e70 	.word	0x00013e70
    2708:	1fff887c 	.word	0x1fff887c
    270c:	00013e34 	.word	0x00013e34
    2710:	00013e40 	.word	0x00013e40
    2714:	00013e4c 	.word	0x00013e4c
    2718:	00013e60 	.word	0x00013e60
    271c:	00013dd8 	.word	0x00013dd8

00002720 <Prechargecon()>:
void Prechargecon() {
    2720:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2722:	2011      	movs	r0, #17
void Prechargecon() {
    2724:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    2726:	f007 fc49 	bl	9fbc <digitalRead>
    272a:	2801      	cmp	r0, #1
    272c:	d004      	beq.n	2738 <Prechargecon()+0x18>
    272e:	2012      	movs	r0, #18
    2730:	f007 fc44 	bl	9fbc <digitalRead>
    2734:	2801      	cmp	r0, #1
    2736:	d122      	bne.n	277e <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    2738:	2101      	movs	r1, #1
    273a:	2015      	movs	r0, #21
    273c:	f007 fc18 	bl	9f70 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2740:	4b2a      	ldr	r3, [pc, #168]	; (27ec <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2742:	4a2b      	ldr	r2, [pc, #172]	; (27f0 <Prechargecon()+0xd0>)
    2744:	4c2b      	ldr	r4, [pc, #172]	; (27f4 <Prechargecon()+0xd4>)
    2746:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    2748:	4d2b      	ldr	r5, [pc, #172]	; (27f8 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    274a:	6811      	ldr	r1, [r2, #0]
    274c:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    274e:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2750:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    contctrl = 2;
    2754:	602a      	str	r2, [r5, #0]
	return ret;
    2756:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    2758:	440b      	add	r3, r1
    275a:	4293      	cmp	r3, r2
    275c:	d808      	bhi.n	2770 <Prechargecon()+0x50>
    275e:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    2762:	f00a f903 	bl	c96c <__aeabi_i2f>
    2766:	4b25      	ldr	r3, [pc, #148]	; (27fc <Prechargecon()+0xdc>)
    2768:	6819      	ldr	r1, [r3, #0]
    276a:	f00a faf1 	bl	cd50 <__aeabi_fcmplt>
    276e:	b1d0      	cbz	r0, 27a6 <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    2770:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    2772:	200c      	movs	r0, #12
}
    2774:	b003      	add	sp, #12
    2776:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    277a:	f007 bbf9 	b.w	9f70 <digitalWrite>
    digitalWrite(OUT1, LOW);
    277e:	2100      	movs	r1, #0
    2780:	200b      	movs	r0, #11
    2782:	f007 fbf5 	bl	9f70 <digitalWrite>
    digitalWrite(OUT2, LOW);
    2786:	2100      	movs	r1, #0
    2788:	200c      	movs	r0, #12
    278a:	f007 fbf1 	bl	9f70 <digitalWrite>
    digitalWrite(OUT4, LOW);
    278e:	2100      	movs	r1, #0
    2790:	2015      	movs	r0, #21
    2792:	f007 fbed 	bl	9f70 <digitalWrite>
    bmsstatus = Ready;
    2796:	491a      	ldr	r1, [pc, #104]	; (2800 <Prechargecon()+0xe0>)
    contctrl = 0;
    2798:	4b17      	ldr	r3, [pc, #92]	; (27f8 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    279a:	2001      	movs	r0, #1
    contctrl = 0;
    279c:	2200      	movs	r2, #0
    bmsstatus = Ready;
    279e:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    27a0:	601a      	str	r2, [r3, #0]
}
    27a2:	b003      	add	sp, #12
    27a4:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    27a6:	2101      	movs	r1, #1
    27a8:	200b      	movs	r0, #11
    27aa:	f007 fbe1 	bl	9f70 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    27ae:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
      contctrl = 3;
    27b2:	2403      	movs	r4, #3
    27b4:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    27b6:	b14b      	cbz	r3, 27cc <Prechargecon()+0xac>
        bmsstatus = Drive;
    27b8:	4b11      	ldr	r3, [pc, #68]	; (2800 <Prechargecon()+0xe0>)
    27ba:	2202      	movs	r2, #2
    27bc:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    27be:	2100      	movs	r1, #0
    27c0:	200c      	movs	r0, #12
}
    27c2:	b003      	add	sp, #12
    27c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    27c8:	f007 bbd2 	b.w	9f70 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    27cc:	2012      	movs	r0, #18
    27ce:	f007 fbf5 	bl	9fbc <digitalRead>
    27d2:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    27d4:	bf08      	it	eq
    27d6:	4b0a      	ldreq	r3, [pc, #40]	; (2800 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    27d8:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    27dc:	bf08      	it	eq
    27de:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    27e0:	f007 fbec 	bl	9fbc <digitalRead>
    27e4:	2801      	cmp	r0, #1
    27e6:	d1ea      	bne.n	27be <Prechargecon()+0x9e>
    27e8:	e7e6      	b.n	27b8 <Prechargecon()+0x98>
    27ea:	bf00      	nop
    27ec:	1fffd0e4 	.word	0x1fffd0e4
    27f0:	1fff91a4 	.word	0x1fff91a4
    27f4:	1fffcde8 	.word	0x1fffcde8
    27f8:	1fffcbb8 	.word	0x1fffcbb8
    27fc:	1fffcccc 	.word	0x1fffcccc
    2800:	1fffcb34 	.word	0x1fffcb34

00002804 <contcon()>:
void contcon() {
    2804:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    2806:	4e71      	ldr	r6, [pc, #452]	; (29cc <contcon()+0x1c8>)
    2808:	4c71      	ldr	r4, [pc, #452]	; (29d0 <contcon()+0x1cc>)
    280a:	6833      	ldr	r3, [r6, #0]
    280c:	6825      	ldr	r5, [r4, #0]
    280e:	42ab      	cmp	r3, r5
void contcon() {
    2810:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    2812:	d02d      	beq.n	2870 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    2814:	f013 0101 	ands.w	r1, r3, #1
    2818:	d04b      	beq.n	28b2 <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    281a:	f013 0102 	ands.w	r1, r3, #2
    281e:	d05f      	beq.n	28e0 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    2820:	f013 0104 	ands.w	r1, r3, #4
    2824:	d051      	beq.n	28ca <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    2826:	07da      	lsls	r2, r3, #31
    2828:	d50e      	bpl.n	2848 <contcon()+0x44>
      if ((contstat & 1) != 1) {
    282a:	6822      	ldr	r2, [r4, #0]
    282c:	07d7      	lsls	r7, r2, #31
    282e:	d40b      	bmi.n	2848 <contcon()+0x44>
        if (conttimer1 == 0) {
    2830:	4d68      	ldr	r5, [pc, #416]	; (29d4 <contcon()+0x1d0>)
    2832:	682a      	ldr	r2, [r5, #0]
    2834:	2a00      	cmp	r2, #0
    2836:	f000 8093 	beq.w	2960 <contcon()+0x15c>
    283a:	4b67      	ldr	r3, [pc, #412]	; (29d8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    283c:	681b      	ldr	r3, [r3, #0]
    283e:	9301      	str	r3, [sp, #4]
	return ret;
    2840:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    2842:	4293      	cmp	r3, r2
    2844:	d87f      	bhi.n	2946 <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    2846:	6833      	ldr	r3, [r6, #0]
    2848:	079d      	lsls	r5, r3, #30
    284a:	d414      	bmi.n	2876 <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    284c:	0759      	lsls	r1, r3, #29
    284e:	d522      	bpl.n	2896 <contcon()+0x92>
      if ((contstat & 4) != 4) {
    2850:	6822      	ldr	r2, [r4, #0]
    2852:	0752      	lsls	r2, r2, #29
    2854:	d40d      	bmi.n	2872 <contcon()+0x6e>
        if (conttimer3 == 0) {
    2856:	4f61      	ldr	r7, [pc, #388]	; (29dc <contcon()+0x1d8>)
    2858:	683a      	ldr	r2, [r7, #0]
    285a:	2a00      	cmp	r2, #0
    285c:	f000 809e 	beq.w	299c <contcon()+0x198>
    2860:	4b5d      	ldr	r3, [pc, #372]	; (29d8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2862:	681b      	ldr	r3, [r3, #0]
    2864:	9305      	str	r3, [sp, #20]
	return ret;
    2866:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    2868:	4293      	cmp	r3, r2
    286a:	f200 8086 	bhi.w	297a <contcon()+0x176>
  if (contctrl == 0) {
    286e:	6835      	ldr	r5, [r6, #0]
    2870:	b1a5      	cbz	r5, 289c <contcon()+0x98>
}
    2872:	b007      	add	sp, #28
    2874:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    2876:	6822      	ldr	r2, [r4, #0]
    2878:	0790      	lsls	r0, r2, #30
    287a:	d43d      	bmi.n	28f8 <contcon()+0xf4>
        if (conttimer2 == 0) {
    287c:	4d58      	ldr	r5, [pc, #352]	; (29e0 <contcon()+0x1dc>)
    287e:	682a      	ldr	r2, [r5, #0]
    2880:	2a00      	cmp	r2, #0
    2882:	d049      	beq.n	2918 <contcon()+0x114>
    2884:	4b54      	ldr	r3, [pc, #336]	; (29d8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2886:	681b      	ldr	r3, [r3, #0]
    2888:	9303      	str	r3, [sp, #12]
	return ret;
    288a:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    288c:	429a      	cmp	r2, r3
    288e:	d336      	bcc.n	28fe <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    2890:	6833      	ldr	r3, [r6, #0]
    2892:	0759      	lsls	r1, r3, #29
    2894:	d4dc      	bmi.n	2850 <contcon()+0x4c>
    2896:	461d      	mov	r5, r3
  if (contctrl == 0) {
    2898:	2d00      	cmp	r5, #0
    289a:	d1ea      	bne.n	2872 <contcon()+0x6e>
    analogWrite(OUT5, 0);
    289c:	4629      	mov	r1, r5
    289e:	2016      	movs	r0, #22
    28a0:	f007 f9ea 	bl	9c78 <analogWrite>
    analogWrite(OUT6, 0);
    28a4:	4629      	mov	r1, r5
    28a6:	2017      	movs	r0, #23
}
    28a8:	b007      	add	sp, #28
    28aa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    28ae:	f007 b9e3 	b.w	9c78 <analogWrite>
      analogWrite(OUT5, 0);
    28b2:	2016      	movs	r0, #22
    28b4:	f007 f9e0 	bl	9c78 <analogWrite>
      contstat = contstat & 254;
    28b8:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    28ba:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    28bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    28c0:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    28c4:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    28c6:	d1ab      	bne.n	2820 <contcon()+0x1c>
    28c8:	e00a      	b.n	28e0 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    28ca:	2005      	movs	r0, #5
    28cc:	f007 f9d4 	bl	9c78 <analogWrite>
      contstat = contstat & 251;
    28d0:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    28d2:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    28d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    28d8:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    28da:	07da      	lsls	r2, r3, #31
    28dc:	d5b4      	bpl.n	2848 <contcon()+0x44>
    28de:	e7a4      	b.n	282a <contcon()+0x26>
      analogWrite(OUT6, 0);
    28e0:	2017      	movs	r0, #23
    28e2:	f007 f9c9 	bl	9c78 <analogWrite>
      contstat = contstat & 253;
    28e6:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    28e8:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    28ea:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    28ee:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    28f2:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    28f4:	d197      	bne.n	2826 <contcon()+0x22>
    28f6:	e7e8      	b.n	28ca <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    28f8:	075b      	lsls	r3, r3, #29
    28fa:	d4aa      	bmi.n	2852 <contcon()+0x4e>
    28fc:	e7b9      	b.n	2872 <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    28fe:	4b39      	ldr	r3, [pc, #228]	; (29e4 <contcon()+0x1e0>)
    2900:	2017      	movs	r0, #23
    2902:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    2906:	f007 f9b7 	bl	9c78 <analogWrite>
          contstat = contstat | 2;
    290a:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    290c:	2200      	movs	r2, #0
          contstat = contstat | 2;
    290e:	f043 0302 	orr.w	r3, r3, #2
    2912:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    2914:	602a      	str	r2, [r5, #0]
    2916:	e7bb      	b.n	2890 <contcon()+0x8c>
          Serial.println();
    2918:	4833      	ldr	r0, [pc, #204]	; (29e8 <contcon()+0x1e4>)
    291a:	f006 fc57 	bl	91cc <Print::println()>
    291e:	210c      	movs	r1, #12
    2920:	4832      	ldr	r0, [pc, #200]	; (29ec <contcon()+0x1e8>)
    2922:	f009 f997 	bl	bc54 <usb_serial_write>
    2926:	4830      	ldr	r0, [pc, #192]	; (29e8 <contcon()+0x1e4>)
    2928:	f006 fc50 	bl	91cc <Print::println()>
          analogWrite(OUT6, 255);
    292c:	21ff      	movs	r1, #255	; 0xff
    292e:	2017      	movs	r0, #23
    2930:	f007 f9a2 	bl	9c78 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2934:	4b28      	ldr	r3, [pc, #160]	; (29d8 <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    2936:	492e      	ldr	r1, [pc, #184]	; (29f0 <contcon()+0x1ec>)
    2938:	681a      	ldr	r2, [r3, #0]
    293a:	9202      	str	r2, [sp, #8]
	return ret;
    293c:	9a02      	ldr	r2, [sp, #8]
    293e:	6809      	ldr	r1, [r1, #0]
    2940:	440a      	add	r2, r1
    2942:	602a      	str	r2, [r5, #0]
    2944:	e79f      	b.n	2886 <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    2946:	4b27      	ldr	r3, [pc, #156]	; (29e4 <contcon()+0x1e0>)
    2948:	2016      	movs	r0, #22
    294a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    294e:	f007 f993 	bl	9c78 <analogWrite>
          contstat = contstat | 1;
    2952:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    2954:	2200      	movs	r2, #0
          contstat = contstat | 1;
    2956:	f043 0301 	orr.w	r3, r3, #1
    295a:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    295c:	602a      	str	r2, [r5, #0]
    295e:	e772      	b.n	2846 <contcon()+0x42>
          analogWrite(OUT5, 255);
    2960:	21ff      	movs	r1, #255	; 0xff
    2962:	2016      	movs	r0, #22
    2964:	f007 f988 	bl	9c78 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2968:	4b1b      	ldr	r3, [pc, #108]	; (29d8 <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    296a:	4921      	ldr	r1, [pc, #132]	; (29f0 <contcon()+0x1ec>)
    296c:	681a      	ldr	r2, [r3, #0]
    296e:	9200      	str	r2, [sp, #0]
	return ret;
    2970:	9a00      	ldr	r2, [sp, #0]
    2972:	6809      	ldr	r1, [r1, #0]
    2974:	440a      	add	r2, r1
    2976:	602a      	str	r2, [r5, #0]
    2978:	e760      	b.n	283c <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    297a:	4b1a      	ldr	r3, [pc, #104]	; (29e4 <contcon()+0x1e0>)
    297c:	2005      	movs	r0, #5
    297e:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
    2982:	f007 f979 	bl	9c78 <analogWrite>
          contstat = contstat | 4;
    2986:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    2988:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    298a:	2200      	movs	r2, #0
          contstat = contstat | 4;
    298c:	f043 0304 	orr.w	r3, r3, #4
    2990:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    2992:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    2994:	2d00      	cmp	r5, #0
    2996:	f47f af6c 	bne.w	2872 <contcon()+0x6e>
    299a:	e77f      	b.n	289c <contcon()+0x98>
          Serial.println();
    299c:	4812      	ldr	r0, [pc, #72]	; (29e8 <contcon()+0x1e4>)
    299e:	f006 fc15 	bl	91cc <Print::println()>
    29a2:	210c      	movs	r1, #12
    29a4:	4813      	ldr	r0, [pc, #76]	; (29f4 <contcon()+0x1f0>)
    29a6:	f009 f955 	bl	bc54 <usb_serial_write>
    29aa:	480f      	ldr	r0, [pc, #60]	; (29e8 <contcon()+0x1e4>)
    29ac:	f006 fc0e 	bl	91cc <Print::println()>
          analogWrite(OUT7, 255);
    29b0:	21ff      	movs	r1, #255	; 0xff
    29b2:	2005      	movs	r0, #5
    29b4:	f007 f960 	bl	9c78 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    29b8:	4b07      	ldr	r3, [pc, #28]	; (29d8 <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    29ba:	490d      	ldr	r1, [pc, #52]	; (29f0 <contcon()+0x1ec>)
    29bc:	681a      	ldr	r2, [r3, #0]
    29be:	9204      	str	r2, [sp, #16]
	return ret;
    29c0:	9a04      	ldr	r2, [sp, #16]
    29c2:	6809      	ldr	r1, [r1, #0]
    29c4:	440a      	add	r2, r1
    29c6:	603a      	str	r2, [r7, #0]
    29c8:	e74b      	b.n	2862 <contcon()+0x5e>
    29ca:	bf00      	nop
    29cc:	1fffcbb8 	.word	0x1fffcbb8
    29d0:	1fffcbbc 	.word	0x1fffcbbc
    29d4:	1fffcbc0 	.word	0x1fffcbc0
    29d8:	1fffd0e4 	.word	0x1fffd0e4
    29dc:	1fffcbc8 	.word	0x1fffcbc8
    29e0:	1fffcbc4 	.word	0x1fffcbc4
    29e4:	1fffcde8 	.word	0x1fffcde8
    29e8:	1fff8a04 	.word	0x1fff8a04
    29ec:	00013e74 	.word	0x00013e74
    29f0:	1fff886c 	.word	0x1fff886c
    29f4:	00013e84 	.word	0x00013e84

000029f8 <calcur()>:
void calcur() {
    29f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    29fc:	4e53      	ldr	r6, [pc, #332]	; (2b4c <calcur()+0x154>)
  sensor = 1;
    29fe:	f8df a150 	ldr.w	sl, [pc, #336]	; 2b50 <calcur()+0x158>
  adc->adc0->startContinuous(ACUR1);
    2a02:	6833      	ldr	r3, [r6, #0]
  x = 0;
    2a04:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2b54 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    2a08:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2a0c:	4d52      	ldr	r5, [pc, #328]	; (2b58 <calcur()+0x160>)
    2a0e:	210f      	movs	r1, #15
    2a10:	f006 f83e 	bl	8a90 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    2a14:	2301      	movs	r3, #1
    2a16:	f8ca 3000 	str.w	r3, [sl]
    2a1a:	4850      	ldr	r0, [pc, #320]	; (2b5c <calcur()+0x164>)
  x = 0;
    2a1c:	2300      	movs	r3, #0
    2a1e:	2122      	movs	r1, #34	; 0x22
    2a20:	f8c9 3000 	str.w	r3, [r9]
    2a24:	f009 f916 	bl	bc54 <usb_serial_write>
  while (x < 20) {
    2a28:	f8d9 3000 	ldr.w	r3, [r9]
    2a2c:	2b13      	cmp	r3, #19
    2a2e:	dc21      	bgt.n	2a74 <calcur()+0x7c>
    2a30:	4f4b      	ldr	r7, [pc, #300]	; (2b60 <calcur()+0x168>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    2a32:	f640 48e4 	movw	r8, #3300	; 0xce4
    2a36:	6833      	ldr	r3, [r6, #0]
    2a38:	f8b5 b0a0 	ldrh.w	fp, [r5, #160]	; 0xa0
    2a3c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2a40:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2a42:	691c      	ldr	r4, [r3, #16]
    2a44:	f005 fd6c 	bl	8520 <ADC_Module::getMaxValue()>
    2a48:	b2a4      	uxth	r4, r4
    2a4a:	2101      	movs	r1, #1
    2a4c:	fb08 f404 	mul.w	r4, r8, r4
    2a50:	fbb4 f4f0 	udiv	r4, r4, r0
    2a54:	4638      	mov	r0, r7
    2a56:	44a3      	add	fp, r4
    2a58:	f8a5 b0a0 	strh.w	fp, [r5, #160]	; 0xa0
    2a5c:	f009 f8fa 	bl	bc54 <usb_serial_write>
    delay(100);
    2a60:	2064      	movs	r0, #100	; 0x64
    2a62:	f007 fb15 	bl	a090 <delay>
    x++;
    2a66:	f8d9 3000 	ldr.w	r3, [r9]
    2a6a:	3301      	adds	r3, #1
  while (x < 20) {
    2a6c:	2b13      	cmp	r3, #19
    x++;
    2a6e:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    2a72:	dde0      	ble.n	2a36 <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    2a74:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
    2a78:	493a      	ldr	r1, [pc, #232]	; (2b64 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    2a7a:	483b      	ldr	r0, [pc, #236]	; (2b68 <calcur()+0x170>)
    2a7c:	fba1 2103 	umull	r2, r1, r1, r3
    2a80:	1a5b      	subs	r3, r3, r1
    2a82:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    2a86:	f3c1 110f 	ubfx	r1, r1, #4, #16
    2a8a:	f8a5 10a0 	strh.w	r1, [r5, #160]	; 0xa0
    2a8e:	f006 fb95 	bl	91bc <Print::print(long)>
    2a92:	211d      	movs	r1, #29
    2a94:	4835      	ldr	r0, [pc, #212]	; (2b6c <calcur()+0x174>)
    2a96:	f009 f8dd 	bl	bc54 <usb_serial_write>
    2a9a:	2102      	movs	r1, #2
    2a9c:	4834      	ldr	r0, [pc, #208]	; (2b70 <calcur()+0x178>)
    2a9e:	f009 f8d9 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    2aa2:	4831      	ldr	r0, [pc, #196]	; (2b68 <calcur()+0x170>)
    2aa4:	f006 fb92 	bl	91cc <Print::println()>
  x = 0;
    2aa8:	2200      	movs	r2, #0
  adc->startContinuous(ACUR2, ADC_0);
    2aaa:	210e      	movs	r1, #14
    2aac:	6830      	ldr	r0, [r6, #0]
  x = 0;
    2aae:	f8c9 2000 	str.w	r2, [r9]
  adc->startContinuous(ACUR2, ADC_0);
    2ab2:	f005 fcdf 	bl	8474 <ADC::startContinuous(unsigned char, signed char)>
  sensor = 2;
    2ab6:	2302      	movs	r3, #2
    2ab8:	4828      	ldr	r0, [pc, #160]	; (2b5c <calcur()+0x164>)
    2aba:	f8ca 3000 	str.w	r3, [sl]
    2abe:	2122      	movs	r1, #34	; 0x22
    2ac0:	f009 f8c8 	bl	bc54 <usb_serial_write>
  while (x < 20) {
    2ac4:	f8d9 3000 	ldr.w	r3, [r9]
    2ac8:	2b13      	cmp	r3, #19
    2aca:	dc22      	bgt.n	2b12 <calcur()+0x11a>
    2acc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2b60 <calcur()+0x168>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    2ad0:	f640 47e4 	movw	r7, #3300	; 0xce4
    2ad4:	6833      	ldr	r3, [r6, #0]
    2ad6:	f8b5 a0a2 	ldrh.w	sl, [r5, #162]	; 0xa2
    2ada:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2ade:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2ae0:	691c      	ldr	r4, [r3, #16]
    2ae2:	f005 fd1d 	bl	8520 <ADC_Module::getMaxValue()>
    2ae6:	b2a4      	uxth	r4, r4
    2ae8:	2101      	movs	r1, #1
    2aea:	fb07 f404 	mul.w	r4, r7, r4
    2aee:	fbb4 f4f0 	udiv	r4, r4, r0
    2af2:	4640      	mov	r0, r8
    2af4:	44a2      	add	sl, r4
    2af6:	f8a5 a0a2 	strh.w	sl, [r5, #162]	; 0xa2
    2afa:	f009 f8ab 	bl	bc54 <usb_serial_write>
    delay(100);
    2afe:	2064      	movs	r0, #100	; 0x64
    2b00:	f007 fac6 	bl	a090 <delay>
    x++;
    2b04:	f8d9 3000 	ldr.w	r3, [r9]
    2b08:	3301      	adds	r3, #1
  while (x < 20) {
    2b0a:	2b13      	cmp	r3, #19
    x++;
    2b0c:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    2b10:	dde0      	ble.n	2ad4 <calcur()+0xdc>
  settings.offset2 = settings.offset2 / 21;
    2b12:	f8b5 30a2 	ldrh.w	r3, [r5, #162]	; 0xa2
    2b16:	4913      	ldr	r1, [pc, #76]	; (2b64 <calcur()+0x16c>)
	size_t print(int n)				{ return print((long)n); }
    2b18:	4813      	ldr	r0, [pc, #76]	; (2b68 <calcur()+0x170>)
    2b1a:	fba1 2103 	umull	r2, r1, r1, r3
    2b1e:	1a5b      	subs	r3, r3, r1
    2b20:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    2b24:	f3c1 110f 	ubfx	r1, r1, #4, #16
    2b28:	f8a5 10a2 	strh.w	r1, [r5, #162]	; 0xa2
    2b2c:	f006 fb46 	bl	91bc <Print::print(long)>
    2b30:	211d      	movs	r1, #29
    2b32:	4810      	ldr	r0, [pc, #64]	; (2b74 <calcur()+0x17c>)
    2b34:	f009 f88e 	bl	bc54 <usb_serial_write>
    2b38:	480d      	ldr	r0, [pc, #52]	; (2b70 <calcur()+0x178>)
    2b3a:	2102      	movs	r1, #2
    2b3c:	f009 f88a 	bl	bc54 <usb_serial_write>
}
    2b40:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    2b44:	4808      	ldr	r0, [pc, #32]	; (2b68 <calcur()+0x170>)
    2b46:	f006 bb41 	b.w	91cc <Print::println()>
    2b4a:	bf00      	nop
    2b4c:	1fff91c4 	.word	0x1fff91c4
    2b50:	1fff887c 	.word	0x1fff887c
    2b54:	1fffcedc 	.word	0x1fffcedc
    2b58:	1fffcde8 	.word	0x1fffcde8
    2b5c:	00013e94 	.word	0x00013e94
    2b60:	00013eb8 	.word	0x00013eb8
    2b64:	86186187 	.word	0x86186187
    2b68:	1fff8a04 	.word	0x1fff8a04
    2b6c:	00013ebc 	.word	0x00013ebc
    2b70:	00014a64 	.word	0x00014a64
    2b74:	00013edc 	.word	0x00013edc

00002b78 <VEcan()>:
{
    2b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (settings.chargertype == BYD || settings.chargertype == Pylon) {
    2b7c:	4da5      	ldr	r5, [pc, #660]	; (2e14 <VEcan()+0x29c>)
    2b7e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    2b82:	1f9a      	subs	r2, r3, #6
    2b84:	2a01      	cmp	r2, #1
{
    2b86:	b083      	sub	sp, #12
  if (settings.chargertype == BYD || settings.chargertype == Pylon) {
    2b88:	f240 816a 	bls.w	2e60 <VEcan()+0x2e8>
    if (storagemode == 0) {
    2b8c:	4ba2      	ldr	r3, [pc, #648]	; (2e18 <VEcan()+0x2a0>)
    msg.id = 0x351;
    2b8e:	4ca3      	ldr	r4, [pc, #652]	; (2e1c <VEcan()+0x2a4>)
    if (storagemode == 0) {
    2b90:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2b92:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.id = 0x351;
    2b94:	f240 3151 	movw	r1, #849	; 0x351
    msg.len = 8;
    2b98:	2208      	movs	r2, #8
    msg.id = 0x351;
    2b9a:	6021      	str	r1, [r4, #0]
    msg.len = 8;
    2b9c:	71e2      	strb	r2, [r4, #7]
    if (storagemode == 0) {
    2b9e:	2b00      	cmp	r3, #0
    2ba0:	f000 8134 	beq.w	2e0c <VEcan()+0x294>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2ba4:	f009 fee2 	bl	c96c <__aeabi_i2f>
    2ba8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2baa:	4606      	mov	r6, r0
    2bac:	f009 ff32 	bl	ca14 <__aeabi_fmul>
    2bb0:	499b      	ldr	r1, [pc, #620]	; (2e20 <VEcan()+0x2a8>)
    2bb2:	f009 ff2f 	bl	ca14 <__aeabi_fmul>
    2bb6:	f00a f919 	bl	cdec <__aeabi_f2uiz>
    2bba:	b2c2      	uxtb	r2, r0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2bbc:	7222      	strb	r2, [r4, #8]
    msg.buf[2] = lowByte(chargecurrent);
    2bbe:	4a99      	ldr	r2, [pc, #612]	; (2e24 <VEcan()+0x2ac>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2bc0:	69e9      	ldr	r1, [r5, #28]
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2bc2:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2bc6:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(chargecurrent);
    2bc8:	8813      	ldrh	r3, [r2, #0]
    2bca:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(discurrent);
    2bcc:	4b96      	ldr	r3, [pc, #600]	; (2e28 <VEcan()+0x2b0>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2bce:	4630      	mov	r0, r6
    msg.buf[4] = lowByte(discurrent);
    2bd0:	881b      	ldrh	r3, [r3, #0]
    2bd2:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2bd4:	f009 ff1e 	bl	ca14 <__aeabi_fmul>
    2bd8:	4991      	ldr	r1, [pc, #580]	; (2e20 <VEcan()+0x2a8>)
    2bda:	f009 ff1b 	bl	ca14 <__aeabi_fmul>
    2bde:	f00a f905 	bl	cdec <__aeabi_f2uiz>
    Can0.write(msg);
    2be2:	498e      	ldr	r1, [pc, #568]	; (2e1c <VEcan()+0x2a4>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2be4:	4603      	mov	r3, r0
    Can0.write(msg);
    2be6:	4891      	ldr	r0, [pc, #580]	; (2e2c <VEcan()+0x2b4>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2be8:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    2bea:	f005 fa1f 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(SOC);
    2bee:	4a90      	ldr	r2, [pc, #576]	; (2e30 <VEcan()+0x2b8>)
    Can0.write(msg);
    2bf0:	488e      	ldr	r0, [pc, #568]	; (2e2c <VEcan()+0x2b4>)
    msg.buf[0] = lowByte(SOC);
    2bf2:	6813      	ldr	r3, [r2, #0]
    2bf4:	8812      	ldrh	r2, [r2, #0]
    2bf6:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    2bf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.buf[2] = lowByte(SOH);
    2bfc:	4a8d      	ldr	r2, [pc, #564]	; (2e34 <VEcan()+0x2bc>)
    msg.len = 8;
    2bfe:	2608      	movs	r6, #8
    msg.buf[4] = lowByte(SOC * 10);
    2c00:	005b      	lsls	r3, r3, #1
    msg.id = 0x355;
    2c02:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[2] = lowByte(SOH);
    2c06:	8812      	ldrh	r2, [r2, #0]
    msg.id = 0x355;
    2c08:	6021      	str	r1, [r4, #0]
    msg.buf[4] = lowByte(SOC * 10);
    2c0a:	7323      	strb	r3, [r4, #12]
    Can0.write(msg);
    2c0c:	4983      	ldr	r1, [pc, #524]	; (2e1c <VEcan()+0x2a4>)
    msg.buf[2] = lowByte(SOH);
    2c0e:	8162      	strh	r2, [r4, #10]
    msg.buf[5] = highByte(SOC * 10);
    2c10:	4133      	asrs	r3, r6
    msg.buf[6] = 0;
    2c12:	2700      	movs	r7, #0
    msg.buf[5] = highByte(SOC * 10);
    2c14:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    2c16:	71e6      	strb	r6, [r4, #7]
    msg.buf[6] = 0;
    2c18:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    2c1a:	f005 fa07 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x356;
    2c1e:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    2c22:	4885      	ldr	r0, [pc, #532]	; (2e38 <VEcan()+0x2c0>)
    msg.id = 0x356;
    2c24:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2c26:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    2c28:	f7fe f8fa 	bl	e20 <BMSModuleManager::getPackVoltage()>
    2c2c:	4983      	ldr	r1, [pc, #524]	; (2e3c <VEcan()+0x2c4>)
    2c2e:	f009 fef1 	bl	ca14 <__aeabi_fmul>
    2c32:	f00a f8db 	bl	cdec <__aeabi_f2uiz>
    2c36:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    2c38:	487f      	ldr	r0, [pc, #508]	; (2e38 <VEcan()+0x2c0>)
    2c3a:	f7fe f8f1 	bl	e20 <BMSModuleManager::getPackVoltage()>
    2c3e:	497f      	ldr	r1, [pc, #508]	; (2e3c <VEcan()+0x2c4>)
    2c40:	f009 fee8 	bl	ca14 <__aeabi_fmul>
    2c44:	f00a f8d2 	bl	cdec <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    2c48:	4b7d      	ldr	r3, [pc, #500]	; (2e40 <VEcan()+0x2c8>)
    2c4a:	497c      	ldr	r1, [pc, #496]	; (2e3c <VEcan()+0x2c4>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    2c4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    2c50:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    2c52:	6818      	ldr	r0, [r3, #0]
    2c54:	f009 ff92 	bl	cb7c <__aeabi_fdiv>
    2c58:	f00a f8a2 	bl	cda0 <__aeabi_f2iz>
    2c5c:	8160      	strh	r0, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    2c5e:	4876      	ldr	r0, [pc, #472]	; (2e38 <VEcan()+0x2c0>)
    2c60:	f7fe f908 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    2c64:	496e      	ldr	r1, [pc, #440]	; (2e20 <VEcan()+0x2a8>)
    2c66:	f009 fed5 	bl	ca14 <__aeabi_fmul>
    2c6a:	f00a f899 	bl	cda0 <__aeabi_f2iz>
    2c6e:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    2c70:	4871      	ldr	r0, [pc, #452]	; (2e38 <VEcan()+0x2c0>)
    2c72:	f7fe f8ff 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    2c76:	496a      	ldr	r1, [pc, #424]	; (2e20 <VEcan()+0x2a8>)
    2c78:	f009 fecc 	bl	ca14 <__aeabi_fmul>
    2c7c:	f00a f890 	bl	cda0 <__aeabi_f2iz>
    2c80:	f340 2007 	sbfx	r0, r0, #8, #8
    Can0.write(msg);
    2c84:	4965      	ldr	r1, [pc, #404]	; (2e1c <VEcan()+0x2a4>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    2c86:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    2c88:	4868      	ldr	r0, [pc, #416]	; (2e2c <VEcan()+0x2b4>)
    msg.buf[6] = 0;
    2c8a:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    2c8c:	f005 f9ce 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2c90:	2002      	movs	r0, #2
    2c92:	f007 f9fd 	bl	a090 <delay>
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2c96:	4a6b      	ldr	r2, [pc, #428]	; (2e44 <VEcan()+0x2cc>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2c98:	4b6b      	ldr	r3, [pc, #428]	; (2e48 <VEcan()+0x2d0>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2c9a:	6812      	ldr	r2, [r2, #0]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2c9c:	681b      	ldr	r3, [r3, #0]
    Can0.write(msg);
    2c9e:	4863      	ldr	r0, [pc, #396]	; (2e2c <VEcan()+0x2b4>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    2ca0:	60a2      	str	r2, [r4, #8]
    msg.id = 0x35A;
    2ca2:	f240 315a 	movw	r1, #858	; 0x35a
    2ca6:	6021      	str	r1, [r4, #0]
    Can0.write(msg);
    2ca8:	495c      	ldr	r1, [pc, #368]	; (2e1c <VEcan()+0x2a4>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    2caa:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    2cac:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    2cae:	f005 f9bd 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = bmsname[0];
    2cb2:	4b66      	ldr	r3, [pc, #408]	; (2e4c <VEcan()+0x2d4>)
    Can0.write(msg);
    2cb4:	4959      	ldr	r1, [pc, #356]	; (2e1c <VEcan()+0x2a4>)
    2cb6:	485d      	ldr	r0, [pc, #372]	; (2e2c <VEcan()+0x2b4>)
    msg.len = 8;
    2cb8:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x35E;
    2cba:	f240 325e 	movw	r2, #862	; 0x35e
    2cbe:	6022      	str	r2, [r4, #0]
    msg.buf[4] = bmsname[4];
    2cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
    msg.buf[0] = bmsname[0];
    2cc4:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsname[4];
    2cc6:	60e3      	str	r3, [r4, #12]
    Can0.write(msg);
    2cc8:	f005 f9b0 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2ccc:	2002      	movs	r0, #2
    2cce:	f007 f9df 	bl	a090 <delay>
    msg.buf[0] = bmsmanu[0];
    2cd2:	4b5f      	ldr	r3, [pc, #380]	; (2e50 <VEcan()+0x2d8>)
    Can0.write(msg);
    2cd4:	4951      	ldr	r1, [pc, #324]	; (2e1c <VEcan()+0x2a4>)
    2cd6:	4855      	ldr	r0, [pc, #340]	; (2e2c <VEcan()+0x2b4>)
    msg.len = 8;
    2cd8:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x370;
    2cda:	f44f 725c 	mov.w	r2, #880	; 0x370
    2cde:	6022      	str	r2, [r4, #0]
    msg.buf[4] = bmsmanu[4];
    2ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
    2ce4:	60e3      	str	r3, [r4, #12]
    msg.buf[0] = bmsmanu[0];
    2ce6:	60a2      	str	r2, [r4, #8]
    Can0.write(msg);
    2ce8:	f005 f9a0 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    if (balancecells == 1) {
    2cec:	4b59      	ldr	r3, [pc, #356]	; (2e54 <VEcan()+0x2dc>)
    2cee:	681b      	ldr	r3, [r3, #0]
    2cf0:	2b01      	cmp	r3, #1
    2cf2:	f000 8235 	beq.w	3160 <VEcan()+0x5e8>
    delay(2);
    2cf6:	2002      	movs	r0, #2
    2cf8:	f007 f9ca 	bl	a090 <delay>
    msg.len = 8;
    2cfc:	2608      	movs	r6, #8
    msg.id = 0x373;
    2cfe:	f240 3373 	movw	r3, #883	; 0x373
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d02:	484d      	ldr	r0, [pc, #308]	; (2e38 <VEcan()+0x2c0>)
    msg.id = 0x373;
    2d04:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2d06:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d08:	f7fe f840 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    2d0c:	4952      	ldr	r1, [pc, #328]	; (2e58 <VEcan()+0x2e0>)
    2d0e:	f009 fe81 	bl	ca14 <__aeabi_fmul>
    2d12:	f00a f86b 	bl	cdec <__aeabi_f2uiz>
    2d16:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d18:	4847      	ldr	r0, [pc, #284]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d1a:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d1c:	f7fe f836 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    2d20:	494d      	ldr	r1, [pc, #308]	; (2e58 <VEcan()+0x2e0>)
    2d22:	f009 fe77 	bl	ca14 <__aeabi_fmul>
    2d26:	f00a f861 	bl	cdec <__aeabi_f2uiz>
    2d2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d2e:	4842      	ldr	r0, [pc, #264]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    2d30:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d32:	f7fe f851 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    2d36:	4948      	ldr	r1, [pc, #288]	; (2e58 <VEcan()+0x2e0>)
    2d38:	f009 fe6c 	bl	ca14 <__aeabi_fmul>
    2d3c:	f00a f856 	bl	cdec <__aeabi_f2uiz>
    2d40:	4603      	mov	r3, r0
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d42:	483d      	ldr	r0, [pc, #244]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d44:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d46:	f7fe f847 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    2d4a:	4943      	ldr	r1, [pc, #268]	; (2e58 <VEcan()+0x2e0>)
    2d4c:	f009 fe62 	bl	ca14 <__aeabi_fmul>
    2d50:	f00a f84c 	bl	cdec <__aeabi_f2uiz>
    2d54:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d58:	4837      	ldr	r0, [pc, #220]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    2d5a:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d5c:	f7fe f8f2 	bl	f44 <BMSModuleManager::getLowTemperature()>
    2d60:	493e      	ldr	r1, [pc, #248]	; (2e5c <VEcan()+0x2e4>)
    2d62:	f009 fd4f 	bl	c804 <__addsf3>
    2d66:	f00a f841 	bl	cdec <__aeabi_f2uiz>
    2d6a:	4603      	mov	r3, r0
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d6c:	4832      	ldr	r0, [pc, #200]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d6e:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d70:	f7fe f8e8 	bl	f44 <BMSModuleManager::getLowTemperature()>
    2d74:	4939      	ldr	r1, [pc, #228]	; (2e5c <VEcan()+0x2e4>)
    2d76:	f009 fd45 	bl	c804 <__addsf3>
    2d7a:	f00a f837 	bl	cdec <__aeabi_f2uiz>
    2d7e:	f3c0 2307 	ubfx	r3, r0, #8, #8
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2d82:	482d      	ldr	r0, [pc, #180]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    2d84:	7363      	strb	r3, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2d86:	f7fe f8db 	bl	f40 <BMSModuleManager::getHighTemperature()>
    2d8a:	4934      	ldr	r1, [pc, #208]	; (2e5c <VEcan()+0x2e4>)
    2d8c:	f009 fd3a 	bl	c804 <__addsf3>
    2d90:	f00a f82c 	bl	cdec <__aeabi_f2uiz>
    2d94:	4603      	mov	r3, r0
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2d96:	4828      	ldr	r0, [pc, #160]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    2d98:	73a3      	strb	r3, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2d9a:	f7fe f8d1 	bl	f40 <BMSModuleManager::getHighTemperature()>
    2d9e:	492f      	ldr	r1, [pc, #188]	; (2e5c <VEcan()+0x2e4>)
    2da0:	f009 fd30 	bl	c804 <__addsf3>
    2da4:	f00a f822 	bl	cdec <__aeabi_f2uiz>
    2da8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    2dac:	491b      	ldr	r1, [pc, #108]	; (2e1c <VEcan()+0x2a4>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    2dae:	73e0      	strb	r0, [r4, #15]
    Can0.write(msg);
    2db0:	481e      	ldr	r0, [pc, #120]	; (2e2c <VEcan()+0x2b4>)
    2db2:	f005 f93b 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    2db6:	2002      	movs	r0, #2
    2db8:	f007 f96a 	bl	a090 <delay>
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    2dbc:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    2dbe:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    2dc0:	fb13 f302 	smulbb	r3, r3, r2
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    2dc4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    msg.id = 0x379;  //Installed capacity
    2dc8:	f240 3179 	movw	r1, #889	; 0x379
    msg.len = 2;
    2dcc:	2002      	movs	r0, #2
    msg.id = 0x379;  //Installed capacity
    2dce:	6021      	str	r1, [r4, #0]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    2dd0:	7262      	strb	r2, [r4, #9]
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    2dd2:	7223      	strb	r3, [r4, #8]
    msg.len = 2;
    2dd4:	71e0      	strb	r0, [r4, #7]
    delay(2);
    2dd6:	f007 f95b 	bl	a090 <delay>
    msg.id = 0x372;
    2dda:	f240 3372 	movw	r3, #882	; 0x372
    msg.buf[0] = lowByte(bms.getNumModules());
    2dde:	4816      	ldr	r0, [pc, #88]	; (2e38 <VEcan()+0x2c0>)
    msg.id = 0x372;
    2de0:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    2de2:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    2de4:	f7fd fe90 	bl	b08 <BMSModuleManager::getNumModules()>
    2de8:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    2dea:	4813      	ldr	r0, [pc, #76]	; (2e38 <VEcan()+0x2c0>)
    msg.buf[0] = lowByte(bms.getNumModules());
    2dec:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    2dee:	f7fd fe8b 	bl	b08 <BMSModuleManager::getNumModules()>
    msg.buf[2] = 0x00;
    2df2:	2200      	movs	r2, #0
    msg.buf[1] = highByte(bms.getNumModules());
    2df4:	fa40 f306 	asr.w	r3, r0, r6
    Can0.write(msg);
    2df8:	4908      	ldr	r1, [pc, #32]	; (2e1c <VEcan()+0x2a4>)
    2dfa:	480c      	ldr	r0, [pc, #48]	; (2e2c <VEcan()+0x2b4>)
    msg.buf[1] = highByte(bms.getNumModules());
    2dfc:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    2dfe:	8162      	strh	r2, [r4, #10]
    msg.buf[4] = 0x00;
    2e00:	60e2      	str	r2, [r4, #12]
}
    2e02:	b003      	add	sp, #12
    2e04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Can0.write(msg);
    2e08:	f005 b910 	b.w	802c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2e0c:	f009 fdae 	bl	c96c <__aeabi_i2f>
    2e10:	69a9      	ldr	r1, [r5, #24]
    2e12:	e6ca      	b.n	2baa <VEcan()+0x32>
    2e14:	1fffcde8 	.word	0x1fffcde8
    2e18:	1fffcec0 	.word	0x1fffcec0
    2e1c:	1fffcd40 	.word	0x1fffcd40
    2e20:	41200000 	.word	0x41200000
    2e24:	1fffcb40 	.word	0x1fffcb40
    2e28:	1fffccd4 	.word	0x1fffccd4
    2e2c:	1fffcef0 	.word	0x1fffcef0
    2e30:	1fff8828 	.word	0x1fff8828
    2e34:	1fff882c 	.word	0x1fff882c
    2e38:	1fff91e0 	.word	0x1fff91e0
    2e3c:	42c80000 	.word	0x42c80000
    2e40:	1fffcccc 	.word	0x1fffcccc
    2e44:	1fff91c8 	.word	0x1fff91c8
    2e48:	1fffced8 	.word	0x1fffced8
    2e4c:	1fff883c 	.word	0x1fff883c
    2e50:	1fff8834 	.word	0x1fff8834
    2e54:	1fff91d0 	.word	0x1fff91d0
    2e58:	447a0000 	.word	0x447a0000
    2e5c:	43889333 	.word	0x43889333
    if (settings.chargertype == Pylon) {
    2e60:	2b07      	cmp	r3, #7
      msg.id = 0x359;
    2e62:	4cab      	ldr	r4, [pc, #684]	; (3110 <VEcan()+0x598>)
    if (settings.chargertype == Pylon) {
    2e64:	f000 81b0 	beq.w	31c8 <VEcan()+0x650>
    2e68:	4baa      	ldr	r3, [pc, #680]	; (3114 <VEcan()+0x59c>)
    2e6a:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 3118 <VEcan()+0x5a0>
    2e6e:	f8df a2ac 	ldr.w	sl, [pc, #684]	; 311c <VEcan()+0x5a4>
    2e72:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 3120 <VEcan()+0x5a8>
    2e76:	4fab      	ldr	r7, [pc, #684]	; (3124 <VEcan()+0x5ac>)
    2e78:	4eab      	ldr	r6, [pc, #684]	; (3128 <VEcan()+0x5b0>)
    2e7a:	9301      	str	r3, [sp, #4]
      msg.id = 0x618;
    2e7c:	f44f 6cc3 	mov.w	ip, #1560	; 0x618
      msg.len = 8;
    2e80:	f04f 0b08 	mov.w	fp, #8
      msg.buf[0] = 0x00;
    2e84:	4aa9      	ldr	r2, [pc, #676]	; (312c <VEcan()+0x5b4>)
      Can0.write(msg);
    2e86:	49a2      	ldr	r1, [pc, #648]	; (3110 <VEcan()+0x598>)
    2e88:	48a9      	ldr	r0, [pc, #676]	; (3130 <VEcan()+0x5b8>)
      msg.id = 0x618;
    2e8a:	f8c4 c000 	str.w	ip, [r4]
      msg.buf[4] = 0x00;
    2e8e:	2300      	movs	r3, #0
      msg.buf[0] = 0x00;
    2e90:	60a2      	str	r2, [r4, #8]
      msg.buf[4] = 0x00;
    2e92:	60e3      	str	r3, [r4, #12]
      msg.len = 8;
    2e94:	f884 b007 	strb.w	fp, [r4, #7]
      Can0.write(msg);
    2e98:	f005 f8c8 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2e9c:	2002      	movs	r0, #2
    2e9e:	f007 f8f7 	bl	a090 <delay>
      msg.buf[0] = 0x00;
    2ea2:	4aa2      	ldr	r2, [pc, #648]	; (312c <VEcan()+0x5b4>)
      Can0.write(msg);
    2ea4:	499a      	ldr	r1, [pc, #616]	; (3110 <VEcan()+0x598>)
      msg.buf[0] = 0x00;
    2ea6:	60a2      	str	r2, [r4, #8]
      msg.buf[4] = 0x00;
    2ea8:	2300      	movs	r3, #0
      msg.id = 0x5D8;
    2eaa:	f44f 62bb 	mov.w	r2, #1496	; 0x5d8
      Can0.write(msg);
    2eae:	48a0      	ldr	r0, [pc, #640]	; (3130 <VEcan()+0x5b8>)
      msg.buf[4] = 0x00;
    2eb0:	60e3      	str	r3, [r4, #12]
      msg.id = 0x5D8;
    2eb2:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    2eb4:	f884 b007 	strb.w	fp, [r4, #7]
      Can0.write(msg);
    2eb8:	f005 f8b8 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2ebc:	2002      	movs	r0, #2
    2ebe:	f007 f8e7 	bl	a090 <delay>
      msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2ec2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    2ec4:	6e2a      	ldr	r2, [r5, #96]	; 0x60
    2ec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.len = 8;
    2ec8:	f884 b007 	strb.w	fp, [r4, #7]
      msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2ecc:	fb03 f102 	mul.w	r1, r3, r2
    2ed0:	fb00 f101 	mul.w	r1, r0, r1
      msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2ed4:	fb12 f203 	smulbb	r2, r2, r3
    2ed8:	fb12 f200 	smulbb	r2, r2, r0
      msg.buf[4] = highByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2edc:	eb01 00c1 	add.w	r0, r1, r1, lsl #3
    2ee0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    2ee4:	fa41 f10b 	asr.w	r1, r1, fp
    2ee8:	7321      	strb	r1, [r4, #12]
      msg.buf[5] = lowByte(settings.CAP * settings.Pstrings * 37 * settings.Scells);
    2eea:	eb02 01c2 	add.w	r1, r2, r2, lsl #3
    2eee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    2ef2:	7362      	strb	r2, [r4, #13]
      msg.buf[0] = 0x03;
    2ef4:	4a8f      	ldr	r2, [pc, #572]	; (3134 <VEcan()+0x5bc>)
    2ef6:	60a2      	str	r2, [r4, #8]
      msg.id = 0x558;
    2ef8:	f44f 62ab 	mov.w	r2, #1368	; 0x558
      Can0.write(msg);
    2efc:	4984      	ldr	r1, [pc, #528]	; (3110 <VEcan()+0x598>)
      msg.id = 0x558;
    2efe:	6022      	str	r2, [r4, #0]
      Can0.write(msg);
    2f00:	488b      	ldr	r0, [pc, #556]	; (3130 <VEcan()+0x5b8>)
      msg.buf[6] = 0x05;
    2f02:	f240 7205 	movw	r2, #1797	; 0x705
    2f06:	81e2      	strh	r2, [r4, #14]
      Can0.write(msg);
    2f08:	f005 f890 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2f0c:	2002      	movs	r0, #2
    2f0e:	f007 f8bf 	bl	a090 <delay>
      msg.buf[0] = 0x00;
    2f12:	4a89      	ldr	r2, [pc, #548]	; (3138 <VEcan()+0x5c0>)
    2f14:	60a2      	str	r2, [r4, #8]
      msg.buf[4] = 0x00;
    2f16:	4a89      	ldr	r2, [pc, #548]	; (313c <VEcan()+0x5c4>)
      Can0.write(msg);
    2f18:	497d      	ldr	r1, [pc, #500]	; (3110 <VEcan()+0x598>)
      msg.buf[4] = 0x00;
    2f1a:	60e2      	str	r2, [r4, #12]
      Can0.write(msg);
    2f1c:	4884      	ldr	r0, [pc, #528]	; (3130 <VEcan()+0x5b8>)
      msg.len = 8;
    2f1e:	f884 b007 	strb.w	fp, [r4, #7]
      msg.id = 0x598;
    2f22:	f44f 62b3 	mov.w	r2, #1432	; 0x598
    2f26:	6022      	str	r2, [r4, #0]
      Can0.write(msg);
    2f28:	f005 f880 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2f2c:	2002      	movs	r0, #2
    2f2e:	f007 f8af 	bl	a090 <delay>
      if (storagemode == 0) {
    2f32:	9b01      	ldr	r3, [sp, #4]
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
      if (storagemode == 0) {
    2f36:	681a      	ldr	r2, [r3, #0]
      msg.len = 8;
    2f38:	f884 b007 	strb.w	fp, [r4, #7]
      msg.id = 0x358;
    2f3c:	f44f 7156 	mov.w	r1, #856	; 0x358
    2f40:	6021      	str	r1, [r4, #0]
      if (storagemode == 0) {
    2f42:	2a00      	cmp	r2, #0
    2f44:	f040 81fb 	bne.w	333e <VEcan()+0x7c6>
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2f48:	f009 fd10 	bl	c96c <__aeabi_i2f>
    2f4c:	69a9      	ldr	r1, [r5, #24]
    2f4e:	4683      	mov	fp, r0
        msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2f50:	f009 fd60 	bl	ca14 <__aeabi_fmul>
    2f54:	497a      	ldr	r1, [pc, #488]	; (3140 <VEcan()+0x5c8>)
    2f56:	f009 fd5d 	bl	ca14 <__aeabi_fmul>
    2f5a:	f009 ff47 	bl	cdec <__aeabi_f2uiz>
    2f5e:	f3c0 2107 	ubfx	r1, r0, #8, #8
        msg.buf[1] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    2f62:	b2c2      	uxtb	r2, r0
        msg.buf[0] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2f64:	7221      	strb	r1, [r4, #8]
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2f66:	4658      	mov	r0, fp
    2f68:	69e9      	ldr	r1, [r5, #28]
        msg.buf[1] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    2f6a:	7262      	strb	r2, [r4, #9]
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2f6c:	f009 fd52 	bl	ca14 <__aeabi_fmul>
    2f70:	4973      	ldr	r1, [pc, #460]	; (3140 <VEcan()+0x5c8>)
    2f72:	f009 fd4f 	bl	ca14 <__aeabi_fmul>
    2f76:	f009 ff39 	bl	cdec <__aeabi_f2uiz>
      msg.buf[4] = highByte(discurrent);
    2f7a:	f8ba 2000 	ldrh.w	r2, [sl]
      msg.buf[6] = highByte(chargecurrent);
    2f7e:	f8b9 3000 	ldrh.w	r3, [r9]
      Can0.write(msg);
    2f82:	4963      	ldr	r1, [pc, #396]	; (3110 <VEcan()+0x598>)
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2f84:	ba40      	rev16	r0, r0
      msg.buf[4] = highByte(discurrent);
    2f86:	ba52      	rev16	r2, r2
      msg.buf[6] = highByte(chargecurrent);
    2f88:	ba5b      	rev16	r3, r3
      msg.buf[2] = highByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    2f8a:	8160      	strh	r0, [r4, #10]
      Can0.write(msg);
    2f8c:	4868      	ldr	r0, [pc, #416]	; (3130 <VEcan()+0x5b8>)
      msg.buf[4] = highByte(discurrent);
    2f8e:	81a2      	strh	r2, [r4, #12]
      msg.buf[6] = highByte(chargecurrent);
    2f90:	81e3      	strh	r3, [r4, #14]
      Can0.write(msg);
    2f92:	f005 f84b 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2f96:	2002      	movs	r0, #2
    2f98:	f007 f87a 	bl	a090 <delay>
      msg.buf[2] = highByte(SOH);
    2f9c:	883a      	ldrh	r2, [r7, #0]
      msg.buf[0] = highByte(SOC * 100);
    2f9e:	f8d8 3000 	ldr.w	r3, [r8]
      msg.buf[2] = highByte(SOH);
    2fa2:	ba52      	rev16	r2, r2
    2fa4:	8162      	strh	r2, [r4, #10]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    2fa6:	4a67      	ldr	r2, [pc, #412]	; (3144 <VEcan()+0x5cc>)
    2fa8:	6810      	ldr	r0, [r2, #0]
      msg.buf[1] = lowByte(SOC * 100);
    2faa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    2fae:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    2fb2:	0092      	lsls	r2, r2, #2
    2fb4:	7262      	strb	r2, [r4, #9]
      msg.buf[0] = highByte(SOC * 100);
    2fb6:	2264      	movs	r2, #100	; 0x64
      msg.len = 8;
    2fb8:	2508      	movs	r5, #8
      msg.buf[0] = highByte(SOC * 100);
    2fba:	fb02 f303 	mul.w	r3, r2, r3
      msg.id = 0x3D8;
    2fbe:	f44f 7176 	mov.w	r1, #984	; 0x3d8
      msg.buf[0] = highByte(SOC * 100);
    2fc2:	412b      	asrs	r3, r5
      msg.id = 0x3D8;
    2fc4:	6021      	str	r1, [r4, #0]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    2fc6:	4960      	ldr	r1, [pc, #384]	; (3148 <VEcan()+0x5d0>)
      msg.buf[0] = highByte(SOC * 100);
    2fc8:	7223      	strb	r3, [r4, #8]
      msg.len = 8;
    2fca:	71e5      	strb	r5, [r4, #7]
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    2fcc:	f009 fd22 	bl	ca14 <__aeabi_fmul>
    2fd0:	f009 ff0c 	bl	cdec <__aeabi_f2uiz>
    2fd4:	ba40      	rev16	r0, r0
      msg.buf[6] = 0xF9;
    2fd6:	23f9      	movs	r3, #249	; 0xf9
      Can0.write(msg);
    2fd8:	494d      	ldr	r1, [pc, #308]	; (3110 <VEcan()+0x598>)
      msg.buf[4] = highByte(uint16_t(ampsecond * 0.002777778));
    2fda:	81a0      	strh	r0, [r4, #12]
      Can0.write(msg);
    2fdc:	4854      	ldr	r0, [pc, #336]	; (3130 <VEcan()+0x5b8>)
      msg.buf[6] = 0xF9;
    2fde:	81e3      	strh	r3, [r4, #14]
      Can0.write(msg);
    2fe0:	f005 f824 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    2fe4:	2002      	movs	r0, #2
    2fe6:	f007 f853 	bl	a090 <delay>
      msg.buf[0] = 0x00;
    2fea:	4b53      	ldr	r3, [pc, #332]	; (3138 <VEcan()+0x5c0>)
      Can0.write(msg);
    2fec:	4948      	ldr	r1, [pc, #288]	; (3110 <VEcan()+0x598>)
      msg.buf[0] = 0x00;
    2fee:	60a3      	str	r3, [r4, #8]
      msg.id = 0x458;
    2ff0:	f44f 628b 	mov.w	r2, #1112	; 0x458
      msg.buf[4] = 0x00;
    2ff4:	4b55      	ldr	r3, [pc, #340]	; (314c <VEcan()+0x5d4>)
      Can0.write(msg);
    2ff6:	484e      	ldr	r0, [pc, #312]	; (3130 <VEcan()+0x5b8>)
      msg.id = 0x458;
    2ff8:	6022      	str	r2, [r4, #0]
      msg.buf[4] = 0x00;
    2ffa:	60e3      	str	r3, [r4, #12]
      msg.len = 8;
    2ffc:	71e5      	strb	r5, [r4, #7]
      Can0.write(msg);
    2ffe:	f005 f815 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    3002:	2002      	movs	r0, #2
    3004:	f007 f844 	bl	a090 <delay>
      msg.id = 0x518;
    3008:	f44f 63a3 	mov.w	r3, #1304	; 0x518
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    300c:	4850      	ldr	r0, [pc, #320]	; (3150 <VEcan()+0x5d8>)
      msg.id = 0x518;
    300e:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    3010:	71e5      	strb	r5, [r4, #7]
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3012:	f7fd ff95 	bl	f40 <BMSModuleManager::getHighTemperature()>
    3016:	494a      	ldr	r1, [pc, #296]	; (3140 <VEcan()+0x5c8>)
    3018:	f009 fcfc 	bl	ca14 <__aeabi_fmul>
    301c:	f009 fee6 	bl	cdec <__aeabi_f2uiz>
    3020:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3024:	484a      	ldr	r0, [pc, #296]	; (3150 <VEcan()+0x5d8>)
      msg.buf[0] = highByte(uint16_t(bms.getHighTemperature() * 10));
    3026:	7223      	strb	r3, [r4, #8]
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    3028:	f7fd ff8a 	bl	f40 <BMSModuleManager::getHighTemperature()>
    302c:	4944      	ldr	r1, [pc, #272]	; (3140 <VEcan()+0x5c8>)
    302e:	f009 fcf1 	bl	ca14 <__aeabi_fmul>
    3032:	f009 fedb 	bl	cdec <__aeabi_f2uiz>
    3036:	4603      	mov	r3, r0
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    3038:	4845      	ldr	r0, [pc, #276]	; (3150 <VEcan()+0x5d8>)
      msg.buf[1] = lowByte(uint16_t(bms.getHighTemperature() * 10));
    303a:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    303c:	f7fd ff82 	bl	f44 <BMSModuleManager::getLowTemperature()>
    3040:	493f      	ldr	r1, [pc, #252]	; (3140 <VEcan()+0x5c8>)
    3042:	f009 fce7 	bl	ca14 <__aeabi_fmul>
    3046:	f009 fed1 	bl	cdec <__aeabi_f2uiz>
    304a:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    304e:	4840      	ldr	r0, [pc, #256]	; (3150 <VEcan()+0x5d8>)
      msg.buf[2] = highByte(uint16_t(bms.getLowTemperature() * 10));
    3050:	72a3      	strb	r3, [r4, #10]
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3052:	f7fd ff77 	bl	f44 <BMSModuleManager::getLowTemperature()>
    3056:	493a      	ldr	r1, [pc, #232]	; (3140 <VEcan()+0x5c8>)
    3058:	f009 fcdc 	bl	ca14 <__aeabi_fmul>
    305c:	f009 fec6 	bl	cdec <__aeabi_f2uiz>
      Can0.write(msg);
    3060:	492b      	ldr	r1, [pc, #172]	; (3110 <VEcan()+0x598>)
      msg.buf[3] = lowByte(uint16_t(bms.getLowTemperature() * 10));
    3062:	72e0      	strb	r0, [r4, #11]
      msg.buf[4] = 0xFF;
    3064:	f04f 33ff 	mov.w	r3, #4294967295
      Can0.write(msg);
    3068:	4831      	ldr	r0, [pc, #196]	; (3130 <VEcan()+0x5b8>)
      msg.buf[4] = 0xFF;
    306a:	60e3      	str	r3, [r4, #12]
      Can0.write(msg);
    306c:	f004 ffde 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    3070:	2002      	movs	r0, #2
    3072:	f007 f80d 	bl	a090 <delay>
      msg.id = 0x4D8;
    3076:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    307a:	4835      	ldr	r0, [pc, #212]	; (3150 <VEcan()+0x5d8>)
      msg.id = 0x4D8;
    307c:	6023      	str	r3, [r4, #0]
      msg.len = 8;
    307e:	71e5      	strb	r5, [r4, #7]
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3080:	f7fd fece 	bl	e20 <BMSModuleManager::getPackVoltage()>
    3084:	492e      	ldr	r1, [pc, #184]	; (3140 <VEcan()+0x5c8>)
    3086:	f009 fcc5 	bl	ca14 <__aeabi_fmul>
    308a:	f009 feaf 	bl	cdec <__aeabi_f2uiz>
    308e:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3092:	482f      	ldr	r0, [pc, #188]	; (3150 <VEcan()+0x5d8>)
      msg.buf[0] = highByte(uint16_t(bms.getPackVoltage() * 10));
    3094:	7223      	strb	r3, [r4, #8]
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    3096:	f7fd fec3 	bl	e20 <BMSModuleManager::getPackVoltage()>
    309a:	4929      	ldr	r1, [pc, #164]	; (3140 <VEcan()+0x5c8>)
    309c:	f009 fcba 	bl	ca14 <__aeabi_fmul>
    30a0:	f009 fea4 	bl	cdec <__aeabi_f2uiz>
      msg.buf[2] = highByte(long(currentact / 100));
    30a4:	492b      	ldr	r1, [pc, #172]	; (3154 <VEcan()+0x5dc>)
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    30a6:	4603      	mov	r3, r0
      msg.buf[2] = highByte(long(currentact / 100));
    30a8:	6830      	ldr	r0, [r6, #0]
      msg.buf[1] = lowByte(uint16_t(bms.getPackVoltage() * 10));
    30aa:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = highByte(long(currentact / 100));
    30ac:	f009 fd66 	bl	cb7c <__aeabi_fdiv>
    30b0:	f009 fe76 	bl	cda0 <__aeabi_f2iz>
    30b4:	ba43      	rev16	r3, r0
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    30b6:	4826      	ldr	r0, [pc, #152]	; (3150 <VEcan()+0x5d8>)
      msg.buf[2] = highByte(long(currentact / 100));
    30b8:	8163      	strh	r3, [r4, #10]
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    30ba:	f7fd fedb 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    30be:	4920      	ldr	r1, [pc, #128]	; (3140 <VEcan()+0x5c8>)
    30c0:	f009 fca8 	bl	ca14 <__aeabi_fmul>
    30c4:	f009 fe6c 	bl	cda0 <__aeabi_f2iz>
    30c8:	f340 2307 	sbfx	r3, r0, #8, #8
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    30cc:	4820      	ldr	r0, [pc, #128]	; (3150 <VEcan()+0x5d8>)
      msg.buf[4] = highByte(int16_t(bms.getAvgTemperature() * 10));
    30ce:	7323      	strb	r3, [r4, #12]
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    30d0:	f7fd fed0 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    30d4:	491a      	ldr	r1, [pc, #104]	; (3140 <VEcan()+0x5c8>)
    30d6:	f009 fc9d 	bl	ca14 <__aeabi_fmul>
    30da:	f009 fe61 	bl	cda0 <__aeabi_f2iz>
      msg.buf[6] = 0x03;
    30de:	f640 0203 	movw	r2, #2051	; 0x803
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    30e2:	4603      	mov	r3, r0
      Can0.write(msg);
    30e4:	490a      	ldr	r1, [pc, #40]	; (3110 <VEcan()+0x598>)
    30e6:	4812      	ldr	r0, [pc, #72]	; (3130 <VEcan()+0x5b8>)
      msg.buf[6] = 0x03;
    30e8:	81e2      	strh	r2, [r4, #14]
      msg.buf[5] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    30ea:	7363      	strb	r3, [r4, #13]
      Can0.write(msg);
    30ec:	f004 ff9e 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    30f0:	2002      	movs	r0, #2
    30f2:	f006 ffcd 	bl	a090 <delay>
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    30f6:	4a18      	ldr	r2, [pc, #96]	; (3158 <VEcan()+0x5e0>)
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    30f8:	4b18      	ldr	r3, [pc, #96]	; (315c <VEcan()+0x5e4>)
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    30fa:	6812      	ldr	r2, [r2, #0]
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    30fc:	681b      	ldr	r3, [r3, #0]
      Can0.write(msg);
    30fe:	480c      	ldr	r0, [pc, #48]	; (3130 <VEcan()+0x5b8>)
      msg.len = 8;
    3100:	71e5      	strb	r5, [r4, #7]
      msg.id = 0x158;
    3102:	f44f 71ac 	mov.w	r1, #344	; 0x158
    3106:	6021      	str	r1, [r4, #0]
      msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3108:	60a2      	str	r2, [r4, #8]
      Can0.write(msg);
    310a:	4901      	ldr	r1, [pc, #4]	; (3110 <VEcan()+0x598>)
      msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    310c:	60e3      	str	r3, [r4, #12]
      Can0.write(msg);
    310e:	e678      	b.n	2e02 <VEcan()+0x28a>
    3110:	1fffcd40 	.word	0x1fffcd40
    3114:	1fffcec0 	.word	0x1fffcec0
    3118:	1fffcb40 	.word	0x1fffcb40
    311c:	1fffccd4 	.word	0x1fffccd4
    3120:	1fff8828 	.word	0x1fff8828
    3124:	1fff882c 	.word	0x1fff882c
    3128:	1fffcccc 	.word	0x1fffcccc
    312c:	44594200 	.word	0x44594200
    3130:	1fffcef0 	.word	0x1fffcef0
    3134:	04001203 	.word	0x04001203
    3138:	34120000 	.word	0x34120000
    313c:	4f040000 	.word	0x4f040000
    3140:	41200000 	.word	0x41200000
    3144:	1fff91cc 	.word	0x1fff91cc
    3148:	3b360b62 	.word	0x3b360b62
    314c:	78560000 	.word	0x78560000
    3150:	1fff91e0 	.word	0x1fff91e0
    3154:	42c80000 	.word	0x42c80000
    3158:	1fff91c8 	.word	0x1fff91c8
    315c:	1fffced8 	.word	0x1fffced8
      if (bms.getLowCellVolt() + settings.balanceHyst < bms.getHighCellVolt()) {
    3160:	4884      	ldr	r0, [pc, #528]	; (3374 <VEcan()+0x7fc>)
    3162:	f7fd fe13 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    3166:	6d69      	ldr	r1, [r5, #84]	; 0x54
    3168:	f009 fb4c 	bl	c804 <__addsf3>
    316c:	4607      	mov	r7, r0
    316e:	4881      	ldr	r0, [pc, #516]	; (3374 <VEcan()+0x7fc>)
    3170:	f7fd fe32 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    3174:	4601      	mov	r1, r0
    3176:	4638      	mov	r0, r7
    3178:	f009 fdea 	bl	cd50 <__aeabi_fcmplt>
    317c:	2800      	cmp	r0, #0
    317e:	f43f adba 	beq.w	2cf6 <VEcan()+0x17e>
        msg.id = 0x3c3;
    3182:	f240 33c3 	movw	r3, #963	; 0x3c3
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    3186:	487b      	ldr	r0, [pc, #492]	; (3374 <VEcan()+0x7fc>)
        msg.len = 8;
    3188:	71e6      	strb	r6, [r4, #7]
        msg.id = 0x3c3;
    318a:	6023      	str	r3, [r4, #0]
        if (bms.getLowCellVolt() < settings.balanceVoltage) {
    318c:	f7fd fdfe 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    3190:	6d2e      	ldr	r6, [r5, #80]	; 0x50
    3192:	4631      	mov	r1, r6
    3194:	f009 fddc 	bl	cd50 <__aeabi_fcmplt>
    3198:	2800      	cmp	r0, #0
    319a:	f000 80d5 	beq.w	3348 <VEcan()+0x7d0>
          msg.buf[0] = highByte(uint16_t(settings.balanceVoltage * 1000));
    319e:	4976      	ldr	r1, [pc, #472]	; (3378 <VEcan()+0x800>)
    31a0:	4630      	mov	r0, r6
    31a2:	f009 fc37 	bl	ca14 <__aeabi_fmul>
    31a6:	f009 fe21 	bl	cdec <__aeabi_f2uiz>
    31aa:	f3c0 2307 	ubfx	r3, r0, #8, #8
    31ae:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    31b0:	b2c0      	uxtb	r0, r0
        msg.buf[2] = 0x01;
    31b2:	f240 4201 	movw	r2, #1025	; 0x401
        msg.buf[4] = 0x03;
    31b6:	2303      	movs	r3, #3
          msg.buf[1] = lowByte(uint16_t(settings.balanceVoltage * 1000));
    31b8:	7260      	strb	r0, [r4, #9]
        Can0.write(msg);
    31ba:	4970      	ldr	r1, [pc, #448]	; (337c <VEcan()+0x804>)
    31bc:	4870      	ldr	r0, [pc, #448]	; (3380 <VEcan()+0x808>)
        msg.buf[2] = 0x01;
    31be:	8162      	strh	r2, [r4, #10]
        msg.buf[4] = 0x03;
    31c0:	60e3      	str	r3, [r4, #12]
        Can0.write(msg);
    31c2:	f004 ff33 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    31c6:	e596      	b.n	2cf6 <VEcan()+0x17e>
      msg.buf[4] = 0x01;  //number of modules fixed for now
    31c8:	4b6e      	ldr	r3, [pc, #440]	; (3384 <VEcan()+0x80c>)
      if (storagemode == 0) {
    31ca:	4f6f      	ldr	r7, [pc, #444]	; (3388 <VEcan()+0x810>)
      msg.buf[4] = 0x01;  //number of modules fixed for now
    31cc:	60e3      	str	r3, [r4, #12]
      msg.id = 0x359;
    31ce:	f240 3259 	movw	r2, #857	; 0x359
      msg.buf[0] = 0x00;  //protection to be translated later date
    31d2:	2300      	movs	r3, #0
      msg.len = 8;
    31d4:	2608      	movs	r6, #8
      Can0.write(msg);
    31d6:	4621      	mov	r1, r4
    31d8:	4869      	ldr	r0, [pc, #420]	; (3380 <VEcan()+0x808>)
      msg.buf[0] = 0x00;  //protection to be translated later date
    31da:	60a3      	str	r3, [r4, #8]
      msg.id = 0x359;
    31dc:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    31de:	71e6      	strb	r6, [r4, #7]
      if (storagemode == 0) {
    31e0:	9701      	str	r7, [sp, #4]
      Can0.write(msg);
    31e2:	f004 ff23 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    31e6:	2002      	movs	r0, #2
    31e8:	f006 ff52 	bl	a090 <delay>
      msg.id = 0x351;
    31ec:	f240 3351 	movw	r3, #849	; 0x351
    31f0:	6023      	str	r3, [r4, #0]
      if (storagemode == 0) {
    31f2:	683b      	ldr	r3, [r7, #0]
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    31f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.len = 8;
    31f6:	71e6      	strb	r6, [r4, #7]
      if (storagemode == 0) {
    31f8:	2b00      	cmp	r3, #0
    31fa:	f000 809c 	beq.w	3336 <VEcan()+0x7be>
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    31fe:	f009 fbb5 	bl	c96c <__aeabi_i2f>
    3202:	6a69      	ldr	r1, [r5, #36]	; 0x24
      msg.buf[2] = lowByte(chargecurrent);
    3204:	f8df 9184 	ldr.w	r9, [pc, #388]	; 338c <VEcan()+0x814>
      msg.buf[4] = lowByte(discurrent);
    3208:	f8df a184 	ldr.w	sl, [pc, #388]	; 3390 <VEcan()+0x818>
      msg.buf[0] = lowByte(SOC);
    320c:	f8df 8184 	ldr.w	r8, [pc, #388]	; 3394 <VEcan()+0x81c>
      msg.buf[2] = lowByte(SOH);   //static for now
    3210:	4f61      	ldr	r7, [pc, #388]	; (3398 <VEcan()+0x820>)
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3212:	f009 fbff 	bl	ca14 <__aeabi_fmul>
    3216:	4961      	ldr	r1, [pc, #388]	; (339c <VEcan()+0x824>)
    3218:	f009 fbfc 	bl	ca14 <__aeabi_fmul>
    321c:	f009 fde6 	bl	cdec <__aeabi_f2uiz>
      msg.buf[2] = lowByte(chargecurrent);
    3220:	f8b9 2000 	ldrh.w	r2, [r9]
      Can0.write(msg);
    3224:	4955      	ldr	r1, [pc, #340]	; (337c <VEcan()+0x804>)
      msg.buf[2] = lowByte(chargecurrent);
    3226:	8162      	strh	r2, [r4, #10]
        msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3228:	b2c3      	uxtb	r3, r0
        msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    322a:	f3c0 2007 	ubfx	r0, r0, #8, #8
      msg.buf[4] = lowByte(discurrent);
    322e:	f8ba 2000 	ldrh.w	r2, [sl]
        msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3232:	7260      	strb	r0, [r4, #9]
      msg.buf[6] = 0x00;
    3234:	f04f 0b00 	mov.w	fp, #0
      Can0.write(msg);
    3238:	4851      	ldr	r0, [pc, #324]	; (3380 <VEcan()+0x808>)
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    323a:	7223      	strb	r3, [r4, #8]
      msg.buf[4] = lowByte(discurrent);
    323c:	81a2      	strh	r2, [r4, #12]
      msg.buf[6] = 0x00;
    323e:	f8a4 b00e 	strh.w	fp, [r4, #14]
      Can0.write(msg);
    3242:	f004 fef3 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    3246:	2002      	movs	r0, #2
    3248:	f006 ff22 	bl	a090 <delay>
      msg.buf[0] = lowByte(SOC);
    324c:	f8b8 2000 	ldrh.w	r2, [r8]
    3250:	8122      	strh	r2, [r4, #8]
      msg.buf[2] = lowByte(SOH);   //static for now
    3252:	883a      	ldrh	r2, [r7, #0]
      Can0.write(msg);
    3254:	4949      	ldr	r1, [pc, #292]	; (337c <VEcan()+0x804>)
      msg.buf[2] = lowByte(SOH);   //static for now
    3256:	8162      	strh	r2, [r4, #10]
      msg.len = 8;
    3258:	2608      	movs	r6, #8
      msg.id = 0x355;
    325a:	f240 3255 	movw	r2, #853	; 0x355
      Can0.write(msg);
    325e:	4848      	ldr	r0, [pc, #288]	; (3380 <VEcan()+0x808>)
      msg.id = 0x355;
    3260:	6022      	str	r2, [r4, #0]
      msg.buf[4] = 0x00;
    3262:	f8c4 b00c 	str.w	fp, [r4, #12]
      msg.len = 8;
    3266:	71e6      	strb	r6, [r4, #7]
      Can0.write(msg);
    3268:	f004 fee0 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    326c:	2002      	movs	r0, #2
    326e:	f006 ff0f 	bl	a090 <delay>
      msg.id = 0x356;
    3272:	f240 3256 	movw	r2, #854	; 0x356
      msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3276:	483f      	ldr	r0, [pc, #252]	; (3374 <VEcan()+0x7fc>)
      msg.id = 0x356;
    3278:	6022      	str	r2, [r4, #0]
      msg.len = 8;
    327a:	71e6      	strb	r6, [r4, #7]
      msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    327c:	f7fd fdd0 	bl	e20 <BMSModuleManager::getPackVoltage()>
    3280:	4947      	ldr	r1, [pc, #284]	; (33a0 <VEcan()+0x828>)
      msg.buf[2] = lowByte(long(currentact / 100));
    3282:	4e48      	ldr	r6, [pc, #288]	; (33a4 <VEcan()+0x82c>)
      msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3284:	f009 fbc6 	bl	ca14 <__aeabi_fmul>
    3288:	f009 fdb0 	bl	cdec <__aeabi_f2uiz>
    328c:	7220      	strb	r0, [r4, #8]
      msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    328e:	4839      	ldr	r0, [pc, #228]	; (3374 <VEcan()+0x7fc>)
    3290:	f7fd fdc6 	bl	e20 <BMSModuleManager::getPackVoltage()>
    3294:	4942      	ldr	r1, [pc, #264]	; (33a0 <VEcan()+0x828>)
    3296:	f009 fbbd 	bl	ca14 <__aeabi_fmul>
    329a:	f009 fda7 	bl	cdec <__aeabi_f2uiz>
    329e:	f3c0 2007 	ubfx	r0, r0, #8, #8
      msg.buf[2] = lowByte(long(currentact / 100));
    32a2:	493f      	ldr	r1, [pc, #252]	; (33a0 <VEcan()+0x828>)
      msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    32a4:	7260      	strb	r0, [r4, #9]
      msg.buf[2] = lowByte(long(currentact / 100));
    32a6:	6830      	ldr	r0, [r6, #0]
    32a8:	f009 fc68 	bl	cb7c <__aeabi_fdiv>
    32ac:	f009 fd78 	bl	cda0 <__aeabi_f2iz>
    32b0:	8160      	strh	r0, [r4, #10]
      msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    32b2:	4830      	ldr	r0, [pc, #192]	; (3374 <VEcan()+0x7fc>)
    32b4:	f7fd fdde 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    32b8:	4938      	ldr	r1, [pc, #224]	; (339c <VEcan()+0x824>)
    32ba:	f009 fbab 	bl	ca14 <__aeabi_fmul>
    32be:	f009 fd6f 	bl	cda0 <__aeabi_f2iz>
    32c2:	7320      	strb	r0, [r4, #12]
      msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    32c4:	482b      	ldr	r0, [pc, #172]	; (3374 <VEcan()+0x7fc>)
    32c6:	f7fd fdd5 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    32ca:	4934      	ldr	r1, [pc, #208]	; (339c <VEcan()+0x824>)
    32cc:	f009 fba2 	bl	ca14 <__aeabi_fmul>
    32d0:	f009 fd66 	bl	cda0 <__aeabi_f2iz>
    32d4:	f340 2007 	sbfx	r0, r0, #8, #8
      Can0.write(msg);
    32d8:	4928      	ldr	r1, [pc, #160]	; (337c <VEcan()+0x804>)
      msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    32da:	7360      	strb	r0, [r4, #13]
      Can0.write(msg);
    32dc:	4828      	ldr	r0, [pc, #160]	; (3380 <VEcan()+0x808>)
      msg.buf[6] = 0;
    32de:	f8a4 b00e 	strh.w	fp, [r4, #14]
      Can0.write(msg);
    32e2:	f004 fea3 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    32e6:	2002      	movs	r0, #2
    32e8:	f006 fed2 	bl	a090 <delay>
      msg.id = 0x35C;
    32ec:	f44f 7257 	mov.w	r2, #860	; 0x35c
      Can0.write(msg);
    32f0:	4922      	ldr	r1, [pc, #136]	; (337c <VEcan()+0x804>)
      msg.id = 0x35C;
    32f2:	6022      	str	r2, [r4, #0]
      msg.len = 2;
    32f4:	f04f 0b02 	mov.w	fp, #2
      msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    32f8:	22c0      	movs	r2, #192	; 0xc0
      Can0.write(msg);
    32fa:	4821      	ldr	r0, [pc, #132]	; (3380 <VEcan()+0x808>)
      msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    32fc:	8122      	strh	r2, [r4, #8]
      msg.len = 2;
    32fe:	f884 b007 	strb.w	fp, [r4, #7]
      Can0.write(msg);
    3302:	f004 fe93 	bl	802c <FlexCAN::write(CAN_message_t const&)>
      delay(2);
    3306:	4658      	mov	r0, fp
    3308:	f006 fec2 	bl	a090 <delay>
      msg.buf[0] = "T";  //No idea how the naming works
    330c:	4a26      	ldr	r2, [pc, #152]	; (33a8 <VEcan()+0x830>)
    330e:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = "P";  //No idea how the naming works
    3310:	4a26      	ldr	r2, [pc, #152]	; (33ac <VEcan()+0x834>)
    3312:	7262      	strb	r2, [r4, #9]
      Can0.write(msg);
    3314:	4919      	ldr	r1, [pc, #100]	; (337c <VEcan()+0x804>)
    3316:	481a      	ldr	r0, [pc, #104]	; (3380 <VEcan()+0x808>)
      msg.len = 2;
    3318:	f884 b007 	strb.w	fp, [r4, #7]
      msg.id = 0x35E;
    331c:	f240 325e 	movw	r2, #862	; 0x35e
    3320:	6022      	str	r2, [r4, #0]
      Can0.write(msg);
    3322:	f004 fe83 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    if (settings.chargertype == BYD) {
    3326:	f8d5 20bc 	ldr.w	r2, [r5, #188]	; 0xbc
    332a:	2a06      	cmp	r2, #6
    332c:	f43f ada6 	beq.w	2e7c <VEcan()+0x304>
}
    3330:	b003      	add	sp, #12
    3332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3336:	f009 fb19 	bl	c96c <__aeabi_i2f>
    333a:	69a9      	ldr	r1, [r5, #24]
    333c:	e762      	b.n	3204 <VEcan()+0x68c>
        msg.buf[0] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    333e:	f009 fb15 	bl	c96c <__aeabi_i2f>
    3342:	6a69      	ldr	r1, [r5, #36]	; 0x24
    3344:	4683      	mov	fp, r0
    3346:	e603      	b.n	2f50 <VEcan()+0x3d8>
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3348:	480a      	ldr	r0, [pc, #40]	; (3374 <VEcan()+0x7fc>)
    334a:	f7fd fd1f 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    334e:	490a      	ldr	r1, [pc, #40]	; (3378 <VEcan()+0x800>)
    3350:	f009 fb60 	bl	ca14 <__aeabi_fmul>
    3354:	f009 fd4a 	bl	cdec <__aeabi_f2uiz>
    3358:	f3c0 2307 	ubfx	r3, r0, #8, #8
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    335c:	4805      	ldr	r0, [pc, #20]	; (3374 <VEcan()+0x7fc>)
          msg.buf[0] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    335e:	7223      	strb	r3, [r4, #8]
          msg.buf[1] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3360:	f7fd fd14 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    3364:	4904      	ldr	r1, [pc, #16]	; (3378 <VEcan()+0x800>)
    3366:	f009 fb55 	bl	ca14 <__aeabi_fmul>
    336a:	f009 fd3f 	bl	cdec <__aeabi_f2uiz>
    336e:	b2c0      	uxtb	r0, r0
    3370:	e71f      	b.n	31b2 <VEcan()+0x63a>
    3372:	bf00      	nop
    3374:	1fff91e0 	.word	0x1fff91e0
    3378:	447a0000 	.word	0x447a0000
    337c:	1fffcd40 	.word	0x1fffcd40
    3380:	1fffcef0 	.word	0x1fffcef0
    3384:	004e5001 	.word	0x004e5001
    3388:	1fffcec0 	.word	0x1fffcec0
    338c:	1fffcb40 	.word	0x1fffcb40
    3390:	1fffccd4 	.word	0x1fffccd4
    3394:	1fff8828 	.word	0x1fff8828
    3398:	1fff882c 	.word	0x1fff882c
    339c:	41200000 	.word	0x41200000
    33a0:	42c80000 	.word	0x42c80000
    33a4:	1fffcccc 	.word	0x1fffcccc
    33a8:	00013efc 	.word	0x00013efc
    33ac:	00013f00 	.word	0x00013f00

000033b0 <menu()>:
void menu() {
    33b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (menuload == 4) {
    33b2:	4ca5      	ldr	r4, [pc, #660]	; (3648 <menu()+0x298>)
  incomingByte = Serial.read();  // read the incoming byte:
    33b4:	4da5      	ldr	r5, [pc, #660]	; (364c <menu()+0x29c>)
void menu() {
    33b6:	b083      	sub	sp, #12
        virtual int read() { return usb_serial_getchar(); }
    33b8:	f008 fbde 	bl	bb78 <usb_serial_getchar>
  if (menuload == 4) {
    33bc:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    33be:	6028      	str	r0, [r5, #0]
  if (menuload == 4) {
    33c0:	2b04      	cmp	r3, #4
    33c2:	d059      	beq.n	3478 <menu()+0xc8>
  if (menuload == 2) {
    33c4:	2b02      	cmp	r3, #2
    33c6:	f040 811d 	bne.w	3604 <menu()+0x254>
    switch (incomingByte) {
    33ca:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    33ce:	2b42      	cmp	r3, #66	; 0x42
    33d0:	f200 810f 	bhi.w	35f2 <menu()+0x242>
    33d4:	e8df f013 	tbh	[pc, r3, lsl #1]
    33d8:	08ea08dd 	.word	0x08ea08dd
    33dc:	089408f7 	.word	0x089408f7
    33e0:	08b308c0 	.word	0x08b308c0
    33e4:	088708cf 	.word	0x088708cf
    33e8:	010d010d 	.word	0x010d010d
    33ec:	010d010d 	.word	0x010d010d
    33f0:	010d010d 	.word	0x010d010d
    33f4:	010d010d 	.word	0x010d010d
    33f8:	010d010d 	.word	0x010d010d
    33fc:	010d010d 	.word	0x010d010d
    3400:	010d010d 	.word	0x010d010d
    3404:	010d010d 	.word	0x010d010d
    3408:	010d010d 	.word	0x010d010d
    340c:	010d010d 	.word	0x010d010d
    3410:	010d010d 	.word	0x010d010d
    3414:	010d010d 	.word	0x010d010d
    3418:	010d010d 	.word	0x010d010d
    341c:	010d010d 	.word	0x010d010d
    3420:	010d010d 	.word	0x010d010d
    3424:	010d010d 	.word	0x010d010d
    3428:	010d010d 	.word	0x010d010d
    342c:	010d010d 	.word	0x010d010d
    3430:	010d010d 	.word	0x010d010d
    3434:	010d010d 	.word	0x010d010d
    3438:	010d010d 	.word	0x010d010d
    343c:	010d0112 	.word	0x010d0112
    3440:	010d010d 	.word	0x010d010d
    3444:	010d010d 	.word	0x010d010d
    3448:	010d010d 	.word	0x010d010d
    344c:	010d010d 	.word	0x010d010d
    3450:	010d010d 	.word	0x010d010d
    3454:	010d010d 	.word	0x010d010d
    3458:	010d0046 	.word	0x010d0046
    345c:	07cc      	.short	0x07cc
    switch (incomingByte) {
    345e:	2871      	cmp	r0, #113	; 0x71
    3460:	f040 80c7 	bne.w	35f2 <menu()+0x242>
          menuload = 1;
    3464:	2200      	movs	r2, #0
          incomingByte = 'i';
    3466:	2373      	movs	r3, #115	; 0x73
          menuload = 1;
    3468:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    346a:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    346c:	6823      	ldr	r3, [r4, #0]
    346e:	2b00      	cmp	r3, #0
    3470:	f000 829b 	beq.w	39aa <menu()+0x5fa>
}
    3474:	b003      	add	sp, #12
    3476:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (incomingByte) {
    3478:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    347c:	2b42      	cmp	r3, #66	; 0x42
    347e:	f200 80b8 	bhi.w	35f2 <menu()+0x242>
    3482:	a201      	add	r2, pc, #4	; (adr r2, 3488 <menu()+0xd8>)
    3484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3488:	00004357 	.word	0x00004357
    348c:	00004369 	.word	0x00004369
    3490:	0000436d 	.word	0x0000436d
    3494:	0000404b 	.word	0x0000404b
    3498:	0000428b 	.word	0x0000428b
    349c:	000042a1 	.word	0x000042a1
    34a0:	000042bb 	.word	0x000042bb
    34a4:	000042ed 	.word	0x000042ed
    34a8:	000042f1 	.word	0x000042f1
    34ac:	000042f5 	.word	0x000042f5
    34b0:	000035f3 	.word	0x000035f3
    34b4:	000035f3 	.word	0x000035f3
    34b8:	000035f3 	.word	0x000035f3
    34bc:	000035f3 	.word	0x000035f3
    34c0:	000035f3 	.word	0x000035f3
    34c4:	000035f3 	.word	0x000035f3
    34c8:	000035f3 	.word	0x000035f3
    34cc:	000035f3 	.word	0x000035f3
    34d0:	000035f3 	.word	0x000035f3
    34d4:	000035f3 	.word	0x000035f3
    34d8:	000035f3 	.word	0x000035f3
    34dc:	000035f3 	.word	0x000035f3
    34e0:	000035f3 	.word	0x000035f3
    34e4:	000035f3 	.word	0x000035f3
    34e8:	000035f3 	.word	0x000035f3
    34ec:	000035f3 	.word	0x000035f3
    34f0:	000035f3 	.word	0x000035f3
    34f4:	000035f3 	.word	0x000035f3
    34f8:	000035f3 	.word	0x000035f3
    34fc:	000035f3 	.word	0x000035f3
    3500:	000035f3 	.word	0x000035f3
    3504:	000035f3 	.word	0x000035f3
    3508:	000035f3 	.word	0x000035f3
    350c:	000035f3 	.word	0x000035f3
    3510:	000035f3 	.word	0x000035f3
    3514:	000035f3 	.word	0x000035f3
    3518:	000035f3 	.word	0x000035f3
    351c:	000035f3 	.word	0x000035f3
    3520:	000035f3 	.word	0x000035f3
    3524:	000035f3 	.word	0x000035f3
    3528:	000035f3 	.word	0x000035f3
    352c:	000035f3 	.word	0x000035f3
    3530:	000035f3 	.word	0x000035f3
    3534:	000035f3 	.word	0x000035f3
    3538:	000035f3 	.word	0x000035f3
    353c:	000035f3 	.word	0x000035f3
    3540:	000035f3 	.word	0x000035f3
    3544:	000035f3 	.word	0x000035f3
    3548:	000035f3 	.word	0x000035f3
    354c:	000035f3 	.word	0x000035f3
    3550:	00004317 	.word	0x00004317
    3554:	000035f3 	.word	0x000035f3
    3558:	000035f3 	.word	0x000035f3
    355c:	000035f3 	.word	0x000035f3
    3560:	000035f3 	.word	0x000035f3
    3564:	000035f3 	.word	0x000035f3
    3568:	000035f3 	.word	0x000035f3
    356c:	000035f3 	.word	0x000035f3
    3570:	000035f3 	.word	0x000035f3
    3574:	000035f3 	.word	0x000035f3
    3578:	000035f3 	.word	0x000035f3
    357c:	000035f3 	.word	0x000035f3
    3580:	000035f3 	.word	0x000035f3
    3584:	000035f3 	.word	0x000035f3
    3588:	000035f3 	.word	0x000035f3
    358c:	00003465 	.word	0x00003465
    3590:	00004331 	.word	0x00004331
        virtual int available() { return usb_serial_available(); }
    3594:	f008 fb2c 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3598:	2800      	cmp	r0, #0
    359a:	dd0d      	ble.n	35b8 <menu()+0x208>
          settings.StoreVsetpoint = Serial.parseInt();
    359c:	482c      	ldr	r0, [pc, #176]	; (3650 <menu()+0x2a0>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    359e:	4e2d      	ldr	r6, [pc, #180]	; (3654 <menu()+0x2a4>)
          settings.StoreVsetpoint = Serial.parseInt();
    35a0:	f005 ff72 	bl	9488 <Stream::parseInt()>
    35a4:	f009 f9e2 	bl	c96c <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    35a8:	492b      	ldr	r1, [pc, #172]	; (3658 <menu()+0x2a8>)
    35aa:	f009 fae7 	bl	cb7c <__aeabi_fdiv>
          menuload = 1;
    35ae:	2201      	movs	r2, #1
          incomingByte = 'b';
    35b0:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    35b2:	6270      	str	r0, [r6, #36]	; 0x24
          menuload = 1;
    35b4:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    35b6:	602b      	str	r3, [r5, #0]
    35b8:	f008 fb1a 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    35bc:	2800      	cmp	r0, #0
    35be:	dd0e      	ble.n	35de <menu()+0x22e>
          settings.DisTaper = Serial.parseInt();
    35c0:	4823      	ldr	r0, [pc, #140]	; (3650 <menu()+0x2a0>)
          settings.DisTaper = settings.DisTaper / 1000;
    35c2:	4e24      	ldr	r6, [pc, #144]	; (3654 <menu()+0x2a4>)
          settings.DisTaper = Serial.parseInt();
    35c4:	f005 ff60 	bl	9488 <Stream::parseInt()>
    35c8:	f009 f9d0 	bl	c96c <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    35cc:	4922      	ldr	r1, [pc, #136]	; (3658 <menu()+0x2a8>)
    35ce:	f009 fad5 	bl	cb7c <__aeabi_fdiv>
          menuload = 1;
    35d2:	2201      	movs	r2, #1
          incomingByte = 'b';
    35d4:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    35d6:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
          menuload = 1;
    35da:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    35dc:	602b      	str	r3, [r5, #0]
    35de:	f008 fb07 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    35e2:	2800      	cmp	r0, #0
    35e4:	f301 80d2 	bgt.w	478c <menu()+0x13dc>
  if (menuload == 1) {
    35e8:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    35ea:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    35ec:	2b01      	cmp	r3, #1
    35ee:	f000 8539 	beq.w	4064 <menu()+0xcb4>
  if (incomingByte == 115 && menuload == 0) {
    35f2:	2873      	cmp	r0, #115	; 0x73
    35f4:	f43f af3a 	beq.w	346c <menu()+0xbc>
}
    35f8:	b003      	add	sp, #12
    35fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        calcur();
    35fc:	f7ff f9fc 	bl	29f8 <calcur()>
  if (menuload == 8) {
    3600:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    3602:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    3604:	2b08      	cmp	r3, #8
    3606:	d110      	bne.n	362a <menu()+0x27a>
    switch (incomingByte) {
    3608:	2834      	cmp	r0, #52	; 0x34
    360a:	f000 814f 	beq.w	38ac <menu()+0x4fc>
    360e:	f73f af26 	bgt.w	345e <menu()+0xae>
    3612:	2831      	cmp	r0, #49	; 0x31
    3614:	f000 8158 	beq.w	38c8 <menu()+0x518>
    3618:	2832      	cmp	r0, #50	; 0x32
    361a:	d1ea      	bne.n	35f2 <menu()+0x242>
    361c:	f008 fae8 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3620:	2800      	cmp	r0, #0
    3622:	f300 8265 	bgt.w	3af0 <menu()+0x740>
  if (menuload == 7) {
    3626:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    3628:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    362a:	2b07      	cmp	r3, #7
    362c:	d11d      	bne.n	366a <menu()+0x2ba>
    switch (incomingByte) {
    362e:	2834      	cmp	r0, #52	; 0x34
    3630:	f73f af15 	bgt.w	345e <menu()+0xae>
    3634:	2830      	cmp	r0, #48	; 0x30
    3636:	dddc      	ble.n	35f2 <menu()+0x242>
    3638:	3832      	subs	r0, #50	; 0x32
    363a:	2802      	cmp	r0, #2
    363c:	f201 8590 	bhi.w	5160 <menu()+0x1db0>
    3640:	e8df f000 	tbb	[pc, r0]
    3644:	0ca0      	.short	0x0ca0
    3646:	b4          	.byte	0xb4
    3647:	00          	.byte	0x00
    3648:	1fffcd38 	.word	0x1fffcd38
    364c:	1fffccfc 	.word	0x1fffccfc
    3650:	1fff8a04 	.word	0x1fff8a04
    3654:	1fffcde8 	.word	0x1fffcde8
    3658:	447a0000 	.word	0x447a0000
    365c:	f008 fac8 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3660:	2800      	cmp	r0, #0
    3662:	f300 825d 	bgt.w	3b20 <menu()+0x770>
  if (menuload == 6)  //Charging settings
    3666:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    3668:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    366a:	2b06      	cmp	r3, #6
    366c:	f040 826b 	bne.w	3b46 <menu()+0x796>
    switch (incomingByte) {
    3670:	f1a0 0331 	sub.w	r3, r0, #49	; 0x31
    3674:	2b40      	cmp	r3, #64	; 0x40
    3676:	d8bc      	bhi.n	35f2 <menu()+0x242>
    3678:	a201      	add	r2, pc, #4	; (adr r2, 3680 <menu()+0x2d0>)
    367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    367e:	bf00      	nop
    3680:	00003e39 	.word	0x00003e39
    3684:	00003f8b 	.word	0x00003f8b
    3688:	00003b39 	.word	0x00003b39
    368c:	00004027 	.word	0x00004027
    3690:	0000400b 	.word	0x0000400b
    3694:	00003feb 	.word	0x00003feb
    3698:	00003fd5 	.word	0x00003fd5
    369c:	000035f3 	.word	0x000035f3
    36a0:	00003fb3 	.word	0x00003fb3
    36a4:	000035f3 	.word	0x000035f3
    36a8:	000035f3 	.word	0x000035f3
    36ac:	000035f3 	.word	0x000035f3
    36b0:	000035f3 	.word	0x000035f3
    36b4:	000035f3 	.word	0x000035f3
    36b8:	000035f3 	.word	0x000035f3
    36bc:	000035f3 	.word	0x000035f3
    36c0:	000035f3 	.word	0x000035f3
    36c4:	000035f3 	.word	0x000035f3
    36c8:	000035f3 	.word	0x000035f3
    36cc:	000035f3 	.word	0x000035f3
    36d0:	000035f3 	.word	0x000035f3
    36d4:	000035f3 	.word	0x000035f3
    36d8:	000035f3 	.word	0x000035f3
    36dc:	000035f3 	.word	0x000035f3
    36e0:	000035f3 	.word	0x000035f3
    36e4:	000035f3 	.word	0x000035f3
    36e8:	000035f3 	.word	0x000035f3
    36ec:	000035f3 	.word	0x000035f3
    36f0:	000035f3 	.word	0x000035f3
    36f4:	000035f3 	.word	0x000035f3
    36f8:	000035f3 	.word	0x000035f3
    36fc:	000035f3 	.word	0x000035f3
    3700:	000035f3 	.word	0x000035f3
    3704:	000035f3 	.word	0x000035f3
    3708:	000035f3 	.word	0x000035f3
    370c:	000035f3 	.word	0x000035f3
    3710:	000035f3 	.word	0x000035f3
    3714:	000035f3 	.word	0x000035f3
    3718:	000035f3 	.word	0x000035f3
    371c:	000035f3 	.word	0x000035f3
    3720:	000035f3 	.word	0x000035f3
    3724:	000035f3 	.word	0x000035f3
    3728:	000035f3 	.word	0x000035f3
    372c:	000035f3 	.word	0x000035f3
    3730:	000035f3 	.word	0x000035f3
    3734:	000035f3 	.word	0x000035f3
    3738:	000035f3 	.word	0x000035f3
    373c:	000035f3 	.word	0x000035f3
    3740:	000035f3 	.word	0x000035f3
    3744:	000035f3 	.word	0x000035f3
    3748:	000035f3 	.word	0x000035f3
    374c:	000035f3 	.word	0x000035f3
    3750:	000035f3 	.word	0x000035f3
    3754:	000035f3 	.word	0x000035f3
    3758:	000035f3 	.word	0x000035f3
    375c:	000035f3 	.word	0x000035f3
    3760:	000035f3 	.word	0x000035f3
    3764:	000035f3 	.word	0x000035f3
    3768:	000035f3 	.word	0x000035f3
    376c:	000035f3 	.word	0x000035f3
    3770:	000035f3 	.word	0x000035f3
    3774:	000035f3 	.word	0x000035f3
    3778:	000035f3 	.word	0x000035f3
    377c:	000035f3 	.word	0x000035f3
    3780:	00003465 	.word	0x00003465
    3784:	f008 fa34 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3788:	2800      	cmp	r0, #0
    378a:	f77f af6c 	ble.w	3666 <menu()+0x2b6>
          settings.CellGap = Serial.parseInt();
    378e:	48b8      	ldr	r0, [pc, #736]	; (3a70 <menu()+0x6c0>)
          settings.CellGap = settings.CellGap * 0.001;
    3790:	4eb8      	ldr	r6, [pc, #736]	; (3a74 <menu()+0x6c4>)
          settings.CellGap = Serial.parseInt();
    3792:	f005 fe79 	bl	9488 <Stream::parseInt()>
    3796:	f009 f8e9 	bl	c96c <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    379a:	49b7      	ldr	r1, [pc, #732]	; (3a78 <menu()+0x6c8>)
    379c:	f009 f93a 	bl	ca14 <__aeabi_fmul>
          menuload = 1;
    37a0:	2301      	movs	r3, #1
    37a2:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    37a4:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    37a6:	6470      	str	r0, [r6, #68]	; 0x44
          incomingByte = 'a';
    37a8:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    37aa:	e010      	b.n	37ce <menu()+0x41e>
    37ac:	f008 fa20 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    37b0:	2800      	cmp	r0, #0
    37b2:	f77f af58 	ble.w	3666 <menu()+0x2b6>
          settings.triptime = Serial.parseInt();
    37b6:	48ae      	ldr	r0, [pc, #696]	; (3a70 <menu()+0x6c0>)
    37b8:	4eae      	ldr	r6, [pc, #696]	; (3a74 <menu()+0x6c4>)
    37ba:	f005 fe65 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    37be:	2301      	movs	r3, #1
    37c0:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    37c2:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    37c4:	86b0      	strh	r0, [r6, #52]	; 0x34
          incomingByte = 'a';
    37c6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    37c8:	e001      	b.n	37ce <menu()+0x41e>
        virtual int read() { return usb_serial_getchar(); }
    37ca:	f008 f9d5 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    37ce:	f008 fa0f 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    37d2:	4605      	mov	r5, r0
    37d4:	2800      	cmp	r0, #0
    37d6:	d1f8      	bne.n	37ca <menu()+0x41a>
        SERIALCONSOLE.println();
    37d8:	48a5      	ldr	r0, [pc, #660]	; (3a70 <menu()+0x6c0>)
    37da:	f005 fcf7 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    37de:	48a4      	ldr	r0, [pc, #656]	; (3a70 <menu()+0x6c0>)
    37e0:	f005 fcf4 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    37e4:	48a2      	ldr	r0, [pc, #648]	; (3a70 <menu()+0x6c0>)
    37e6:	f005 fcf1 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    37ea:	48a1      	ldr	r0, [pc, #644]	; (3a70 <menu()+0x6c0>)
    37ec:	f005 fcee 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    37f0:	489f      	ldr	r0, [pc, #636]	; (3a70 <menu()+0x6c0>)
    37f2:	f005 fceb 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    37f6:	211f      	movs	r1, #31
    37f8:	48a0      	ldr	r0, [pc, #640]	; (3a7c <menu()+0x6cc>)
    37fa:	f008 fa2b 	bl	bc54 <usb_serial_write>
    37fe:	489c      	ldr	r0, [pc, #624]	; (3a70 <menu()+0x6c0>)
    3800:	f005 fce4 	bl	91cc <Print::println()>
    3804:	211c      	movs	r1, #28
    3806:	489e      	ldr	r0, [pc, #632]	; (3a80 <menu()+0x6d0>)
    3808:	f008 fa24 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    380c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    380e:	499d      	ldr	r1, [pc, #628]	; (3a84 <menu()+0x6d4>)
    3810:	f009 f900 	bl	ca14 <__aeabi_fmul>
    3814:	f008 feda 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3818:	9500      	str	r5, [sp, #0]
    381a:	4602      	mov	r2, r0
    381c:	460b      	mov	r3, r1
    381e:	4894      	ldr	r0, [pc, #592]	; (3a70 <menu()+0x6c0>)
    3820:	f005 fcf6 	bl	9210 <Print::printFloat(double, unsigned char)>
    3824:	2102      	movs	r1, #2
    3826:	4898      	ldr	r0, [pc, #608]	; (3a88 <menu()+0x6d8>)
    3828:	f008 fa14 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    382c:	4890      	ldr	r0, [pc, #576]	; (3a70 <menu()+0x6c0>)
    382e:	f005 fccd 	bl	91cc <Print::println()>
    3832:	2123      	movs	r1, #35	; 0x23
    3834:	4895      	ldr	r0, [pc, #596]	; (3a8c <menu()+0x6dc>)
    3836:	f008 fa0d 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    383a:	6c70      	ldr	r0, [r6, #68]	; 0x44
    383c:	4991      	ldr	r1, [pc, #580]	; (3a84 <menu()+0x6d4>)
    383e:	f009 f8e9 	bl	ca14 <__aeabi_fmul>
    3842:	f008 fec3 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3846:	9500      	str	r5, [sp, #0]
    3848:	4602      	mov	r2, r0
    384a:	460b      	mov	r3, r1
    384c:	4888      	ldr	r0, [pc, #544]	; (3a70 <menu()+0x6c0>)
    384e:	f005 fcdf 	bl	9210 <Print::printFloat(double, unsigned char)>
    3852:	2102      	movs	r1, #2
    3854:	488c      	ldr	r0, [pc, #560]	; (3a88 <menu()+0x6d8>)
    3856:	f008 f9fd 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    385a:	4885      	ldr	r0, [pc, #532]	; (3a70 <menu()+0x6c0>)
    385c:	f005 fcb6 	bl	91cc <Print::println()>
    3860:	2119      	movs	r1, #25
    3862:	488b      	ldr	r0, [pc, #556]	; (3a90 <menu()+0x6e0>)
    3864:	f008 f9f6 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    3868:	6c30      	ldr	r0, [r6, #64]	; 0x40
    386a:	f008 feaf 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    386e:	2502      	movs	r5, #2
    3870:	460b      	mov	r3, r1
    3872:	4602      	mov	r2, r0
    3874:	9500      	str	r5, [sp, #0]
    3876:	487e      	ldr	r0, [pc, #504]	; (3a70 <menu()+0x6c0>)
    3878:	f005 fcca 	bl	9210 <Print::printFloat(double, unsigned char)>
    387c:	4629      	mov	r1, r5
    387e:	4885      	ldr	r0, [pc, #532]	; (3a94 <menu()+0x6e4>)
    3880:	f008 f9e8 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3884:	487a      	ldr	r0, [pc, #488]	; (3a70 <menu()+0x6c0>)
    3886:	f005 fca1 	bl	91cc <Print::println()>
    388a:	2122      	movs	r1, #34	; 0x22
    388c:	4882      	ldr	r0, [pc, #520]	; (3a98 <menu()+0x6e8>)
    388e:	f008 f9e1 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3892:	8eb1      	ldrh	r1, [r6, #52]	; 0x34
    3894:	4876      	ldr	r0, [pc, #472]	; (3a70 <menu()+0x6c0>)
    3896:	f005 fc91 	bl	91bc <Print::print(long)>
    389a:	2103      	movs	r1, #3
    389c:	487f      	ldr	r0, [pc, #508]	; (3a9c <menu()+0x6ec>)
    389e:	f008 f9d9 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    38a2:	4873      	ldr	r0, [pc, #460]	; (3a70 <menu()+0x6c0>)
    38a4:	f005 fc92 	bl	91cc <Print::println()>
        break;
    38a8:	2307      	movs	r3, #7
    38aa:	e07b      	b.n	39a4 <menu()+0x5f4>
        virtual int available() { return usb_serial_available(); }
    38ac:	f008 f9a0 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    38b0:	2800      	cmp	r0, #0
    38b2:	f77f aeb8 	ble.w	3626 <menu()+0x276>
          settings.TempOff = Serial.parseInt();
    38b6:	486e      	ldr	r0, [pc, #440]	; (3a70 <menu()+0x6c0>)
    38b8:	4e6e      	ldr	r6, [pc, #440]	; (3a74 <menu()+0x6c4>)
    38ba:	f005 fde5 	bl	9488 <Stream::parseInt()>
    38be:	b203      	sxth	r3, r0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    38c0:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
          settings.TempOff = Serial.parseInt();
    38c2:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    38c6:	e120      	b.n	3b0a <menu()+0x75a>
    38c8:	f008 f992 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    38cc:	2800      	cmp	r0, #0
    38ce:	f300 811f 	bgt.w	3b10 <menu()+0x760>
        if (settings.IgnoreTemp > 2) {
    38d2:	4e68      	ldr	r6, [pc, #416]	; (3a74 <menu()+0x6c4>)
    38d4:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    38d8:	f9b6 30d0 	ldrsh.w	r3, [r6, #208]	; 0xd0
    38dc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
        if (settings.IgnoreTemp > 2) {
    38de:	2902      	cmp	r1, #2
          settings.IgnoreTemp = 0;
    38e0:	bf84      	itt	hi
    38e2:	2100      	movhi	r1, #0
    38e4:	f886 1048 	strbhi.w	r1, [r6, #72]	; 0x48
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    38e8:	486d      	ldr	r0, [pc, #436]	; (3aa0 <menu()+0x6f0>)
    38ea:	f7fd fa9f 	bl	e2c <BMSModuleManager::setSensors(int, float, int)>
          menuload = 1;
    38ee:	2201      	movs	r2, #1
          incomingByte = 'i';
    38f0:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    38f2:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    38f4:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    38f6:	e001      	b.n	38fc <menu()+0x54c>
        virtual int read() { return usb_serial_getchar(); }
    38f8:	f008 f93e 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    38fc:	f008 f978 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    3900:	4605      	mov	r5, r0
    3902:	2800      	cmp	r0, #0
    3904:	d1f8      	bne.n	38f8 <menu()+0x548>
        SERIALCONSOLE.println();
    3906:	485a      	ldr	r0, [pc, #360]	; (3a70 <menu()+0x6c0>)
    3908:	f005 fc60 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    390c:	4858      	ldr	r0, [pc, #352]	; (3a70 <menu()+0x6c0>)
    390e:	f005 fc5d 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3912:	4857      	ldr	r0, [pc, #348]	; (3a70 <menu()+0x6c0>)
    3914:	f005 fc5a 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3918:	4855      	ldr	r0, [pc, #340]	; (3a70 <menu()+0x6c0>)
    391a:	f005 fc57 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    391e:	4854      	ldr	r0, [pc, #336]	; (3a70 <menu()+0x6c0>)
    3920:	f005 fc54 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3924:	2115      	movs	r1, #21
    3926:	485f      	ldr	r0, [pc, #380]	; (3aa4 <menu()+0x6f4>)
    3928:	f008 f994 	bl	bc54 <usb_serial_write>
    392c:	4850      	ldr	r0, [pc, #320]	; (3a70 <menu()+0x6c0>)
    392e:	f005 fc4d 	bl	91cc <Print::println()>
    3932:	2118      	movs	r1, #24
    3934:	485c      	ldr	r0, [pc, #368]	; (3aa8 <menu()+0x6f8>)
    3936:	f008 f98d 	bl	bc54 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    393a:	462b      	mov	r3, r5
    393c:	220a      	movs	r2, #10
    393e:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    3942:	484b      	ldr	r0, [pc, #300]	; (3a70 <menu()+0x6c0>)
    3944:	f005 fc5a 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    3948:	4849      	ldr	r0, [pc, #292]	; (3a70 <menu()+0x6c0>)
    394a:	f005 fc3f 	bl	91cc <Print::println()>
    394e:	2128      	movs	r1, #40	; 0x28
    3950:	4856      	ldr	r0, [pc, #344]	; (3aac <menu()+0x6fc>)
    3952:	f008 f97f 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    3956:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    3958:	494a      	ldr	r1, [pc, #296]	; (3a84 <menu()+0x6d4>)
    395a:	f009 f85b 	bl	ca14 <__aeabi_fmul>
    395e:	f008 fe35 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3962:	9500      	str	r5, [sp, #0]
    3964:	460b      	mov	r3, r1
    3966:	4602      	mov	r2, r0
    3968:	4841      	ldr	r0, [pc, #260]	; (3a70 <menu()+0x6c0>)
    396a:	f005 fc51 	bl	9210 <Print::printFloat(double, unsigned char)>
    396e:	2102      	movs	r1, #2
    3970:	4845      	ldr	r0, [pc, #276]	; (3a88 <menu()+0x6d8>)
    3972:	f008 f96f 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3976:	483e      	ldr	r0, [pc, #248]	; (3a70 <menu()+0x6c0>)
    3978:	f005 fc28 	bl	91cc <Print::println()>
    397c:	2118      	movs	r1, #24
    397e:	484c      	ldr	r0, [pc, #304]	; (3ab0 <menu()+0x700>)
    3980:	f008 f968 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3984:	f9b6 10d0 	ldrsh.w	r1, [r6, #208]	; 0xd0
    3988:	4839      	ldr	r0, [pc, #228]	; (3a70 <menu()+0x6c0>)
    398a:	f005 fc17 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    398e:	4838      	ldr	r0, [pc, #224]	; (3a70 <menu()+0x6c0>)
    3990:	f005 fc1c 	bl	91cc <Print::println()>
    3994:	2113      	movs	r1, #19
    3996:	4847      	ldr	r0, [pc, #284]	; (3ab4 <menu()+0x704>)
    3998:	f008 f95c 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    399c:	4834      	ldr	r0, [pc, #208]	; (3a70 <menu()+0x6c0>)
    399e:	f005 fc15 	bl	91cc <Print::println()>
        break;
    39a2:	2308      	movs	r3, #8
        menuload = 7;
    39a4:	6023      	str	r3, [r4, #0]
}
    39a6:	b003      	add	sp, #12
    39a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    39aa:	4e43      	ldr	r6, [pc, #268]	; (3ab8 <menu()+0x708>)
    SERIALCONSOLE.println();
    39ac:	4830      	ldr	r0, [pc, #192]	; (3a70 <menu()+0x6c0>)
    39ae:	f005 fc0d 	bl	91cc <Print::println()>
    39b2:	2104      	movs	r1, #4
    39b4:	4841      	ldr	r0, [pc, #260]	; (3abc <menu()+0x70c>)
    39b6:	f008 f94d 	bl	bc54 <usb_serial_write>
    39ba:	482d      	ldr	r0, [pc, #180]	; (3a70 <menu()+0x6c0>)
    39bc:	f005 fc06 	bl	91cc <Print::println()>
    39c0:	2110      	movs	r1, #16
    39c2:	483f      	ldr	r0, [pc, #252]	; (3ac0 <menu()+0x710>)
    39c4:	f008 f946 	bl	bc54 <usb_serial_write>
    39c8:	4829      	ldr	r0, [pc, #164]	; (3a70 <menu()+0x6c0>)
    39ca:	f005 fbff 	bl	91cc <Print::println()>
    39ce:	2113      	movs	r1, #19
    39d0:	483c      	ldr	r0, [pc, #240]	; (3ac4 <menu()+0x714>)
    39d2:	f008 f93f 	bl	bc54 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    39d6:	4b3c      	ldr	r3, [pc, #240]	; (3ac8 <menu()+0x718>)
	size_t print(int n)				{ return print((long)n); }
    39d8:	4825      	ldr	r0, [pc, #148]	; (3a70 <menu()+0x6c0>)
    39da:	6819      	ldr	r1, [r3, #0]
    39dc:	f005 fbee 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    39e0:	4823      	ldr	r0, [pc, #140]	; (3a70 <menu()+0x6c0>)
    39e2:	f005 fbf3 	bl	91cc <Print::println()>
    39e6:	2114      	movs	r1, #20
    39e8:	4838      	ldr	r0, [pc, #224]	; (3acc <menu()+0x71c>)
    39ea:	f008 f933 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    39ee:	4820      	ldr	r0, [pc, #128]	; (3a70 <menu()+0x6c0>)
    39f0:	f005 fbec 	bl	91cc <Print::println()>
    39f4:	211e      	movs	r1, #30
    39f6:	4836      	ldr	r0, [pc, #216]	; (3ad0 <menu()+0x720>)
    39f8:	f008 f92c 	bl	bc54 <usb_serial_write>
    39fc:	481c      	ldr	r0, [pc, #112]	; (3a70 <menu()+0x6c0>)
    39fe:	f005 fbe5 	bl	91cc <Print::println()>
    3a02:	2115      	movs	r1, #21
    3a04:	4833      	ldr	r0, [pc, #204]	; (3ad4 <menu()+0x724>)
    3a06:	f008 f925 	bl	bc54 <usb_serial_write>
    3a0a:	4819      	ldr	r0, [pc, #100]	; (3a70 <menu()+0x6c0>)
    3a0c:	f005 fbde 	bl	91cc <Print::println()>
    3a10:	211e      	movs	r1, #30
    3a12:	4831      	ldr	r0, [pc, #196]	; (3ad8 <menu()+0x728>)
    3a14:	f008 f91e 	bl	bc54 <usb_serial_write>
    3a18:	4815      	ldr	r0, [pc, #84]	; (3a70 <menu()+0x6c0>)
    3a1a:	f005 fbd7 	bl	91cc <Print::println()>
    3a1e:	2120      	movs	r1, #32
    3a20:	482e      	ldr	r0, [pc, #184]	; (3adc <menu()+0x72c>)
    3a22:	f008 f917 	bl	bc54 <usb_serial_write>
    3a26:	4812      	ldr	r0, [pc, #72]	; (3a70 <menu()+0x6c0>)
    3a28:	f005 fbd0 	bl	91cc <Print::println()>
    3a2c:	2119      	movs	r1, #25
    3a2e:	482c      	ldr	r0, [pc, #176]	; (3ae0 <menu()+0x730>)
    3a30:	f008 f910 	bl	bc54 <usb_serial_write>
    3a34:	480e      	ldr	r0, [pc, #56]	; (3a70 <menu()+0x6c0>)
    3a36:	f005 fbc9 	bl	91cc <Print::println()>
    3a3a:	2112      	movs	r1, #18
    3a3c:	4829      	ldr	r0, [pc, #164]	; (3ae4 <menu()+0x734>)
    3a3e:	f008 f909 	bl	bc54 <usb_serial_write>
    3a42:	480b      	ldr	r0, [pc, #44]	; (3a70 <menu()+0x6c0>)
    3a44:	f005 fbc2 	bl	91cc <Print::println()>
    3a48:	210f      	movs	r1, #15
    3a4a:	4827      	ldr	r0, [pc, #156]	; (3ae8 <menu()+0x738>)
    3a4c:	f008 f902 	bl	bc54 <usb_serial_write>
    3a50:	4807      	ldr	r0, [pc, #28]	; (3a70 <menu()+0x6c0>)
    3a52:	f005 fbbb 	bl	91cc <Print::println()>
    3a56:	210d      	movs	r1, #13
    3a58:	4824      	ldr	r0, [pc, #144]	; (3aec <menu()+0x73c>)
    3a5a:	f008 f8fb 	bl	bc54 <usb_serial_write>
    3a5e:	4804      	ldr	r0, [pc, #16]	; (3a70 <menu()+0x6c0>)
    3a60:	f005 fbb4 	bl	91cc <Print::println()>
    debug = 0;
    3a64:	2200      	movs	r2, #0
    menuload = 1;
    3a66:	2301      	movs	r3, #1
    debug = 0;
    3a68:	6032      	str	r2, [r6, #0]
    menuload = 1;
    3a6a:	6023      	str	r3, [r4, #0]
}
    3a6c:	b003      	add	sp, #12
    3a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a70:	1fff8a04 	.word	0x1fff8a04
    3a74:	1fffcde8 	.word	0x1fffcde8
    3a78:	3a83126f 	.word	0x3a83126f
    3a7c:	00014154 	.word	0x00014154
    3a80:	00014174 	.word	0x00014174
    3a84:	447a0000 	.word	0x447a0000
    3a88:	00013f70 	.word	0x00013f70
    3a8c:	00014194 	.word	0x00014194
    3a90:	000141b8 	.word	0x000141b8
    3a94:	00014150 	.word	0x00014150
    3a98:	000141d4 	.word	0x000141d4
    3a9c:	000141f8 	.word	0x000141f8
    3aa0:	1fff91e0 	.word	0x1fff91e0
    3aa4:	000143d0 	.word	0x000143d0
    3aa8:	00013f28 	.word	0x00013f28
    3aac:	00013f44 	.word	0x00013f44
    3ab0:	00013f74 	.word	0x00013f74
    3ab4:	00013f90 	.word	0x00013f90
    3ab8:	1fff8850 	.word	0x1fff8850
    3abc:	00014308 	.word	0x00014308
    3ac0:	00014310 	.word	0x00014310
    3ac4:	00014324 	.word	0x00014324
    3ac8:	1fff885c 	.word	0x1fff885c
    3acc:	00014338 	.word	0x00014338
    3ad0:	00014350 	.word	0x00014350
    3ad4:	00014370 	.word	0x00014370
    3ad8:	00014388 	.word	0x00014388
    3adc:	000143a8 	.word	0x000143a8
    3ae0:	000143cc 	.word	0x000143cc
    3ae4:	000143e8 	.word	0x000143e8
    3ae8:	000143fc 	.word	0x000143fc
    3aec:	0001440c 	.word	0x0001440c
          settings.IgnoreVolt = Serial.parseInt();
    3af0:	48c5      	ldr	r0, [pc, #788]	; (3e08 <menu()+0xa58>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    3af2:	4ec6      	ldr	r6, [pc, #792]	; (3e0c <menu()+0xa5c>)
          settings.IgnoreVolt = Serial.parseInt();
    3af4:	f005 fcc8 	bl	9488 <Stream::parseInt()>
    3af8:	f008 ff38 	bl	c96c <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    3afc:	49c4      	ldr	r1, [pc, #784]	; (3e10 <menu()+0xa60>)
    3afe:	f008 ff89 	bl	ca14 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    3b02:	f9b6 30d0 	ldrsh.w	r3, [r6, #208]	; 0xd0
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    3b06:	64f0      	str	r0, [r6, #76]	; 0x4c
    3b08:	4602      	mov	r2, r0
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    3b0a:	f896 1048 	ldrb.w	r1, [r6, #72]	; 0x48
    3b0e:	e6eb      	b.n	38e8 <menu()+0x538>
          settings.IgnoreTemp = Serial.parseInt();
    3b10:	48bd      	ldr	r0, [pc, #756]	; (3e08 <menu()+0xa58>)
    3b12:	4ebe      	ldr	r6, [pc, #760]	; (3e0c <menu()+0xa5c>)
    3b14:	f005 fcb8 	bl	9488 <Stream::parseInt()>
    3b18:	b2c1      	uxtb	r1, r0
    3b1a:	f886 1048 	strb.w	r1, [r6, #72]	; 0x48
    3b1e:	e6db      	b.n	38d8 <menu()+0x528>
          settings.WarnToff = Serial.parseInt();
    3b20:	48b9      	ldr	r0, [pc, #740]	; (3e08 <menu()+0xa58>)
    3b22:	4eba      	ldr	r6, [pc, #744]	; (3e0c <menu()+0xa5c>)
    3b24:	f005 fcb0 	bl	9488 <Stream::parseInt()>
    3b28:	f008 ff20 	bl	c96c <__aeabi_i2f>
          menuload = 1;
    3b2c:	2301      	movs	r3, #1
    3b2e:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    3b30:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    3b32:	6430      	str	r0, [r6, #64]	; 0x40
          incomingByte = 'a';
    3b34:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3b36:	e64a      	b.n	37ce <menu()+0x41e>
        virtual int available() { return usb_serial_available(); }
    3b38:	f008 f85a 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3b3c:	2800      	cmp	r0, #0
    3b3e:	f301 824d 	bgt.w	4fdc <menu()+0x1c2c>
  if (menuload == 5) {
    3b42:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    3b44:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    3b46:	2b05      	cmp	r3, #5
    3b48:	d117      	bne.n	3b7a <menu()+0x7ca>
    switch (incomingByte) {
    3b4a:	2836      	cmp	r0, #54	; 0x36
    3b4c:	f300 85bb 	bgt.w	46c6 <menu()+0x1316>
    3b50:	2830      	cmp	r0, #48	; 0x30
    3b52:	f77f ac8f 	ble.w	3474 <menu()+0xc4>
    3b56:	3832      	subs	r0, #50	; 0x32
    3b58:	2804      	cmp	r0, #4
    3b5a:	f201 82f0 	bhi.w	513e <menu()+0x1d8e>
    3b5e:	e8df f010 	tbh	[pc, r0, lsl #1]
    3b62:	0135      	.short	0x0135
    3b64:	00a90125 	.word	0x00a90125
    3b68:	01450005 	.word	0x01450005
    3b6c:	f008 f840 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3b70:	2800      	cmp	r0, #0
    3b72:	f300 8601 	bgt.w	4778 <menu()+0x13c8>
  if (menuload == 3) {
    3b76:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    3b78:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    3b7a:	2b03      	cmp	r3, #3
    3b7c:	f47f ad36 	bne.w	35ec <menu()+0x23c>
    switch (incomingByte) {
    3b80:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    3b84:	2b48      	cmp	r3, #72	; 0x48
    3b86:	f63f ad34 	bhi.w	35f2 <menu()+0x242>
    3b8a:	a201      	add	r2, pc, #4	; (adr r2, 3b90 <menu()+0x7e0>)
    3b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3b90:	00004dcb 	.word	0x00004dcb
    3b94:	00004e17 	.word	0x00004e17
    3b98:	00004df7 	.word	0x00004df7
    3b9c:	00004fc1 	.word	0x00004fc1
    3ba0:	00004fa5 	.word	0x00004fa5
    3ba4:	00004f83 	.word	0x00004f83
    3ba8:	00004f63 	.word	0x00004f63
    3bac:	00004f4d 	.word	0x00004f4d
    3bb0:	00004f31 	.word	0x00004f31
    3bb4:	00004f11 	.word	0x00004f11
    3bb8:	000035f3 	.word	0x000035f3
    3bbc:	000035f3 	.word	0x000035f3
    3bc0:	000035f3 	.word	0x000035f3
    3bc4:	000035f3 	.word	0x000035f3
    3bc8:	000035f3 	.word	0x000035f3
    3bcc:	000035f3 	.word	0x000035f3
    3bd0:	000035f3 	.word	0x000035f3
    3bd4:	000035f3 	.word	0x000035f3
    3bd8:	000035f3 	.word	0x000035f3
    3bdc:	000035f3 	.word	0x000035f3
    3be0:	000035f3 	.word	0x000035f3
    3be4:	000035f3 	.word	0x000035f3
    3be8:	000035f3 	.word	0x000035f3
    3bec:	000035f3 	.word	0x000035f3
    3bf0:	000035f3 	.word	0x000035f3
    3bf4:	000035f3 	.word	0x000035f3
    3bf8:	000035f3 	.word	0x000035f3
    3bfc:	000035f3 	.word	0x000035f3
    3c00:	000035f3 	.word	0x000035f3
    3c04:	000035f3 	.word	0x000035f3
    3c08:	000035f3 	.word	0x000035f3
    3c0c:	000035f3 	.word	0x000035f3
    3c10:	000035f3 	.word	0x000035f3
    3c14:	000035f3 	.word	0x000035f3
    3c18:	000035f3 	.word	0x000035f3
    3c1c:	000035f3 	.word	0x000035f3
    3c20:	000035f3 	.word	0x000035f3
    3c24:	000035f3 	.word	0x000035f3
    3c28:	000035f3 	.word	0x000035f3
    3c2c:	000035f3 	.word	0x000035f3
    3c30:	000035f3 	.word	0x000035f3
    3c34:	000035f3 	.word	0x000035f3
    3c38:	000035f3 	.word	0x000035f3
    3c3c:	000035f3 	.word	0x000035f3
    3c40:	000035f3 	.word	0x000035f3
    3c44:	000035f3 	.word	0x000035f3
    3c48:	000035f3 	.word	0x000035f3
    3c4c:	000035f3 	.word	0x000035f3
    3c50:	000035f3 	.word	0x000035f3
    3c54:	00004efb 	.word	0x00004efb
    3c58:	00004db5 	.word	0x00004db5
    3c5c:	00004d9f 	.word	0x00004d9f
    3c60:	00004d89 	.word	0x00004d89
    3c64:	00004d73 	.word	0x00004d73
    3c68:	00004d25 	.word	0x00004d25
    3c6c:	00003595 	.word	0x00003595
    3c70:	000035b9 	.word	0x000035b9
    3c74:	000035f3 	.word	0x000035f3
    3c78:	000035df 	.word	0x000035df
    3c7c:	00004edb 	.word	0x00004edb
    3c80:	000035f3 	.word	0x000035f3
    3c84:	000035f3 	.word	0x000035f3
    3c88:	000035f3 	.word	0x000035f3
    3c8c:	000035f3 	.word	0x000035f3
    3c90:	000035f3 	.word	0x000035f3
    3c94:	00004ecd 	.word	0x00004ecd
    3c98:	00004eaf 	.word	0x00004eaf
    3c9c:	000035f3 	.word	0x000035f3
    3ca0:	000035f3 	.word	0x000035f3
    3ca4:	000035f3 	.word	0x000035f3
    3ca8:	000035f3 	.word	0x000035f3
    3cac:	000035f3 	.word	0x000035f3
    3cb0:	00004e99 	.word	0x00004e99
    3cb4:	f007 ff9c 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3cb8:	2800      	cmp	r0, #0
    3cba:	f77f af5c 	ble.w	3b76 <menu()+0x7c6>
          settings.gaugelow = Serial.parseInt();
    3cbe:	4852      	ldr	r0, [pc, #328]	; (3e08 <menu()+0xa58>)
    3cc0:	4e52      	ldr	r6, [pc, #328]	; (3e0c <menu()+0xa5c>)
    3cc2:	f005 fbe1 	bl	9488 <Stream::parseInt()>
          gaugedebug = 2;
    3cc6:	4b53      	ldr	r3, [pc, #332]	; (3e14 <menu()+0xa64>)
          settings.gaugelow = Serial.parseInt();
    3cc8:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
          gaugedebug = 2;
    3ccc:	2202      	movs	r2, #2
          gaugedebug = 3;
    3cce:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    3cd0:	f7fd fdf4 	bl	18bc <gaugeupdate()>
          menuload = 1;
    3cd4:	2201      	movs	r2, #1
          incomingByte = 'k';
    3cd6:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    3cd8:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    3cda:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3cdc:	e001      	b.n	3ce2 <menu()+0x932>
        virtual int read() { return usb_serial_getchar(); }
    3cde:	f007 ff4b 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    3ce2:	f007 ff85 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    3ce6:	2800      	cmp	r0, #0
    3ce8:	d1f9      	bne.n	3cde <menu()+0x92e>
        SERIALCONSOLE.println();
    3cea:	4847      	ldr	r0, [pc, #284]	; (3e08 <menu()+0xa58>)
    3cec:	f005 fa6e 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3cf0:	4845      	ldr	r0, [pc, #276]	; (3e08 <menu()+0xa58>)
    3cf2:	f005 fa6b 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3cf6:	4844      	ldr	r0, [pc, #272]	; (3e08 <menu()+0xa58>)
    3cf8:	f005 fa68 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3cfc:	4842      	ldr	r0, [pc, #264]	; (3e08 <menu()+0xa58>)
    3cfe:	f005 fa65 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3d02:	4841      	ldr	r0, [pc, #260]	; (3e08 <menu()+0xa58>)
    3d04:	f005 fa62 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3d08:	2121      	movs	r1, #33	; 0x21
    3d0a:	4843      	ldr	r0, [pc, #268]	; (3e18 <menu()+0xa68>)
    3d0c:	f007 ffa2 	bl	bc54 <usb_serial_write>
    3d10:	483d      	ldr	r0, [pc, #244]	; (3e08 <menu()+0xa58>)
    3d12:	f005 fa5b 	bl	91cc <Print::println()>
    3d16:	2115      	movs	r1, #21
    3d18:	4840      	ldr	r0, [pc, #256]	; (3e1c <menu()+0xa6c>)
    3d1a:	f007 ff9b 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3d1e:	f8d6 108c 	ldr.w	r1, [r6, #140]	; 0x8c
    3d22:	4839      	ldr	r0, [pc, #228]	; (3e08 <menu()+0xa58>)
    3d24:	f005 fa4a 	bl	91bc <Print::print(long)>
    3d28:	2102      	movs	r1, #2
    3d2a:	483d      	ldr	r0, [pc, #244]	; (3e20 <menu()+0xa70>)
    3d2c:	f007 ff92 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d30:	4835      	ldr	r0, [pc, #212]	; (3e08 <menu()+0xa58>)
    3d32:	f005 fa4b 	bl	91cc <Print::println()>
    3d36:	211e      	movs	r1, #30
    3d38:	483a      	ldr	r0, [pc, #232]	; (3e24 <menu()+0xa74>)
    3d3a:	f007 ff8b 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3d3e:	f8d6 1094 	ldr.w	r1, [r6, #148]	; 0x94
    3d42:	4831      	ldr	r0, [pc, #196]	; (3e08 <menu()+0xa58>)
    3d44:	f005 fa3a 	bl	91bc <Print::print(long)>
    3d48:	2103      	movs	r1, #3
    3d4a:	4837      	ldr	r0, [pc, #220]	; (3e28 <menu()+0xa78>)
    3d4c:	f007 ff82 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3d50:	482d      	ldr	r0, [pc, #180]	; (3e08 <menu()+0xa58>)
    3d52:	f005 fa3b 	bl	91cc <Print::println()>
    3d56:	211e      	movs	r1, #30
    3d58:	4834      	ldr	r0, [pc, #208]	; (3e2c <menu()+0xa7c>)
    3d5a:	f007 ff7b 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3d5e:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
    3d62:	4829      	ldr	r0, [pc, #164]	; (3e08 <menu()+0xa58>)
    3d64:	f005 fa2a 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3d68:	4827      	ldr	r0, [pc, #156]	; (3e08 <menu()+0xa58>)
    3d6a:	f005 fa2f 	bl	91cc <Print::println()>
    3d6e:	211d      	movs	r1, #29
    3d70:	482f      	ldr	r0, [pc, #188]	; (3e30 <menu()+0xa80>)
    3d72:	f007 ff6f 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3d76:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    3d7a:	4823      	ldr	r0, [pc, #140]	; (3e08 <menu()+0xa58>)
    3d7c:	f005 fa1e 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3d80:	4821      	ldr	r0, [pc, #132]	; (3e08 <menu()+0xa58>)
    3d82:	f005 fa23 	bl	91cc <Print::println()>
    3d86:	211e      	movs	r1, #30
    3d88:	482a      	ldr	r0, [pc, #168]	; (3e34 <menu()+0xa84>)
    3d8a:	f007 ff63 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3d8e:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    3d92:	481d      	ldr	r0, [pc, #116]	; (3e08 <menu()+0xa58>)
    3d94:	f005 fa12 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    3d98:	481b      	ldr	r0, [pc, #108]	; (3e08 <menu()+0xa58>)
    3d9a:	f005 fa17 	bl	91cc <Print::println()>
        if (settings.ESSmode == 1) {
    3d9e:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
    3da2:	2b01      	cmp	r3, #1
    3da4:	f001 818b 	beq.w	50be <menu()+0x1d0e>
        break;
    3da8:	2305      	movs	r3, #5
    3daa:	e5fb      	b.n	39a4 <menu()+0x5f4>
        virtual int available() { return usb_serial_available(); }
    3dac:	f007 ff20 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3db0:	2800      	cmp	r0, #0
    3db2:	f77f aee0 	ble.w	3b76 <menu()+0x7c6>
          settings.conthold = Serial.parseInt();
    3db6:	4814      	ldr	r0, [pc, #80]	; (3e08 <menu()+0xa58>)
    3db8:	4e14      	ldr	r6, [pc, #80]	; (3e0c <menu()+0xa5c>)
    3dba:	f005 fb65 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    3dbe:	2301      	movs	r3, #1
    3dc0:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    3dc2:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    3dc4:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
          incomingByte = 'k';
    3dc8:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3dca:	e78a      	b.n	3ce2 <menu()+0x932>
    3dcc:	f007 ff10 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3dd0:	2800      	cmp	r0, #0
    3dd2:	f77f aed0 	ble.w	3b76 <menu()+0x7c6>
          settings.Precurrent = Serial.parseInt();
    3dd6:	480c      	ldr	r0, [pc, #48]	; (3e08 <menu()+0xa58>)
    3dd8:	4e0c      	ldr	r6, [pc, #48]	; (3e0c <menu()+0xa5c>)
    3dda:	f005 fb55 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    3dde:	2301      	movs	r3, #1
    3de0:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    3de2:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    3de4:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
          incomingByte = 'k';
    3de8:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3dea:	e77a      	b.n	3ce2 <menu()+0x932>
        settings.tripcont = !settings.tripcont;
    3dec:	4e07      	ldr	r6, [pc, #28]	; (3e0c <menu()+0xa5c>)
    3dee:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
          menuload = 1;
    3df2:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    3df4:	fab3 f383 	clz	r3, r3
          menuload = 1;
    3df8:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    3dfa:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    3dfc:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    3dfe:	f886 30cd 	strb.w	r3, [r6, #205]	; 0xcd
          incomingByte = 'k';
    3e02:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    3e04:	e76d      	b.n	3ce2 <menu()+0x932>
    3e06:	bf00      	nop
    3e08:	1fff8a04 	.word	0x1fff8a04
    3e0c:	1fffcde8 	.word	0x1fffcde8
    3e10:	3a83126f 	.word	0x3a83126f
    3e14:	1fffcce4 	.word	0x1fffcce4
    3e18:	000141fc 	.word	0x000141fc
    3e1c:	00014220 	.word	0x00014220
    3e20:	000140e4 	.word	0x000140e4
    3e24:	00014238 	.word	0x00014238
    3e28:	00013dc0 	.word	0x00013dc0
    3e2c:	00014258 	.word	0x00014258
    3e30:	00014278 	.word	0x00014278
    3e34:	00014298 	.word	0x00014298
    3e38:	f007 feda 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3e3c:	2800      	cmp	r0, #0
    3e3e:	f77f ae80 	ble.w	3b42 <menu()+0x792>
          settings.ChargeVsetpoint = Serial.parseInt();
    3e42:	48ac      	ldr	r0, [pc, #688]	; (40f4 <menu()+0xd44>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    3e44:	4eac      	ldr	r6, [pc, #688]	; (40f8 <menu()+0xd48>)
          settings.ChargeVsetpoint = Serial.parseInt();
    3e46:	f005 fb1f 	bl	9488 <Stream::parseInt()>
    3e4a:	f008 fd8f 	bl	c96c <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    3e4e:	49ab      	ldr	r1, [pc, #684]	; (40fc <menu()+0xd4c>)
    3e50:	f008 fe94 	bl	cb7c <__aeabi_fdiv>
          menuload = 1;
    3e54:	2301      	movs	r3, #1
    3e56:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    3e58:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    3e5a:	61b0      	str	r0, [r6, #24]
          incomingByte = 'e';
    3e5c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3e5e:	e001      	b.n	3e64 <menu()+0xab4>
        virtual int read() { return usb_serial_getchar(); }
    3e60:	f007 fe8a 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    3e64:	f007 fec4 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    3e68:	4605      	mov	r5, r0
    3e6a:	2800      	cmp	r0, #0
    3e6c:	d1f8      	bne.n	3e60 <menu()+0xab0>
        SERIALCONSOLE.println();
    3e6e:	48a1      	ldr	r0, [pc, #644]	; (40f4 <menu()+0xd44>)
    3e70:	f005 f9ac 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3e74:	489f      	ldr	r0, [pc, #636]	; (40f4 <menu()+0xd44>)
    3e76:	f005 f9a9 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3e7a:	489e      	ldr	r0, [pc, #632]	; (40f4 <menu()+0xd44>)
    3e7c:	f005 f9a6 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3e80:	489c      	ldr	r0, [pc, #624]	; (40f4 <menu()+0xd44>)
    3e82:	f005 f9a3 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    3e86:	489b      	ldr	r0, [pc, #620]	; (40f4 <menu()+0xd44>)
    3e88:	f005 f9a0 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    3e8c:	2111      	movs	r1, #17
    3e8e:	489c      	ldr	r0, [pc, #624]	; (4100 <menu()+0xd50>)
    3e90:	f007 fee0 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3e94:	4897      	ldr	r0, [pc, #604]	; (40f4 <menu()+0xd44>)
    3e96:	f005 f999 	bl	91cc <Print::println()>
    3e9a:	2128      	movs	r1, #40	; 0x28
    3e9c:	4899      	ldr	r0, [pc, #612]	; (4104 <menu()+0xd54>)
    3e9e:	f007 fed9 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    3ea2:	69b0      	ldr	r0, [r6, #24]
    3ea4:	4995      	ldr	r1, [pc, #596]	; (40fc <menu()+0xd4c>)
    3ea6:	f008 fdb5 	bl	ca14 <__aeabi_fmul>
    3eaa:	f008 fb8f 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3eae:	9500      	str	r5, [sp, #0]
    3eb0:	4602      	mov	r2, r0
    3eb2:	460b      	mov	r3, r1
    3eb4:	488f      	ldr	r0, [pc, #572]	; (40f4 <menu()+0xd44>)
    3eb6:	f005 f9ab 	bl	9210 <Print::printFloat(double, unsigned char)>
    3eba:	2102      	movs	r1, #2
    3ebc:	4892      	ldr	r0, [pc, #584]	; (4108 <menu()+0xd58>)
    3ebe:	f007 fec9 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3ec2:	488c      	ldr	r0, [pc, #560]	; (40f4 <menu()+0xd44>)
    3ec4:	f005 f982 	bl	91cc <Print::println()>
    3ec8:	2116      	movs	r1, #22
    3eca:	4890      	ldr	r0, [pc, #576]	; (410c <menu()+0xd5c>)
    3ecc:	f007 fec2 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    3ed0:	6a30      	ldr	r0, [r6, #32]
    3ed2:	498a      	ldr	r1, [pc, #552]	; (40fc <menu()+0xd4c>)
    3ed4:	f008 fd9e 	bl	ca14 <__aeabi_fmul>
    3ed8:	f008 fb78 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3edc:	9500      	str	r5, [sp, #0]
    3ede:	460b      	mov	r3, r1
    3ee0:	4602      	mov	r2, r0
    3ee2:	4884      	ldr	r0, [pc, #528]	; (40f4 <menu()+0xd44>)
    3ee4:	f005 f994 	bl	9210 <Print::printFloat(double, unsigned char)>
    3ee8:	2102      	movs	r1, #2
    3eea:	4887      	ldr	r0, [pc, #540]	; (4108 <menu()+0xd58>)
    3eec:	f007 feb2 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3ef0:	4880      	ldr	r0, [pc, #512]	; (40f4 <menu()+0xd44>)
    3ef2:	f005 f96b 	bl	91cc <Print::println()>
        if (settings.chargertype > 0) {
    3ef6:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    3efa:	2b00      	cmp	r3, #0
    3efc:	dd32      	ble.n	3f64 <menu()+0xbb4>
    3efe:	211d      	movs	r1, #29
    3f00:	4883      	ldr	r0, [pc, #524]	; (4110 <menu()+0xd60>)
    3f02:	f007 fea7 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    3f06:	6e70      	ldr	r0, [r6, #100]	; 0x64
    3f08:	f008 fd30 	bl	c96c <__aeabi_i2f>
    3f0c:	4981      	ldr	r1, [pc, #516]	; (4114 <menu()+0xd64>)
    3f0e:	f008 fd81 	bl	ca14 <__aeabi_fmul>
    3f12:	f008 fb5b 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3f16:	2502      	movs	r5, #2
    3f18:	4602      	mov	r2, r0
    3f1a:	460b      	mov	r3, r1
    3f1c:	4875      	ldr	r0, [pc, #468]	; (40f4 <menu()+0xd44>)
    3f1e:	9500      	str	r5, [sp, #0]
    3f20:	f005 f976 	bl	9210 <Print::printFloat(double, unsigned char)>
    3f24:	2101      	movs	r1, #1
    3f26:	487c      	ldr	r0, [pc, #496]	; (4118 <menu()+0xd68>)
    3f28:	f007 fe94 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3f2c:	4871      	ldr	r0, [pc, #452]	; (40f4 <menu()+0xd44>)
    3f2e:	f005 f94d 	bl	91cc <Print::println()>
    3f32:	211f      	movs	r1, #31
    3f34:	4879      	ldr	r0, [pc, #484]	; (411c <menu()+0xd6c>)
    3f36:	f007 fe8d 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    3f3a:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    3f3c:	f008 fd16 	bl	c96c <__aeabi_i2f>
    3f40:	4974      	ldr	r1, [pc, #464]	; (4114 <menu()+0xd64>)
    3f42:	f008 fd67 	bl	ca14 <__aeabi_fmul>
    3f46:	f008 fb41 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3f4a:	9500      	str	r5, [sp, #0]
    3f4c:	4602      	mov	r2, r0
    3f4e:	460b      	mov	r3, r1
    3f50:	4868      	ldr	r0, [pc, #416]	; (40f4 <menu()+0xd44>)
    3f52:	f005 f95d 	bl	9210 <Print::printFloat(double, unsigned char)>
    3f56:	4870      	ldr	r0, [pc, #448]	; (4118 <menu()+0xd68>)
    3f58:	2101      	movs	r1, #1
    3f5a:	f007 fe7b 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3f5e:	4865      	ldr	r0, [pc, #404]	; (40f4 <menu()+0xd44>)
    3f60:	f005 f934 	bl	91cc <Print::println()>
    3f64:	486e      	ldr	r0, [pc, #440]	; (4120 <menu()+0xd70>)
    3f66:	2111      	movs	r1, #17
    3f68:	f007 fe74 	bl	bc54 <usb_serial_write>
        switch (settings.chargertype) {
    3f6c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    3f70:	2b07      	cmp	r3, #7
    3f72:	f200 8339 	bhi.w	45e8 <menu()+0x1238>
    3f76:	e8df f013 	tbh	[pc, r3, lsl #1]
    3f7a:	038d      	.short	0x038d
    3f7c:	03880392 	.word	0x03880392
    3f80:	0397039c 	.word	0x0397039c
    3f84:	038303a1 	.word	0x038303a1
    3f88:	0333      	.short	0x0333
        virtual int available() { return usb_serial_available(); }
    3f8a:	f007 fe31 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3f8e:	2800      	cmp	r0, #0
    3f90:	f77f add7 	ble.w	3b42 <menu()+0x792>
          settings.ChargeHys = Serial.parseInt();
    3f94:	4857      	ldr	r0, [pc, #348]	; (40f4 <menu()+0xd44>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    3f96:	4e58      	ldr	r6, [pc, #352]	; (40f8 <menu()+0xd48>)
          settings.ChargeHys = Serial.parseInt();
    3f98:	f005 fa76 	bl	9488 <Stream::parseInt()>
    3f9c:	f008 fce6 	bl	c96c <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    3fa0:	4956      	ldr	r1, [pc, #344]	; (40fc <menu()+0xd4c>)
    3fa2:	f008 fdeb 	bl	cb7c <__aeabi_fdiv>
          menuload = 1;
    3fa6:	2301      	movs	r3, #1
    3fa8:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    3faa:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    3fac:	6230      	str	r0, [r6, #32]
          incomingByte = 'e';
    3fae:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3fb0:	e758      	b.n	3e64 <menu()+0xab4>
    3fb2:	f007 fe1d 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3fb6:	2800      	cmp	r0, #0
    3fb8:	f77f adc3 	ble.w	3b42 <menu()+0x792>
          settings.ChargeTSetpoint = Serial.parseInt();
    3fbc:	484d      	ldr	r0, [pc, #308]	; (40f4 <menu()+0xd44>)
    3fbe:	4e4e      	ldr	r6, [pc, #312]	; (40f8 <menu()+0xd48>)
    3fc0:	f005 fa62 	bl	9488 <Stream::parseInt()>
    3fc4:	f008 fcd2 	bl	c96c <__aeabi_i2f>
          menuload = 1;
    3fc8:	2301      	movs	r3, #1
    3fca:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    3fcc:	2365      	movs	r3, #101	; 0x65
          settings.ChargeTSetpoint = Serial.parseInt();
    3fce:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'e';
    3fd0:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    3fd2:	e747      	b.n	3e64 <menu()+0xab4>
        if (settings.ChargerDirect == 1) {
    3fd4:	4e48      	ldr	r6, [pc, #288]	; (40f8 <menu()+0xd48>)
    3fd6:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
          menuload = 1;
    3fda:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    3fdc:	4053      	eors	r3, r2
          menuload = 1;
    3fde:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    3fe0:	2265      	movs	r2, #101	; 0x65
    3fe2:	f886 30cc 	strb.w	r3, [r6, #204]	; 0xcc
    3fe6:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    3fe8:	e73c      	b.n	3e64 <menu()+0xab4>
    3fea:	f007 fe01 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    3fee:	2800      	cmp	r0, #0
    3ff0:	f77f ada7 	ble.w	3b42 <menu()+0x792>
          settings.chargerspd = Serial.parseInt();
    3ff4:	483f      	ldr	r0, [pc, #252]	; (40f4 <menu()+0xd44>)
    3ff6:	4e40      	ldr	r6, [pc, #256]	; (40f8 <menu()+0xd48>)
    3ff8:	f005 fa46 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    3ffc:	2301      	movs	r3, #1
    3ffe:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4000:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    4002:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
          incomingByte = 'e';
    4006:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4008:	e72c      	b.n	3e64 <menu()+0xab4>
        settings.chargertype = settings.chargertype + 1;
    400a:	4e3b      	ldr	r6, [pc, #236]	; (40f8 <menu()+0xd48>)
    400c:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
          menuload = 1;
    4010:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    4012:	4413      	add	r3, r2
          settings.chargertype = 0;
    4014:	2b08      	cmp	r3, #8
          menuload = 1;
    4016:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    4018:	bfa8      	it	ge
    401a:	2300      	movge	r3, #0
          incomingByte = 'e';
    401c:	2265      	movs	r2, #101	; 0x65
    401e:	f8c6 30bc 	str.w	r3, [r6, #188]	; 0xbc
    4022:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4024:	e71e      	b.n	3e64 <menu()+0xab4>
    4026:	f007 fde3 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    402a:	2800      	cmp	r0, #0
    402c:	f77f ad89 	ble.w	3b42 <menu()+0x792>
          settings.chargecurrentend = Serial.parseInt() * 10;
    4030:	4830      	ldr	r0, [pc, #192]	; (40f4 <menu()+0xd44>)
    4032:	4e31      	ldr	r6, [pc, #196]	; (40f8 <menu()+0xd48>)
    4034:	f005 fa28 	bl	9488 <Stream::parseInt()>
    4038:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    403c:	0040      	lsls	r0, r0, #1
          menuload = 1;
    403e:	2201      	movs	r2, #1
          incomingByte = 'e';
    4040:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    4042:	66b0      	str	r0, [r6, #104]	; 0x68
          menuload = 1;
    4044:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4046:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4048:	e70c      	b.n	3e64 <menu()+0xab4>
        outputcheck = !outputcheck;
    404a:	4b36      	ldr	r3, [pc, #216]	; (4124 <menu()+0xd74>)
    404c:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    404e:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    4050:	2a00      	cmp	r2, #0
    4052:	bf0c      	ite	eq
    4054:	460a      	moveq	r2, r1
    4056:	2200      	movne	r2, #0
        menuload = 1;
    4058:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    405a:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    405c:	f040 87fd 	bne.w	505a <menu()+0x1caa>
        incomingByte = 'd';
    4060:	2064      	movs	r0, #100	; 0x64
    4062:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    4064:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    4068:	2b1f      	cmp	r3, #31
    406a:	f63f aac2 	bhi.w	35f2 <menu()+0x242>
    406e:	a201      	add	r2, pc, #4	; (adr r2, 4074 <menu()+0xcc4>)
    4070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4074:	000046df 	.word	0x000046df
    4078:	000035f3 	.word	0x000035f3
    407c:	000035f3 	.word	0x000035f3
    4080:	000035f3 	.word	0x000035f3
    4084:	000035f3 	.word	0x000035f3
    4088:	000035f3 	.word	0x000035f3
    408c:	000035f3 	.word	0x000035f3
    4090:	000035f3 	.word	0x000035f3
    4094:	000035f3 	.word	0x000035f3
    4098:	000035f3 	.word	0x000035f3
    409c:	000035f3 	.word	0x000035f3
    40a0:	000035f3 	.word	0x000035f3
    40a4:	000035f3 	.word	0x000035f3
    40a8:	000035f3 	.word	0x000035f3
    40ac:	000035f3 	.word	0x000035f3
    40b0:	00005139 	.word	0x00005139
    40b4:	00005133 	.word	0x00005133
    40b8:	0000453b 	.word	0x0000453b
    40bc:	0000412d 	.word	0x0000412d
    40c0:	0000512d 	.word	0x0000512d
    40c4:	000035f3 	.word	0x000035f3
    40c8:	000035f3 	.word	0x000035f3
    40cc:	000035f3 	.word	0x000035f3
    40d0:	00005127 	.word	0x00005127
    40d4:	000035f3 	.word	0x000035f3
    40d8:	00005121 	.word	0x00005121
    40dc:	000035f3 	.word	0x000035f3
    40e0:	000035f3 	.word	0x000035f3
    40e4:	000035f3 	.word	0x000035f3
    40e8:	000035f3 	.word	0x000035f3
    40ec:	000035f3 	.word	0x000035f3
    40f0:	000046ed 	.word	0x000046ed
    40f4:	1fff8a04 	.word	0x1fff8a04
    40f8:	1fffcde8 	.word	0x1fffcde8
    40fc:	447a0000 	.word	0x447a0000
    4100:	00014374 	.word	0x00014374
    4104:	00013fa4 	.word	0x00013fa4
    4108:	00013f70 	.word	0x00013f70
    410c:	00013fd0 	.word	0x00013fd0
    4110:	00013fe8 	.word	0x00013fe8
    4114:	3dcccccd 	.word	0x3dcccccd
    4118:	00014690 	.word	0x00014690
    411c:	00014008 	.word	0x00014008
    4120:	00014028 	.word	0x00014028
    4124:	1fffcdd4 	.word	0x1fffcdd4
        virtual int read() { return usb_serial_getchar(); }
    4128:	f007 fd26 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    412c:	f007 fd60 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    4130:	2800      	cmp	r0, #0
    4132:	d1f9      	bne.n	4128 <menu()+0xd78>
        SERIALCONSOLE.println();
    4134:	4895      	ldr	r0, [pc, #596]	; (438c <menu()+0xfdc>)
        SERIALCONSOLE.println(settings.ESSmode);
    4136:	4d96      	ldr	r5, [pc, #600]	; (4390 <menu()+0xfe0>)
        SERIALCONSOLE.println();
    4138:	f005 f848 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    413c:	4893      	ldr	r0, [pc, #588]	; (438c <menu()+0xfdc>)
    413e:	f005 f845 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4142:	4892      	ldr	r0, [pc, #584]	; (438c <menu()+0xfdc>)
    4144:	f005 f842 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4148:	4890      	ldr	r0, [pc, #576]	; (438c <menu()+0xfdc>)
    414a:	f005 f83f 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    414e:	488f      	ldr	r0, [pc, #572]	; (438c <menu()+0xfdc>)
    4150:	f005 f83c 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4154:	2113      	movs	r1, #19
    4156:	488f      	ldr	r0, [pc, #572]	; (4394 <menu()+0xfe4>)
    4158:	f007 fd7c 	bl	bc54 <usb_serial_write>
    415c:	488b      	ldr	r0, [pc, #556]	; (438c <menu()+0xfdc>)
    415e:	f005 f835 	bl	91cc <Print::println()>
    4162:	210d      	movs	r1, #13
    4164:	488c      	ldr	r0, [pc, #560]	; (4398 <menu()+0xfe8>)
    4166:	f007 fd75 	bl	bc54 <usb_serial_write>
    416a:	4888      	ldr	r0, [pc, #544]	; (438c <menu()+0xfdc>)
    416c:	f005 f82e 	bl	91cc <Print::println()>
    4170:	210f      	movs	r1, #15
    4172:	488a      	ldr	r0, [pc, #552]	; (439c <menu()+0xfec>)
    4174:	f007 fd6e 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    4178:	4b89      	ldr	r3, [pc, #548]	; (43a0 <menu()+0xff0>)
	size_t print(int n)				{ return print((long)n); }
    417a:	4884      	ldr	r0, [pc, #528]	; (438c <menu()+0xfdc>)
    417c:	6819      	ldr	r1, [r3, #0]
    417e:	f005 f81d 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4182:	4882      	ldr	r0, [pc, #520]	; (438c <menu()+0xfdc>)
    4184:	f005 f822 	bl	91cc <Print::println()>
    4188:	2113      	movs	r1, #19
    418a:	4886      	ldr	r0, [pc, #536]	; (43a4 <menu()+0xff4>)
    418c:	f007 fd62 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    4190:	4b85      	ldr	r3, [pc, #532]	; (43a8 <menu()+0xff8>)
	size_t print(int n)				{ return print((long)n); }
    4192:	487e      	ldr	r0, [pc, #504]	; (438c <menu()+0xfdc>)
    4194:	6819      	ldr	r1, [r3, #0]
    4196:	f005 f811 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    419a:	487c      	ldr	r0, [pc, #496]	; (438c <menu()+0xfdc>)
    419c:	f005 f816 	bl	91cc <Print::println()>
    41a0:	2112      	movs	r1, #18
    41a2:	4882      	ldr	r0, [pc, #520]	; (43ac <menu()+0xffc>)
    41a4:	f007 fd56 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    41a8:	4b81      	ldr	r3, [pc, #516]	; (43b0 <menu()+0x1000>)
	size_t print(int n)				{ return print((long)n); }
    41aa:	4878      	ldr	r0, [pc, #480]	; (438c <menu()+0xfdc>)
    41ac:	6819      	ldr	r1, [r3, #0]
    41ae:	f005 f805 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41b2:	4876      	ldr	r0, [pc, #472]	; (438c <menu()+0xfdc>)
    41b4:	f005 f80a 	bl	91cc <Print::println()>
    41b8:	2111      	movs	r1, #17
    41ba:	487e      	ldr	r0, [pc, #504]	; (43b4 <menu()+0x1004>)
    41bc:	f007 fd4a 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    41c0:	4b7d      	ldr	r3, [pc, #500]	; (43b8 <menu()+0x1008>)
	size_t print(int n)				{ return print((long)n); }
    41c2:	4872      	ldr	r0, [pc, #456]	; (438c <menu()+0xfdc>)
    41c4:	6819      	ldr	r1, [r3, #0]
    41c6:	f004 fff9 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41ca:	4870      	ldr	r0, [pc, #448]	; (438c <menu()+0xfdc>)
    41cc:	f004 fffe 	bl	91cc <Print::println()>
    41d0:	210e      	movs	r1, #14
    41d2:	487a      	ldr	r0, [pc, #488]	; (43bc <menu()+0x100c>)
    41d4:	f007 fd3e 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    41d8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
    41dc:	486b      	ldr	r0, [pc, #428]	; (438c <menu()+0xfdc>)
    41de:	f004 ffed 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41e2:	486a      	ldr	r0, [pc, #424]	; (438c <menu()+0xfdc>)
    41e4:	f004 fff2 	bl	91cc <Print::println()>
    41e8:	2119      	movs	r1, #25
    41ea:	4875      	ldr	r0, [pc, #468]	; (43c0 <menu()+0x1010>)
    41ec:	f007 fd32 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    41f0:	4b74      	ldr	r3, [pc, #464]	; (43c4 <menu()+0x1014>)
	size_t print(int n)				{ return print((long)n); }
    41f2:	4866      	ldr	r0, [pc, #408]	; (438c <menu()+0xfdc>)
    41f4:	6819      	ldr	r1, [r3, #0]
    41f6:	f004 ffe1 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41fa:	4864      	ldr	r0, [pc, #400]	; (438c <menu()+0xfdc>)
    41fc:	f004 ffe6 	bl	91cc <Print::println()>
    4200:	2111      	movs	r1, #17
    4202:	4871      	ldr	r0, [pc, #452]	; (43c8 <menu()+0x1018>)
    4204:	f007 fd26 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    4208:	4b70      	ldr	r3, [pc, #448]	; (43cc <menu()+0x101c>)
	size_t print(int n)				{ return print((long)n); }
    420a:	4860      	ldr	r0, [pc, #384]	; (438c <menu()+0xfdc>)
    420c:	6819      	ldr	r1, [r3, #0]
    420e:	f004 ffd5 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4212:	485e      	ldr	r0, [pc, #376]	; (438c <menu()+0xfdc>)
    4214:	f004 ffda 	bl	91cc <Print::println()>
    4218:	2110      	movs	r1, #16
    421a:	486d      	ldr	r0, [pc, #436]	; (43d0 <menu()+0x1020>)
    421c:	f007 fd1a 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    4220:	4b6c      	ldr	r3, [pc, #432]	; (43d4 <menu()+0x1024>)
	size_t print(int n)				{ return print((long)n); }
    4222:	485a      	ldr	r0, [pc, #360]	; (438c <menu()+0xfdc>)
    4224:	6819      	ldr	r1, [r3, #0]
    4226:	f004 ffc9 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    422a:	4858      	ldr	r0, [pc, #352]	; (438c <menu()+0xfdc>)
    422c:	f004 ffce 	bl	91cc <Print::println()>
    4230:	211c      	movs	r1, #28
    4232:	4869      	ldr	r0, [pc, #420]	; (43d8 <menu()+0x1028>)
    4234:	f007 fd0e 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    4238:	4b68      	ldr	r3, [pc, #416]	; (43dc <menu()+0x102c>)
	size_t print(int n)				{ return print((long)n); }
    423a:	4854      	ldr	r0, [pc, #336]	; (438c <menu()+0xfdc>)
    423c:	6819      	ldr	r1, [r3, #0]
    423e:	f004 ffbd 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4242:	4852      	ldr	r0, [pc, #328]	; (438c <menu()+0xfdc>)
    4244:	f004 ffc2 	bl	91cc <Print::println()>
    4248:	2116      	movs	r1, #22
    424a:	4865      	ldr	r0, [pc, #404]	; (43e0 <menu()+0x1030>)
    424c:	f007 fd02 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4250:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    4254:	484d      	ldr	r0, [pc, #308]	; (438c <menu()+0xfdc>)
    4256:	f004 ffb1 	bl	91bc <Print::print(long)>
    425a:	211e      	movs	r1, #30
    425c:	4861      	ldr	r0, [pc, #388]	; (43e4 <menu()+0x1034>)
    425e:	f007 fcf9 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4262:	484a      	ldr	r0, [pc, #296]	; (438c <menu()+0xfdc>)
    4264:	f004 ffb2 	bl	91cc <Print::println()>
    4268:	2117      	movs	r1, #23
    426a:	485f      	ldr	r0, [pc, #380]	; (43e8 <menu()+0x1038>)
    426c:	f007 fcf2 	bl	bc54 <usb_serial_write>
    4270:	4846      	ldr	r0, [pc, #280]	; (438c <menu()+0xfdc>)
    4272:	f004 ffab 	bl	91cc <Print::println()>
    4276:	2113      	movs	r1, #19
    4278:	485c      	ldr	r0, [pc, #368]	; (43ec <menu()+0x103c>)
    427a:	f007 fceb 	bl	bc54 <usb_serial_write>
    427e:	4843      	ldr	r0, [pc, #268]	; (438c <menu()+0xfdc>)
    4280:	f004 ffa4 	bl	91cc <Print::println()>
        break;
    4284:	2304      	movs	r3, #4
    4286:	f7ff bb8d 	b.w	39a4 <menu()+0x5f4>
        inputcheck = !inputcheck;
    428a:	4a4b      	ldr	r2, [pc, #300]	; (43b8 <menu()+0x1008>)
    428c:	6813      	ldr	r3, [r2, #0]
    428e:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    4292:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    4294:	2101      	movs	r1, #1
        inputcheck = !inputcheck;
    4296:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4298:	6021      	str	r1, [r4, #0]
        inputcheck = !inputcheck;
    429a:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    429c:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    429e:	e6e1      	b.n	4064 <menu()+0xcb4>
        settings.ESSmode = !settings.ESSmode;
    42a0:	4e3b      	ldr	r6, [pc, #236]	; (4390 <menu()+0xfe0>)
    42a2:	f8d6 30ac 	ldr.w	r3, [r6, #172]	; 0xac
    42a6:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    42aa:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    42ac:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    42ae:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    42b0:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    42b2:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
        incomingByte = 'd';
    42b6:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    42b8:	e6d4      	b.n	4064 <menu()+0xcb4>
        menuload = 1;
    42ba:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    42bc:	484c      	ldr	r0, [pc, #304]	; (43f0 <menu()+0x1040>)
        menuload = 1;
    42be:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    42c0:	f7fc fbe0 	bl	a84 <BMSModuleManager::seriescells()>
    42c4:	4b3f      	ldr	r3, [pc, #252]	; (43c4 <menu()+0x1014>)
        incomingByte = 'd';
    42c6:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    42c8:	6018      	str	r0, [r3, #0]
  if (menuload == 2) {
    42ca:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    42cc:	602a      	str	r2, [r5, #0]
  if (menuload == 8) {
    42ce:	2b08      	cmp	r3, #8
    42d0:	f43f a8d0 	beq.w	3474 <menu()+0xc4>
  if (menuload == 7) {
    42d4:	2b07      	cmp	r3, #7
    42d6:	f43f a8cd 	beq.w	3474 <menu()+0xc4>
  if (menuload == 6)  //Charging settings
    42da:	2b06      	cmp	r3, #6
    42dc:	f43f a8ca 	beq.w	3474 <menu()+0xc4>
  if (menuload == 5) {
    42e0:	2b05      	cmp	r3, #5
    42e2:	bf18      	it	ne
    42e4:	2064      	movne	r0, #100	; 0x64
    42e6:	f43f a8c5 	beq.w	3474 <menu()+0xc4>
    42ea:	e446      	b.n	3b7a <menu()+0x7ca>
        gaugedebug = !gaugedebug;
    42ec:	4a37      	ldr	r2, [pc, #220]	; (43cc <menu()+0x101c>)
    42ee:	e7cd      	b.n	428c <menu()+0xedc>
        CSVdebug = !CSVdebug;
    42f0:	4a38      	ldr	r2, [pc, #224]	; (43d4 <menu()+0x1024>)
    42f2:	e7cb      	b.n	428c <menu()+0xedc>
        menuload = 1;
    42f4:	2301      	movs	r3, #1
    42f6:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    42f8:	f007 fc7a 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    42fc:	2800      	cmp	r0, #0
    42fe:	f300 868a 	bgt.w	5016 <menu()+0x1c66>
        if (debugdigits > 4) {
    4302:	4b36      	ldr	r3, [pc, #216]	; (43dc <menu()+0x102c>)
    4304:	6818      	ldr	r0, [r3, #0]
    4306:	2804      	cmp	r0, #4
    4308:	dd01      	ble.n	430e <menu()+0xf5e>
          debugdigits = 2;
    430a:	2202      	movs	r2, #2
    430c:	601a      	str	r2, [r3, #0]
        incomingByte = 'd';
    430e:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    4310:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4312:	602a      	str	r2, [r5, #0]
        break;
    4314:	e7db      	b.n	42ce <menu()+0xf1e>
        menuload = 1;
    4316:	2301      	movs	r3, #1
    4318:	6023      	str	r3, [r4, #0]
    431a:	f007 fc69 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    431e:	2800      	cmp	r0, #0
    4320:	ddf5      	ble.n	430e <menu()+0xf5e>
          settings.balanceDuty = Serial.parseInt();
    4322:	481a      	ldr	r0, [pc, #104]	; (438c <menu()+0xfdc>)
    4324:	4e1a      	ldr	r6, [pc, #104]	; (4390 <menu()+0xfe0>)
    4326:	f005 f8af 	bl	9488 <Stream::parseInt()>
    432a:	f8a6 00a8 	strh.w	r0, [r6, #168]	; 0xa8
        incomingByte = 'd';
    432e:	e7ee      	b.n	430e <menu()+0xf5e>
  msg.id = 0x0B0;  //broadcast to all Elteks
    4330:	4930      	ldr	r1, [pc, #192]	; (43f4 <menu()+0x1044>)
  msg.buf[0] = 0xFF;
    4332:	4a31      	ldr	r2, [pc, #196]	; (43f8 <menu()+0x1048>)
  msg.ext = 0;
    4334:	88cb      	ldrh	r3, [r1, #6]
  msg.buf[0] = 0xFF;
    4336:	608a      	str	r2, [r1, #8]
  msg.ext = 0;
    4338:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    433c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
        menuload = 1;
    4340:	2001      	movs	r0, #1
  msg.ext = 0;
    4342:	80cb      	strh	r3, [r1, #6]
  msg.buf[4] = 0x00;
    4344:	2300      	movs	r3, #0
        menuload = 1;
    4346:	6020      	str	r0, [r4, #0]
  msg.buf[4] = 0x00;
    4348:	60cb      	str	r3, [r1, #12]
  Can0.write(msg);
    434a:	482c      	ldr	r0, [pc, #176]	; (43fc <menu()+0x104c>)
  msg.id = 0x0B0;  //broadcast to all Elteks
    434c:	23b0      	movs	r3, #176	; 0xb0
    434e:	600b      	str	r3, [r1, #0]
  Can0.write(msg);
    4350:	f003 fe6c 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    4354:	e7db      	b.n	430e <menu()+0xf5e>
        CPdebug = !CPdebug;
    4356:	4a2a      	ldr	r2, [pc, #168]	; (4400 <menu()+0x1050>)
    4358:	7813      	ldrb	r3, [r2, #0]
        menuload = 1;
    435a:	2101      	movs	r1, #1
        incomingByte = 'd';
    435c:	2064      	movs	r0, #100	; 0x64
        CPdebug = !CPdebug;
    435e:	404b      	eors	r3, r1
        menuload = 1;
    4360:	6021      	str	r1, [r4, #0]
        CPdebug = !CPdebug;
    4362:	7013      	strb	r3, [r2, #0]
        incomingByte = 'd';
    4364:	6028      	str	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    4366:	e67d      	b.n	4064 <menu()+0xcb4>
        candebug = !candebug;
    4368:	4a0d      	ldr	r2, [pc, #52]	; (43a0 <menu()+0xff0>)
    436a:	e78f      	b.n	428c <menu()+0xedc>
        debugCur = !debugCur;
    436c:	4a0e      	ldr	r2, [pc, #56]	; (43a8 <menu()+0xff8>)
    436e:	e78d      	b.n	428c <menu()+0xedc>
        settings.cursens++;
    4370:	4e07      	ldr	r6, [pc, #28]	; (4390 <menu()+0xfe0>)
    4372:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
        menuload = 1;
    4376:	2201      	movs	r2, #1
        settings.cursens++;
    4378:	4413      	add	r3, r2
          settings.cursens = 0;
    437a:	2b04      	cmp	r3, #4
        menuload = 1;
    437c:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    437e:	bfa8      	it	ge
    4380:	2300      	movge	r3, #0
        incomingByte = 'c';
    4382:	2263      	movs	r2, #99	; 0x63
    4384:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    4388:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    438a:	e03d      	b.n	4408 <menu()+0x1058>
    438c:	1fff8a04 	.word	0x1fff8a04
    4390:	1fffcde8 	.word	0x1fffcde8
    4394:	0001441c 	.word	0x0001441c
    4398:	00014430 	.word	0x00014430
    439c:	00014440 	.word	0x00014440
    43a0:	1fffcb38 	.word	0x1fffcb38
    43a4:	00014450 	.word	0x00014450
    43a8:	1fffccd0 	.word	0x1fffccd0
    43ac:	00014464 	.word	0x00014464
    43b0:	1fffcdd4 	.word	0x1fffcdd4
    43b4:	00014478 	.word	0x00014478
    43b8:	1fffcd00 	.word	0x1fffcd00
    43bc:	0001448c 	.word	0x0001448c
    43c0:	0001449c 	.word	0x0001449c
    43c4:	1fffcb3c 	.word	0x1fffcb3c
    43c8:	000144b8 	.word	0x000144b8
    43cc:	1fffcce4 	.word	0x1fffcce4
    43d0:	000144cc 	.word	0x000144cc
    43d4:	1fff9190 	.word	0x1fff9190
    43d8:	000144e0 	.word	0x000144e0
    43dc:	1fff8854 	.word	0x1fff8854
    43e0:	00014500 	.word	0x00014500
    43e4:	00014518 	.word	0x00014518
    43e8:	00014538 	.word	0x00014538
    43ec:	00013f90 	.word	0x00013f90
    43f0:	1fff91e0 	.word	0x1fff91e0
    43f4:	1fffcd40 	.word	0x1fffcd40
    43f8:	a2cd00ff 	.word	0xa2cd00ff
    43fc:	1fffcef0 	.word	0x1fffcef0
    4400:	1fff918c 	.word	0x1fff918c
        virtual int read() { return usb_serial_getchar(); }
    4404:	f007 fbb8 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4408:	f007 fbf2 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    440c:	2800      	cmp	r0, #0
    440e:	d1f9      	bne.n	4404 <menu()+0x1054>
        SERIALCONSOLE.println();
    4410:	48be      	ldr	r0, [pc, #760]	; (470c <menu()+0x135c>)
    4412:	f004 fedb 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4416:	48bd      	ldr	r0, [pc, #756]	; (470c <menu()+0x135c>)
    4418:	f004 fed8 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    441c:	48bb      	ldr	r0, [pc, #748]	; (470c <menu()+0x135c>)
    441e:	f004 fed5 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4422:	48ba      	ldr	r0, [pc, #744]	; (470c <menu()+0x135c>)
    4424:	f004 fed2 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4428:	48b8      	ldr	r0, [pc, #736]	; (470c <menu()+0x135c>)
    442a:	f004 fecf 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    442e:	211f      	movs	r1, #31
    4430:	48b7      	ldr	r0, [pc, #732]	; (4710 <menu()+0x1360>)
    4432:	f007 fc0f 	bl	bc54 <usb_serial_write>
    4436:	48b5      	ldr	r0, [pc, #724]	; (470c <menu()+0x135c>)
    4438:	f004 fec8 	bl	91cc <Print::println()>
    443c:	211e      	movs	r1, #30
    443e:	48b5      	ldr	r0, [pc, #724]	; (4714 <menu()+0x1364>)
    4440:	f007 fc08 	bl	bc54 <usb_serial_write>
    4444:	48b1      	ldr	r0, [pc, #708]	; (470c <menu()+0x135c>)
    4446:	f004 fec1 	bl	91cc <Print::println()>
    444a:	48b3      	ldr	r0, [pc, #716]	; (4718 <menu()+0x1368>)
    444c:	211a      	movs	r1, #26
    444e:	f007 fc01 	bl	bc54 <usb_serial_write>
        switch (settings.cursens) {
    4452:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    4456:	2b02      	cmp	r3, #2
    4458:	f000 85f6 	beq.w	5048 <menu()+0x1c98>
    445c:	2b03      	cmp	r3, #3
    445e:	f000 85ea 	beq.w	5036 <menu()+0x1c86>
    4462:	2b01      	cmp	r3, #1
    4464:	f000 85de 	beq.w	5024 <menu()+0x1c74>
    4468:	48ac      	ldr	r0, [pc, #688]	; (471c <menu()+0x136c>)
    446a:	2109      	movs	r1, #9
    446c:	f007 fbf2 	bl	bc54 <usb_serial_write>
    4470:	48a6      	ldr	r0, [pc, #664]	; (470c <menu()+0x135c>)
    4472:	f004 feab 	bl	91cc <Print::println()>
    4476:	2114      	movs	r1, #20
    4478:	48a9      	ldr	r0, [pc, #676]	; (4720 <menu()+0x1370>)
    447a:	f007 fbeb 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    447e:	f8d6 1080 	ldr.w	r1, [r6, #128]	; 0x80
    4482:	48a2      	ldr	r0, [pc, #648]	; (470c <menu()+0x135c>)
    4484:	f004 fe9a 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4488:	48a0      	ldr	r0, [pc, #640]	; (470c <menu()+0x135c>)
    448a:	f004 fe9f 	bl	91cc <Print::println()>
    448e:	211c      	movs	r1, #28
    4490:	48a4      	ldr	r0, [pc, #656]	; (4724 <menu()+0x1374>)
    4492:	f007 fbdf 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4496:	f8d6 1088 	ldr.w	r1, [r6, #136]	; 0x88
    449a:	489c      	ldr	r0, [pc, #624]	; (470c <menu()+0x135c>)
    449c:	f004 fe8e 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44a0:	489a      	ldr	r0, [pc, #616]	; (470c <menu()+0x135c>)
    44a2:	f004 fe93 	bl	91cc <Print::println()>
    44a6:	211c      	movs	r1, #28
    44a8:	489f      	ldr	r0, [pc, #636]	; (4728 <menu()+0x1378>)
    44aa:	f007 fbd3 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    44ae:	f8d6 10b8 	ldr.w	r1, [r6, #184]	; 0xb8
    44b2:	4896      	ldr	r0, [pc, #600]	; (470c <menu()+0x135c>)
    44b4:	f004 fe82 	bl	91bc <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    44b8:	4894      	ldr	r0, [pc, #592]	; (470c <menu()+0x135c>)
    44ba:	f004 fe87 	bl	91cc <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    44be:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
    44c2:	f025 0702 	bic.w	r7, r5, #2
    44c6:	2f01      	cmp	r7, #1
    44c8:	f000 83bd 	beq.w	4c46 <menu()+0x1896>
        if (settings.cursens == Canbus) {
    44cc:	2d02      	cmp	r5, #2
    44ce:	f000 85e1 	beq.w	5094 <menu()+0x1ce4>
    44d2:	2113      	movs	r1, #19
    44d4:	4895      	ldr	r0, [pc, #596]	; (472c <menu()+0x137c>)
    44d6:	f007 fbbd 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    44da:	488c      	ldr	r0, [pc, #560]	; (470c <menu()+0x135c>)
    44dc:	f004 fe76 	bl	91cc <Print::println()>
        break;
    44e0:	2302      	movs	r3, #2
    44e2:	f7ff ba5f 	b.w	39a4 <menu()+0x5f4>
        menuload = 1;
    44e6:	2301      	movs	r3, #1
    44e8:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    44ea:	f007 fb81 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    44ee:	2800      	cmp	r0, #0
    44f0:	f300 8582 	bgt.w	4ff8 <menu()+0x1c48>
    44f4:	4e8e      	ldr	r6, [pc, #568]	; (4730 <menu()+0x1380>)
        menuload = 1;
    44f6:	2201      	movs	r2, #1
        incomingByte = 'c';
    44f8:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    44fa:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    44fc:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    44fe:	e783      	b.n	4408 <menu()+0x1058>
        menuload = 1;
    4500:	2301      	movs	r3, #1
    4502:	6023      	str	r3, [r4, #0]
    4504:	f007 fb74 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4508:	2800      	cmp	r0, #0
    450a:	dd07      	ble.n	451c <menu()+0x116c>
          settings.convlow = Serial.parseInt();
    450c:	487f      	ldr	r0, [pc, #508]	; (470c <menu()+0x135c>)
    450e:	4e88      	ldr	r6, [pc, #544]	; (4730 <menu()+0x1380>)
    4510:	f004 ffba 	bl	9488 <Stream::parseInt()>
    4514:	f008 fa2a 	bl	c96c <__aeabi_i2f>
    4518:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
  if (menuload == 8) {
    451c:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    451e:	2263      	movs	r2, #99	; 0x63
  if (menuload == 7) {
    4520:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    4522:	602a      	str	r2, [r5, #0]
  if (menuload == 7) {
    4524:	f43e afa6 	beq.w	3474 <menu()+0xc4>
  if (menuload == 5) {
    4528:	2b05      	cmp	r3, #5
    452a:	f43e afa3 	beq.w	3474 <menu()+0xc4>
  if (menuload == 3) {
    452e:	2b03      	cmp	r3, #3
    4530:	f000 8435 	beq.w	4d9e <menu()+0x19ee>
  if (menuload == 1) {
    4534:	2b01      	cmp	r3, #1
    4536:	f47e af9d 	bne.w	3474 <menu()+0xc4>
    453a:	4e7d      	ldr	r6, [pc, #500]	; (4730 <menu()+0x1380>)
    453c:	e764      	b.n	4408 <menu()+0x1058>
        menuload = 1;
    453e:	2301      	movs	r3, #1
    4540:	6023      	str	r3, [r4, #0]
    4542:	f007 fb55 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4546:	2800      	cmp	r0, #0
    4548:	dde8      	ble.n	451c <menu()+0x116c>
          settings.CurDead = Serial.parseInt();
    454a:	4870      	ldr	r0, [pc, #448]	; (470c <menu()+0x135c>)
    454c:	4e78      	ldr	r6, [pc, #480]	; (4730 <menu()+0x1380>)
    454e:	f004 ff9b 	bl	9488 <Stream::parseInt()>
    4552:	f8a6 00c6 	strh.w	r0, [r6, #198]	; 0xc6
    4556:	e7e1      	b.n	451c <menu()+0x116c>
        menuload = 1;
    4558:	2301      	movs	r3, #1
    455a:	6023      	str	r3, [r4, #0]
    455c:	f007 fb48 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4560:	2800      	cmp	r0, #0
    4562:	dddb      	ble.n	451c <menu()+0x116c>
          settings.convhigh = Serial.parseInt();
    4564:	4869      	ldr	r0, [pc, #420]	; (470c <menu()+0x135c>)
    4566:	4e72      	ldr	r6, [pc, #456]	; (4730 <menu()+0x1380>)
    4568:	f004 ff8e 	bl	9488 <Stream::parseInt()>
    456c:	f008 f9fe 	bl	c96c <__aeabi_i2f>
    4570:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
    4574:	e7d2      	b.n	451c <menu()+0x116c>
        settings.curcan++;
    4576:	4e6e      	ldr	r6, [pc, #440]	; (4730 <menu()+0x1380>)
    4578:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
        menuload = 1;
    457c:	2201      	movs	r2, #1
        settings.curcan++;
    457e:	4413      	add	r3, r2
          settings.curcan = 1;
    4580:	2b05      	cmp	r3, #5
    4582:	bfa8      	it	ge
    4584:	4613      	movge	r3, r2
        menuload = 1;
    4586:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4588:	2263      	movs	r2, #99	; 0x63
    458a:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
    458e:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4590:	e73a      	b.n	4408 <menu()+0x1058>
        settings.invertcur = !settings.invertcur;
    4592:	4e67      	ldr	r6, [pc, #412]	; (4730 <menu()+0x1380>)
    4594:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    4598:	fab3 f383 	clz	r3, r3
    459c:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    459e:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    45a0:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
        incomingByte = 'c';
    45a4:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    45a6:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    45a8:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    45aa:	e72d      	b.n	4408 <menu()+0x1058>
        settings.voltsoc = !settings.voltsoc;
    45ac:	4e60      	ldr	r6, [pc, #384]	; (4730 <menu()+0x1380>)
    45ae:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
    45b2:	fab3 f383 	clz	r3, r3
    45b6:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    45b8:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    45ba:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
        incomingByte = 'c';
    45be:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    45c0:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    45c2:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    45c4:	e720      	b.n	4408 <menu()+0x1058>
        menuload = 1;
    45c6:	2301      	movs	r3, #1
    45c8:	6023      	str	r3, [r4, #0]
    45ca:	f007 fb11 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    45ce:	2800      	cmp	r0, #0
    45d0:	dd90      	ble.n	44f4 <menu()+0x1144>
          settings.ncur = Serial.parseInt();
    45d2:	484e      	ldr	r0, [pc, #312]	; (470c <menu()+0x135c>)
    45d4:	4e56      	ldr	r6, [pc, #344]	; (4730 <menu()+0x1380>)
    45d6:	f004 ff57 	bl	9488 <Stream::parseInt()>
    45da:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
    45de:	e78a      	b.n	44f6 <menu()+0x1146>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    45e0:	4854      	ldr	r0, [pc, #336]	; (4734 <menu()+0x1384>)
    45e2:	2114      	movs	r1, #20
    45e4:	f007 fb36 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println();
    45e8:	4848      	ldr	r0, [pc, #288]	; (470c <menu()+0x135c>)
    45ea:	f004 fdef 	bl	91cc <Print::println()>
        if (settings.chargertype > 0) {
    45ee:	f8d6 30bc 	ldr.w	r3, [r6, #188]	; 0xbc
    45f2:	2b00      	cmp	r3, #0
    45f4:	dd12      	ble.n	461c <menu()+0x126c>
    45f6:	2118      	movs	r1, #24
    45f8:	484f      	ldr	r0, [pc, #316]	; (4738 <menu()+0x1388>)
    45fa:	f007 fb2b 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    45fe:	f8d6 10c0 	ldr.w	r1, [r6, #192]	; 0xc0
    4602:	4842      	ldr	r0, [pc, #264]	; (470c <menu()+0x135c>)
    4604:	f004 fdda 	bl	91bc <Print::print(long)>
    4608:	2102      	movs	r1, #2
    460a:	484c      	ldr	r0, [pc, #304]	; (473c <menu()+0x138c>)
    460c:	f007 fb22 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4610:	483e      	ldr	r0, [pc, #248]	; (470c <menu()+0x135c>)
    4612:	f004 fddb 	bl	91cc <Print::println()>
          SERIALCONSOLE.println();
    4616:	483d      	ldr	r0, [pc, #244]	; (470c <menu()+0x135c>)
    4618:	f004 fdd8 	bl	91cc <Print::println()>
    461c:	4848      	ldr	r0, [pc, #288]	; (4740 <menu()+0x1390>)
    461e:	211b      	movs	r1, #27
    4620:	f007 fb18 	bl	bc54 <usb_serial_write>
        switch (settings.ChargerDirect) {
    4624:	f896 30cc 	ldrb.w	r3, [r6, #204]	; 0xcc
    4628:	2b00      	cmp	r3, #0
    462a:	f040 8307 	bne.w	4c3c <menu()+0x188c>
    462e:	4845      	ldr	r0, [pc, #276]	; (4744 <menu()+0x1394>)
    4630:	2112      	movs	r1, #18
    4632:	f007 fb0f 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.println();
    4636:	4835      	ldr	r0, [pc, #212]	; (470c <menu()+0x135c>)
    4638:	f004 fdc8 	bl	91cc <Print::println()>
    463c:	211f      	movs	r1, #31
    463e:	4842      	ldr	r0, [pc, #264]	; (4748 <menu()+0x1398>)
    4640:	f007 fb08 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    4644:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4646:	f007 ffc1 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    464a:	2502      	movs	r5, #2
    464c:	460b      	mov	r3, r1
    464e:	4602      	mov	r2, r0
    4650:	9500      	str	r5, [sp, #0]
    4652:	482e      	ldr	r0, [pc, #184]	; (470c <menu()+0x135c>)
    4654:	f004 fddc 	bl	9210 <Print::printFloat(double, unsigned char)>
    4658:	4629      	mov	r1, r5
    465a:	483c      	ldr	r0, [pc, #240]	; (474c <menu()+0x139c>)
    465c:	f007 fafa 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4660:	482a      	ldr	r0, [pc, #168]	; (470c <menu()+0x135c>)
    4662:	f004 fdb3 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4666:	4829      	ldr	r0, [pc, #164]	; (470c <menu()+0x135c>)
    4668:	f004 fdb0 	bl	91cc <Print::println()>
    466c:	2113      	movs	r1, #19
    466e:	482f      	ldr	r0, [pc, #188]	; (472c <menu()+0x137c>)
    4670:	f007 faf0 	bl	bc54 <usb_serial_write>
    4674:	4825      	ldr	r0, [pc, #148]	; (470c <menu()+0x135c>)
    4676:	f004 fda9 	bl	91cc <Print::println()>
        break;
    467a:	2306      	movs	r3, #6
    467c:	f7ff b992 	b.w	39a4 <menu()+0x5f4>
    4680:	2115      	movs	r1, #21
    4682:	4833      	ldr	r0, [pc, #204]	; (4750 <menu()+0x13a0>)
    4684:	f007 fae6 	bl	bc54 <usb_serial_write>
    4688:	e7ae      	b.n	45e8 <menu()+0x1238>
    468a:	210c      	movs	r1, #12
    468c:	4831      	ldr	r0, [pc, #196]	; (4754 <menu()+0x13a4>)
    468e:	f007 fae1 	bl	bc54 <usb_serial_write>
    4692:	e7a9      	b.n	45e8 <menu()+0x1238>
    4694:	210d      	movs	r1, #13
    4696:	4830      	ldr	r0, [pc, #192]	; (4758 <menu()+0x13a8>)
    4698:	f007 fadc 	bl	bc54 <usb_serial_write>
    469c:	e7a4      	b.n	45e8 <menu()+0x1238>
    469e:	210c      	movs	r1, #12
    46a0:	482e      	ldr	r0, [pc, #184]	; (475c <menu()+0x13ac>)
    46a2:	f007 fad7 	bl	bc54 <usb_serial_write>
    46a6:	e79f      	b.n	45e8 <menu()+0x1238>
    46a8:	210d      	movs	r1, #13
    46aa:	482d      	ldr	r0, [pc, #180]	; (4760 <menu()+0x13b0>)
    46ac:	f007 fad2 	bl	bc54 <usb_serial_write>
    46b0:	e79a      	b.n	45e8 <menu()+0x1238>
    46b2:	210d      	movs	r1, #13
    46b4:	482b      	ldr	r0, [pc, #172]	; (4764 <menu()+0x13b4>)
    46b6:	f007 facd 	bl	bc54 <usb_serial_write>
    46ba:	e795      	b.n	45e8 <menu()+0x1238>
    46bc:	210b      	movs	r1, #11
    46be:	482a      	ldr	r0, [pc, #168]	; (4768 <menu()+0x13b8>)
    46c0:	f007 fac8 	bl	bc54 <usb_serial_write>
    46c4:	e790      	b.n	45e8 <menu()+0x1238>
    switch (incomingByte) {
    46c6:	2871      	cmp	r0, #113	; 0x71
    46c8:	f47e af93 	bne.w	35f2 <menu()+0x242>
        gaugedebug = 0;
    46cc:	4927      	ldr	r1, [pc, #156]	; (476c <menu()+0x13bc>)
    46ce:	4e28      	ldr	r6, [pc, #160]	; (4770 <menu()+0x13c0>)
    46d0:	2300      	movs	r3, #0
          incomingByte = 'k';
    46d2:	2273      	movs	r2, #115	; 0x73
        gaugedebug = 0;
    46d4:	600b      	str	r3, [r1, #0]
          menuload = 1;
    46d6:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    46d8:	602a      	str	r2, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    46da:	f7ff b967 	b.w	39ac <menu()+0x5fc>
        CPU_REBOOT;
    46de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    46e2:	4a24      	ldr	r2, [pc, #144]	; (4774 <menu()+0x13c4>)
    46e4:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
  if (incomingByte == 115 && menuload == 0) {
    46e8:	f7fe bec4 	b.w	3474 <menu()+0xc4>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    46ec:	22d8      	movs	r2, #216	; 0xd8
    46ee:	2100      	movs	r1, #0
    46f0:	480f      	ldr	r0, [pc, #60]	; (4730 <menu()+0x1380>)
        debug = 1;
    46f2:	4e1f      	ldr	r6, [pc, #124]	; (4770 <menu()+0x13c0>)
    46f4:	f004 ffc4 	bl	9680 <eeprom_write_block>
  if (incomingByte == 115 && menuload == 0) {
    46f8:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    46fa:	2100      	movs	r1, #0
        debug = 1;
    46fc:	2201      	movs	r2, #1
  if (incomingByte == 115 && menuload == 0) {
    46fe:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    4700:	6021      	str	r1, [r4, #0]
        debug = 1;
    4702:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 && menuload == 0) {
    4704:	f47e aeb6 	bne.w	3474 <menu()+0xc4>
    4708:	f7ff b950 	b.w	39ac <menu()+0x5fc>
    470c:	1fff8a04 	.word	0x1fff8a04
    4710:	00014550 	.word	0x00014550
    4714:	00014570 	.word	0x00014570
    4718:	00014590 	.word	0x00014590
    471c:	00014608 	.word	0x00014608
    4720:	00014614 	.word	0x00014614
    4724:	0001462c 	.word	0x0001462c
    4728:	0001464c 	.word	0x0001464c
    472c:	00013f90 	.word	0x00013f90
    4730:	1fffcde8 	.word	0x1fffcde8
    4734:	000140b0 	.word	0x000140b0
    4738:	000140c8 	.word	0x000140c8
    473c:	000140e4 	.word	0x000140e4
    4740:	000140e8 	.word	0x000140e8
    4744:	00014104 	.word	0x00014104
    4748:	00014130 	.word	0x00014130
    474c:	00014150 	.word	0x00014150
    4750:	00014098 	.word	0x00014098
    4754:	0001405c 	.word	0x0001405c
    4758:	0001403c 	.word	0x0001403c
    475c:	0001404c 	.word	0x0001404c
    4760:	0001407c 	.word	0x0001407c
    4764:	0001406c 	.word	0x0001406c
    4768:	0001408c 	.word	0x0001408c
    476c:	1fffcce4 	.word	0x1fffcce4
    4770:	1fff8850 	.word	0x1fff8850
    4774:	05fa0004 	.word	0x05fa0004
          settings.gaugehigh = Serial.parseInt();
    4778:	480a      	ldr	r0, [pc, #40]	; (47a4 <menu()+0x13f4>)
    477a:	4e0b      	ldr	r6, [pc, #44]	; (47a8 <menu()+0x13f8>)
    477c:	f004 fe84 	bl	9488 <Stream::parseInt()>
          gaugedebug = 3;
    4780:	4b0a      	ldr	r3, [pc, #40]	; (47ac <menu()+0x13fc>)
          settings.gaugehigh = Serial.parseInt();
    4782:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
          gaugedebug = 3;
    4786:	2203      	movs	r2, #3
    4788:	f7ff baa1 	b.w	3cce <menu()+0x91e>
          settings.DisTSetpoint = Serial.parseInt();
    478c:	4805      	ldr	r0, [pc, #20]	; (47a4 <menu()+0x13f4>)
    478e:	4e06      	ldr	r6, [pc, #24]	; (47a8 <menu()+0x13f8>)
    4790:	f004 fe7a 	bl	9488 <Stream::parseInt()>
    4794:	f008 f8ea 	bl	c96c <__aeabi_i2f>
    4798:	63f0      	str	r0, [r6, #60]	; 0x3c
        menuload = 1;
    479a:	2201      	movs	r2, #1
        incomingByte = 'b';
    479c:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    479e:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    47a0:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    47a2:	e007      	b.n	47b4 <menu()+0x1404>
    47a4:	1fff8a04 	.word	0x1fff8a04
    47a8:	1fffcde8 	.word	0x1fffcde8
    47ac:	1fffcce4 	.word	0x1fffcce4
        virtual int read() { return usb_serial_getchar(); }
    47b0:	f007 f9e2 	bl	bb78 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    47b4:	f007 fa1c 	bl	bbf0 <usb_serial_available>
        while (Serial.available()) {
    47b8:	4605      	mov	r5, r0
    47ba:	2800      	cmp	r0, #0
    47bc:	d1f8      	bne.n	47b0 <menu()+0x1400>
        SERIALCONSOLE.println();
    47be:	48c2      	ldr	r0, [pc, #776]	; (4ac8 <menu()+0x1718>)
    47c0:	f004 fd04 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    47c4:	48c0      	ldr	r0, [pc, #768]	; (4ac8 <menu()+0x1718>)
    47c6:	f004 fd01 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    47ca:	48bf      	ldr	r0, [pc, #764]	; (4ac8 <menu()+0x1718>)
    47cc:	f004 fcfe 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    47d0:	48bd      	ldr	r0, [pc, #756]	; (4ac8 <menu()+0x1718>)
    47d2:	f004 fcfb 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    47d6:	48bc      	ldr	r0, [pc, #752]	; (4ac8 <menu()+0x1718>)
    47d8:	f004 fcf8 	bl	91cc <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47dc:	2115      	movs	r1, #21
    47de:	48bb      	ldr	r0, [pc, #748]	; (4acc <menu()+0x171c>)
    47e0:	f007 fa38 	bl	bc54 <usb_serial_write>
    47e4:	48b8      	ldr	r0, [pc, #736]	; (4ac8 <menu()+0x1718>)
    47e6:	f004 fcf1 	bl	91cc <Print::println()>
    47ea:	2114      	movs	r1, #20
    47ec:	48b8      	ldr	r0, [pc, #736]	; (4ad0 <menu()+0x1720>)
    47ee:	f007 fa31 	bl	bc54 <usb_serial_write>
    47f2:	48b5      	ldr	r0, [pc, #724]	; (4ac8 <menu()+0x1718>)
    47f4:	f004 fcea 	bl	91cc <Print::println()>
    47f8:	211b      	movs	r1, #27
    47fa:	48b6      	ldr	r0, [pc, #728]	; (4ad4 <menu()+0x1724>)
    47fc:	f007 fa2a 	bl	bc54 <usb_serial_write>
    4800:	48b1      	ldr	r0, [pc, #708]	; (4ac8 <menu()+0x1718>)
    4802:	f004 fce3 	bl	91cc <Print::println()>
    4806:	2113      	movs	r1, #19
    4808:	48b3      	ldr	r0, [pc, #716]	; (4ad8 <menu()+0x1728>)
    480a:	f007 fa23 	bl	bc54 <usb_serial_write>
    480e:	48ae      	ldr	r0, [pc, #696]	; (4ac8 <menu()+0x1718>)
    4810:	f004 fcdc 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4814:	48ac      	ldr	r0, [pc, #688]	; (4ac8 <menu()+0x1718>)
    4816:	f004 fcd9 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    481a:	48ab      	ldr	r0, [pc, #684]	; (4ac8 <menu()+0x1718>)
    481c:	f004 fcd6 	bl	91cc <Print::println()>
    4820:	2120      	movs	r1, #32
    4822:	48ae      	ldr	r0, [pc, #696]	; (4adc <menu()+0x172c>)
    4824:	f007 fa16 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    4828:	68f0      	ldr	r0, [r6, #12]
    482a:	49ad      	ldr	r1, [pc, #692]	; (4ae0 <menu()+0x1730>)
    482c:	f008 f8f2 	bl	ca14 <__aeabi_fmul>
    4830:	f007 fecc 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4834:	9500      	str	r5, [sp, #0]
    4836:	4602      	mov	r2, r0
    4838:	460b      	mov	r3, r1
    483a:	48a3      	ldr	r0, [pc, #652]	; (4ac8 <menu()+0x1718>)
    483c:	f004 fce8 	bl	9210 <Print::printFloat(double, unsigned char)>
    4840:	2102      	movs	r1, #2
    4842:	48a8      	ldr	r0, [pc, #672]	; (4ae4 <menu()+0x1734>)
    4844:	f007 fa06 	bl	bc54 <usb_serial_write>
    4848:	2102      	movs	r1, #2
    484a:	48a7      	ldr	r0, [pc, #668]	; (4ae8 <menu()+0x1738>)
    484c:	f007 fa02 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4850:	489d      	ldr	r0, [pc, #628]	; (4ac8 <menu()+0x1718>)
    4852:	f004 fcbb 	bl	91cc <Print::println()>
    4856:	2121      	movs	r1, #33	; 0x21
    4858:	48a4      	ldr	r0, [pc, #656]	; (4aec <menu()+0x173c>)
    485a:	f007 f9fb 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    485e:	6930      	ldr	r0, [r6, #16]
    4860:	499f      	ldr	r1, [pc, #636]	; (4ae0 <menu()+0x1730>)
    4862:	f008 f8d7 	bl	ca14 <__aeabi_fmul>
    4866:	f007 feb1 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    486a:	9500      	str	r5, [sp, #0]
    486c:	4602      	mov	r2, r0
    486e:	460b      	mov	r3, r1
    4870:	4895      	ldr	r0, [pc, #596]	; (4ac8 <menu()+0x1718>)
    4872:	f004 fccd 	bl	9210 <Print::printFloat(double, unsigned char)>
    4876:	2102      	movs	r1, #2
    4878:	489a      	ldr	r0, [pc, #616]	; (4ae4 <menu()+0x1734>)
    487a:	f007 f9eb 	bl	bc54 <usb_serial_write>
    487e:	2102      	movs	r1, #2
    4880:	4899      	ldr	r0, [pc, #612]	; (4ae8 <menu()+0x1738>)
    4882:	f007 f9e7 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4886:	4890      	ldr	r0, [pc, #576]	; (4ac8 <menu()+0x1718>)
    4888:	f004 fca0 	bl	91cc <Print::println()>
    488c:	211f      	movs	r1, #31
    488e:	4898      	ldr	r0, [pc, #608]	; (4af0 <menu()+0x1740>)
    4890:	f007 f9e0 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    4894:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    4896:	f007 fe99 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    489a:	2702      	movs	r7, #2
    489c:	4602      	mov	r2, r0
    489e:	460b      	mov	r3, r1
    48a0:	4889      	ldr	r0, [pc, #548]	; (4ac8 <menu()+0x1718>)
    48a2:	9700      	str	r7, [sp, #0]
    48a4:	f004 fcb4 	bl	9210 <Print::printFloat(double, unsigned char)>
    48a8:	2101      	movs	r1, #1
    48aa:	4892      	ldr	r0, [pc, #584]	; (4af4 <menu()+0x1744>)
    48ac:	f007 f9d2 	bl	bc54 <usb_serial_write>
    48b0:	4639      	mov	r1, r7
    48b2:	488d      	ldr	r0, [pc, #564]	; (4ae8 <menu()+0x1738>)
    48b4:	f007 f9ce 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    48b8:	4883      	ldr	r0, [pc, #524]	; (4ac8 <menu()+0x1718>)
    48ba:	f004 fc87 	bl	91cc <Print::println()>
    48be:	2120      	movs	r1, #32
    48c0:	488d      	ldr	r0, [pc, #564]	; (4af8 <menu()+0x1748>)
    48c2:	f007 f9c7 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    48c6:	6b30      	ldr	r0, [r6, #48]	; 0x30
    48c8:	f007 fe80 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    48cc:	9700      	str	r7, [sp, #0]
    48ce:	4602      	mov	r2, r0
    48d0:	460b      	mov	r3, r1
    48d2:	487d      	ldr	r0, [pc, #500]	; (4ac8 <menu()+0x1718>)
    48d4:	f004 fc9c 	bl	9210 <Print::printFloat(double, unsigned char)>
    48d8:	2101      	movs	r1, #1
    48da:	4886      	ldr	r0, [pc, #536]	; (4af4 <menu()+0x1744>)
    48dc:	f007 f9ba 	bl	bc54 <usb_serial_write>
    48e0:	4639      	mov	r1, r7
    48e2:	4881      	ldr	r0, [pc, #516]	; (4ae8 <menu()+0x1738>)
    48e4:	f007 f9b6 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    48e8:	4877      	ldr	r0, [pc, #476]	; (4ac8 <menu()+0x1718>)
    48ea:	f004 fc6f 	bl	91cc <Print::println()>
    48ee:	2123      	movs	r1, #35	; 0x23
    48f0:	4882      	ldr	r0, [pc, #520]	; (4afc <menu()+0x174c>)
    48f2:	f007 f9af 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    48f6:	6d30      	ldr	r0, [r6, #80]	; 0x50
    48f8:	4979      	ldr	r1, [pc, #484]	; (4ae0 <menu()+0x1730>)
    48fa:	f008 f88b 	bl	ca14 <__aeabi_fmul>
    48fe:	f007 fe65 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4902:	9500      	str	r5, [sp, #0]
    4904:	4602      	mov	r2, r0
    4906:	460b      	mov	r3, r1
    4908:	486f      	ldr	r0, [pc, #444]	; (4ac8 <menu()+0x1718>)
    490a:	f004 fc81 	bl	9210 <Print::printFloat(double, unsigned char)>
    490e:	4639      	mov	r1, r7
    4910:	4874      	ldr	r0, [pc, #464]	; (4ae4 <menu()+0x1734>)
    4912:	f007 f99f 	bl	bc54 <usb_serial_write>
    4916:	4639      	mov	r1, r7
    4918:	4873      	ldr	r0, [pc, #460]	; (4ae8 <menu()+0x1738>)
    491a:	f007 f99b 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    491e:	486a      	ldr	r0, [pc, #424]	; (4ac8 <menu()+0x1718>)
    4920:	f004 fc54 	bl	91cc <Print::println()>
    4924:	211f      	movs	r1, #31
    4926:	4876      	ldr	r0, [pc, #472]	; (4b00 <menu()+0x1750>)
    4928:	f007 f994 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    492c:	6d70      	ldr	r0, [r6, #84]	; 0x54
    492e:	496c      	ldr	r1, [pc, #432]	; (4ae0 <menu()+0x1730>)
    4930:	f008 f870 	bl	ca14 <__aeabi_fmul>
    4934:	f007 fe4a 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4938:	9500      	str	r5, [sp, #0]
    493a:	4602      	mov	r2, r0
    493c:	460b      	mov	r3, r1
    493e:	4862      	ldr	r0, [pc, #392]	; (4ac8 <menu()+0x1718>)
    4940:	f004 fc66 	bl	9210 <Print::printFloat(double, unsigned char)>
    4944:	4639      	mov	r1, r7
    4946:	4867      	ldr	r0, [pc, #412]	; (4ae4 <menu()+0x1734>)
    4948:	f007 f984 	bl	bc54 <usb_serial_write>
    494c:	4639      	mov	r1, r7
    494e:	4866      	ldr	r0, [pc, #408]	; (4ae8 <menu()+0x1738>)
    4950:	f007 f980 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4954:	485c      	ldr	r0, [pc, #368]	; (4ac8 <menu()+0x1718>)
    4956:	f004 fc39 	bl	91cc <Print::println()>
    495a:	2119      	movs	r1, #25
    495c:	4869      	ldr	r0, [pc, #420]	; (4b04 <menu()+0x1754>)
    495e:	f007 f979 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4962:	6e31      	ldr	r1, [r6, #96]	; 0x60
    4964:	4858      	ldr	r0, [pc, #352]	; (4ac8 <menu()+0x1718>)
    4966:	f004 fc29 	bl	91bc <Print::print(long)>
    496a:	4639      	mov	r1, r7
    496c:	4866      	ldr	r0, [pc, #408]	; (4b08 <menu()+0x1758>)
    496e:	f007 f971 	bl	bc54 <usb_serial_write>
    4972:	4639      	mov	r1, r7
    4974:	485c      	ldr	r0, [pc, #368]	; (4ae8 <menu()+0x1738>)
    4976:	f007 f96d 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    497a:	4853      	ldr	r0, [pc, #332]	; (4ac8 <menu()+0x1718>)
    497c:	f004 fc26 	bl	91cc <Print::println()>
    4980:	2118      	movs	r1, #24
    4982:	4862      	ldr	r0, [pc, #392]	; (4b0c <menu()+0x175c>)
    4984:	f007 f966 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    4988:	6ef0      	ldr	r0, [r6, #108]	; 0x6c
    498a:	f007 ffef 	bl	c96c <__aeabi_i2f>
    498e:	4960      	ldr	r1, [pc, #384]	; (4b10 <menu()+0x1760>)
    4990:	f008 f840 	bl	ca14 <__aeabi_fmul>
    4994:	f007 fe1a 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4998:	9700      	str	r7, [sp, #0]
    499a:	4602      	mov	r2, r0
    499c:	460b      	mov	r3, r1
    499e:	484a      	ldr	r0, [pc, #296]	; (4ac8 <menu()+0x1718>)
    49a0:	f004 fc36 	bl	9210 <Print::printFloat(double, unsigned char)>
    49a4:	2101      	movs	r1, #1
    49a6:	485b      	ldr	r0, [pc, #364]	; (4b14 <menu()+0x1764>)
    49a8:	f007 f954 	bl	bc54 <usb_serial_write>
    49ac:	4639      	mov	r1, r7
    49ae:	484e      	ldr	r0, [pc, #312]	; (4ae8 <menu()+0x1738>)
    49b0:	f007 f950 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49b4:	4844      	ldr	r0, [pc, #272]	; (4ac8 <menu()+0x1718>)
    49b6:	f004 fc09 	bl	91cc <Print::println()>
    49ba:	212b      	movs	r1, #43	; 0x2b
    49bc:	4856      	ldr	r0, [pc, #344]	; (4b18 <menu()+0x1768>)
    49be:	f007 f949 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    49c2:	69f0      	ldr	r0, [r6, #28]
    49c4:	4946      	ldr	r1, [pc, #280]	; (4ae0 <menu()+0x1730>)
    49c6:	f008 f825 	bl	ca14 <__aeabi_fmul>
    49ca:	f007 fdff 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    49ce:	9500      	str	r5, [sp, #0]
    49d0:	4602      	mov	r2, r0
    49d2:	460b      	mov	r3, r1
    49d4:	483c      	ldr	r0, [pc, #240]	; (4ac8 <menu()+0x1718>)
    49d6:	f004 fc1b 	bl	9210 <Print::printFloat(double, unsigned char)>
    49da:	4639      	mov	r1, r7
    49dc:	4841      	ldr	r0, [pc, #260]	; (4ae4 <menu()+0x1734>)
    49de:	f007 f939 	bl	bc54 <usb_serial_write>
    49e2:	4639      	mov	r1, r7
    49e4:	4840      	ldr	r0, [pc, #256]	; (4ae8 <menu()+0x1738>)
    49e6:	f007 f935 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49ea:	4837      	ldr	r0, [pc, #220]	; (4ac8 <menu()+0x1718>)
    49ec:	f004 fbee 	bl	91cc <Print::println()>
    49f0:	211f      	movs	r1, #31
    49f2:	484a      	ldr	r0, [pc, #296]	; (4b1c <menu()+0x176c>)
    49f4:	f007 f92e 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    49f8:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    49fa:	4833      	ldr	r0, [pc, #204]	; (4ac8 <menu()+0x1718>)
    49fc:	f004 fbde 	bl	91bc <Print::print(long)>
    4a00:	4639      	mov	r1, r7
    4a02:	4839      	ldr	r0, [pc, #228]	; (4ae8 <menu()+0x1738>)
    4a04:	f007 f926 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a08:	482f      	ldr	r0, [pc, #188]	; (4ac8 <menu()+0x1718>)
    4a0a:	f004 fbdf 	bl	91cc <Print::println()>
    4a0e:	2120      	movs	r1, #32
    4a10:	4843      	ldr	r0, [pc, #268]	; (4b20 <menu()+0x1770>)
    4a12:	f007 f91f 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4a16:	6db1      	ldr	r1, [r6, #88]	; 0x58
    4a18:	482b      	ldr	r0, [pc, #172]	; (4ac8 <menu()+0x1718>)
    4a1a:	f004 fbcf 	bl	91bc <Print::print(long)>
    4a1e:	4639      	mov	r1, r7
    4a20:	4831      	ldr	r0, [pc, #196]	; (4ae8 <menu()+0x1738>)
    4a22:	f007 f917 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a26:	4828      	ldr	r0, [pc, #160]	; (4ac8 <menu()+0x1718>)
    4a28:	f004 fbd0 	bl	91cc <Print::println()>
    4a2c:	2110      	movs	r1, #16
    4a2e:	483d      	ldr	r0, [pc, #244]	; (4b24 <menu()+0x1774>)
    4a30:	f007 f910 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4a34:	6f31      	ldr	r1, [r6, #112]	; 0x70
    4a36:	4824      	ldr	r0, [pc, #144]	; (4ac8 <menu()+0x1718>)
    4a38:	f004 fbc0 	bl	91bc <Print::print(long)>
    4a3c:	4639      	mov	r1, r7
    4a3e:	4829      	ldr	r0, [pc, #164]	; (4ae4 <menu()+0x1734>)
    4a40:	f007 f908 	bl	bc54 <usb_serial_write>
    4a44:	4639      	mov	r1, r7
    4a46:	4828      	ldr	r0, [pc, #160]	; (4ae8 <menu()+0x1738>)
    4a48:	f007 f904 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a4c:	481e      	ldr	r0, [pc, #120]	; (4ac8 <menu()+0x1718>)
    4a4e:	f004 fbbd 	bl	91cc <Print::println()>
    4a52:	2113      	movs	r1, #19
    4a54:	4834      	ldr	r0, [pc, #208]	; (4b28 <menu()+0x1778>)
    4a56:	f007 f8fd 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4a5a:	6f71      	ldr	r1, [r6, #116]	; 0x74
    4a5c:	481a      	ldr	r0, [pc, #104]	; (4ac8 <menu()+0x1718>)
    4a5e:	f004 fbad 	bl	91bc <Print::print(long)>
    4a62:	2101      	movs	r1, #1
    4a64:	4831      	ldr	r0, [pc, #196]	; (4b2c <menu()+0x177c>)
    4a66:	f007 f8f5 	bl	bc54 <usb_serial_write>
    4a6a:	4639      	mov	r1, r7
    4a6c:	481e      	ldr	r0, [pc, #120]	; (4ae8 <menu()+0x1738>)
    4a6e:	f007 f8f1 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a72:	4815      	ldr	r0, [pc, #84]	; (4ac8 <menu()+0x1718>)
    4a74:	f004 fbaa 	bl	91cc <Print::println()>
    4a78:	2110      	movs	r1, #16
    4a7a:	482d      	ldr	r0, [pc, #180]	; (4b30 <menu()+0x1780>)
    4a7c:	f007 f8ea 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4a80:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4a82:	4811      	ldr	r0, [pc, #68]	; (4ac8 <menu()+0x1718>)
    4a84:	f004 fb9a 	bl	91bc <Print::print(long)>
    4a88:	4639      	mov	r1, r7
    4a8a:	4816      	ldr	r0, [pc, #88]	; (4ae4 <menu()+0x1734>)
    4a8c:	f007 f8e2 	bl	bc54 <usb_serial_write>
    4a90:	4639      	mov	r1, r7
    4a92:	4815      	ldr	r0, [pc, #84]	; (4ae8 <menu()+0x1738>)
    4a94:	f007 f8de 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4a98:	480b      	ldr	r0, [pc, #44]	; (4ac8 <menu()+0x1718>)
    4a9a:	f004 fb97 	bl	91cc <Print::println()>
    4a9e:	2114      	movs	r1, #20
    4aa0:	4824      	ldr	r0, [pc, #144]	; (4b34 <menu()+0x1784>)
    4aa2:	f007 f8d7 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4aa6:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4aa8:	4807      	ldr	r0, [pc, #28]	; (4ac8 <menu()+0x1718>)
    4aaa:	f004 fb87 	bl	91bc <Print::print(long)>
    4aae:	2101      	movs	r1, #1
    4ab0:	481e      	ldr	r0, [pc, #120]	; (4b2c <menu()+0x177c>)
    4ab2:	f007 f8cf 	bl	bc54 <usb_serial_write>
    4ab6:	4639      	mov	r1, r7
    4ab8:	480b      	ldr	r0, [pc, #44]	; (4ae8 <menu()+0x1738>)
    4aba:	f007 f8cb 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4abe:	4802      	ldr	r0, [pc, #8]	; (4ac8 <menu()+0x1718>)
    4ac0:	f004 fb84 	bl	91cc <Print::println()>
    4ac4:	2116      	movs	r1, #22
    4ac6:	e037      	b.n	4b38 <menu()+0x1788>
    4ac8:	1fff8a04 	.word	0x1fff8a04
    4acc:	00014770 	.word	0x00014770
    4ad0:	00014788 	.word	0x00014788
    4ad4:	000147a0 	.word	0x000147a0
    4ad8:	00013f90 	.word	0x00013f90
    4adc:	000147bc 	.word	0x000147bc
    4ae0:	447a0000 	.word	0x447a0000
    4ae4:	00013f70 	.word	0x00013f70
    4ae8:	00014a64 	.word	0x00014a64
    4aec:	000147e0 	.word	0x000147e0
    4af0:	00014804 	.word	0x00014804
    4af4:	00014824 	.word	0x00014824
    4af8:	00014828 	.word	0x00014828
    4afc:	0001484c 	.word	0x0001484c
    4b00:	00014870 	.word	0x00014870
    4b04:	00014890 	.word	0x00014890
    4b08:	000148ac 	.word	0x000148ac
    4b0c:	000148b0 	.word	0x000148b0
    4b10:	3dcccccd 	.word	0x3dcccccd
    4b14:	00014690 	.word	0x00014690
    4b18:	000148cc 	.word	0x000148cc
    4b1c:	000148f8 	.word	0x000148f8
    4b20:	00014918 	.word	0x00014918
    4b24:	0001493c 	.word	0x0001493c
    4b28:	00014950 	.word	0x00014950
    4b2c:	00014964 	.word	0x00014964
    4b30:	00014968 	.word	0x00014968
    4b34:	0001497c 	.word	0x0001497c
    4b38:	48bf      	ldr	r0, [pc, #764]	; (4e38 <menu()+0x1a88>)
    4b3a:	f007 f88b 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    4b3e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4b40:	49be      	ldr	r1, [pc, #760]	; (4e3c <menu()+0x1a8c>)
    4b42:	f007 ff67 	bl	ca14 <__aeabi_fmul>
    4b46:	f007 fd41 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b4a:	9500      	str	r5, [sp, #0]
    4b4c:	4602      	mov	r2, r0
    4b4e:	460b      	mov	r3, r1
    4b50:	48bb      	ldr	r0, [pc, #748]	; (4e40 <menu()+0x1a90>)
    4b52:	f004 fb5d 	bl	9210 <Print::printFloat(double, unsigned char)>
    4b56:	4639      	mov	r1, r7
    4b58:	48ba      	ldr	r0, [pc, #744]	; (4e44 <menu()+0x1a94>)
    4b5a:	f007 f87b 	bl	bc54 <usb_serial_write>
    4b5e:	4639      	mov	r1, r7
    4b60:	48b9      	ldr	r0, [pc, #740]	; (4e48 <menu()+0x1a98>)
    4b62:	f007 f877 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b66:	48b6      	ldr	r0, [pc, #728]	; (4e40 <menu()+0x1a90>)
    4b68:	f004 fb30 	bl	91cc <Print::println()>
    4b6c:	2124      	movs	r1, #36	; 0x24
    4b6e:	48b7      	ldr	r0, [pc, #732]	; (4e4c <menu()+0x1a9c>)
    4b70:	f007 f870 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    4b74:	f8d6 00c8 	ldr.w	r0, [r6, #200]	; 0xc8
    4b78:	49b0      	ldr	r1, [pc, #704]	; (4e3c <menu()+0x1a8c>)
    4b7a:	f007 ff4b 	bl	ca14 <__aeabi_fmul>
    4b7e:	f007 fd25 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4b82:	9500      	str	r5, [sp, #0]
    4b84:	4602      	mov	r2, r0
    4b86:	460b      	mov	r3, r1
    4b88:	48ad      	ldr	r0, [pc, #692]	; (4e40 <menu()+0x1a90>)
    4b8a:	f004 fb41 	bl	9210 <Print::printFloat(double, unsigned char)>
    4b8e:	4639      	mov	r1, r7
    4b90:	48ac      	ldr	r0, [pc, #688]	; (4e44 <menu()+0x1a94>)
    4b92:	f007 f85f 	bl	bc54 <usb_serial_write>
    4b96:	4639      	mov	r1, r7
    4b98:	48ab      	ldr	r0, [pc, #684]	; (4e48 <menu()+0x1a98>)
    4b9a:	f007 f85b 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b9e:	48a8      	ldr	r0, [pc, #672]	; (4e40 <menu()+0x1a90>)
    4ba0:	f004 fb14 	bl	91cc <Print::println()>
    4ba4:	212b      	movs	r1, #43	; 0x2b
    4ba6:	48aa      	ldr	r0, [pc, #680]	; (4e50 <menu()+0x1aa0>)
    4ba8:	f007 f854 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    4bac:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    4bae:	f007 fd0d 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4bb2:	9700      	str	r7, [sp, #0]
    4bb4:	4602      	mov	r2, r0
    4bb6:	460b      	mov	r3, r1
    4bb8:	48a1      	ldr	r0, [pc, #644]	; (4e40 <menu()+0x1a90>)
    4bba:	f004 fb29 	bl	9210 <Print::printFloat(double, unsigned char)>
    4bbe:	2101      	movs	r1, #1
    4bc0:	48a4      	ldr	r0, [pc, #656]	; (4e54 <menu()+0x1aa4>)
    4bc2:	f007 f847 	bl	bc54 <usb_serial_write>
    4bc6:	4629      	mov	r1, r5
    4bc8:	48a3      	ldr	r0, [pc, #652]	; (4e58 <menu()+0x1aa8>)
    4bca:	f007 f843 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bce:	489c      	ldr	r0, [pc, #624]	; (4e40 <menu()+0x1a90>)
    4bd0:	f004 fafc 	bl	91cc <Print::println()>
    4bd4:	2127      	movs	r1, #39	; 0x27
    4bd6:	48a1      	ldr	r0, [pc, #644]	; (4e5c <menu()+0x1aac>)
    4bd8:	f007 f83c 	bl	bc54 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    4bdc:	6970      	ldr	r0, [r6, #20]
    4bde:	4997      	ldr	r1, [pc, #604]	; (4e3c <menu()+0x1a8c>)
    4be0:	f007 ff18 	bl	ca14 <__aeabi_fmul>
    4be4:	f007 fcf2 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4be8:	9500      	str	r5, [sp, #0]
    4bea:	460b      	mov	r3, r1
    4bec:	4602      	mov	r2, r0
    4bee:	4894      	ldr	r0, [pc, #592]	; (4e40 <menu()+0x1a90>)
    4bf0:	f004 fb0e 	bl	9210 <Print::printFloat(double, unsigned char)>
    4bf4:	4639      	mov	r1, r7
    4bf6:	4893      	ldr	r0, [pc, #588]	; (4e44 <menu()+0x1a94>)
    4bf8:	f007 f82c 	bl	bc54 <usb_serial_write>
    4bfc:	4639      	mov	r1, r7
    4bfe:	4892      	ldr	r0, [pc, #584]	; (4e48 <menu()+0x1a98>)
    4c00:	f007 f828 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c04:	488e      	ldr	r0, [pc, #568]	; (4e40 <menu()+0x1a90>)
    4c06:	f004 fae1 	bl	91cc <Print::println()>
    4c0a:	4895      	ldr	r0, [pc, #596]	; (4e60 <menu()+0x1ab0>)
    4c0c:	2116      	movs	r1, #22
    4c0e:	f007 f821 	bl	bc54 <usb_serial_write>
        if (settings.CSCvariant == BmwI3) {
    4c12:	f896 30ce 	ldrb.w	r3, [r6, #206]	; 0xce
    4c16:	2b00      	cmp	r3, #0
    4c18:	f000 81f6 	beq.w	5008 <menu()+0x1c58>
        if (settings.CSCvariant == MiniE) {
    4c1c:	2b01      	cmp	r3, #1
    4c1e:	f000 8234 	beq.w	508a <menu()+0x1cda>
    4c22:	2102      	movs	r1, #2
    4c24:	4888      	ldr	r0, [pc, #544]	; (4e48 <menu()+0x1a98>)
    4c26:	f007 f815 	bl	bc54 <usb_serial_write>
    4c2a:	4885      	ldr	r0, [pc, #532]	; (4e40 <menu()+0x1a90>)
    4c2c:	f004 face 	bl	91cc <Print::println()>
        SERIALCONSOLE.println();
    4c30:	4883      	ldr	r0, [pc, #524]	; (4e40 <menu()+0x1a90>)
    4c32:	f004 facb 	bl	91cc <Print::println()>
        break;
    4c36:	2303      	movs	r3, #3
    4c38:	f7fe beb4 	b.w	39a4 <menu()+0x5f4>
    4c3c:	2114      	movs	r1, #20
    4c3e:	4889      	ldr	r0, [pc, #548]	; (4e64 <menu()+0x1ab4>)
    4c40:	f007 f808 	bl	bc54 <usb_serial_write>
    4c44:	e4f7      	b.n	4636 <menu()+0x1286>
    4c46:	211c      	movs	r1, #28
    4c48:	4887      	ldr	r0, [pc, #540]	; (4e68 <menu()+0x1ab8>)
    4c4a:	f007 f803 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    4c4e:	f8d6 009c 	ldr.w	r0, [r6, #156]	; 0x9c
    4c52:	4986      	ldr	r1, [pc, #536]	; (4e6c <menu()+0x1abc>)
    4c54:	f007 fede 	bl	ca14 <__aeabi_fmul>
    4c58:	f007 fcb8 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4c5c:	9700      	str	r7, [sp, #0]
    4c5e:	4602      	mov	r2, r0
    4c60:	460b      	mov	r3, r1
    4c62:	4877      	ldr	r0, [pc, #476]	; (4e40 <menu()+0x1a90>)
    4c64:	f004 fad4 	bl	9210 <Print::printFloat(double, unsigned char)>
    4c68:	2105      	movs	r1, #5
    4c6a:	4881      	ldr	r0, [pc, #516]	; (4e70 <menu()+0x1ac0>)
    4c6c:	f006 fff2 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4c70:	4873      	ldr	r0, [pc, #460]	; (4e40 <menu()+0x1a90>)
    4c72:	f004 faab 	bl	91cc <Print::println()>
        if (settings.cursens == Analoguedual) {
    4c76:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
    4c7a:	2d01      	cmp	r5, #1
    4c7c:	d119      	bne.n	4cb2 <menu()+0x1902>
    4c7e:	211d      	movs	r1, #29
    4c80:	487c      	ldr	r0, [pc, #496]	; (4e74 <menu()+0x1ac4>)
    4c82:	f006 ffe7 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    4c86:	f8d6 0098 	ldr.w	r0, [r6, #152]	; 0x98
    4c8a:	4978      	ldr	r1, [pc, #480]	; (4e6c <menu()+0x1abc>)
    4c8c:	f007 fec2 	bl	ca14 <__aeabi_fmul>
    4c90:	f007 fc9c 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4c94:	9500      	str	r5, [sp, #0]
    4c96:	4602      	mov	r2, r0
    4c98:	460b      	mov	r3, r1
    4c9a:	4869      	ldr	r0, [pc, #420]	; (4e40 <menu()+0x1a90>)
    4c9c:	f004 fab8 	bl	9210 <Print::printFloat(double, unsigned char)>
    4ca0:	2105      	movs	r1, #5
    4ca2:	4873      	ldr	r0, [pc, #460]	; (4e70 <menu()+0x1ac0>)
    4ca4:	f006 ffd6 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ca8:	4865      	ldr	r0, [pc, #404]	; (4e40 <menu()+0x1a90>)
    4caa:	f004 fa8f 	bl	91cc <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    4cae:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
    4cb2:	f025 0302 	bic.w	r3, r5, #2
    4cb6:	2b01      	cmp	r3, #1
    4cb8:	f47f ac08 	bne.w	44cc <menu()+0x111c>
    4cbc:	211c      	movs	r1, #28
    4cbe:	486e      	ldr	r0, [pc, #440]	; (4e78 <menu()+0x1ac8>)
    4cc0:	f006 ffc8 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4cc4:	f8b6 10c6 	ldrh.w	r1, [r6, #198]	; 0xc6
    4cc8:	485d      	ldr	r0, [pc, #372]	; (4e40 <menu()+0x1a90>)
    4cca:	f004 fa77 	bl	91bc <Print::print(long)>
    4cce:	2103      	movs	r1, #3
    4cd0:	486a      	ldr	r0, [pc, #424]	; (4e7c <menu()+0x1acc>)
    4cd2:	f006 ffbf 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cd6:	485a      	ldr	r0, [pc, #360]	; (4e40 <menu()+0x1a90>)
    4cd8:	f004 fa78 	bl	91cc <Print::println()>
        if (settings.cursens == Analoguedual) {
    4cdc:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
    4ce0:	2d01      	cmp	r5, #1
    4ce2:	f47f abf3 	bne.w	44cc <menu()+0x111c>
    4ce6:	211f      	movs	r1, #31
    4ce8:	4865      	ldr	r0, [pc, #404]	; (4e80 <menu()+0x1ad0>)
    4cea:	f006 ffb3 	bl	bc54 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    4cee:	f8d6 00a4 	ldr.w	r0, [r6, #164]	; 0xa4
    4cf2:	f007 fe3b 	bl	c96c <__aeabi_i2f>
    4cf6:	4963      	ldr	r1, [pc, #396]	; (4e84 <menu()+0x1ad4>)
    4cf8:	f007 fe8c 	bl	ca14 <__aeabi_fmul>
    4cfc:	f007 fc66 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4d00:	2502      	movs	r5, #2
    4d02:	4602      	mov	r2, r0
    4d04:	460b      	mov	r3, r1
    4d06:	9500      	str	r5, [sp, #0]
    4d08:	484d      	ldr	r0, [pc, #308]	; (4e40 <menu()+0x1a90>)
    4d0a:	f004 fa81 	bl	9210 <Print::printFloat(double, unsigned char)>
    4d0e:	4629      	mov	r1, r5
    4d10:	485d      	ldr	r0, [pc, #372]	; (4e88 <menu()+0x1ad8>)
    4d12:	f006 ff9f 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d16:	484a      	ldr	r0, [pc, #296]	; (4e40 <menu()+0x1a90>)
    4d18:	f004 fa58 	bl	91cc <Print::println()>
        if (settings.cursens == Canbus) {
    4d1c:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
    4d20:	f7ff bbd4 	b.w	44cc <menu()+0x111c>
        loadSettings();
    4d24:	f7fc fc78 	bl	1618 <loadSettings()>
    4d28:	2102      	movs	r1, #2
    4d2a:	4847      	ldr	r0, [pc, #284]	; (4e48 <menu()+0x1a98>)
    4d2c:	f006 ff92 	bl	bc54 <usb_serial_write>
    4d30:	4843      	ldr	r0, [pc, #268]	; (4e40 <menu()+0x1a90>)
    4d32:	f004 fa4b 	bl	91cc <Print::println()>
    4d36:	2102      	movs	r1, #2
    4d38:	4843      	ldr	r0, [pc, #268]	; (4e48 <menu()+0x1a98>)
    4d3a:	f006 ff8b 	bl	bc54 <usb_serial_write>
    4d3e:	4840      	ldr	r0, [pc, #256]	; (4e40 <menu()+0x1a90>)
    4d40:	f004 fa44 	bl	91cc <Print::println()>
    4d44:	2102      	movs	r1, #2
    4d46:	4840      	ldr	r0, [pc, #256]	; (4e48 <menu()+0x1a98>)
    4d48:	f006 ff84 	bl	bc54 <usb_serial_write>
    4d4c:	483c      	ldr	r0, [pc, #240]	; (4e40 <menu()+0x1a90>)
    4d4e:	f004 fa3d 	bl	91cc <Print::println()>
    4d52:	484e      	ldr	r0, [pc, #312]	; (4e8c <menu()+0x1adc>)
    4d54:	2117      	movs	r1, #23
    4d56:	f006 ff7d 	bl	bc54 <usb_serial_write>
    4d5a:	4839      	ldr	r0, [pc, #228]	; (4e40 <menu()+0x1a90>)
    4d5c:	f004 fa36 	bl	91cc <Print::println()>
    4d60:	2102      	movs	r1, #2
    4d62:	4839      	ldr	r0, [pc, #228]	; (4e48 <menu()+0x1a98>)
    4d64:	4e4a      	ldr	r6, [pc, #296]	; (4e90 <menu()+0x1ae0>)
    4d66:	f006 ff75 	bl	bc54 <usb_serial_write>
    4d6a:	4835      	ldr	r0, [pc, #212]	; (4e40 <menu()+0x1a90>)
    4d6c:	f004 fa2e 	bl	91cc <Print::println()>
        break;
    4d70:	e513      	b.n	479a <menu()+0x13ea>
        virtual int available() { return usb_serial_available(); }
    4d72:	f006 ff3d 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4d76:	2800      	cmp	r0, #0
    4d78:	f77e ac36 	ble.w	35e8 <menu()+0x238>
          settings.socvolt[3] = Serial.parseInt();
    4d7c:	4830      	ldr	r0, [pc, #192]	; (4e40 <menu()+0x1a90>)
    4d7e:	4e44      	ldr	r6, [pc, #272]	; (4e90 <menu()+0x1ae0>)
    4d80:	f004 fb82 	bl	9488 <Stream::parseInt()>
    4d84:	67f0      	str	r0, [r6, #124]	; 0x7c
          incomingByte = 'b';
    4d86:	e508      	b.n	479a <menu()+0x13ea>
    4d88:	f006 ff32 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4d8c:	2800      	cmp	r0, #0
    4d8e:	f77e ac2b 	ble.w	35e8 <menu()+0x238>
          settings.socvolt[2] = Serial.parseInt();
    4d92:	482b      	ldr	r0, [pc, #172]	; (4e40 <menu()+0x1a90>)
    4d94:	4e3e      	ldr	r6, [pc, #248]	; (4e90 <menu()+0x1ae0>)
    4d96:	f004 fb77 	bl	9488 <Stream::parseInt()>
    4d9a:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    4d9c:	e4fd      	b.n	479a <menu()+0x13ea>
    4d9e:	f006 ff27 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4da2:	2800      	cmp	r0, #0
    4da4:	f77e ac20 	ble.w	35e8 <menu()+0x238>
          settings.socvolt[1] = Serial.parseInt();
    4da8:	4825      	ldr	r0, [pc, #148]	; (4e40 <menu()+0x1a90>)
    4daa:	4e39      	ldr	r6, [pc, #228]	; (4e90 <menu()+0x1ae0>)
    4dac:	f004 fb6c 	bl	9488 <Stream::parseInt()>
    4db0:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    4db2:	e4f2      	b.n	479a <menu()+0x13ea>
    4db4:	f006 ff1c 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4db8:	2800      	cmp	r0, #0
    4dba:	f77e ac15 	ble.w	35e8 <menu()+0x238>
          settings.socvolt[0] = Serial.parseInt();
    4dbe:	4820      	ldr	r0, [pc, #128]	; (4e40 <menu()+0x1a90>)
    4dc0:	4e33      	ldr	r6, [pc, #204]	; (4e90 <menu()+0x1ae0>)
    4dc2:	f004 fb61 	bl	9488 <Stream::parseInt()>
    4dc6:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    4dc8:	e4e7      	b.n	479a <menu()+0x13ea>
    4dca:	f006 ff11 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4dce:	2800      	cmp	r0, #0
    4dd0:	f77e ac0a 	ble.w	35e8 <menu()+0x238>
          settings.Pstrings = Serial.parseInt();
    4dd4:	481a      	ldr	r0, [pc, #104]	; (4e40 <menu()+0x1a90>)
    4dd6:	4e2e      	ldr	r6, [pc, #184]	; (4e90 <menu()+0x1ae0>)
    4dd8:	f004 fb56 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    4ddc:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    4dde:	4601      	mov	r1, r0
          menuload = 1;
    4de0:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    4de2:	482c      	ldr	r0, [pc, #176]	; (4e94 <menu()+0x1ae4>)
          settings.Pstrings = Serial.parseInt();
    4de4:	65f1      	str	r1, [r6, #92]	; 0x5c
          incomingByte = 'b';
    4de6:	2362      	movs	r3, #98	; 0x62
    4de8:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    4dea:	f7fc f81d 	bl	e28 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    4dee:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4df0:	6828      	ldr	r0, [r5, #0]
    4df2:	f7fe bbfb 	b.w	35ec <menu()+0x23c>
    4df6:	f006 fefb 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4dfa:	2800      	cmp	r0, #0
    4dfc:	f77e abf4 	ble.w	35e8 <menu()+0x238>
          settings.UnderVSetpoint = Serial.parseInt();
    4e00:	480f      	ldr	r0, [pc, #60]	; (4e40 <menu()+0x1a90>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    4e02:	4e23      	ldr	r6, [pc, #140]	; (4e90 <menu()+0x1ae0>)
          settings.UnderVSetpoint = Serial.parseInt();
    4e04:	f004 fb40 	bl	9488 <Stream::parseInt()>
    4e08:	f007 fdb0 	bl	c96c <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    4e0c:	490b      	ldr	r1, [pc, #44]	; (4e3c <menu()+0x1a8c>)
    4e0e:	f007 feb5 	bl	cb7c <__aeabi_fdiv>
    4e12:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    4e14:	e4c1      	b.n	479a <menu()+0x13ea>
    4e16:	f006 feeb 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4e1a:	2800      	cmp	r0, #0
    4e1c:	f77e abe4 	ble.w	35e8 <menu()+0x238>
          settings.OverVSetpoint = Serial.parseInt();
    4e20:	4807      	ldr	r0, [pc, #28]	; (4e40 <menu()+0x1a90>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    4e22:	4e1b      	ldr	r6, [pc, #108]	; (4e90 <menu()+0x1ae0>)
          settings.OverVSetpoint = Serial.parseInt();
    4e24:	f004 fb30 	bl	9488 <Stream::parseInt()>
    4e28:	f007 fda0 	bl	c96c <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    4e2c:	4903      	ldr	r1, [pc, #12]	; (4e3c <menu()+0x1a8c>)
    4e2e:	f007 fea5 	bl	cb7c <__aeabi_fdiv>
    4e32:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    4e34:	e4b1      	b.n	479a <menu()+0x13ea>
    4e36:	bf00      	nop
    4e38:	00014994 	.word	0x00014994
    4e3c:	447a0000 	.word	0x447a0000
    4e40:	1fff8a04 	.word	0x1fff8a04
    4e44:	00013f70 	.word	0x00013f70
    4e48:	00014a64 	.word	0x00014a64
    4e4c:	000149ac 	.word	0x000149ac
    4e50:	000149d4 	.word	0x000149d4
    4e54:	00014824 	.word	0x00014824
    4e58:	00014b70 	.word	0x00014b70
    4e5c:	00014a00 	.word	0x00014a00
    4e60:	00014a28 	.word	0x00014a28
    4e64:	00014118 	.word	0x00014118
    4e68:	0001466c 	.word	0x0001466c
    4e6c:	3dcccccd 	.word	0x3dcccccd
    4e70:	0001468c 	.word	0x0001468c
    4e74:	00014694 	.word	0x00014694
    4e78:	000146b4 	.word	0x000146b4
    4e7c:	000146d4 	.word	0x000146d4
    4e80:	000146d8 	.word	0x000146d8
    4e84:	3a83126f 	.word	0x3a83126f
    4e88:	00013d7c 	.word	0x00013d7c
    4e8c:	00013f04 	.word	0x00013f04
    4e90:	1fffcde8 	.word	0x1fffcde8
    4e94:	1fff91e0 	.word	0x1fff91e0
        settings.CSCvariant++;
    4e98:	4ebc      	ldr	r6, [pc, #752]	; (518c <menu()+0x1ddc>)
    4e9a:	f896 30ce 	ldrb.w	r3, [r6, #206]	; 0xce
    4e9e:	3301      	adds	r3, #1
    4ea0:	b2db      	uxtb	r3, r3
          settings.CSCvariant = 0;
    4ea2:	2b02      	cmp	r3, #2
    4ea4:	bf28      	it	cs
    4ea6:	2300      	movcs	r3, #0
    4ea8:	f886 30ce 	strb.w	r3, [r6, #206]	; 0xce
        break;
    4eac:	e475      	b.n	479a <menu()+0x13ea>
        SOCset = 0;
    4eae:	4bb8      	ldr	r3, [pc, #736]	; (5190 <menu()+0x1de0>)
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4eb0:	48b8      	ldr	r0, [pc, #736]	; (5194 <menu()+0x1de4>)
    4eb2:	2200      	movs	r2, #0
    4eb4:	2102      	movs	r1, #2
    4eb6:	601a      	str	r2, [r3, #0]
    4eb8:	f006 fecc 	bl	bc54 <usb_serial_write>
    4ebc:	48b6      	ldr	r0, [pc, #728]	; (5198 <menu()+0x1de8>)
    4ebe:	f004 f985 	bl	91cc <Print::println()>
    4ec2:	210b      	movs	r1, #11
    4ec4:	48b5      	ldr	r0, [pc, #724]	; (519c <menu()+0x1dec>)
    4ec6:	f006 fec5 	bl	bc54 <usb_serial_write>
    4eca:	e749      	b.n	4d60 <menu()+0x19b0>
        menuload = 0;
    4ecc:	2200      	movs	r2, #0
        incomingByte = 115;
    4ece:	2373      	movs	r3, #115	; 0x73
    4ed0:	4eb3      	ldr	r6, [pc, #716]	; (51a0 <menu()+0x1df0>)
        menuload = 0;
    4ed2:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    4ed4:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 && menuload == 0) {
    4ed6:	f7fe bd69 	b.w	39ac <menu()+0x5fc>
        virtual int available() { return usb_serial_available(); }
    4eda:	f006 fe89 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4ede:	2800      	cmp	r0, #0
    4ee0:	f77e ab82 	ble.w	35e8 <menu()+0x238>
          settings.DischHys = Serial.parseInt();
    4ee4:	48ac      	ldr	r0, [pc, #688]	; (5198 <menu()+0x1de8>)
          settings.DischHys = settings.DischHys / 1000;
    4ee6:	4ea9      	ldr	r6, [pc, #676]	; (518c <menu()+0x1ddc>)
          settings.DischHys = Serial.parseInt();
    4ee8:	f004 face 	bl	9488 <Stream::parseInt()>
    4eec:	f007 fd3e 	bl	c96c <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    4ef0:	49ac      	ldr	r1, [pc, #688]	; (51a4 <menu()+0x1df4>)
    4ef2:	f007 fe43 	bl	cb7c <__aeabi_fdiv>
    4ef6:	6170      	str	r0, [r6, #20]
          incomingByte = 'b';
    4ef8:	e44f      	b.n	479a <menu()+0x13ea>
    4efa:	f006 fe79 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4efe:	2800      	cmp	r0, #0
    4f00:	f77e ab72 	ble.w	35e8 <menu()+0x238>
          settings.Scells = Serial.parseInt();
    4f04:	48a4      	ldr	r0, [pc, #656]	; (5198 <menu()+0x1de8>)
    4f06:	4ea1      	ldr	r6, [pc, #644]	; (518c <menu()+0x1ddc>)
    4f08:	f004 fabe 	bl	9488 <Stream::parseInt()>
    4f0c:	65b0      	str	r0, [r6, #88]	; 0x58
          incomingByte = 'b';
    4f0e:	e444      	b.n	479a <menu()+0x13ea>
    4f10:	f006 fe6e 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4f14:	2800      	cmp	r0, #0
    4f16:	f77e ab67 	ble.w	35e8 <menu()+0x238>
          settings.DischVsetpoint = Serial.parseInt();
    4f1a:	489f      	ldr	r0, [pc, #636]	; (5198 <menu()+0x1de8>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    4f1c:	4e9b      	ldr	r6, [pc, #620]	; (518c <menu()+0x1ddc>)
          settings.DischVsetpoint = Serial.parseInt();
    4f1e:	f004 fab3 	bl	9488 <Stream::parseInt()>
    4f22:	f007 fd23 	bl	c96c <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    4f26:	499f      	ldr	r1, [pc, #636]	; (51a4 <menu()+0x1df4>)
    4f28:	f007 fe28 	bl	cb7c <__aeabi_fdiv>
    4f2c:	61f0      	str	r0, [r6, #28]
          incomingByte = 'b';
    4f2e:	e434      	b.n	479a <menu()+0x13ea>
    4f30:	f006 fe5e 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4f34:	2800      	cmp	r0, #0
    4f36:	f77e ab57 	ble.w	35e8 <menu()+0x238>
          settings.discurrentmax = Serial.parseInt() * 10;
    4f3a:	4897      	ldr	r0, [pc, #604]	; (5198 <menu()+0x1de8>)
    4f3c:	4e93      	ldr	r6, [pc, #588]	; (518c <menu()+0x1ddc>)
    4f3e:	f004 faa3 	bl	9488 <Stream::parseInt()>
    4f42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f46:	0040      	lsls	r0, r0, #1
    4f48:	66f0      	str	r0, [r6, #108]	; 0x6c
          incomingByte = 'b';
    4f4a:	e426      	b.n	479a <menu()+0x13ea>
    4f4c:	f006 fe50 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4f50:	2800      	cmp	r0, #0
    4f52:	f77e ab49 	ble.w	35e8 <menu()+0x238>
          settings.CAP = Serial.parseInt();
    4f56:	4890      	ldr	r0, [pc, #576]	; (5198 <menu()+0x1de8>)
    4f58:	4e8c      	ldr	r6, [pc, #560]	; (518c <menu()+0x1ddc>)
    4f5a:	f004 fa95 	bl	9488 <Stream::parseInt()>
    4f5e:	6630      	str	r0, [r6, #96]	; 0x60
          incomingByte = 'b';
    4f60:	e41b      	b.n	479a <menu()+0x13ea>
    4f62:	f006 fe45 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4f66:	2800      	cmp	r0, #0
    4f68:	f77e ab3e 	ble.w	35e8 <menu()+0x238>
          settings.balanceHyst = Serial.parseInt();
    4f6c:	488a      	ldr	r0, [pc, #552]	; (5198 <menu()+0x1de8>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    4f6e:	4e87      	ldr	r6, [pc, #540]	; (518c <menu()+0x1ddc>)
          settings.balanceHyst = Serial.parseInt();
    4f70:	f004 fa8a 	bl	9488 <Stream::parseInt()>
    4f74:	f007 fcfa 	bl	c96c <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    4f78:	498a      	ldr	r1, [pc, #552]	; (51a4 <menu()+0x1df4>)
    4f7a:	f007 fdff 	bl	cb7c <__aeabi_fdiv>
    4f7e:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    4f80:	e40b      	b.n	479a <menu()+0x13ea>
    4f82:	f006 fe35 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4f86:	2800      	cmp	r0, #0
    4f88:	f77e ab2e 	ble.w	35e8 <menu()+0x238>
          settings.balanceVoltage = Serial.parseInt();
    4f8c:	4882      	ldr	r0, [pc, #520]	; (5198 <menu()+0x1de8>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    4f8e:	4e7f      	ldr	r6, [pc, #508]	; (518c <menu()+0x1ddc>)
          settings.balanceVoltage = Serial.parseInt();
    4f90:	f004 fa7a 	bl	9488 <Stream::parseInt()>
    4f94:	f007 fcea 	bl	c96c <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    4f98:	4982      	ldr	r1, [pc, #520]	; (51a4 <menu()+0x1df4>)
    4f9a:	f007 fdef 	bl	cb7c <__aeabi_fdiv>
    4f9e:	6530      	str	r0, [r6, #80]	; 0x50
          incomingByte = 'b';
    4fa0:	f7ff bbfb 	b.w	479a <menu()+0x13ea>
    4fa4:	f006 fe24 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4fa8:	2800      	cmp	r0, #0
    4faa:	f77e ab1d 	ble.w	35e8 <menu()+0x238>
          settings.UnderTSetpoint = Serial.parseInt();
    4fae:	487a      	ldr	r0, [pc, #488]	; (5198 <menu()+0x1de8>)
    4fb0:	4e76      	ldr	r6, [pc, #472]	; (518c <menu()+0x1ddc>)
    4fb2:	f004 fa69 	bl	9488 <Stream::parseInt()>
    4fb6:	f007 fcd9 	bl	c96c <__aeabi_i2f>
    4fba:	6330      	str	r0, [r6, #48]	; 0x30
          incomingByte = 'b';
    4fbc:	f7ff bbed 	b.w	479a <menu()+0x13ea>
    4fc0:	f006 fe16 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    4fc4:	2800      	cmp	r0, #0
    4fc6:	f77e ab0f 	ble.w	35e8 <menu()+0x238>
          settings.OverTSetpoint = Serial.parseInt();
    4fca:	4873      	ldr	r0, [pc, #460]	; (5198 <menu()+0x1de8>)
    4fcc:	4e6f      	ldr	r6, [pc, #444]	; (518c <menu()+0x1ddc>)
    4fce:	f004 fa5b 	bl	9488 <Stream::parseInt()>
    4fd2:	f007 fccb 	bl	c96c <__aeabi_i2f>
    4fd6:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    4fd8:	f7ff bbdf 	b.w	479a <menu()+0x13ea>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4fdc:	486e      	ldr	r0, [pc, #440]	; (5198 <menu()+0x1de8>)
    4fde:	4e6b      	ldr	r6, [pc, #428]	; (518c <menu()+0x1ddc>)
    4fe0:	f004 fa52 	bl	9488 <Stream::parseInt()>
    4fe4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4fe8:	0040      	lsls	r0, r0, #1
          menuload = 1;
    4fea:	2201      	movs	r2, #1
          incomingByte = 'e';
    4fec:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4fee:	6670      	str	r0, [r6, #100]	; 0x64
          menuload = 1;
    4ff0:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4ff2:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4ff4:	f7fe bf36 	b.w	3e64 <menu()+0xab4>
          settings.changecur = Serial.parseInt();
    4ff8:	4867      	ldr	r0, [pc, #412]	; (5198 <menu()+0x1de8>)
    4ffa:	4e64      	ldr	r6, [pc, #400]	; (518c <menu()+0x1ddc>)
    4ffc:	f004 fa44 	bl	9488 <Stream::parseInt()>
    5000:	f8c6 00a4 	str.w	r0, [r6, #164]	; 0xa4
    5004:	f7ff ba77 	b.w	44f6 <menu()+0x1146>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5008:	4867      	ldr	r0, [pc, #412]	; (51a8 <menu()+0x1df8>)
    500a:	2106      	movs	r1, #6
    500c:	f006 fe22 	bl	bc54 <usb_serial_write>
        if (settings.CSCvariant == MiniE) {
    5010:	f896 30ce 	ldrb.w	r3, [r6, #206]	; 0xce
    5014:	e602      	b.n	4c1c <menu()+0x186c>
          debugdigits = Serial.parseInt();
    5016:	4860      	ldr	r0, [pc, #384]	; (5198 <menu()+0x1de8>)
    5018:	f004 fa36 	bl	9488 <Stream::parseInt()>
    501c:	4b63      	ldr	r3, [pc, #396]	; (51ac <menu()+0x1dfc>)
    501e:	6018      	str	r0, [r3, #0]
    5020:	f7ff b971 	b.w	4306 <menu()+0xf56>
    5024:	211e      	movs	r1, #30
    5026:	4862      	ldr	r0, [pc, #392]	; (51b0 <menu()+0x1e00>)
    5028:	f006 fe14 	bl	bc54 <usb_serial_write>
    502c:	485a      	ldr	r0, [pc, #360]	; (5198 <menu()+0x1de8>)
    502e:	f004 f8cd 	bl	91cc <Print::println()>
    5032:	f7ff ba20 	b.w	4476 <menu()+0x10c6>
    5036:	2120      	movs	r1, #32
    5038:	485e      	ldr	r0, [pc, #376]	; (51b4 <menu()+0x1e04>)
    503a:	f006 fe0b 	bl	bc54 <usb_serial_write>
    503e:	4856      	ldr	r0, [pc, #344]	; (5198 <menu()+0x1de8>)
    5040:	f004 f8c4 	bl	91cc <Print::println()>
    5044:	f7ff ba17 	b.w	4476 <menu()+0x10c6>
    5048:	2117      	movs	r1, #23
    504a:	485b      	ldr	r0, [pc, #364]	; (51b8 <menu()+0x1e08>)
    504c:	f006 fe02 	bl	bc54 <usb_serial_write>
    5050:	4851      	ldr	r0, [pc, #324]	; (5198 <menu()+0x1de8>)
    5052:	f004 f8bb 	bl	91cc <Print::println()>
    5056:	f7ff ba0e 	b.w	4476 <menu()+0x10c6>
          contctrl = 0;
    505a:	4b58      	ldr	r3, [pc, #352]	; (51bc <menu()+0x1e0c>)
    505c:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    505e:	200b      	movs	r0, #11
    5060:	4631      	mov	r1, r6
          contctrl = 0;
    5062:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    5064:	f004 ff84 	bl	9f70 <digitalWrite>
          digitalWrite(OUT2, LOW);
    5068:	4631      	mov	r1, r6
    506a:	200c      	movs	r0, #12
    506c:	f004 ff80 	bl	9f70 <digitalWrite>
          digitalWrite(OUT3, LOW);
    5070:	4631      	mov	r1, r6
    5072:	2014      	movs	r0, #20
    5074:	f004 ff7c 	bl	9f70 <digitalWrite>
          digitalWrite(OUT4, LOW);
    5078:	4631      	mov	r1, r6
    507a:	2015      	movs	r0, #21
    507c:	f004 ff78 	bl	9f70 <digitalWrite>
        incomingByte = 'd';
    5080:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    5082:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    5084:	602a      	str	r2, [r5, #0]
        break;
    5086:	f7ff b922 	b.w	42ce <menu()+0xf1e>
    508a:	2106      	movs	r1, #6
    508c:	484c      	ldr	r0, [pc, #304]	; (51c0 <menu()+0x1e10>)
    508e:	f006 fde1 	bl	bc54 <usb_serial_write>
    5092:	e5c6      	b.n	4c22 <menu()+0x1872>
    5094:	484b      	ldr	r0, [pc, #300]	; (51c4 <menu()+0x1e14>)
    5096:	2117      	movs	r1, #23
    5098:	f006 fddc 	bl	bc54 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    509c:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    50a0:	2b01      	cmp	r3, #1
    50a2:	d025      	beq.n	50f0 <menu()+0x1d40>
          } else if (settings.curcan == LemCAB500) {
    50a4:	2b02      	cmp	r3, #2
    50a6:	d02c      	beq.n	5102 <menu()+0x1d52>
          } else if (settings.curcan == IsaScale) {
    50a8:	2b03      	cmp	r3, #3
    50aa:	d033      	beq.n	5114 <menu()+0x1d64>
          } else if (settings.curcan == VictronLynx) {
    50ac:	2b04      	cmp	r3, #4
    50ae:	f47f aa10 	bne.w	44d2 <menu()+0x1122>
            SERIALCONSOLE.println(" Victron Lynx VE.CAN Shunt");
    50b2:	4945      	ldr	r1, [pc, #276]	; (51c8 <menu()+0x1e18>)
    50b4:	4838      	ldr	r0, [pc, #224]	; (5198 <menu()+0x1de8>)
    50b6:	f7fc fa9d 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
    50ba:	f7ff ba0a 	b.w	44d2 <menu()+0x1122>
    50be:	4843      	ldr	r0, [pc, #268]	; (51cc <menu()+0x1e1c>)
    50c0:	2120      	movs	r1, #32
    50c2:	f006 fdc7 	bl	bc54 <usb_serial_write>
          if (settings.tripcont == 0) {
    50c6:	f896 30cd 	ldrb.w	r3, [r6, #205]	; 0xcd
    50ca:	b943      	cbnz	r3, 50de <menu()+0x1d2e>
    50cc:	210a      	movs	r1, #10
    50ce:	4840      	ldr	r0, [pc, #256]	; (51d0 <menu()+0x1e20>)
    50d0:	f006 fdc0 	bl	bc54 <usb_serial_write>
    50d4:	4830      	ldr	r0, [pc, #192]	; (5198 <menu()+0x1de8>)
    50d6:	f004 f879 	bl	91cc <Print::println()>
    50da:	f7fe be65 	b.w	3da8 <menu()+0x9f8>
    50de:	211c      	movs	r1, #28
    50e0:	483c      	ldr	r0, [pc, #240]	; (51d4 <menu()+0x1e24>)
    50e2:	f006 fdb7 	bl	bc54 <usb_serial_write>
    50e6:	482c      	ldr	r0, [pc, #176]	; (5198 <menu()+0x1de8>)
    50e8:	f004 f870 	bl	91cc <Print::println()>
    50ec:	f7fe be5c 	b.w	3da8 <menu()+0x9f8>
    50f0:	2117      	movs	r1, #23
    50f2:	4839      	ldr	r0, [pc, #228]	; (51d8 <menu()+0x1e28>)
    50f4:	f006 fdae 	bl	bc54 <usb_serial_write>
    50f8:	4827      	ldr	r0, [pc, #156]	; (5198 <menu()+0x1de8>)
    50fa:	f004 f867 	bl	91cc <Print::println()>
    50fe:	f7ff b9e8 	b.w	44d2 <menu()+0x1122>
    5102:	2114      	movs	r1, #20
    5104:	4835      	ldr	r0, [pc, #212]	; (51dc <menu()+0x1e2c>)
    5106:	f006 fda5 	bl	bc54 <usb_serial_write>
    510a:	4823      	ldr	r0, [pc, #140]	; (5198 <menu()+0x1de8>)
    510c:	f004 f85e 	bl	91cc <Print::println()>
    5110:	f7ff b9df 	b.w	44d2 <menu()+0x1122>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    5114:	4932      	ldr	r1, [pc, #200]	; (51e0 <menu()+0x1e30>)
    5116:	4820      	ldr	r0, [pc, #128]	; (5198 <menu()+0x1de8>)
    5118:	f7fc fa6c 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
    511c:	f7ff b9d9 	b.w	44d2 <menu()+0x1122>
    5120:	4e1a      	ldr	r6, [pc, #104]	; (518c <menu()+0x1ddc>)
    5122:	f7fe bdde 	b.w	3ce2 <menu()+0x932>
    5126:	4e19      	ldr	r6, [pc, #100]	; (518c <menu()+0x1ddc>)
    5128:	f7fe bbe8 	b.w	38fc <menu()+0x54c>
    512c:	4e17      	ldr	r6, [pc, #92]	; (518c <menu()+0x1ddc>)
    512e:	f7fe be99 	b.w	3e64 <menu()+0xab4>
    5132:	4e16      	ldr	r6, [pc, #88]	; (518c <menu()+0x1ddc>)
    5134:	f7ff bb3e 	b.w	47b4 <menu()+0x1404>
    5138:	4e14      	ldr	r6, [pc, #80]	; (518c <menu()+0x1ddc>)
    513a:	f7fe bb48 	b.w	37ce <menu()+0x41e>
        virtual int available() { return usb_serial_available(); }
    513e:	f006 fd57 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    5142:	2800      	cmp	r0, #0
    5144:	f77e ad17 	ble.w	3b76 <menu()+0x7c6>
          settings.Pretime = Serial.parseInt();
    5148:	4813      	ldr	r0, [pc, #76]	; (5198 <menu()+0x1de8>)
    514a:	4e10      	ldr	r6, [pc, #64]	; (518c <menu()+0x1ddc>)
    514c:	f004 f99c 	bl	9488 <Stream::parseInt()>
          menuload = 1;
    5150:	2301      	movs	r3, #1
    5152:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5154:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    5156:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
          incomingByte = 'k';
    515a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    515c:	f7fe bdc1 	b.w	3ce2 <menu()+0x932>
    5160:	f006 fd46 	bl	bbf0 <usb_serial_available>
        if (Serial.available() > 0) {
    5164:	2800      	cmp	r0, #0
    5166:	f77e aa7e 	ble.w	3666 <menu()+0x2b6>
          settings.WarnOff = Serial.parseInt();
    516a:	480b      	ldr	r0, [pc, #44]	; (5198 <menu()+0x1de8>)
          settings.WarnOff = settings.WarnOff * 0.001;
    516c:	4e07      	ldr	r6, [pc, #28]	; (518c <menu()+0x1ddc>)
          settings.WarnOff = Serial.parseInt();
    516e:	f004 f98b 	bl	9488 <Stream::parseInt()>
    5172:	f007 fbfb 	bl	c96c <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    5176:	491b      	ldr	r1, [pc, #108]	; (51e4 <menu()+0x1e34>)
    5178:	f007 fc4c 	bl	ca14 <__aeabi_fmul>
          menuload = 1;
    517c:	2301      	movs	r3, #1
    517e:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    5180:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    5182:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'a';
    5184:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5186:	f7fe bb22 	b.w	37ce <menu()+0x41e>
    518a:	bf00      	nop
    518c:	1fffcde8 	.word	0x1fffcde8
    5190:	1fff91b4 	.word	0x1fff91b4
    5194:	00014a64 	.word	0x00014a64
    5198:	1fff8a04 	.word	0x1fff8a04
    519c:	00013f1c 	.word	0x00013f1c
    51a0:	1fff8850 	.word	0x1fff8850
    51a4:	447a0000 	.word	0x447a0000
    51a8:	00014a40 	.word	0x00014a40
    51ac:	1fff8854 	.word	0x1fff8854
    51b0:	000145ac 	.word	0x000145ac
    51b4:	000145cc 	.word	0x000145cc
    51b8:	000145f0 	.word	0x000145f0
    51bc:	1fffcbb8 	.word	0x1fffcbb8
    51c0:	00014a48 	.word	0x00014a48
    51c4:	000146f8 	.word	0x000146f8
    51c8:	00014754 	.word	0x00014754
    51cc:	000142b8 	.word	0x000142b8
    51d0:	000142dc 	.word	0x000142dc
    51d4:	000142e8 	.word	0x000142e8
    51d8:	00014710 	.word	0x00014710
    51dc:	00014728 	.word	0x00014728
    51e0:	00014740 	.word	0x00014740
    51e4:	3a83126f 	.word	0x3a83126f

000051e8 <CAB300()>:
void CAB300() {
    51e8:	b538      	push	{r3, r4, r5, lr}
    51ea:	4c18      	ldr	r4, [pc, #96]	; (524c <CAB300()+0x64>)
    51ec:	4b18      	ldr	r3, [pc, #96]	; (5250 <CAB300()+0x68>)
    51ee:	6822      	ldr	r2, [r4, #0]
    51f0:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    51f2:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++)  //4 byte current encoded in 0 1 2 3
    51f6:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    51f8:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++)  //4 byte current encoded in 0 1 2 3
    51fc:	d1f9      	bne.n	51f2 <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    51fe:	4b15      	ldr	r3, [pc, #84]	; (5254 <CAB300()+0x6c>)
    5200:	4d15      	ldr	r5, [pc, #84]	; (5258 <CAB300()+0x70>)
    5202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    5206:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    5208:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    520c:	2b02      	cmp	r3, #2
    520e:	6028      	str	r0, [r5, #0]
    5210:	d015      	beq.n	523e <CAB300()+0x56>
  if (candebug == 1 && debug == 1) {
    5212:	4b12      	ldr	r3, [pc, #72]	; (525c <CAB300()+0x74>)
    5214:	681b      	ldr	r3, [r3, #0]
    5216:	2b01      	cmp	r3, #1
    5218:	d000      	beq.n	521c <CAB300()+0x34>
}
    521a:	bd38      	pop	{r3, r4, r5, pc}
  if (candebug == 1 && debug == 1) {
    521c:	4b10      	ldr	r3, [pc, #64]	; (5260 <CAB300()+0x78>)
    521e:	681b      	ldr	r3, [r3, #0]
    5220:	2b01      	cmp	r3, #1
    5222:	d1fa      	bne.n	521a <CAB300()+0x32>
    Serial.println();
    5224:	480f      	ldr	r0, [pc, #60]	; (5264 <CAB300()+0x7c>)
    5226:	f003 ffd1 	bl	91cc <Print::println()>
    Serial.print(CANmilliamps);
    522a:	6829      	ldr	r1, [r5, #0]
    522c:	480d      	ldr	r0, [pc, #52]	; (5264 <CAB300()+0x7c>)
    522e:	f003 ffc5 	bl	91bc <Print::print(long)>
}
    5232:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5236:	480c      	ldr	r0, [pc, #48]	; (5268 <CAB300()+0x80>)
    5238:	2103      	movs	r1, #3
    523a:	f006 bd0b 	b.w	bc54 <usb_serial_write>
    RawCur = CANmilliamps;
    523e:	f007 fb95 	bl	c96c <__aeabi_i2f>
    5242:	4c0a      	ldr	r4, [pc, #40]	; (526c <CAB300()+0x84>)
    5244:	6020      	str	r0, [r4, #0]
    getcurrent();
    5246:	f7fc fe4d 	bl	1ee4 <getcurrent()>
    524a:	e7e2      	b.n	5212 <CAB300()+0x2a>
    524c:	1fffccf8 	.word	0x1fffccf8
    5250:	1fffccef 	.word	0x1fffccef
    5254:	1fffcde8 	.word	0x1fffcde8
    5258:	1fff9188 	.word	0x1fff9188
    525c:	1fffcb38 	.word	0x1fffcb38
    5260:	1fff8850 	.word	0x1fff8850
    5264:	1fff8a04 	.word	0x1fff8a04
    5268:	00014a50 	.word	0x00014a50
    526c:	1fff91ac 	.word	0x1fff91ac

00005270 <CAB500()>:
{
    5270:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    5272:	4b22      	ldr	r3, [pc, #136]	; (52fc <CAB500()+0x8c>)
  if (candebug == 1 && debug == 1) {
    5274:	4c22      	ldr	r4, [pc, #136]	; (5300 <CAB500()+0x90>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5276:	7a59      	ldrb	r1, [r3, #9]
    5278:	7a9a      	ldrb	r2, [r3, #10]
    527a:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    527c:	4d21      	ldr	r5, [pc, #132]	; (5304 <CAB500()+0x94>)
    inbox = (inbox << 8) | inMsg.buf[i];
    527e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5282:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1 && debug == 1) {
    5286:	6822      	ldr	r2, [r4, #0]
    5288:	491f      	ldr	r1, [pc, #124]	; (5308 <CAB500()+0x98>)
  CANmilliamps = inbox;
    528a:	602b      	str	r3, [r5, #0]
  if (candebug == 1 && debug == 1) {
    528c:	2a01      	cmp	r2, #1
  CANmilliamps = inbox;
    528e:	4618      	mov	r0, r3
    5290:	600b      	str	r3, [r1, #0]
  if (candebug == 1 && debug == 1) {
    5292:	d019      	beq.n	52c8 <CAB500()+0x58>
  if (settings.cursens == Canbus) {
    5294:	4b1d      	ldr	r3, [pc, #116]	; (530c <CAB500()+0x9c>)
    5296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    529a:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    529e:	2b02      	cmp	r3, #2
    52a0:	6028      	str	r0, [r5, #0]
    52a2:	d024      	beq.n	52ee <CAB500()+0x7e>
  if (candebug == 1 && debug == 1) {
    52a4:	6823      	ldr	r3, [r4, #0]
    52a6:	2b01      	cmp	r3, #1
    52a8:	d000      	beq.n	52ac <CAB500()+0x3c>
}
    52aa:	bd70      	pop	{r4, r5, r6, pc}
  if (candebug == 1 && debug == 1) {
    52ac:	4b18      	ldr	r3, [pc, #96]	; (5310 <CAB500()+0xa0>)
    52ae:	681b      	ldr	r3, [r3, #0]
    52b0:	2b01      	cmp	r3, #1
    52b2:	d1fa      	bne.n	52aa <CAB500()+0x3a>
    Serial.print(CANmilliamps);
    52b4:	6829      	ldr	r1, [r5, #0]
    52b6:	4817      	ldr	r0, [pc, #92]	; (5314 <CAB500()+0xa4>)
    52b8:	f003 ff80 	bl	91bc <Print::print(long)>
}
    52bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    52c0:	4815      	ldr	r0, [pc, #84]	; (5318 <CAB500()+0xa8>)
    52c2:	2103      	movs	r1, #3
    52c4:	f006 bcc6 	b.w	bc54 <usb_serial_write>
  if (candebug == 1 && debug == 1) {
    52c8:	4b11      	ldr	r3, [pc, #68]	; (5310 <CAB500()+0xa0>)
    52ca:	681b      	ldr	r3, [r3, #0]
    52cc:	2b01      	cmp	r3, #1
    52ce:	d1e1      	bne.n	5294 <CAB500()+0x24>
    Serial.println();
    52d0:	4810      	ldr	r0, [pc, #64]	; (5314 <CAB500()+0xa4>)
    52d2:	f003 ff7b 	bl	91cc <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    52d6:	6829      	ldr	r1, [r5, #0]
    52d8:	480e      	ldr	r0, [pc, #56]	; (5314 <CAB500()+0xa4>)
    52da:	2300      	movs	r3, #0
    52dc:	2210      	movs	r2, #16
    52de:	f003 ff8d 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    52e2:	480e      	ldr	r0, [pc, #56]	; (531c <CAB500()+0xac>)
    52e4:	2103      	movs	r1, #3
    52e6:	f006 fcb5 	bl	bc54 <usb_serial_write>
  if (CANmilliamps > 0x800000) {
    52ea:	6828      	ldr	r0, [r5, #0]
    52ec:	e7d2      	b.n	5294 <CAB500()+0x24>
    RawCur = CANmilliamps;
    52ee:	f007 fb3d 	bl	c96c <__aeabi_i2f>
    52f2:	4e0b      	ldr	r6, [pc, #44]	; (5320 <CAB500()+0xb0>)
    52f4:	6030      	str	r0, [r6, #0]
    getcurrent();
    52f6:	f7fc fdf5 	bl	1ee4 <getcurrent()>
    52fa:	e7d3      	b.n	52a4 <CAB500()+0x34>
    52fc:	1fffcce8 	.word	0x1fffcce8
    5300:	1fffcb38 	.word	0x1fffcb38
    5304:	1fff9188 	.word	0x1fff9188
    5308:	1fffccf8 	.word	0x1fffccf8
    530c:	1fffcde8 	.word	0x1fffcde8
    5310:	1fff8850 	.word	0x1fff8850
    5314:	1fff8a04 	.word	0x1fff8a04
    5318:	00014a50 	.word	0x00014a50
    531c:	00014a54 	.word	0x00014a54
    5320:	1fff91ac 	.word	0x1fff91ac

00005324 <currentlimit()>:
void currentlimit() {
    5324:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    5328:	4b87      	ldr	r3, [pc, #540]	; (5548 <currentlimit()+0x224>)
    532a:	781b      	ldrb	r3, [r3, #0]
    532c:	2b05      	cmp	r3, #5
    532e:	d106      	bne.n	533e <currentlimit()+0x1a>
    discurrent = 0;
    5330:	4986      	ldr	r1, [pc, #536]	; (554c <currentlimit()+0x228>)
    chargecurrent = 0;
    5332:	4a87      	ldr	r2, [pc, #540]	; (5550 <currentlimit()+0x22c>)
    discurrent = 0;
    5334:	2300      	movs	r3, #0
    5336:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    5338:	6013      	str	r3, [r2, #0]
}
    533a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    533e:	4c85      	ldr	r4, [pc, #532]	; (5554 <currentlimit()+0x230>)
    5340:	4e82      	ldr	r6, [pc, #520]	; (554c <currentlimit()+0x228>)
    chargecurrent = settings.chargecurrentmax;
    5342:	4d83      	ldr	r5, [pc, #524]	; (5550 <currentlimit()+0x22c>)
    discurrent = settings.discurrentmax;
    5344:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
    chargecurrent = settings.chargecurrentmax;
    5346:	6e63      	ldr	r3, [r4, #100]	; 0x64
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    5348:	4883      	ldr	r0, [pc, #524]	; (5558 <currentlimit()+0x234>)
    discurrent = settings.discurrentmax;
    534a:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    534c:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    534e:	f7fb fdf9 	bl	f44 <BMSModuleManager::getLowTemperature()>
    5352:	6b21      	ldr	r1, [r4, #48]	; 0x30
    5354:	f007 fcfc 	bl	cd50 <__aeabi_fcmplt>
    5358:	b108      	cbz	r0, 535e <currentlimit()+0x3a>
      chargecurrent = 0;
    535a:	2300      	movs	r3, #0
    535c:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    535e:	487e      	ldr	r0, [pc, #504]	; (5558 <currentlimit()+0x234>)
    5360:	f7fb fdee 	bl	f40 <BMSModuleManager::getHighTemperature()>
    5364:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5366:	f007 fd11 	bl	cd8c <__aeabi_fcmpgt>
    536a:	b110      	cbz	r0, 5372 <currentlimit()+0x4e>
      discurrent = 0;
    536c:	2300      	movs	r3, #0
    536e:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    5370:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    5372:	4879      	ldr	r0, [pc, #484]	; (5558 <currentlimit()+0x234>)
    5374:	f7fb fd30 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    5378:	68e1      	ldr	r1, [r4, #12]
    537a:	f007 fd07 	bl	cd8c <__aeabi_fcmpgt>
    537e:	b108      	cbz	r0, 5384 <currentlimit()+0x60>
      chargecurrent = 0;
    5380:	2300      	movs	r3, #0
    5382:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    5384:	4874      	ldr	r0, [pc, #464]	; (5558 <currentlimit()+0x234>)
    5386:	f7fb fd27 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    538a:	68e1      	ldr	r1, [r4, #12]
    538c:	f007 fcfe 	bl	cd8c <__aeabi_fcmpgt>
    5390:	b108      	cbz	r0, 5396 <currentlimit()+0x72>
      chargecurrent = 0;
    5392:	2300      	movs	r3, #0
    5394:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    5396:	4870      	ldr	r0, [pc, #448]	; (5558 <currentlimit()+0x234>)
    5398:	f7fb fcf8 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    539c:	6921      	ldr	r1, [r4, #16]
    539e:	f007 fcd7 	bl	cd50 <__aeabi_fcmplt>
    53a2:	2800      	cmp	r0, #0
    53a4:	f000 80dc 	beq.w	5560 <currentlimit()+0x23c>
      discurrent = 0;
    53a8:	2300      	movs	r3, #0
    53aa:	6033      	str	r3, [r6, #0]
    if (chargecurrent > 0) {
    53ac:	682b      	ldr	r3, [r5, #0]
    53ae:	2b00      	cmp	r3, #0
    53b0:	dc0c      	bgt.n	53cc <currentlimit()+0xa8>
  if (discurrent < 0) {
    53b2:	6833      	ldr	r3, [r6, #0]
    53b4:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    53b6:	bfb7      	itett	lt
    53b8:	682b      	ldrlt	r3, [r5, #0]
    53ba:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    53bc:	2200      	movlt	r2, #0
    53be:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    53c0:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    53c2:	bfbc      	itt	lt
    53c4:	2300      	movlt	r3, #0
    53c6:	602b      	strlt	r3, [r5, #0]
}
    53c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    53cc:	4862      	ldr	r0, [pc, #392]	; (5558 <currentlimit()+0x234>)
    53ce:	f7fb fdb9 	bl	f44 <BMSModuleManager::getLowTemperature()>
    53d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    53d4:	f007 fcbc 	bl	cd50 <__aeabi_fcmplt>
    53d8:	2800      	cmp	r0, #0
    53da:	f040 8086 	bne.w	54ea <currentlimit()+0x1c6>
      if (storagemode == 1) {
    53de:	4b5f      	ldr	r3, [pc, #380]	; (555c <currentlimit()+0x238>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    53e0:	485d      	ldr	r0, [pc, #372]	; (5558 <currentlimit()+0x234>)
      if (storagemode == 1) {
    53e2:	681b      	ldr	r3, [r3, #0]
    53e4:	2b01      	cmp	r3, #1
    53e6:	d03d      	beq.n	5464 <currentlimit()+0x140>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    53e8:	f7fb fcf6 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    53ec:	6a21      	ldr	r1, [r4, #32]
    53ee:	4607      	mov	r7, r0
    53f0:	69a0      	ldr	r0, [r4, #24]
    53f2:	f007 fa05 	bl	c800 <__aeabi_fsub>
    53f6:	4601      	mov	r1, r0
    53f8:	4638      	mov	r0, r7
    53fa:	f007 fcc7 	bl	cd8c <__aeabi_fcmpgt>
    53fe:	2800      	cmp	r0, #0
    5400:	d0d7      	beq.n	53b2 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    5402:	6828      	ldr	r0, [r5, #0]
    5404:	f007 fab2 	bl	c96c <__aeabi_i2f>
    5408:	4680      	mov	r8, r0
    540a:	4853      	ldr	r0, [pc, #332]	; (5558 <currentlimit()+0x234>)
    540c:	f7fb fce4 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    5410:	f8d4 9018 	ldr.w	r9, [r4, #24]
    5414:	6a21      	ldr	r1, [r4, #32]
    5416:	4682      	mov	sl, r0
    5418:	4648      	mov	r0, r9
    541a:	f007 f9f1 	bl	c800 <__aeabi_fsub>
    541e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    5420:	4607      	mov	r7, r0
    5422:	6e60      	ldr	r0, [r4, #100]	; 0x64
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    5424:	1ac0      	subs	r0, r0, r3
    5426:	f007 faa1 	bl	c96c <__aeabi_i2f>
    542a:	4639      	mov	r1, r7
    542c:	4604      	mov	r4, r0
    542e:	4650      	mov	r0, sl
    5430:	f007 f9e6 	bl	c800 <__aeabi_fsub>
    5434:	4601      	mov	r1, r0
    5436:	4620      	mov	r0, r4
    5438:	f007 faec 	bl	ca14 <__aeabi_fmul>
    543c:	4639      	mov	r1, r7
    543e:	4604      	mov	r4, r0
    5440:	4648      	mov	r0, r9
    5442:	f007 f9dd 	bl	c800 <__aeabi_fsub>
    5446:	4601      	mov	r1, r0
    5448:	4620      	mov	r0, r4
    544a:	f007 fb97 	bl	cb7c <__aeabi_fdiv>
    544e:	2100      	movs	r1, #0
    5450:	f007 f9d8 	bl	c804 <__addsf3>
    5454:	4601      	mov	r1, r0
    5456:	4640      	mov	r0, r8
    5458:	f007 f9d2 	bl	c800 <__aeabi_fsub>
    545c:	f007 fca0 	bl	cda0 <__aeabi_f2iz>
    5460:	6028      	str	r0, [r5, #0]
    5462:	e7a6      	b.n	53b2 <currentlimit()+0x8e>
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    5464:	f7fb fcb8 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    5468:	6a21      	ldr	r1, [r4, #32]
    546a:	4607      	mov	r7, r0
    546c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    546e:	f007 f9c7 	bl	c800 <__aeabi_fsub>
    5472:	4601      	mov	r1, r0
    5474:	4638      	mov	r0, r7
    5476:	f007 fc89 	bl	cd8c <__aeabi_fcmpgt>
    547a:	2800      	cmp	r0, #0
    547c:	d099      	beq.n	53b2 <currentlimit()+0x8e>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    547e:	6828      	ldr	r0, [r5, #0]
    5480:	f007 fa74 	bl	c96c <__aeabi_i2f>
    5484:	4681      	mov	r9, r0
    5486:	4834      	ldr	r0, [pc, #208]	; (5558 <currentlimit()+0x234>)
    5488:	f7fb fca6 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    548c:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    5490:	6a21      	ldr	r1, [r4, #32]
    5492:	4683      	mov	fp, r0
    5494:	4650      	mov	r0, sl
    5496:	f007 f9b3 	bl	c800 <__aeabi_fsub>
    549a:	4680      	mov	r8, r0
    549c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    549e:	f007 fa65 	bl	c96c <__aeabi_i2f>
    54a2:	4607      	mov	r7, r0
    54a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
    54a6:	f007 fa61 	bl	c96c <__aeabi_i2f>
    54aa:	4639      	mov	r1, r7
    54ac:	f007 f9a8 	bl	c800 <__aeabi_fsub>
    54b0:	4641      	mov	r1, r8
    54b2:	4604      	mov	r4, r0
    54b4:	4658      	mov	r0, fp
    54b6:	f007 f9a3 	bl	c800 <__aeabi_fsub>
    54ba:	4601      	mov	r1, r0
    54bc:	4620      	mov	r0, r4
    54be:	f007 faa9 	bl	ca14 <__aeabi_fmul>
    54c2:	4641      	mov	r1, r8
    54c4:	4604      	mov	r4, r0
    54c6:	4650      	mov	r0, sl
    54c8:	f007 f99a 	bl	c800 <__aeabi_fsub>
    54cc:	4601      	mov	r1, r0
    54ce:	4620      	mov	r0, r4
    54d0:	f007 fb54 	bl	cb7c <__aeabi_fdiv>
    54d4:	4639      	mov	r1, r7
    54d6:	f007 f995 	bl	c804 <__addsf3>
    54da:	4601      	mov	r1, r0
    54dc:	4648      	mov	r0, r9
    54de:	f007 f98f 	bl	c800 <__aeabi_fsub>
    54e2:	f007 fc5d 	bl	cda0 <__aeabi_f2iz>
    54e6:	6028      	str	r0, [r5, #0]
    54e8:	e763      	b.n	53b2 <currentlimit()+0x8e>
        chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, settings.chargecurrentmax, 0);
    54ea:	6828      	ldr	r0, [r5, #0]
    54ec:	f007 fa3e 	bl	c96c <__aeabi_i2f>
    54f0:	4680      	mov	r8, r0
    54f2:	4819      	ldr	r0, [pc, #100]	; (5558 <currentlimit()+0x234>)
    54f4:	f7fb fd26 	bl	f44 <BMSModuleManager::getLowTemperature()>
    54f8:	4681      	mov	r9, r0
    54fa:	6e60      	ldr	r0, [r4, #100]	; 0x64
    54fc:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
    5500:	f007 fa34 	bl	c96c <__aeabi_i2f>
    5504:	4651      	mov	r1, sl
    5506:	4607      	mov	r7, r0
    5508:	4648      	mov	r0, r9
    550a:	f007 f979 	bl	c800 <__aeabi_fsub>
    550e:	4639      	mov	r1, r7
    5510:	4681      	mov	r9, r0
    5512:	2000      	movs	r0, #0
    5514:	f007 f974 	bl	c800 <__aeabi_fsub>
    5518:	4601      	mov	r1, r0
    551a:	4648      	mov	r0, r9
    551c:	f007 fa7a 	bl	ca14 <__aeabi_fmul>
    5520:	4651      	mov	r1, sl
    5522:	4681      	mov	r9, r0
    5524:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    5526:	f007 f96b 	bl	c800 <__aeabi_fsub>
    552a:	4601      	mov	r1, r0
    552c:	4648      	mov	r0, r9
    552e:	f007 fb25 	bl	cb7c <__aeabi_fdiv>
    5532:	4639      	mov	r1, r7
    5534:	f007 f966 	bl	c804 <__addsf3>
    5538:	4601      	mov	r1, r0
    553a:	4640      	mov	r0, r8
    553c:	f007 f960 	bl	c800 <__aeabi_fsub>
    5540:	f007 fc2e 	bl	cda0 <__aeabi_f2iz>
    5544:	6028      	str	r0, [r5, #0]
    5546:	e74a      	b.n	53de <currentlimit()+0xba>
    5548:	1fffcb34 	.word	0x1fffcb34
    554c:	1fffccd4 	.word	0x1fffccd4
    5550:	1fffcb40 	.word	0x1fffcb40
    5554:	1fffcde8 	.word	0x1fffcde8
    5558:	1fff91e0 	.word	0x1fff91e0
    555c:	1fffcec0 	.word	0x1fffcec0
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    5560:	4840      	ldr	r0, [pc, #256]	; (5664 <currentlimit()+0x340>)
    5562:	f7fb fc13 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    5566:	69e1      	ldr	r1, [r4, #28]
    5568:	f007 fbf2 	bl	cd50 <__aeabi_fcmplt>
    556c:	2800      	cmp	r0, #0
    556e:	f47f af1b 	bne.w	53a8 <currentlimit()+0x84>
    if (discurrent > 0) {
    5572:	6833      	ldr	r3, [r6, #0]
    5574:	2b00      	cmp	r3, #0
    5576:	f77f af19 	ble.w	53ac <currentlimit()+0x88>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    557a:	483a      	ldr	r0, [pc, #232]	; (5664 <currentlimit()+0x340>)
    557c:	f7fb fce0 	bl	f40 <BMSModuleManager::getHighTemperature()>
    5580:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    5582:	f007 fc03 	bl	cd8c <__aeabi_fcmpgt>
    5586:	2800      	cmp	r0, #0
    5588:	d142      	bne.n	5610 <currentlimit()+0x2ec>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    558a:	4836      	ldr	r0, [pc, #216]	; (5664 <currentlimit()+0x340>)
    558c:	f7fb fbfe 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    5590:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    5594:	4607      	mov	r7, r0
    5596:	69e0      	ldr	r0, [r4, #28]
    5598:	f007 f934 	bl	c804 <__addsf3>
    559c:	4601      	mov	r1, r0
    559e:	4638      	mov	r0, r7
    55a0:	f007 fbd6 	bl	cd50 <__aeabi_fcmplt>
    55a4:	2800      	cmp	r0, #0
    55a6:	f43f af01 	beq.w	53ac <currentlimit()+0x88>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    55aa:	6830      	ldr	r0, [r6, #0]
    55ac:	f007 f9de 	bl	c96c <__aeabi_i2f>
    55b0:	4680      	mov	r8, r0
    55b2:	482c      	ldr	r0, [pc, #176]	; (5664 <currentlimit()+0x340>)
    55b4:	f7fb fbea 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    55b8:	4681      	mov	r9, r0
    55ba:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    55bc:	f8d4 a01c 	ldr.w	sl, [r4, #28]
    55c0:	f007 f9d4 	bl	c96c <__aeabi_i2f>
    55c4:	4651      	mov	r1, sl
    55c6:	4607      	mov	r7, r0
    55c8:	4648      	mov	r0, r9
    55ca:	f007 f919 	bl	c800 <__aeabi_fsub>
    55ce:	4639      	mov	r1, r7
    55d0:	4681      	mov	r9, r0
    55d2:	2000      	movs	r0, #0
    55d4:	f007 f914 	bl	c800 <__aeabi_fsub>
    55d8:	4601      	mov	r1, r0
    55da:	4648      	mov	r0, r9
    55dc:	f007 fa1a 	bl	ca14 <__aeabi_fmul>
    55e0:	f8d4 10c8 	ldr.w	r1, [r4, #200]	; 0xc8
    55e4:	4681      	mov	r9, r0
    55e6:	4650      	mov	r0, sl
    55e8:	f007 f90c 	bl	c804 <__addsf3>
    55ec:	4651      	mov	r1, sl
    55ee:	f007 f907 	bl	c800 <__aeabi_fsub>
    55f2:	4601      	mov	r1, r0
    55f4:	4648      	mov	r0, r9
    55f6:	f007 fac1 	bl	cb7c <__aeabi_fdiv>
    55fa:	4639      	mov	r1, r7
    55fc:	f007 f902 	bl	c804 <__addsf3>
    5600:	4601      	mov	r1, r0
    5602:	4640      	mov	r0, r8
    5604:	f007 f8fc 	bl	c800 <__aeabi_fsub>
    5608:	f007 fbca 	bl	cda0 <__aeabi_f2iz>
    560c:	6030      	str	r0, [r6, #0]
    560e:	e6cd      	b.n	53ac <currentlimit()+0x88>
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    5610:	6830      	ldr	r0, [r6, #0]
    5612:	f007 f9ab 	bl	c96c <__aeabi_i2f>
    5616:	4607      	mov	r7, r0
    5618:	4812      	ldr	r0, [pc, #72]	; (5664 <currentlimit()+0x340>)
    561a:	f7fb fc91 	bl	f40 <BMSModuleManager::getHighTemperature()>
    561e:	4681      	mov	r9, r0
    5620:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    5622:	f8d4 a03c 	ldr.w	sl, [r4, #60]	; 0x3c
    5626:	f007 f9a1 	bl	c96c <__aeabi_i2f>
    562a:	4651      	mov	r1, sl
    562c:	4680      	mov	r8, r0
    562e:	4648      	mov	r0, r9
    5630:	f007 f8e6 	bl	c800 <__aeabi_fsub>
    5634:	4601      	mov	r1, r0
    5636:	4640      	mov	r0, r8
    5638:	f007 f9ec 	bl	ca14 <__aeabi_fmul>
    563c:	4651      	mov	r1, sl
    563e:	4680      	mov	r8, r0
    5640:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    5642:	f007 f8dd 	bl	c800 <__aeabi_fsub>
    5646:	4601      	mov	r1, r0
    5648:	4640      	mov	r0, r8
    564a:	f007 fa97 	bl	cb7c <__aeabi_fdiv>
    564e:	2100      	movs	r1, #0
    5650:	f007 f8d8 	bl	c804 <__addsf3>
    5654:	4601      	mov	r1, r0
    5656:	4638      	mov	r0, r7
    5658:	f007 f8d2 	bl	c800 <__aeabi_fsub>
    565c:	f007 fba0 	bl	cda0 <__aeabi_f2iz>
    5660:	6030      	str	r0, [r6, #0]
    5662:	e792      	b.n	558a <currentlimit()+0x266>
    5664:	1fff91e0 	.word	0x1fff91e0

00005668 <inputdebug()>:
void inputdebug() {
    5668:	b508      	push	{r3, lr}
  Serial.println();
    566a:	4828      	ldr	r0, [pc, #160]	; (570c <inputdebug()+0xa4>)
    566c:	f003 fdae 	bl	91cc <Print::println()>
    5670:	4827      	ldr	r0, [pc, #156]	; (5710 <inputdebug()+0xa8>)
    5672:	2107      	movs	r1, #7
    5674:	f006 faee 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN1)) {
    5678:	2011      	movs	r0, #17
    567a:	f004 fc9f 	bl	9fbc <digitalRead>
    567e:	b300      	cbz	r0, 56c2 <inputdebug()+0x5a>
    5680:	4824      	ldr	r0, [pc, #144]	; (5714 <inputdebug()+0xac>)
    5682:	2106      	movs	r1, #6
    5684:	f006 fae6 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN2)) {
    5688:	2010      	movs	r0, #16
    568a:	f004 fc97 	bl	9fbc <digitalRead>
    568e:	b308      	cbz	r0, 56d4 <inputdebug()+0x6c>
    5690:	4821      	ldr	r0, [pc, #132]	; (5718 <inputdebug()+0xb0>)
    5692:	2106      	movs	r1, #6
    5694:	f006 fade 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN3)) {
    5698:	2012      	movs	r0, #18
    569a:	f004 fc8f 	bl	9fbc <digitalRead>
    569e:	b310      	cbz	r0, 56e6 <inputdebug()+0x7e>
    56a0:	481e      	ldr	r0, [pc, #120]	; (571c <inputdebug()+0xb4>)
    56a2:	2106      	movs	r1, #6
    56a4:	f006 fad6 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN4)) {
    56a8:	2013      	movs	r0, #19
    56aa:	f004 fc87 	bl	9fbc <digitalRead>
    56ae:	b318      	cbz	r0, 56f8 <inputdebug()+0x90>
    56b0:	481b      	ldr	r0, [pc, #108]	; (5720 <inputdebug()+0xb8>)
    56b2:	2106      	movs	r1, #6
    56b4:	f006 face 	bl	bc54 <usb_serial_write>
}
    56b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    56bc:	4813      	ldr	r0, [pc, #76]	; (570c <inputdebug()+0xa4>)
    56be:	f003 bd85 	b.w	91cc <Print::println()>
    56c2:	4818      	ldr	r0, [pc, #96]	; (5724 <inputdebug()+0xbc>)
    56c4:	2106      	movs	r1, #6
    56c6:	f006 fac5 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN2)) {
    56ca:	2010      	movs	r0, #16
    56cc:	f004 fc76 	bl	9fbc <digitalRead>
    56d0:	2800      	cmp	r0, #0
    56d2:	d1dd      	bne.n	5690 <inputdebug()+0x28>
    56d4:	4814      	ldr	r0, [pc, #80]	; (5728 <inputdebug()+0xc0>)
    56d6:	2106      	movs	r1, #6
    56d8:	f006 fabc 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN3)) {
    56dc:	2012      	movs	r0, #18
    56de:	f004 fc6d 	bl	9fbc <digitalRead>
    56e2:	2800      	cmp	r0, #0
    56e4:	d1dc      	bne.n	56a0 <inputdebug()+0x38>
    56e6:	4811      	ldr	r0, [pc, #68]	; (572c <inputdebug()+0xc4>)
    56e8:	2106      	movs	r1, #6
    56ea:	f006 fab3 	bl	bc54 <usb_serial_write>
  if (digitalRead(IN4)) {
    56ee:	2013      	movs	r0, #19
    56f0:	f004 fc64 	bl	9fbc <digitalRead>
    56f4:	2800      	cmp	r0, #0
    56f6:	d1db      	bne.n	56b0 <inputdebug()+0x48>
    56f8:	480d      	ldr	r0, [pc, #52]	; (5730 <inputdebug()+0xc8>)
    56fa:	2106      	movs	r1, #6
    56fc:	f006 faaa 	bl	bc54 <usb_serial_write>
}
    5700:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    5704:	4801      	ldr	r0, [pc, #4]	; (570c <inputdebug()+0xa4>)
    5706:	f003 bd61 	b.w	91cc <Print::println()>
    570a:	bf00      	nop
    570c:	1fff8a04 	.word	0x1fff8a04
    5710:	00014a58 	.word	0x00014a58
    5714:	00014a60 	.word	0x00014a60
    5718:	00014a70 	.word	0x00014a70
    571c:	00014a80 	.word	0x00014a80
    5720:	00014a90 	.word	0x00014a90
    5724:	00014a68 	.word	0x00014a68
    5728:	00014a78 	.word	0x00014a78
    572c:	00014a88 	.word	0x00014a88
    5730:	00014a98 	.word	0x00014a98

00005734 <outputdebug()>:
void outputdebug() {
    5734:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    5736:	4c29      	ldr	r4, [pc, #164]	; (57dc <outputdebug()+0xa8>)
    5738:	6823      	ldr	r3, [r4, #0]
    573a:	2b04      	cmp	r3, #4
    573c:	dc26      	bgt.n	578c <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    573e:	2101      	movs	r1, #1
    5740:	200b      	movs	r0, #11
    5742:	f004 fc15 	bl	9f70 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    5746:	2101      	movs	r1, #1
    5748:	200c      	movs	r0, #12
    574a:	f004 fc11 	bl	9f70 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    574e:	2101      	movs	r1, #1
    5750:	2014      	movs	r0, #20
    5752:	f004 fc0d 	bl	9f70 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    5756:	2101      	movs	r1, #1
    5758:	2015      	movs	r0, #21
    575a:	f004 fc09 	bl	9f70 <digitalWrite>
    analogWrite(OUT5, 255);
    575e:	21ff      	movs	r1, #255	; 0xff
    5760:	2016      	movs	r0, #22
    5762:	f004 fa89 	bl	9c78 <analogWrite>
    analogWrite(OUT6, 255);
    5766:	21ff      	movs	r1, #255	; 0xff
    5768:	2017      	movs	r0, #23
    576a:	f004 fa85 	bl	9c78 <analogWrite>
    analogWrite(OUT7, 255);
    576e:	21ff      	movs	r1, #255	; 0xff
    5770:	2005      	movs	r0, #5
    5772:	f004 fa81 	bl	9c78 <analogWrite>
    analogWrite(OUT8, 255);
    5776:	21ff      	movs	r1, #255	; 0xff
    5778:	2006      	movs	r0, #6
    577a:	f004 fa7d 	bl	9c78 <analogWrite>
    outputstate++;
    577e:	6823      	ldr	r3, [r4, #0]
    5780:	3301      	adds	r3, #1
  if (outputstate > 10) {
    5782:	2b0a      	cmp	r3, #10
    outputstate = 0;
    5784:	bfc8      	it	gt
    5786:	2300      	movgt	r3, #0
    5788:	6023      	str	r3, [r4, #0]
}
    578a:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    578c:	2100      	movs	r1, #0
    578e:	200b      	movs	r0, #11
    5790:	f004 fbee 	bl	9f70 <digitalWrite>
    digitalWrite(OUT2, LOW);
    5794:	2100      	movs	r1, #0
    5796:	200c      	movs	r0, #12
    5798:	f004 fbea 	bl	9f70 <digitalWrite>
    digitalWrite(OUT3, LOW);
    579c:	2100      	movs	r1, #0
    579e:	2014      	movs	r0, #20
    57a0:	f004 fbe6 	bl	9f70 <digitalWrite>
    digitalWrite(OUT4, LOW);
    57a4:	2100      	movs	r1, #0
    57a6:	2015      	movs	r0, #21
    57a8:	f004 fbe2 	bl	9f70 <digitalWrite>
    analogWrite(OUT5, 0);
    57ac:	2100      	movs	r1, #0
    57ae:	2016      	movs	r0, #22
    57b0:	f004 fa62 	bl	9c78 <analogWrite>
    analogWrite(OUT6, 0);
    57b4:	2100      	movs	r1, #0
    57b6:	2017      	movs	r0, #23
    57b8:	f004 fa5e 	bl	9c78 <analogWrite>
    analogWrite(OUT7, 0);
    57bc:	2100      	movs	r1, #0
    57be:	2005      	movs	r0, #5
    57c0:	f004 fa5a 	bl	9c78 <analogWrite>
    analogWrite(OUT8, 0);
    57c4:	2100      	movs	r1, #0
    57c6:	2006      	movs	r0, #6
    57c8:	f004 fa56 	bl	9c78 <analogWrite>
    outputstate++;
    57cc:	6823      	ldr	r3, [r4, #0]
    57ce:	3301      	adds	r3, #1
  if (outputstate > 10) {
    57d0:	2b0a      	cmp	r3, #10
    outputstate = 0;
    57d2:	bfc8      	it	gt
    57d4:	2300      	movgt	r3, #0
    57d6:	6023      	str	r3, [r4, #0]
}
    57d8:	bd10      	pop	{r4, pc}
    57da:	bf00      	nop
    57dc:	1fffcdd8 	.word	0x1fffcdd8

000057e0 <dashupdate()>:
void dashupdate() {
    57e0:	b530      	push	{r4, r5, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    57e2:	48b8      	ldr	r0, [pc, #736]	; (5ac4 <dashupdate()+0x2e4>)
    57e4:	b083      	sub	sp, #12
    57e6:	2109      	movs	r1, #9
    57e8:	f004 ff08 	bl	a5fc <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    57ec:	2022      	movs	r0, #34	; 0x22
    57ee:	f004 fe89 	bl	a504 <serial2_putchar>
  if (settings.ESSmode == 1) {
    57f2:	4bb5      	ldr	r3, [pc, #724]	; (5ac8 <dashupdate()+0x2e8>)
    57f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    57f8:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    57fa:	4bb4      	ldr	r3, [pc, #720]	; (5acc <dashupdate()+0x2ec>)
    57fc:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    57fe:	d009      	beq.n	5814 <dashupdate()+0x34>
    switch (bmsstatus) {
    5800:	2b05      	cmp	r3, #5
    5802:	d810      	bhi.n	5826 <dashupdate()+0x46>
    5804:	e8df f013 	tbh	[pc, r3, lsl #1]
    5808:	01490144 	.word	0x01490144
    580c:	0153014e 	.word	0x0153014e
    5810:	000b013f 	.word	0x000b013f
    switch (bmsstatus) {
    5814:	2b00      	cmp	r3, #0
    5816:	f000 814f 	beq.w	5ab8 <dashupdate()+0x2d8>
    581a:	2b05      	cmp	r3, #5
    581c:	d103      	bne.n	5826 <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    581e:	48ac      	ldr	r0, [pc, #688]	; (5ad0 <dashupdate()+0x2f0>)
    5820:	2107      	movs	r1, #7
    5822:	f004 feeb 	bl	a5fc <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5826:	2022      	movs	r0, #34	; 0x22
    5828:	f004 fe6c 	bl	a504 <serial2_putchar>
    582c:	20ff      	movs	r0, #255	; 0xff
    582e:	f004 fe69 	bl	a504 <serial2_putchar>
    5832:	20ff      	movs	r0, #255	; 0xff
    5834:	f004 fe66 	bl	a504 <serial2_putchar>
  Serial2.print(SOC);
    5838:	4ca6      	ldr	r4, [pc, #664]	; (5ad4 <dashupdate()+0x2f4>)
    583a:	20ff      	movs	r0, #255	; 0xff
    583c:	f004 fe62 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5840:	48a5      	ldr	r0, [pc, #660]	; (5ad8 <dashupdate()+0x2f8>)
    5842:	2108      	movs	r1, #8
    5844:	f004 feda 	bl	a5fc <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    5848:	6821      	ldr	r1, [r4, #0]
    584a:	48a4      	ldr	r0, [pc, #656]	; (5adc <dashupdate()+0x2fc>)
    584c:	f003 fcb6 	bl	91bc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5850:	20ff      	movs	r0, #255	; 0xff
    5852:	f004 fe57 	bl	a504 <serial2_putchar>
    5856:	20ff      	movs	r0, #255	; 0xff
    5858:	f004 fe54 	bl	a504 <serial2_putchar>
    585c:	20ff      	movs	r0, #255	; 0xff
    585e:	f004 fe51 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5862:	489f      	ldr	r0, [pc, #636]	; (5ae0 <dashupdate()+0x300>)
    5864:	2109      	movs	r1, #9
    5866:	f004 fec9 	bl	a5fc <serial2_write>
    586a:	6821      	ldr	r1, [r4, #0]
    586c:	489b      	ldr	r0, [pc, #620]	; (5adc <dashupdate()+0x2fc>)
    586e:	f003 fca5 	bl	91bc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5872:	20ff      	movs	r0, #255	; 0xff
    5874:	f004 fe46 	bl	a504 <serial2_putchar>
    5878:	20ff      	movs	r0, #255	; 0xff
    587a:	f004 fe43 	bl	a504 <serial2_putchar>
    587e:	20ff      	movs	r0, #255	; 0xff
    5880:	f004 fe40 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5884:	4897      	ldr	r0, [pc, #604]	; (5ae4 <dashupdate()+0x304>)
    5886:	210c      	movs	r1, #12
    5888:	f004 feb8 	bl	a5fc <serial2_write>
  Serial2.print(currentact / 100, 0);
    588c:	4b96      	ldr	r3, [pc, #600]	; (5ae8 <dashupdate()+0x308>)
    588e:	4997      	ldr	r1, [pc, #604]	; (5aec <dashupdate()+0x30c>)
    5890:	6818      	ldr	r0, [r3, #0]
    5892:	f007 f973 	bl	cb7c <__aeabi_fdiv>
    5896:	f006 fe99 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    589a:	2400      	movs	r4, #0
    589c:	4602      	mov	r2, r0
    589e:	460b      	mov	r3, r1
    58a0:	9400      	str	r4, [sp, #0]
    58a2:	488e      	ldr	r0, [pc, #568]	; (5adc <dashupdate()+0x2fc>)
    58a4:	f003 fcb4 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    58a8:	20ff      	movs	r0, #255	; 0xff
    58aa:	f004 fe2b 	bl	a504 <serial2_putchar>
    58ae:	20ff      	movs	r0, #255	; 0xff
    58b0:	f004 fe28 	bl	a504 <serial2_putchar>
    58b4:	20ff      	movs	r0, #255	; 0xff
    58b6:	f004 fe25 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    58ba:	2109      	movs	r1, #9
    58bc:	488c      	ldr	r0, [pc, #560]	; (5af0 <dashupdate()+0x310>)
    58be:	f004 fe9d 	bl	a5fc <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    58c2:	488c      	ldr	r0, [pc, #560]	; (5af4 <dashupdate()+0x314>)
    58c4:	f7fb fad6 	bl	e74 <BMSModuleManager::getAvgTemperature()>
    58c8:	f006 fe80 	bl	c5cc <__aeabi_f2d>
    58cc:	9400      	str	r4, [sp, #0]
    58ce:	4602      	mov	r2, r0
    58d0:	460b      	mov	r3, r1
    58d2:	4882      	ldr	r0, [pc, #520]	; (5adc <dashupdate()+0x2fc>)
    58d4:	f003 fc9c 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    58d8:	20ff      	movs	r0, #255	; 0xff
    58da:	f004 fe13 	bl	a504 <serial2_putchar>
    58de:	20ff      	movs	r0, #255	; 0xff
    58e0:	f004 fe10 	bl	a504 <serial2_putchar>
    58e4:	20ff      	movs	r0, #255	; 0xff
    58e6:	f004 fe0d 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    58ea:	210c      	movs	r1, #12
    58ec:	4882      	ldr	r0, [pc, #520]	; (5af8 <dashupdate()+0x318>)
    58ee:	f004 fe85 	bl	a5fc <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    58f2:	4880      	ldr	r0, [pc, #512]	; (5af4 <dashupdate()+0x314>)
    58f4:	f7fb fb26 	bl	f44 <BMSModuleManager::getLowTemperature()>
    58f8:	f006 fe68 	bl	c5cc <__aeabi_f2d>
    58fc:	9400      	str	r4, [sp, #0]
    58fe:	4602      	mov	r2, r0
    5900:	460b      	mov	r3, r1
    5902:	4876      	ldr	r0, [pc, #472]	; (5adc <dashupdate()+0x2fc>)
    5904:	f003 fc84 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5908:	20ff      	movs	r0, #255	; 0xff
    590a:	f004 fdfb 	bl	a504 <serial2_putchar>
    590e:	20ff      	movs	r0, #255	; 0xff
    5910:	f004 fdf8 	bl	a504 <serial2_putchar>
    5914:	20ff      	movs	r0, #255	; 0xff
    5916:	f004 fdf5 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    591a:	210d      	movs	r1, #13
    591c:	4877      	ldr	r0, [pc, #476]	; (5afc <dashupdate()+0x31c>)
    591e:	f004 fe6d 	bl	a5fc <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    5922:	4874      	ldr	r0, [pc, #464]	; (5af4 <dashupdate()+0x314>)
    5924:	f7fb fb0c 	bl	f40 <BMSModuleManager::getHighTemperature()>
    5928:	f006 fe50 	bl	c5cc <__aeabi_f2d>
    592c:	9400      	str	r4, [sp, #0]
    592e:	4602      	mov	r2, r0
    5930:	460b      	mov	r3, r1
    5932:	486a      	ldr	r0, [pc, #424]	; (5adc <dashupdate()+0x2fc>)
    5934:	f003 fc6c 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5938:	20ff      	movs	r0, #255	; 0xff
    593a:	f004 fde3 	bl	a504 <serial2_putchar>
    593e:	20ff      	movs	r0, #255	; 0xff
    5940:	f004 fde0 	bl	a504 <serial2_putchar>
    5944:	20ff      	movs	r0, #255	; 0xff
    5946:	f004 fddd 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    594a:	2109      	movs	r1, #9
    594c:	486c      	ldr	r0, [pc, #432]	; (5b00 <dashupdate()+0x320>)
    594e:	f004 fe55 	bl	a5fc <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    5952:	4868      	ldr	r0, [pc, #416]	; (5af4 <dashupdate()+0x314>)
    5954:	f7fb fa64 	bl	e20 <BMSModuleManager::getPackVoltage()>
    5958:	496a      	ldr	r1, [pc, #424]	; (5b04 <dashupdate()+0x324>)
    595a:	f007 f85b 	bl	ca14 <__aeabi_fmul>
    595e:	f006 fe35 	bl	c5cc <__aeabi_f2d>
    5962:	9400      	str	r4, [sp, #0]
    5964:	4602      	mov	r2, r0
    5966:	460b      	mov	r3, r1
    5968:	485c      	ldr	r0, [pc, #368]	; (5adc <dashupdate()+0x2fc>)
    596a:	f003 fc51 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    596e:	20ff      	movs	r0, #255	; 0xff
    5970:	f004 fdc8 	bl	a504 <serial2_putchar>
    5974:	20ff      	movs	r0, #255	; 0xff
    5976:	f004 fdc5 	bl	a504 <serial2_putchar>
    597a:	20ff      	movs	r0, #255	; 0xff
    597c:	f004 fdc2 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5980:	210c      	movs	r1, #12
    5982:	4861      	ldr	r0, [pc, #388]	; (5b08 <dashupdate()+0x328>)
    5984:	f004 fe3a 	bl	a5fc <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    5988:	485a      	ldr	r0, [pc, #360]	; (5af4 <dashupdate()+0x314>)
    598a:	f7fb f9ff 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    598e:	495f      	ldr	r1, [pc, #380]	; (5b0c <dashupdate()+0x32c>)
    5990:	f007 f840 	bl	ca14 <__aeabi_fmul>
    5994:	f006 fe1a 	bl	c5cc <__aeabi_f2d>
    5998:	9400      	str	r4, [sp, #0]
    599a:	4602      	mov	r2, r0
    599c:	460b      	mov	r3, r1
    599e:	484f      	ldr	r0, [pc, #316]	; (5adc <dashupdate()+0x2fc>)
    59a0:	f003 fc36 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    59a4:	20ff      	movs	r0, #255	; 0xff
    59a6:	f004 fdad 	bl	a504 <serial2_putchar>
    59aa:	20ff      	movs	r0, #255	; 0xff
    59ac:	f004 fdaa 	bl	a504 <serial2_putchar>
    59b0:	20ff      	movs	r0, #255	; 0xff
    59b2:	f004 fda7 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    59b6:	210d      	movs	r1, #13
    59b8:	4855      	ldr	r0, [pc, #340]	; (5b10 <dashupdate()+0x330>)
    59ba:	f004 fe1f 	bl	a5fc <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    59be:	484d      	ldr	r0, [pc, #308]	; (5af4 <dashupdate()+0x314>)
    59c0:	f7fb fa0a 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    59c4:	4951      	ldr	r1, [pc, #324]	; (5b0c <dashupdate()+0x32c>)
    59c6:	f007 f825 	bl	ca14 <__aeabi_fmul>
    59ca:	f006 fdff 	bl	c5cc <__aeabi_f2d>
    59ce:	9400      	str	r4, [sp, #0]
    59d0:	4602      	mov	r2, r0
    59d2:	460b      	mov	r3, r1
    59d4:	4841      	ldr	r0, [pc, #260]	; (5adc <dashupdate()+0x2fc>)
    59d6:	f003 fc1b 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    59da:	20ff      	movs	r0, #255	; 0xff
    59dc:	f004 fd92 	bl	a504 <serial2_putchar>
    59e0:	20ff      	movs	r0, #255	; 0xff
    59e2:	f004 fd8f 	bl	a504 <serial2_putchar>
    59e6:	20ff      	movs	r0, #255	; 0xff
    59e8:	f004 fd8c 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    59ec:	4849      	ldr	r0, [pc, #292]	; (5b14 <dashupdate()+0x334>)
    59ee:	2109      	movs	r1, #9
    59f0:	f004 fe04 	bl	a5fc <serial2_write>
  Serial2.print(firmver);
    59f4:	4b48      	ldr	r3, [pc, #288]	; (5b18 <dashupdate()+0x338>)
	size_t print(int n)				{ return print((long)n); }
    59f6:	4839      	ldr	r0, [pc, #228]	; (5adc <dashupdate()+0x2fc>)
    59f8:	6819      	ldr	r1, [r3, #0]
    59fa:	f003 fbdf 	bl	91bc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    59fe:	20ff      	movs	r0, #255	; 0xff
    5a00:	f004 fd80 	bl	a504 <serial2_putchar>
    5a04:	20ff      	movs	r0, #255	; 0xff
    5a06:	f004 fd7d 	bl	a504 <serial2_putchar>
    5a0a:	20ff      	movs	r0, #255	; 0xff
    5a0c:	f004 fd7a 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5a10:	210e      	movs	r1, #14
    5a12:	4842      	ldr	r0, [pc, #264]	; (5b1c <dashupdate()+0x33c>)
    5a14:	f004 fdf2 	bl	a5fc <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    5a18:	4836      	ldr	r0, [pc, #216]	; (5af4 <dashupdate()+0x314>)
    5a1a:	f7fb f9dd 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    5a1e:	4605      	mov	r5, r0
    5a20:	4834      	ldr	r0, [pc, #208]	; (5af4 <dashupdate()+0x314>)
    5a22:	f7fb f9b3 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    5a26:	4601      	mov	r1, r0
    5a28:	4628      	mov	r0, r5
    5a2a:	f006 fee9 	bl	c800 <__aeabi_fsub>
    5a2e:	4937      	ldr	r1, [pc, #220]	; (5b0c <dashupdate()+0x32c>)
    5a30:	f006 fff0 	bl	ca14 <__aeabi_fmul>
    5a34:	f006 fdca 	bl	c5cc <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5a38:	9400      	str	r4, [sp, #0]
    5a3a:	4602      	mov	r2, r0
    5a3c:	460b      	mov	r3, r1
    5a3e:	4827      	ldr	r0, [pc, #156]	; (5adc <dashupdate()+0x2fc>)
    5a40:	f003 fbe6 	bl	9210 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5a44:	20ff      	movs	r0, #255	; 0xff
    5a46:	f004 fd5d 	bl	a504 <serial2_putchar>
    5a4a:	20ff      	movs	r0, #255	; 0xff
    5a4c:	f004 fd5a 	bl	a504 <serial2_putchar>
    5a50:	20ff      	movs	r0, #255	; 0xff
    5a52:	f004 fd57 	bl	a504 <serial2_putchar>
    5a56:	20ff      	movs	r0, #255	; 0xff
    5a58:	f004 fd54 	bl	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5a5c:	4830      	ldr	r0, [pc, #192]	; (5b20 <dashupdate()+0x340>)
    5a5e:	210c      	movs	r1, #12
    5a60:	f004 fdcc 	bl	a5fc <serial2_write>
  Serial2.print(balancecells);
    5a64:	4b2f      	ldr	r3, [pc, #188]	; (5b24 <dashupdate()+0x344>)
	size_t print(int n)				{ return print((long)n); }
    5a66:	481d      	ldr	r0, [pc, #116]	; (5adc <dashupdate()+0x2fc>)
    5a68:	6819      	ldr	r1, [r3, #0]
    5a6a:	f003 fba7 	bl	91bc <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    5a6e:	20ff      	movs	r0, #255	; 0xff
    5a70:	f004 fd48 	bl	a504 <serial2_putchar>
    5a74:	20ff      	movs	r0, #255	; 0xff
    5a76:	f004 fd45 	bl	a504 <serial2_putchar>
    5a7a:	20ff      	movs	r0, #255	; 0xff
}
    5a7c:	b003      	add	sp, #12
    5a7e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    5a82:	f004 bd3f 	b.w	a504 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    5a86:	4828      	ldr	r0, [pc, #160]	; (5b28 <dashupdate()+0x348>)
    5a88:	210b      	movs	r1, #11
    5a8a:	f004 fdb7 	bl	a5fc <serial2_write>
    5a8e:	e6ca      	b.n	5826 <dashupdate()+0x46>
    5a90:	4826      	ldr	r0, [pc, #152]	; (5b2c <dashupdate()+0x34c>)
    5a92:	2106      	movs	r1, #6
    5a94:	f004 fdb2 	bl	a5fc <serial2_write>
    5a98:	e6c5      	b.n	5826 <dashupdate()+0x46>
    5a9a:	4825      	ldr	r0, [pc, #148]	; (5b30 <dashupdate()+0x350>)
    5a9c:	2107      	movs	r1, #7
    5a9e:	f004 fdad 	bl	a5fc <serial2_write>
    5aa2:	e6c0      	b.n	5826 <dashupdate()+0x46>
    5aa4:	4823      	ldr	r0, [pc, #140]	; (5b34 <dashupdate()+0x354>)
    5aa6:	2107      	movs	r1, #7
    5aa8:	f004 fda8 	bl	a5fc <serial2_write>
    5aac:	e6bb      	b.n	5826 <dashupdate()+0x46>
    5aae:	4822      	ldr	r0, [pc, #136]	; (5b38 <dashupdate()+0x358>)
    5ab0:	2108      	movs	r1, #8
    5ab2:	f004 fda3 	bl	a5fc <serial2_write>
    5ab6:	e6b6      	b.n	5826 <dashupdate()+0x46>
    5ab8:	4820      	ldr	r0, [pc, #128]	; (5b3c <dashupdate()+0x35c>)
    5aba:	2108      	movs	r1, #8
    5abc:	f004 fd9e 	bl	a5fc <serial2_write>
    5ac0:	e6b1      	b.n	5826 <dashupdate()+0x46>
    5ac2:	bf00      	nop
    5ac4:	00014aa0 	.word	0x00014aa0
    5ac8:	1fffcde8 	.word	0x1fffcde8
    5acc:	1fffcb34 	.word	0x1fffcb34
    5ad0:	00013ce4 	.word	0x00013ce4
    5ad4:	1fff8828 	.word	0x1fff8828
    5ad8:	00014ab8 	.word	0x00014ab8
    5adc:	1fff88c4 	.word	0x1fff88c4
    5ae0:	00014ac4 	.word	0x00014ac4
    5ae4:	00014ad0 	.word	0x00014ad0
    5ae8:	1fffcccc 	.word	0x1fffcccc
    5aec:	42c80000 	.word	0x42c80000
    5af0:	00014ae0 	.word	0x00014ae0
    5af4:	1fff91e0 	.word	0x1fff91e0
    5af8:	00014aec 	.word	0x00014aec
    5afc:	00014afc 	.word	0x00014afc
    5b00:	00014b0c 	.word	0x00014b0c
    5b04:	41200000 	.word	0x41200000
    5b08:	00014b18 	.word	0x00014b18
    5b0c:	447a0000 	.word	0x447a0000
    5b10:	00014b28 	.word	0x00014b28
    5b14:	00014b38 	.word	0x00014b38
    5b18:	1fff885c 	.word	0x1fff885c
    5b1c:	00014b44 	.word	0x00014b44
    5b20:	00014b54 	.word	0x00014b54
    5b24:	1fff91d0 	.word	0x1fff91d0
    5b28:	00013cc4 	.word	0x00013cc4
    5b2c:	00013cb4 	.word	0x00013cb4
    5b30:	00013cbc 	.word	0x00013cbc
    5b34:	00013cd0 	.word	0x00013cd0
    5b38:	00013cd8 	.word	0x00013cd8
    5b3c:	00014aac 	.word	0x00014aac

00005b40 <chargercomms()>:
void chargercomms() {
    5b40:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (accurlim > 0) {
    5b42:	4ab8      	ldr	r2, [pc, #736]	; (5e24 <chargercomms()+0x2e4>)
    5b44:	8813      	ldrh	r3, [r2, #0]
    5b46:	b29b      	uxth	r3, r3
void chargercomms() {
    5b48:	b083      	sub	sp, #12
  if (accurlim > 0) {
    5b4a:	b97b      	cbnz	r3, 5b6c <chargercomms()+0x2c>
    5b4c:	4db6      	ldr	r5, [pc, #728]	; (5e28 <chargercomms()+0x2e8>)
  if (settings.chargertype == Elcon) {
    5b4e:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    5b52:	2b04      	cmp	r3, #4
    5b54:	d063      	beq.n	5c1e <chargercomms()+0xde>
  if (settings.chargertype == Eltek) {
    5b56:	2b03      	cmp	r3, #3
    5b58:	f000 8090 	beq.w	5c7c <chargercomms()+0x13c>
  if (settings.chargertype == BrusaNLG5) {
    5b5c:	2b01      	cmp	r3, #1
    5b5e:	f000 80b8 	beq.w	5cd2 <chargercomms()+0x192>
  if (settings.chargertype == ChevyVolt) {
    5b62:	2b02      	cmp	r3, #2
    5b64:	f000 812a 	beq.w	5dbc <chargercomms()+0x27c>
}
    5b68:	b003      	add	sp, #12
    5b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint16_t chargerpower = (accurlim * 0.001) * ACvolt * ChargerEff * 0.1;
    5b6c:	8810      	ldrh	r0, [r2, #0]
    int chargelim = chargerpower / (settings.ChargeVsetpoint * settings.Scells);
    5b6e:	4dae      	ldr	r5, [pc, #696]	; (5e28 <chargercomms()+0x2e8>)
    uint16_t chargerpower = (accurlim * 0.001) * ACvolt * ChargerEff * 0.1;
    5b70:	b280      	uxth	r0, r0
    5b72:	f006 fefb 	bl	c96c <__aeabi_i2f>
    5b76:	49ad      	ldr	r1, [pc, #692]	; (5e2c <chargercomms()+0x2ec>)
    5b78:	f006 ff4c 	bl	ca14 <__aeabi_fmul>
    5b7c:	4bac      	ldr	r3, [pc, #688]	; (5e30 <chargercomms()+0x2f0>)
    5b7e:	4604      	mov	r4, r0
    5b80:	8818      	ldrh	r0, [r3, #0]
    5b82:	f006 fef3 	bl	c96c <__aeabi_i2f>
    5b86:	4601      	mov	r1, r0
    5b88:	4620      	mov	r0, r4
    5b8a:	f006 ff43 	bl	ca14 <__aeabi_fmul>
    5b8e:	4ba9      	ldr	r3, [pc, #676]	; (5e34 <chargercomms()+0x2f4>)
    5b90:	4604      	mov	r4, r0
    5b92:	8818      	ldrh	r0, [r3, #0]
    5b94:	f006 feea 	bl	c96c <__aeabi_i2f>
    5b98:	4601      	mov	r1, r0
    5b9a:	4620      	mov	r0, r4
    5b9c:	f006 ff3a 	bl	ca14 <__aeabi_fmul>
    5ba0:	49a5      	ldr	r1, [pc, #660]	; (5e38 <chargercomms()+0x2f8>)
    5ba2:	f006 ff37 	bl	ca14 <__aeabi_fmul>
    5ba6:	f007 f921 	bl	cdec <__aeabi_f2uiz>
    int chargelim = chargerpower / (settings.ChargeVsetpoint * settings.Scells);
    5baa:	b280      	uxth	r0, r0
    5bac:	f006 fede 	bl	c96c <__aeabi_i2f>
    5bb0:	4606      	mov	r6, r0
    5bb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5bb4:	f006 feda 	bl	c96c <__aeabi_i2f>
    5bb8:	69a9      	ldr	r1, [r5, #24]
    5bba:	f006 ff2b 	bl	ca14 <__aeabi_fmul>
    5bbe:	4601      	mov	r1, r0
    5bc0:	4630      	mov	r0, r6
    5bc2:	f006 ffdb 	bl	cb7c <__aeabi_fdiv>
    5bc6:	f007 f8eb 	bl	cda0 <__aeabi_f2iz>
    if (chargelim < chargecurrent) {
    5bca:	4b9c      	ldr	r3, [pc, #624]	; (5e3c <chargercomms()+0x2fc>)
    5bcc:	681a      	ldr	r2, [r3, #0]
    5bce:	4282      	cmp	r2, r0
      chargecurrent = chargelim;
    5bd0:	bfc8      	it	gt
    5bd2:	6018      	strgt	r0, [r3, #0]
    if (CPdebug == 1) {
    5bd4:	4b9a      	ldr	r3, [pc, #616]	; (5e40 <chargercomms()+0x300>)
    5bd6:	781b      	ldrb	r3, [r3, #0]
    int chargelim = chargerpower / (settings.ChargeVsetpoint * settings.Scells);
    5bd8:	4604      	mov	r4, r0
    if (CPdebug == 1) {
    5bda:	2b00      	cmp	r3, #0
    5bdc:	d0b7      	beq.n	5b4e <chargercomms()+0xe>
      Serial.println();
    5bde:	4899      	ldr	r0, [pc, #612]	; (5e44 <chargercomms()+0x304>)
    5be0:	f003 faf4 	bl	91cc <Print::println()>
    5be4:	210c      	movs	r1, #12
    5be6:	4898      	ldr	r0, [pc, #608]	; (5e48 <chargercomms()+0x308>)
    5be8:	f006 f834 	bl	bc54 <usb_serial_write>
      Serial.print(chargerpower * 0.1, 0);
    5bec:	4992      	ldr	r1, [pc, #584]	; (5e38 <chargercomms()+0x2f8>)
    5bee:	4630      	mov	r0, r6
    5bf0:	f006 ff10 	bl	ca14 <__aeabi_fmul>
    5bf4:	f006 fcea 	bl	c5cc <__aeabi_f2d>
    5bf8:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5bfa:	2100      	movs	r1, #0
    5bfc:	4602      	mov	r2, r0
    5bfe:	9100      	str	r1, [sp, #0]
    5c00:	4890      	ldr	r0, [pc, #576]	; (5e44 <chargercomms()+0x304>)
    5c02:	f003 fb05 	bl	9210 <Print::printFloat(double, unsigned char)>
    5c06:	210d      	movs	r1, #13
    5c08:	4890      	ldr	r0, [pc, #576]	; (5e4c <chargercomms()+0x30c>)
    5c0a:	f006 f823 	bl	bc54 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5c0e:	488d      	ldr	r0, [pc, #564]	; (5e44 <chargercomms()+0x304>)
    5c10:	4621      	mov	r1, r4
    5c12:	f003 fad3 	bl	91bc <Print::print(long)>
  if (settings.chargertype == Elcon) {
    5c16:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    5c1a:	2b04      	cmp	r3, #4
    5c1c:	d19b      	bne.n	5b56 <chargercomms()+0x16>
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    5c1e:	4c8c      	ldr	r4, [pc, #560]	; (5e50 <chargercomms()+0x310>)
    5c20:	4a8c      	ldr	r2, [pc, #560]	; (5e54 <chargercomms()+0x314>)
    msg.ext = 1;
    5c22:	88e3      	ldrh	r3, [r4, #6]
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    5c24:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    5c26:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    5c2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    5c2e:	f043 0301 	orr.w	r3, r3, #1
    5c32:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
    5c36:	f006 fe99 	bl	c96c <__aeabi_i2f>
    5c3a:	69a9      	ldr	r1, [r5, #24]
    5c3c:	f006 feea 	bl	ca14 <__aeabi_fmul>
    5c40:	4985      	ldr	r1, [pc, #532]	; (5e58 <chargercomms()+0x318>)
    5c42:	f006 fee7 	bl	ca14 <__aeabi_fmul>
    5c46:	f007 f8d1 	bl	cdec <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    5c4a:	4b7c      	ldr	r3, [pc, #496]	; (5e3c <chargercomms()+0x2fc>)
    5c4c:	4a83      	ldr	r2, [pc, #524]	; (5e5c <chargercomms()+0x31c>)
    5c4e:	681b      	ldr	r3, [r3, #0]
    5c50:	6812      	ldr	r2, [r2, #0]
    5c52:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5c56:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    5c58:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    5c5a:	2600      	movs	r6, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5c5c:	8120      	strh	r0, [r4, #8]
    msg.buf[2] = highByte(chargecurrent / ncharger);
    5c5e:	8163      	strh	r3, [r4, #10]
    Can0.write(msg);
    5c60:	487f      	ldr	r0, [pc, #508]	; (5e60 <chargercomms()+0x320>)
    msg.buf[4] = 0x00;
    5c62:	60e6      	str	r6, [r4, #12]
    Can0.write(msg);
    5c64:	4621      	mov	r1, r4
    5c66:	f002 f9e1 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    5c6a:	79a2      	ldrb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    5c6c:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    msg.ext = 0;
    5c70:	f366 0200 	bfi	r2, r6, #0, #1
  if (settings.chargertype == Eltek) {
    5c74:	2b03      	cmp	r3, #3
    msg.ext = 0;
    5c76:	71a2      	strb	r2, [r4, #6]
  if (settings.chargertype == Eltek) {
    5c78:	f47f af70 	bne.w	5b5c <chargercomms()+0x1c>
    msg.id = 0x2FF;  //broadcast to all Elteks
    5c7c:	4c74      	ldr	r4, [pc, #464]	; (5e50 <chargercomms()+0x310>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
    msg.buf[2] = highByte(1000);
    5c80:	72a3      	strb	r3, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    5c82:	f240 22ff 	movw	r2, #767	; 0x2ff
    msg.buf[0] = 0x01;
    5c86:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.id = 0x2FF;  //broadcast to all Elteks
    5c8a:	6022      	str	r2, [r4, #0]
    msg.len = 7;
    5c8c:	2207      	movs	r2, #7
    5c8e:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    5c90:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5c92:	f006 fe6b 	bl	c96c <__aeabi_i2f>
    5c96:	69a9      	ldr	r1, [r5, #24]
    5c98:	f006 febc 	bl	ca14 <__aeabi_fmul>
    5c9c:	496e      	ldr	r1, [pc, #440]	; (5e58 <chargercomms()+0x318>)
    5c9e:	f006 feb9 	bl	ca14 <__aeabi_fmul>
    5ca2:	f007 f8a3 	bl	cdec <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    5ca6:	4a6d      	ldr	r2, [pc, #436]	; (5e5c <chargercomms()+0x31c>)
    5ca8:	4b64      	ldr	r3, [pc, #400]	; (5e3c <chargercomms()+0x2fc>)
    5caa:	6811      	ldr	r1, [r2, #0]
    5cac:	681b      	ldr	r3, [r3, #0]
    5cae:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5cb2:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5cb4:	0a02      	lsrs	r2, r0, #8
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    5cb6:	7363      	strb	r3, [r4, #13]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    5cb8:	121b      	asrs	r3, r3, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5cba:	72e0      	strb	r0, [r4, #11]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    5cbc:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    5cbe:	4868      	ldr	r0, [pc, #416]	; (5e60 <chargercomms()+0x320>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    5cc0:	7322      	strb	r2, [r4, #12]
    Can0.write(msg);
    5cc2:	4621      	mov	r1, r4
    5cc4:	f002 f9b2 	bl	802c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    5cc8:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    5ccc:	2b01      	cmp	r3, #1
    5cce:	f47f af48 	bne.w	5b62 <chargercomms()+0x22>
    msg.id = chargerid1;
    5cd2:	4b64      	ldr	r3, [pc, #400]	; (5e64 <chargercomms()+0x324>)
    5cd4:	4c5e      	ldr	r4, [pc, #376]	; (5e50 <chargercomms()+0x310>)
    5cd6:	6819      	ldr	r1, [r3, #0]
    5cd8:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x80;
    5cda:	2380      	movs	r3, #128	; 0x80
    msg.len = 7;
    5cdc:	2207      	movs	r2, #7
    if (digitalRead(IN2) == LOW)  //Gen OFF
    5cde:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    5ce0:	7223      	strb	r3, [r4, #8]
    msg.len = 7;
    5ce2:	71e2      	strb	r2, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    5ce4:	f004 f96a 	bl	9fbc <digitalRead>
    5ce8:	2800      	cmp	r0, #0
    5cea:	f000 8099 	beq.w	5e20 <chargercomms()+0x2e0>
      msg.buf[1] = highByte(maxac2 * 10);
    5cee:	4b5e      	ldr	r3, [pc, #376]	; (5e68 <chargercomms()+0x328>)
    5cf0:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5cf2:	4e52      	ldr	r6, [pc, #328]	; (5e3c <chargercomms()+0x2fc>)
    5cf4:	4f59      	ldr	r7, [pc, #356]	; (5e5c <chargercomms()+0x31c>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    5cf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    5cf8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5cfc:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    5cfe:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    5d00:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    5d04:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    5d06:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5d08:	6833      	ldr	r3, [r6, #0]
    5d0a:	683a      	ldr	r2, [r7, #0]
    5d0c:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    5d10:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5d12:	121b      	asrs	r3, r3, #8
    5d14:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    5d16:	f006 fe29 	bl	c96c <__aeabi_i2f>
    5d1a:	69a9      	ldr	r1, [r5, #24]
    5d1c:	f006 fe7a 	bl	ca14 <__aeabi_fmul>
    5d20:	4b52      	ldr	r3, [pc, #328]	; (5e6c <chargercomms()+0x32c>)
    5d22:	6819      	ldr	r1, [r3, #0]
    5d24:	f006 fd6c 	bl	c800 <__aeabi_fsub>
    5d28:	494b      	ldr	r1, [pc, #300]	; (5e58 <chargercomms()+0x318>)
    5d2a:	f006 fe73 	bl	ca14 <__aeabi_fmul>
    5d2e:	f007 f85d 	bl	cdec <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    5d32:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    5d34:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    5d38:	4945      	ldr	r1, [pc, #276]	; (5e50 <chargercomms()+0x310>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    5d3a:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    5d3c:	4848      	ldr	r0, [pc, #288]	; (5e60 <chargercomms()+0x320>)
    5d3e:	f002 f975 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    5d42:	2002      	movs	r0, #2
    5d44:	f004 f9a4 	bl	a090 <delay>
    msg.id = chargerid2;
    5d48:	4b49      	ldr	r3, [pc, #292]	; (5e70 <chargercomms()+0x330>)
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    5d4e:	2307      	movs	r3, #7
    5d50:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x80;
    5d52:	2380      	movs	r3, #128	; 0x80
    5d54:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    5d56:	2010      	movs	r0, #16
    5d58:	f004 f930 	bl	9fbc <digitalRead>
    5d5c:	2800      	cmp	r0, #0
    5d5e:	f040 8099 	bne.w	5e94 <chargercomms()+0x354>
      msg.buf[1] = highByte(maxac1 * 10);
    5d62:	4b44      	ldr	r3, [pc, #272]	; (5e74 <chargercomms()+0x334>)
      msg.buf[1] = highByte(maxac2 * 10);
    5d64:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    5d66:	6da8      	ldr	r0, [r5, #88]	; 0x58
      msg.buf[1] = highByte(maxac2 * 10);
    5d68:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5d6c:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    5d6e:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    5d70:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    5d74:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    5d76:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    5d78:	f006 fdf8 	bl	c96c <__aeabi_i2f>
    5d7c:	69a9      	ldr	r1, [r5, #24]
    5d7e:	f006 fe49 	bl	ca14 <__aeabi_fmul>
    5d82:	4b3d      	ldr	r3, [pc, #244]	; (5e78 <chargercomms()+0x338>)
    5d84:	6819      	ldr	r1, [r3, #0]
    5d86:	f006 fd3b 	bl	c800 <__aeabi_fsub>
    5d8a:	4933      	ldr	r1, [pc, #204]	; (5e58 <chargercomms()+0x318>)
    5d8c:	f006 fe42 	bl	ca14 <__aeabi_fmul>
    5d90:	f007 f82c 	bl	cdec <__aeabi_f2uiz>
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5d94:	683a      	ldr	r2, [r7, #0]
    5d96:	6833      	ldr	r3, [r6, #0]
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    5d98:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5d9a:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    5d9e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5da2:	121a      	asrs	r2, r3, #8
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    5da4:	72e0      	strb	r0, [r4, #11]
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    5da6:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    5da8:	4929      	ldr	r1, [pc, #164]	; (5e50 <chargercomms()+0x310>)
    5daa:	482d      	ldr	r0, [pc, #180]	; (5e60 <chargercomms()+0x320>)
    msg.buf[5] = highByte(chargecurrent / ncharger);
    5dac:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    5dae:	f002 f93d 	bl	802c <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    5db2:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
    5db6:	2b02      	cmp	r3, #2
    5db8:	f47f aed6 	bne.w	5b68 <chargercomms()+0x28>
    msg.id = 0x30E;
    5dbc:	4c24      	ldr	r4, [pc, #144]	; (5e50 <chargercomms()+0x310>)
    Can0.write(msg);
    5dbe:	4828      	ldr	r0, [pc, #160]	; (5e60 <chargercomms()+0x320>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    5dc0:	7223      	strb	r3, [r4, #8]
    msg.id = 0x30E;
    5dc2:	f240 320e 	movw	r2, #782	; 0x30e
    5dc6:	6022      	str	r2, [r4, #0]
    Can0.write(msg);
    5dc8:	4621      	mov	r1, r4
    msg.len = 1;
    5dca:	2201      	movs	r2, #1
    5dcc:	71e2      	strb	r2, [r4, #7]
    Can0.write(msg);
    5dce:	f002 f92d 	bl	802c <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    5dd2:	4b1a      	ldr	r3, [pc, #104]	; (5e3c <chargercomms()+0x2fc>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    5dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if ((chargecurrent * 2) > 255) {
    5dd6:	681b      	ldr	r3, [r3, #0]
    5dd8:	005b      	lsls	r3, r3, #1
    5dda:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    5ddc:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    5de0:	bfd4      	ite	le
    5de2:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    5de4:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    5de6:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    5dea:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    5dec:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    5dee:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    5df0:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    5df2:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    5df4:	f006 fdba 	bl	c96c <__aeabi_i2f>
    5df8:	69a9      	ldr	r1, [r5, #24]
    5dfa:	f006 fe0b 	bl	ca14 <__aeabi_fmul>
    5dfe:	491f      	ldr	r1, [pc, #124]	; (5e7c <chargercomms()+0x33c>)
    5e00:	4605      	mov	r5, r0
    5e02:	f006 ffc3 	bl	cd8c <__aeabi_fcmpgt>
    5e06:	2800      	cmp	r0, #0
    5e08:	d13a      	bne.n	5e80 <chargercomms()+0x340>
    5e0a:	2201      	movs	r2, #1
    5e0c:	2390      	movs	r3, #144	; 0x90
    Can0.write(msg);
    5e0e:	4910      	ldr	r1, [pc, #64]	; (5e50 <chargercomms()+0x310>)
    5e10:	4813      	ldr	r0, [pc, #76]	; (5e60 <chargercomms()+0x320>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    5e12:	72a2      	strb	r2, [r4, #10]
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    5e14:	72e3      	strb	r3, [r4, #11]
}
    5e16:	b003      	add	sp, #12
    5e18:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Can0.write(msg);
    5e1c:	f002 b906 	b.w	802c <FlexCAN::write(CAN_message_t const&)>
      msg.buf[1] = highByte(maxac1 * 10);
    5e20:	4b14      	ldr	r3, [pc, #80]	; (5e74 <chargercomms()+0x334>)
    5e22:	e765      	b.n	5cf0 <chargercomms()+0x1b0>
    5e24:	1fff91c0 	.word	0x1fff91c0
    5e28:	1fffcde8 	.word	0x1fffcde8
    5e2c:	3a83126f 	.word	0x3a83126f
    5e30:	1fff8824 	.word	0x1fff8824
    5e34:	1fff8826 	.word	0x1fff8826
    5e38:	3dcccccd 	.word	0x3dcccccd
    5e3c:	1fffcb40 	.word	0x1fffcb40
    5e40:	1fff918c 	.word	0x1fff918c
    5e44:	1fff8a04 	.word	0x1fff8a04
    5e48:	00014b64 	.word	0x00014b64
    5e4c:	00014b74 	.word	0x00014b74
    5e50:	1fffcd40 	.word	0x1fffcd40
    5e54:	1806e5f4 	.word	0x1806e5f4
    5e58:	41200000 	.word	0x41200000
    5e5c:	1fff8868 	.word	0x1fff8868
    5e60:	1fffcef0 	.word	0x1fffcef0
    5e64:	1fff8844 	.word	0x1fff8844
    5e68:	1fff8864 	.word	0x1fff8864
    5e6c:	1fffcb48 	.word	0x1fffcb48
    5e70:	1fff8848 	.word	0x1fff8848
    5e74:	1fff8860 	.word	0x1fff8860
    5e78:	1fffcb44 	.word	0x1fffcb44
    5e7c:	43480000 	.word	0x43480000
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    5e80:	4629      	mov	r1, r5
    5e82:	4628      	mov	r0, r5
    5e84:	f006 fcbe 	bl	c804 <__addsf3>
    5e88:	f006 ffb0 	bl	cdec <__aeabi_f2uiz>
    5e8c:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    5e90:	b2c3      	uxtb	r3, r0
    5e92:	e7bc      	b.n	5e0e <chargercomms()+0x2ce>
      msg.buf[1] = highByte(maxac2 * 10);
    5e94:	4b00      	ldr	r3, [pc, #0]	; (5e98 <chargercomms()+0x358>)
    5e96:	e765      	b.n	5d64 <chargercomms()+0x224>
    5e98:	1fff8864 	.word	0x1fff8864

00005e9c <getcheck(CAN_message_t&, int)>:
uint8_t getcheck(CAN_message_t &msg, int id) {
    5e9c:	b530      	push	{r4, r5, lr}
  canmes[0] = msg.id >> 8;
    5e9e:	8803      	ldrh	r3, [r0, #0]
  int meslen = msg.len + 1;  //remove one for crc and add two for id bytes
    5ea0:	79c2      	ldrb	r2, [r0, #7]
uint8_t getcheck(CAN_message_t &msg, int id) {
    5ea2:	b085      	sub	sp, #20
  canmes[0] = msg.id >> 8;
    5ea4:	ba5b      	rev16	r3, r3
  for (int i = 0; i < (msg.len - 1); i++) {
    5ea6:	2a01      	cmp	r2, #1
  canmes[0] = msg.id >> 8;
    5ea8:	f8ad 3004 	strh.w	r3, [sp, #4]
uint8_t getcheck(CAN_message_t &msg, int id) {
    5eac:	460c      	mov	r4, r1
  int meslen = msg.len + 1;  //remove one for crc and add two for id bytes
    5eae:	f102 0501 	add.w	r5, r2, #1
  for (int i = 0; i < (msg.len - 1); i++) {
    5eb2:	dd06      	ble.n	5ec2 <getcheck(CAN_message_t&, int)+0x26>
    canmes[i + 2] = msg.buf[i];
    5eb4:	f100 0108 	add.w	r1, r0, #8
    5eb8:	3a01      	subs	r2, #1
    5eba:	f10d 0006 	add.w	r0, sp, #6
    5ebe:	f003 fc65 	bl	978c <memcpy>
  return (crc8.get_crc8(canmes, meslen, finalxor[id]));
    5ec2:	4b04      	ldr	r3, [pc, #16]	; (5ed4 <getcheck(CAN_message_t&, int)+0x38>)
    5ec4:	4804      	ldr	r0, [pc, #16]	; (5ed8 <getcheck(CAN_message_t&, int)+0x3c>)
    5ec6:	5d1b      	ldrb	r3, [r3, r4]
    5ec8:	462a      	mov	r2, r5
    5eca:	a901      	add	r1, sp, #4
    5ecc:	f001 fbdc 	bl	7688 <CRC8::get_crc8(unsigned char const*, int, unsigned char)>
}
    5ed0:	b005      	add	sp, #20
    5ed2:	bd30      	pop	{r4, r5, pc}
    5ed4:	00014e24 	.word	0x00014e24
    5ed8:	1fffcbcc 	.word	0x1fffcbcc

00005edc <sendcommand()>:
{
    5edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (mescycle == 0xF) {
    5ee0:	4d74      	ldr	r5, [pc, #464]	; (60b4 <sendcommand()+0x1d8>)
    5ee2:	782b      	ldrb	r3, [r5, #0]
    5ee4:	2b0f      	cmp	r3, #15
{
    5ee6:	b082      	sub	sp, #8
  if (mescycle == 0xF) {
    5ee8:	d062      	beq.n	5fb0 <sendcommand()+0xd4>
    5eea:	4c73      	ldr	r4, [pc, #460]	; (60b8 <sendcommand()+0x1dc>)
  if (settings.CSCvariant == BmwI3) {
    5eec:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    if (nextmes == 8) {
    5ef0:	4e72      	ldr	r6, [pc, #456]	; (60bc <sendcommand()+0x1e0>)
  if (settings.CSCvariant == BmwI3) {
    5ef2:	2b00      	cmp	r3, #0
    5ef4:	d14a      	bne.n	5f8c <sendcommand()+0xb0>
    if (nextmes == 8) {
    5ef6:	7831      	ldrb	r1, [r6, #0]
      if (testcycle < 4) {
    5ef8:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 60c0 <sendcommand()+0x1e4>
    if (nextmes == 8) {
    5efc:	2908      	cmp	r1, #8
    5efe:	f000 80b0 	beq.w	6062 <sendcommand()+0x186>
  msg.id = 0x080 | (nextmes);
    5f02:	f041 0380 	orr.w	r3, r1, #128	; 0x80
    5f06:	4c6f      	ldr	r4, [pc, #444]	; (60c4 <sendcommand()+0x1e8>)
  if (balancecells == 1 && balancepauze == 0) {
    5f08:	4f6f      	ldr	r7, [pc, #444]	; (60c8 <sendcommand()+0x1ec>)
  msg.id = 0x080 | (nextmes);
    5f0a:	6023      	str	r3, [r4, #0]
  if (balancecells == 1 && balancepauze == 0) {
    5f0c:	683b      	ldr	r3, [r7, #0]
  msg.len = 8;
    5f0e:	2208      	movs	r2, #8
  if (balancecells == 1 && balancepauze == 0) {
    5f10:	2b01      	cmp	r3, #1
  msg.len = 8;
    5f12:	71e2      	strb	r2, [r4, #7]
  if (balancecells == 1 && balancepauze == 0) {
    5f14:	d076      	beq.n	6004 <sendcommand()+0x128>
    msg.buf[0] = 0x68;
    5f16:	f241 0368 	movw	r3, #4200	; 0x1068
    5f1a:	8123      	strh	r3, [r4, #8]
  if (testcycle < 3) {
    5f1c:	f898 2000 	ldrb.w	r2, [r8]
  msg.buf[2] = 0x00;  //balancing bits
    5f20:	2300      	movs	r3, #0
  if (testcycle < 3) {
    5f22:	2a02      	cmp	r2, #2
  msg.buf[2] = 0x00;  //balancing bits
    5f24:	72a3      	strb	r3, [r4, #10]
  if (testcycle < 3) {
    5f26:	d822      	bhi.n	5f6e <sendcommand()+0x92>
    msg.buf[3] = 0x00;
    5f28:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = 0x00;
    5f2a:	81a3      	strh	r3, [r4, #12]
  msg.buf[6] = mescycle << 4;
    5f2c:	782b      	ldrb	r3, [r5, #0]
    5f2e:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5f32:	b2db      	uxtb	r3, r3
  if (testcycle == 2) {
    5f34:	d100      	bne.n	5f38 <sendcommand()+0x5c>
    msg.buf[6] = msg.buf[6] + 0x04;
    5f36:	3304      	adds	r3, #4
    5f38:	73a3      	strb	r3, [r4, #14]
  msg.buf[7] = getcheck(msg, nextmes);
    5f3a:	4862      	ldr	r0, [pc, #392]	; (60c4 <sendcommand()+0x1e8>)
    5f3c:	f7ff ffae 	bl	5e9c <getcheck(CAN_message_t&, int)>
    5f40:	4603      	mov	r3, r0
    5f42:	73e3      	strb	r3, [r4, #15]
  delay(2);
    5f44:	2002      	movs	r0, #2
    5f46:	f004 f8a3 	bl	a090 <delay>
  Can0.write(msg);
    5f4a:	495e      	ldr	r1, [pc, #376]	; (60c4 <sendcommand()+0x1e8>)
    5f4c:	485f      	ldr	r0, [pc, #380]	; (60cc <sendcommand()+0x1f0>)
    5f4e:	f002 f86d 	bl	802c <FlexCAN::write(CAN_message_t const&)>
  mescycle++;
    5f52:	782a      	ldrb	r2, [r5, #0]
  nextmes++;
    5f54:	7833      	ldrb	r3, [r6, #0]
  if (bms.checkstatus() == true) {
    5f56:	485e      	ldr	r0, [pc, #376]	; (60d0 <sendcommand()+0x1f4>)
  mescycle++;
    5f58:	3201      	adds	r2, #1
  nextmes++;
    5f5a:	3301      	adds	r3, #1
  mescycle++;
    5f5c:	702a      	strb	r2, [r5, #0]
  nextmes++;
    5f5e:	7033      	strb	r3, [r6, #0]
  if (bms.checkstatus() == true) {
    5f60:	f7fa fd76 	bl	a50 <BMSModuleManager::checkstatus()>
    5f64:	2800      	cmp	r0, #0
    5f66:	d169      	bne.n	603c <sendcommand()+0x160>
}
    5f68:	b002      	add	sp, #8
    5f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  msg.buf[5] = 0x00;
    5f6e:	7363      	strb	r3, [r4, #13]
    if (balancecells == 1) {
    5f70:	683b      	ldr	r3, [r7, #0]
    5f72:	f1a3 0301 	sub.w	r3, r3, #1
    5f76:	fab3 f383 	clz	r3, r3
    5f7a:	095b      	lsrs	r3, r3, #5
    5f7c:	00db      	lsls	r3, r3, #3
    5f7e:	7323      	strb	r3, [r4, #12]
  msg.buf[6] = mescycle << 4;
    5f80:	782b      	ldrb	r3, [r5, #0]
    5f82:	011b      	lsls	r3, r3, #4
    5f84:	73a3      	strb	r3, [r4, #14]
    msg.buf[3] = 0x50;  // 0x00 request no measurements, 0x50 request voltage and temp, 0x10 request voltage measurement, 0x40 request temperature measurement.//balancing bits
    5f86:	2350      	movs	r3, #80	; 0x50
    5f88:	72e3      	strb	r3, [r4, #11]
  if (testcycle == 2) {
    5f8a:	e7d6      	b.n	5f3a <sendcommand()+0x5e>
  if (settings.CSCvariant == MiniE) {
    5f8c:	2b01      	cmp	r3, #1
    5f8e:	d173      	bne.n	6078 <sendcommand()+0x19c>
    if (nextmes == 0xC) {
    5f90:	7831      	ldrb	r1, [r6, #0]
      if (testcycle < 4) {
    5f92:	f8df 812c 	ldr.w	r8, [pc, #300]	; 60c0 <sendcommand()+0x1e4>
    if (nextmes == 0xC) {
    5f96:	290c      	cmp	r1, #12
    5f98:	d1b3      	bne.n	5f02 <sendcommand()+0x26>
      if (testcycle < 4) {
    5f9a:	f898 3000 	ldrb.w	r3, [r8]
      nextmes = 0;
    5f9e:	2100      	movs	r1, #0
      if (testcycle < 4) {
    5fa0:	2b03      	cmp	r3, #3
      nextmes = 0;
    5fa2:	7031      	strb	r1, [r6, #0]
      if (testcycle < 4) {
    5fa4:	d86c      	bhi.n	6080 <sendcommand()+0x1a4>
        testcycle++;
    5fa6:	3301      	adds	r3, #1
    5fa8:	f888 3000 	strb.w	r3, [r8]
    5fac:	2380      	movs	r3, #128	; 0x80
    5fae:	e7aa      	b.n	5f06 <sendcommand()+0x2a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fb0:	4f48      	ldr	r7, [pc, #288]	; (60d4 <sendcommand()+0x1f8>)
    if (balancetimer < millis()) {
    5fb2:	4e49      	ldr	r6, [pc, #292]	; (60d8 <sendcommand()+0x1fc>)
    5fb4:	683b      	ldr	r3, [r7, #0]
    5fb6:	9300      	str	r3, [sp, #0]
	return ret;
    5fb8:	9b00      	ldr	r3, [sp, #0]
    5fba:	6832      	ldr	r2, [r6, #0]
    mescycle = 0;
    5fbc:	2100      	movs	r1, #0
    if (balancetimer < millis()) {
    5fbe:	429a      	cmp	r2, r3
    mescycle = 0;
    5fc0:	7029      	strb	r1, [r5, #0]
    if (balancetimer < millis()) {
    5fc2:	d260      	bcs.n	6086 <sendcommand()+0x1aa>
      balancepauze = 1;
    5fc4:	4b45      	ldr	r3, [pc, #276]	; (60dc <sendcommand()+0x200>)
      balpauzecnt++;
    5fc6:	4c46      	ldr	r4, [pc, #280]	; (60e0 <sendcommand()+0x204>)
      balancepauze = 1;
    5fc8:	2201      	movs	r2, #1
    5fca:	701a      	strb	r2, [r3, #0]
      balpauzecnt++;
    5fcc:	6823      	ldr	r3, [r4, #0]
    5fce:	4413      	add	r3, r2
      if (debug == 1) {
    5fd0:	4a44      	ldr	r2, [pc, #272]	; (60e4 <sendcommand()+0x208>)
      balpauzecnt++;
    5fd2:	6023      	str	r3, [r4, #0]
      if (debug == 1) {
    5fd4:	6812      	ldr	r2, [r2, #0]
    5fd6:	2a01      	cmp	r2, #1
    5fd8:	d05d      	beq.n	6096 <sendcommand()+0x1ba>
      if (balpauzecnt > balstop) {
    5fda:	4a43      	ldr	r2, [pc, #268]	; (60e8 <sendcommand()+0x20c>)
        balancetimer = millis() + ((settings.balanceDuty + 60) * 1000);
    5fdc:	4c36      	ldr	r4, [pc, #216]	; (60b8 <sendcommand()+0x1dc>)
      if (balpauzecnt > balstop) {
    5fde:	6812      	ldr	r2, [r2, #0]
    5fe0:	429a      	cmp	r2, r3
    5fe2:	da83      	bge.n	5eec <sendcommand()+0x10>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5fe4:	683b      	ldr	r3, [r7, #0]
        balancetimer = millis() + ((settings.balanceDuty + 60) * 1000);
    5fe6:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    5fea:	9301      	str	r3, [sp, #4]
	return ret;
    5fec:	9b01      	ldr	r3, [sp, #4]
        bms.setBalIgnore(true);
    5fee:	4838      	ldr	r0, [pc, #224]	; (60d0 <sendcommand()+0x1f4>)
        balancetimer = millis() + ((settings.balanceDuty + 60) * 1000);
    5ff0:	323c      	adds	r2, #60	; 0x3c
    5ff2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    5ff6:	fb01 3302 	mla	r3, r1, r2, r3
        bms.setBalIgnore(true);
    5ffa:	2101      	movs	r1, #1
        balancetimer = millis() + ((settings.balanceDuty + 60) * 1000);
    5ffc:	6033      	str	r3, [r6, #0]
        bms.setBalIgnore(true);
    5ffe:	f7fa ff11 	bl	e24 <BMSModuleManager::setBalIgnore(bool)>
    6002:	e773      	b.n	5eec <sendcommand()+0x10>
  if (balancecells == 1 && balancepauze == 0) {
    6004:	4b35      	ldr	r3, [pc, #212]	; (60dc <sendcommand()+0x200>)
    6006:	781b      	ldrb	r3, [r3, #0]
    6008:	2b00      	cmp	r3, #0
    600a:	d184      	bne.n	5f16 <sendcommand()+0x3a>
    msg.buf[0] = lowByte((uint16_t((bms.getLowCellVolt()) * 1000) + 10));
    600c:	4830      	ldr	r0, [pc, #192]	; (60d0 <sendcommand()+0x1f4>)
    600e:	f7fa febd 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6012:	4936      	ldr	r1, [pc, #216]	; (60ec <sendcommand()+0x210>)
    6014:	f006 fcfe 	bl	ca14 <__aeabi_fmul>
    6018:	f006 fee8 	bl	cdec <__aeabi_f2uiz>
    601c:	300a      	adds	r0, #10
    601e:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte((uint16_t((bms.getLowCellVolt()) * 1000) + 10));
    6020:	482b      	ldr	r0, [pc, #172]	; (60d0 <sendcommand()+0x1f4>)
    6022:	f7fa feb3 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6026:	4931      	ldr	r1, [pc, #196]	; (60ec <sendcommand()+0x210>)
    6028:	f006 fcf4 	bl	ca14 <__aeabi_fmul>
    602c:	f006 fede 	bl	cdec <__aeabi_f2uiz>
    6030:	b283      	uxth	r3, r0
    6032:	330a      	adds	r3, #10
    6034:	121b      	asrs	r3, r3, #8
  msg.buf[7] = getcheck(msg, nextmes);
    6036:	7831      	ldrb	r1, [r6, #0]
    msg.buf[1] = highByte((uint16_t((bms.getLowCellVolt()) * 1000) + 10));
    6038:	7263      	strb	r3, [r4, #9]
    603a:	e76f      	b.n	5f1c <sendcommand()+0x40>
  msg.ext = 0;
    603c:	88e3      	ldrh	r3, [r4, #6]
  msg.buf[0] = 0xFF;
    603e:	4d2c      	ldr	r5, [pc, #176]	; (60f0 <sendcommand()+0x214>)
  Can0.write(msg);
    6040:	4822      	ldr	r0, [pc, #136]	; (60cc <sendcommand()+0x1f0>)
  msg.buf[0] = 0xFF;
    6042:	60a5      	str	r5, [r4, #8]
  msg.id = 0x0B0;  //broadcast to all Elteks
    6044:	21b0      	movs	r1, #176	; 0xb0
    6046:	6021      	str	r1, [r4, #0]
  msg.ext = 0;
    6048:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
  Can0.write(msg);
    604c:	491d      	ldr	r1, [pc, #116]	; (60c4 <sendcommand()+0x1e8>)
  msg.ext = 0;
    604e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  msg.buf[4] = 0x00;
    6052:	2200      	movs	r2, #0
  msg.ext = 0;
    6054:	80e3      	strh	r3, [r4, #6]
  msg.buf[4] = 0x00;
    6056:	60e2      	str	r2, [r4, #12]
}
    6058:	b002      	add	sp, #8
    605a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  Can0.write(msg);
    605e:	f001 bfe5 	b.w	802c <FlexCAN::write(CAN_message_t const&)>
      if (testcycle < 4) {
    6062:	f898 2000 	ldrb.w	r2, [r8]
      nextmes = 0;
    6066:	7033      	strb	r3, [r6, #0]
      if (testcycle < 4) {
    6068:	2a03      	cmp	r2, #3
    606a:	d809      	bhi.n	6080 <sendcommand()+0x1a4>
        testcycle++;
    606c:	3201      	adds	r2, #1
    606e:	4619      	mov	r1, r3
    6070:	f888 2000 	strb.w	r2, [r8]
    6074:	2380      	movs	r3, #128	; 0x80
    6076:	e746      	b.n	5f06 <sendcommand()+0x2a>
    6078:	f8df 8044 	ldr.w	r8, [pc, #68]	; 60c0 <sendcommand()+0x1e4>
    if (nextmes == 8) {
    607c:	7831      	ldrb	r1, [r6, #0]
    607e:	e740      	b.n	5f02 <sendcommand()+0x26>
    6080:	2380      	movs	r3, #128	; 0x80
    6082:	2100      	movs	r1, #0
    6084:	e73f      	b.n	5f06 <sendcommand()+0x2a>
      balancepauze = 0;
    6086:	4a15      	ldr	r2, [pc, #84]	; (60dc <sendcommand()+0x200>)
      balpauzecnt = 0;
    6088:	4b15      	ldr	r3, [pc, #84]	; (60e0 <sendcommand()+0x204>)
      bms.setBalIgnore(false);
    608a:	4811      	ldr	r0, [pc, #68]	; (60d0 <sendcommand()+0x1f4>)
      balancepauze = 0;
    608c:	7011      	strb	r1, [r2, #0]
      balpauzecnt = 0;
    608e:	6019      	str	r1, [r3, #0]
      bms.setBalIgnore(false);
    6090:	f7fa fec8 	bl	e24 <BMSModuleManager::setBalIgnore(bool)>
    6094:	e729      	b.n	5eea <sendcommand()+0xe>
        Serial.println();
    6096:	4817      	ldr	r0, [pc, #92]	; (60f4 <sendcommand()+0x218>)
    6098:	f003 f898 	bl	91cc <Print::println()>
    609c:	2113      	movs	r1, #19
    609e:	4816      	ldr	r0, [pc, #88]	; (60f8 <sendcommand()+0x21c>)
    60a0:	f005 fdd8 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    60a4:	4813      	ldr	r0, [pc, #76]	; (60f4 <sendcommand()+0x218>)
    60a6:	f003 f891 	bl	91cc <Print::println()>
        Serial.println();
    60aa:	4812      	ldr	r0, [pc, #72]	; (60f4 <sendcommand()+0x218>)
    60ac:	f003 f88e 	bl	91cc <Print::println()>
      if (balpauzecnt > balstop) {
    60b0:	6823      	ldr	r3, [r4, #0]
    60b2:	e792      	b.n	5fda <sendcommand()+0xfe>
    60b4:	1fffcd3c 	.word	0x1fffcd3c
    60b8:	1fffcde8 	.word	0x1fffcde8
    60bc:	1fffcdd0 	.word	0x1fffcdd0
    60c0:	1fffcec4 	.word	0x1fffcec4
    60c4:	1fffcd40 	.word	0x1fffcd40
    60c8:	1fff91d0 	.word	0x1fff91d0
    60cc:	1fffcef0 	.word	0x1fffcef0
    60d0:	1fff91e0 	.word	0x1fff91e0
    60d4:	1fffd0e4 	.word	0x1fffd0e4
    60d8:	1fff91d8 	.word	0x1fff91d8
    60dc:	1fff91d4 	.word	0x1fff91d4
    60e0:	1fff91dc 	.word	0x1fff91dc
    60e4:	1fff8850 	.word	0x1fff8850
    60e8:	1fff8830 	.word	0x1fff8830
    60ec:	447a0000 	.word	0x447a0000
    60f0:	a2cd00ff 	.word	0xa2cd00ff
    60f4:	1fff8a04 	.word	0x1fff8a04
    60f8:	00014b84 	.word	0x00014b84

000060fc <handleVictronLynx()>:
void handleVictronLynx() {
    60fc:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    60fe:	4b17      	ldr	r3, [pc, #92]	; (615c <handleVictronLynx()+0x60>)
    6100:	7b1a      	ldrb	r2, [r3, #12]
    6102:	7adb      	ldrb	r3, [r3, #11]
    6104:	ea02 0103 	and.w	r1, r2, r3
    6108:	29ff      	cmp	r1, #255	; 0xff
    610a:	d012      	beq.n	6132 <handleVictronLynx()+0x36>
  current |= inMsg.buf[3];
    610c:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  if (settings.cursens == Canbus) {
    6110:	4b13      	ldr	r3, [pc, #76]	; (6160 <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    6112:	4c14      	ldr	r4, [pc, #80]	; (6164 <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus) {
    6114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
  CANmilliamps = current * 100;
    6118:	b200      	sxth	r0, r0
    611a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    611e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    6122:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus) {
    6124:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    6126:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus) {
    6128:	d011      	beq.n	614e <handleVictronLynx()+0x52>
  if (candebug == 1) {
    612a:	4b0f      	ldr	r3, [pc, #60]	; (6168 <handleVictronLynx()+0x6c>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	2b01      	cmp	r3, #1
    6130:	d000      	beq.n	6134 <handleVictronLynx()+0x38>
}
    6132:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    6134:	480d      	ldr	r0, [pc, #52]	; (616c <handleVictronLynx()+0x70>)
    6136:	f003 f849 	bl	91cc <Print::println()>
    Serial.print(CANmilliamps);
    613a:	6821      	ldr	r1, [r4, #0]
    613c:	480b      	ldr	r0, [pc, #44]	; (616c <handleVictronLynx()+0x70>)
    613e:	f003 f83d 	bl	91bc <Print::print(long)>
}
    6142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6146:	480a      	ldr	r0, [pc, #40]	; (6170 <handleVictronLynx()+0x74>)
    6148:	2103      	movs	r1, #3
    614a:	f005 bd83 	b.w	bc54 <usb_serial_write>
    RawCur = CANmilliamps;
    614e:	f006 fc0d 	bl	c96c <__aeabi_i2f>
    6152:	4d08      	ldr	r5, [pc, #32]	; (6174 <handleVictronLynx()+0x78>)
    6154:	6028      	str	r0, [r5, #0]
    getcurrent();
    6156:	f7fb fec5 	bl	1ee4 <getcurrent()>
    615a:	e7e6      	b.n	612a <handleVictronLynx()+0x2e>
    615c:	1fffcce8 	.word	0x1fffcce8
    6160:	1fffcde8 	.word	0x1fffcde8
    6164:	1fff9188 	.word	0x1fff9188
    6168:	1fffcb38 	.word	0x1fffcb38
    616c:	1fff8a04 	.word	0x1fff8a04
    6170:	00014a50 	.word	0x00014a50
    6174:	1fff91ac 	.word	0x1fff91ac

00006178 <canread()>:
void canread() {
    6178:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    617a:	4c81      	ldr	r4, [pc, #516]	; (6380 <canread()+0x208>)
  if (settings.cursens == Canbus) {
    617c:	4d81      	ldr	r5, [pc, #516]	; (6384 <canread()+0x20c>)
  Can0.read(inMsg);
    617e:	4882      	ldr	r0, [pc, #520]	; (6388 <canread()+0x210>)
void canread() {
    6180:	b083      	sub	sp, #12
  Can0.read(inMsg);
    6182:	4621      	mov	r1, r4
    6184:	f001 fe96 	bl	7eb4 <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    6188:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    618c:	2b02      	cmp	r3, #2
    618e:	d01d      	beq.n	61cc <canread()+0x54>
  if (inMsg.id > 0x99 && inMsg.id < 0x160)  //do VW BMS magic if ids are ones identified to be modules
    6190:	6823      	ldr	r3, [r4, #0]
    6192:	f1a3 029a 	sub.w	r2, r3, #154	; 0x9a
    6196:	2ac5      	cmp	r2, #197	; 0xc5
    6198:	d82e      	bhi.n	61f8 <canread()+0x80>
    if (candebug == 1 && debug == 1) {
    619a:	4b7c      	ldr	r3, [pc, #496]	; (638c <canread()+0x214>)
    619c:	4e7c      	ldr	r6, [pc, #496]	; (6390 <canread()+0x218>)
    619e:	681b      	ldr	r3, [r3, #0]
    61a0:	2b01      	cmp	r3, #1
    61a2:	d103      	bne.n	61ac <canread()+0x34>
    61a4:	6832      	ldr	r2, [r6, #0]
    61a6:	2a01      	cmp	r2, #1
    61a8:	f000 80bf 	beq.w	632a <canread()+0x1b2>
      bms.decodecan(inMsg, 0);  //do VW BMS if ids are ones identified to be modules
    61ac:	4974      	ldr	r1, [pc, #464]	; (6380 <canread()+0x208>)
    61ae:	4879      	ldr	r0, [pc, #484]	; (6394 <canread()+0x21c>)
    61b0:	2200      	movs	r2, #0
    61b2:	f7fa fcd3 	bl	b5c <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0xFF0) == 0x170)  // Determine if ID is standard (11 bits) or extended (29 bits)
    61b6:	6823      	ldr	r3, [r4, #0]
    61b8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
    61bc:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
    61c0:	d020      	beq.n	6204 <canread()+0x8c>
  if (debug == 1) {
    61c2:	6833      	ldr	r3, [r6, #0]
    61c4:	2b01      	cmp	r3, #1
    61c6:	d02e      	beq.n	6226 <canread()+0xae>
}
    61c8:	b003      	add	sp, #12
    61ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (settings.curcan == 1) {
    61cc:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    61d0:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1) {
    61d2:	2a01      	cmp	r2, #1
    61d4:	f000 8094 	beq.w	6300 <canread()+0x188>
    if (settings.curcan == 2) {
    61d8:	2a02      	cmp	r2, #2
    61da:	f000 8086 	beq.w	62ea <canread()+0x172>
    if (settings.curcan == 3) {
    61de:	2a03      	cmp	r2, #3
    61e0:	d061      	beq.n	62a6 <canread()+0x12e>
    if (settings.curcan == 4) {
    61e2:	2a04      	cmp	r2, #4
    61e4:	d1d5      	bne.n	6192 <canread()+0x1a>
  if ((canId & 0x10000000) == 0x10000000) {
    61e6:	00d9      	lsls	r1, r3, #3
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    61e8:	4a6b      	ldr	r2, [pc, #428]	; (6398 <canread()+0x220>)
  if ((canId & 0x10000000) == 0x10000000) {
    61ea:	f140 8094 	bpl.w	6316 <canread()+0x19e>
    return (canId & 0x03FFFF00) >> 8;
    61ee:	f3c3 2111 	ubfx	r1, r3, #8, #18
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    61f2:	4291      	cmp	r1, r2
    61f4:	f000 8092 	beq.w	631c <canread()+0x1a4>
  if ((inMsg.id & 0xFF0) == 0x170)  // Determine if ID is standard (11 bits) or extended (29 bits)
    61f8:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
    61fc:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
    6200:	4e63      	ldr	r6, [pc, #396]	; (6390 <canread()+0x218>)
    6202:	d1de      	bne.n	61c2 <canread()+0x4a>
    if (candebug == 1 && debug == 1) {
    6204:	4b61      	ldr	r3, [pc, #388]	; (638c <canread()+0x214>)
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    6206:	495e      	ldr	r1, [pc, #376]	; (6380 <canread()+0x208>)
    if (candebug == 1 && debug == 1) {
    6208:	681b      	ldr	r3, [r3, #0]
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    620a:	4862      	ldr	r0, [pc, #392]	; (6394 <canread()+0x21c>)
    if (candebug == 1 && debug == 1) {
    620c:	2b01      	cmp	r3, #1
      bms.decodetemp(inMsg, 1, settings.CSCvariant);
    620e:	f895 30ce 	ldrb.w	r3, [r5, #206]	; 0xce
    if (candebug == 1 && debug == 1) {
    6212:	d102      	bne.n	621a <canread()+0xa2>
    6214:	6832      	ldr	r2, [r6, #0]
    6216:	2a01      	cmp	r2, #1
    6218:	d000      	beq.n	621c <canread()+0xa4>
      bms.decodetemp(inMsg, 0, settings.CSCvariant);
    621a:	2200      	movs	r2, #0
    621c:	f7fa fc7a 	bl	b14 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if (debug == 1) {
    6220:	6833      	ldr	r3, [r6, #0]
    6222:	2b01      	cmp	r3, #1
    6224:	d1d0      	bne.n	61c8 <canread()+0x50>
    if (candebug == 1) {
    6226:	4b59      	ldr	r3, [pc, #356]	; (638c <canread()+0x214>)
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	2b01      	cmp	r3, #1
    622c:	d1cc      	bne.n	61c8 <canread()+0x50>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    622e:	4b5b      	ldr	r3, [pc, #364]	; (639c <canread()+0x224>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    6230:	485b      	ldr	r0, [pc, #364]	; (63a0 <canread()+0x228>)
    6232:	681b      	ldr	r3, [r3, #0]
    6234:	9301      	str	r3, [sp, #4]
	return ret;
    6236:	9901      	ldr	r1, [sp, #4]
    6238:	2300      	movs	r3, #0
    623a:	220a      	movs	r2, #10
    623c:	f002 ffde 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    6240:	6822      	ldr	r2, [r4, #0]
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6242:	79e3      	ldrb	r3, [r4, #7]
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    6244:	4857      	ldr	r0, [pc, #348]	; (63a4 <canread()+0x22c>)
      if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    6246:	2a00      	cmp	r2, #0
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    6248:	bfb6      	itet	lt
    624a:	4957      	ldrlt	r1, [pc, #348]	; (63a8 <canread()+0x230>)
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    624c:	4957      	ldrge	r1, [pc, #348]	; (63ac <canread()+0x234>)
        sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    624e:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
        sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    6252:	f007 fb7f 	bl	d954 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    6256:	4853      	ldr	r0, [pc, #332]	; (63a4 <canread()+0x22c>)
    6258:	f007 fd92 	bl	dd80 <strlen>
    625c:	4601      	mov	r1, r0
    625e:	4851      	ldr	r0, [pc, #324]	; (63a4 <canread()+0x22c>)
    6260:	f005 fcf8 	bl	bc54 <usb_serial_write>
      if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    6264:	6825      	ldr	r5, [r4, #0]
    6266:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    626a:	d164      	bne.n	6336 <canread()+0x1be>
        for (byte i = 0; i < inMsg.len; i++) {
    626c:	79e3      	ldrb	r3, [r4, #7]
    626e:	b1a3      	cbz	r3, 629a <canread()+0x122>
          sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    6270:	4f4f      	ldr	r7, [pc, #316]	; (63b0 <canread()+0x238>)
    6272:	4e4c      	ldr	r6, [pc, #304]	; (63a4 <canread()+0x22c>)
    6274:	462b      	mov	r3, r5
    6276:	4423      	add	r3, r4
    6278:	4639      	mov	r1, r7
    627a:	7a1a      	ldrb	r2, [r3, #8]
    627c:	4630      	mov	r0, r6
    627e:	f007 fb69 	bl	d954 <sprintf>
    6282:	4630      	mov	r0, r6
    6284:	f007 fd7c 	bl	dd80 <strlen>
    6288:	4601      	mov	r1, r0
    628a:	4630      	mov	r0, r6
    628c:	f005 fce2 	bl	bc54 <usb_serial_write>
        for (byte i = 0; i < inMsg.len; i++) {
    6290:	3501      	adds	r5, #1
    6292:	79e2      	ldrb	r2, [r4, #7]
    6294:	b2eb      	uxtb	r3, r5
    6296:	429a      	cmp	r2, r3
    6298:	d8ed      	bhi.n	6276 <canread()+0xfe>
      Serial.println();
    629a:	4841      	ldr	r0, [pc, #260]	; (63a0 <canread()+0x228>)
}
    629c:	b003      	add	sp, #12
    629e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      Serial.println();
    62a2:	f002 bf93 	b.w	91cc <Print::println()>
      switch (inMsg.id) {
    62a6:	f240 5222 	movw	r2, #1314	; 0x522
    62aa:	4293      	cmp	r3, r2
    62ac:	d05f      	beq.n	636e <canread()+0x1f6>
    62ae:	f240 5223 	movw	r2, #1315	; 0x523
    62b2:	4293      	cmp	r3, r2
    62b4:	d052      	beq.n	635c <canread()+0x1e4>
    62b6:	f240 5221 	movw	r2, #1313	; 0x521
    62ba:	4293      	cmp	r3, r2
    62bc:	f47f af69 	bne.w	6192 <canread()+0x1a>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    62c0:	89a2      	ldrh	r2, [r4, #12]
    62c2:	8960      	ldrh	r0, [r4, #10]
    62c4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    62c8:	4a3a      	ldr	r2, [pc, #232]	; (63b4 <canread()+0x23c>)
    62ca:	ba00      	rev	r0, r0
    62cc:	6010      	str	r0, [r2, #0]
          if (settings.cursens == Canbus) {
    62ce:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
    62d2:	2a02      	cmp	r2, #2
    62d4:	d190      	bne.n	61f8 <canread()+0x80>
            RawCur = CANmilliamps;
    62d6:	f006 fb49 	bl	c96c <__aeabi_i2f>
    62da:	4e37      	ldr	r6, [pc, #220]	; (63b8 <canread()+0x240>)
    62dc:	6030      	str	r0, [r6, #0]
            getcurrent();
    62de:	f7fb fe01 	bl	1ee4 <getcurrent()>
    if (settings.curcan == 4) {
    62e2:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    62e6:	6823      	ldr	r3, [r4, #0]
    62e8:	e77b      	b.n	61e2 <canread()+0x6a>
      switch (inMsg.id) {
    62ea:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
    62ee:	2a02      	cmp	r2, #2
    62f0:	f63f af4f 	bhi.w	6192 <canread()+0x1a>
          CAB500();
    62f4:	f7fe ffbc 	bl	5270 <CAB500()>
    if (settings.curcan == 3) {
    62f8:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    62fc:	6823      	ldr	r3, [r4, #0]
          break;
    62fe:	e76e      	b.n	61de <canread()+0x66>
      switch (inMsg.id) {
    6300:	f5a3 7270 	sub.w	r2, r3, #960	; 0x3c0
    6304:	2a02      	cmp	r2, #2
    6306:	f63f af44 	bhi.w	6192 <canread()+0x1a>
          CAB300();
    630a:	f7fe ff6d 	bl	51e8 <CAB300()>
    if (settings.curcan == 2) {
    630e:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    6312:	6823      	ldr	r3, [r4, #0]
          break;
    6314:	e760      	b.n	61d8 <canread()+0x60>
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    6316:	4293      	cmp	r3, r2
    6318:	f47f af3b 	bne.w	6192 <canread()+0x1a>
    631c:	7a22      	ldrb	r2, [r4, #8]
    631e:	2a00      	cmp	r2, #0
    6320:	f47f af37 	bne.w	6192 <canread()+0x1a>
        handleVictronLynx();
    6324:	f7ff feea 	bl	60fc <handleVictronLynx()>
    6328:	e732      	b.n	6190 <canread()+0x18>
      bms.decodecan(inMsg, 1);  //do VW BMS if ids are ones identified to be modules
    632a:	4915      	ldr	r1, [pc, #84]	; (6380 <canread()+0x208>)
    632c:	4819      	ldr	r0, [pc, #100]	; (6394 <canread()+0x21c>)
    632e:	f7fa fc15 	bl	b5c <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0xFF0) == 0x170)  // Determine if ID is standard (11 bits) or extended (29 bits)
    6332:	6823      	ldr	r3, [r4, #0]
      bms.decodecan(inMsg, 1);  //do VW BMS if ids are ones identified to be modules
    6334:	e740      	b.n	61b8 <canread()+0x40>
        sprintf(msgString, " REMOTE REQUEST FRAME");
    6336:	4d21      	ldr	r5, [pc, #132]	; (63bc <canread()+0x244>)
    6338:	4c1a      	ldr	r4, [pc, #104]	; (63a4 <canread()+0x22c>)
    633a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    633c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    633e:	e895 0003 	ldmia.w	r5, {r0, r1}
    6342:	f844 0b04 	str.w	r0, [r4], #4
    6346:	4620      	mov	r0, r4
    6348:	f820 1914 	strh.w	r1, [r0], #-20
    634c:	f007 fd18 	bl	dd80 <strlen>
    6350:	4601      	mov	r1, r0
    6352:	f1a4 0014 	sub.w	r0, r4, #20
    6356:	f005 fc7d 	bl	bc54 <usb_serial_write>
    635a:	e79e      	b.n	629a <canread()+0x122>
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    635c:	89a1      	ldrh	r1, [r4, #12]
    635e:	8962      	ldrh	r2, [r4, #10]
    6360:	4e0b      	ldr	r6, [pc, #44]	; (6390 <canread()+0x218>)
    6362:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    6366:	4916      	ldr	r1, [pc, #88]	; (63c0 <canread()+0x248>)
    6368:	ba12      	rev	r2, r2
    636a:	600a      	str	r2, [r1, #0]
          break;
    636c:	e724      	b.n	61b8 <canread()+0x40>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    636e:	89a1      	ldrh	r1, [r4, #12]
    6370:	8962      	ldrh	r2, [r4, #10]
    6372:	4e07      	ldr	r6, [pc, #28]	; (6390 <canread()+0x218>)
    6374:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    6378:	4912      	ldr	r1, [pc, #72]	; (63c4 <canread()+0x24c>)
    637a:	ba12      	rev	r2, r2
    637c:	600a      	str	r2, [r1, #0]
          break;
    637e:	e71b      	b.n	61b8 <canread()+0x40>
    6380:	1fffcce8 	.word	0x1fffcce8
    6384:	1fffcde8 	.word	0x1fffcde8
    6388:	1fffcef0 	.word	0x1fffcef0
    638c:	1fffcb38 	.word	0x1fffcb38
    6390:	1fff8850 	.word	0x1fff8850
    6394:	1fff91e0 	.word	0x1fff91e0
    6398:	0001f214 	.word	0x0001f214
    639c:	1fffd0e4 	.word	0x1fffd0e4
    63a0:	1fff8a04 	.word	0x1fff8a04
    63a4:	1fffcd50 	.word	0x1fffcd50
    63a8:	00014b98 	.word	0x00014b98
    63ac:	00014bc0 	.word	0x00014bc0
    63b0:	00014bec 	.word	0x00014bec
    63b4:	1fff9188 	.word	0x1fff9188
    63b8:	1fff91ac 	.word	0x1fff91ac
    63bc:	00014bd4 	.word	0x00014bd4
    63c0:	1fffced4 	.word	0x1fffced4
    63c4:	1fffced0 	.word	0x1fffced0

000063c8 <loop>:
void loop() {
    63c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    63cc:	4c98      	ldr	r4, [pc, #608]	; (6630 <loop+0x268>)
void loop() {
    63ce:	b09b      	sub	sp, #108	; 0x6c
  while (Can0.available()) {
    63d0:	e001      	b.n	63d6 <loop+0xe>
    canread();
    63d2:	f7ff fed1 	bl	6178 <canread()>
  while (Can0.available()) {
    63d6:	4620      	mov	r0, r4
    63d8:	f001 fd3a 	bl	7e50 <FlexCAN::available()>
    63dc:	2800      	cmp	r0, #0
    63de:	d1f8      	bne.n	63d2 <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    63e0:	f005 fc06 	bl	bbf0 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    63e4:	2800      	cmp	r0, #0
    63e6:	dd01      	ble.n	63ec <loop+0x24>
    menu();
    63e8:	f7fc ffe2 	bl	33b0 <menu()>
  if (outputcheck != 1) {
    63ec:	4e91      	ldr	r6, [pc, #580]	; (6634 <loop+0x26c>)
    if (settings.ESSmode == 1) {
    63ee:	4d92      	ldr	r5, [pc, #584]	; (6638 <loop+0x270>)
  if (outputcheck != 1) {
    63f0:	6833      	ldr	r3, [r6, #0]
    63f2:	2b01      	cmp	r3, #1
    63f4:	d142      	bne.n	647c <loop+0xb4>
    63f6:	4c91      	ldr	r4, [pc, #580]	; (663c <loop+0x274>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    63f8:	6823      	ldr	r3, [r4, #0]
  if (millis() - commandtime > commandrate) {
    63fa:	4a91      	ldr	r2, [pc, #580]	; (6640 <loop+0x278>)
    63fc:	4991      	ldr	r1, [pc, #580]	; (6644 <loop+0x27c>)
    63fe:	930c      	str	r3, [sp, #48]	; 0x30
	return ret;
    6400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6402:	6810      	ldr	r0, [r2, #0]
    6404:	8809      	ldrh	r1, [r1, #0]
    6406:	1a1b      	subs	r3, r3, r0
    6408:	428b      	cmp	r3, r1
    640a:	f200 80a9 	bhi.w	6560 <loop+0x198>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    640e:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime > 500) {
    6410:	4a8d      	ldr	r2, [pc, #564]	; (6648 <loop+0x280>)
    6412:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    6414:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6416:	6811      	ldr	r1, [r2, #0]
    6418:	1a5b      	subs	r3, r3, r1
    641a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    641e:	d841      	bhi.n	64a4 <loop+0xdc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6420:	6823      	ldr	r3, [r4, #0]
  if (millis() - cleartime > 5000) {
    6422:	4e8a      	ldr	r6, [pc, #552]	; (664c <loop+0x284>)
    6424:	9316      	str	r3, [sp, #88]	; 0x58
    6426:	6832      	ldr	r2, [r6, #0]
	return ret;
    6428:	9b16      	ldr	r3, [sp, #88]	; 0x58
    642a:	1a9b      	subs	r3, r3, r2
    642c:	f241 3288 	movw	r2, #5000	; 0x1388
    6430:	4293      	cmp	r3, r2
    6432:	d908      	bls.n	6446 <loop+0x7e>
    if (SOCset == 1) {
    6434:	4b86      	ldr	r3, [pc, #536]	; (6650 <loop+0x288>)
    6436:	681b      	ldr	r3, [r3, #0]
    6438:	2b01      	cmp	r3, #1
    643a:	f000 80ef 	beq.w	661c <loop+0x254>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    643e:	6823      	ldr	r3, [r4, #0]
    6440:	9317      	str	r3, [sp, #92]	; 0x5c
	return ret;
    6442:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    cleartime = millis();
    6444:	6033      	str	r3, [r6, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6446:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    6448:	4a82      	ldr	r2, [pc, #520]	; (6654 <loop+0x28c>)
    644a:	9318      	str	r3, [sp, #96]	; 0x60
    644c:	6811      	ldr	r1, [r2, #0]
	return ret;
    644e:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6450:	1a5b      	subs	r3, r3, r1
    6452:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
    6456:	428b      	cmp	r3, r1
    6458:	d90d      	bls.n	6476 <loop+0xae>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    645a:	6823      	ldr	r3, [r4, #0]
    645c:	9319      	str	r3, [sp, #100]	; 0x64
    if (settings.ESSmode == 1) {
    645e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
	return ret;
    6462:	9919      	ldr	r1, [sp, #100]	; 0x64
    looptime1 = millis();
    6464:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    6466:	2b01      	cmp	r3, #1
    6468:	f000 80d3 	beq.w	6612 <loop+0x24a>
      if (bmsstatus == Charge) {
    646c:	4b7a      	ldr	r3, [pc, #488]	; (6658 <loop+0x290>)
    646e:	781b      	ldrb	r3, [r3, #0]
    6470:	2b03      	cmp	r3, #3
    6472:	f000 80ce 	beq.w	6612 <loop+0x24a>
}
    6476:	b01b      	add	sp, #108	; 0x6c
    6478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    647c:	f7fc f9c2 	bl	2804 <contcon()>
    if (settings.ESSmode == 1) {
    6480:	f8d5 40ac 	ldr.w	r4, [r5, #172]	; 0xac
      if (bmsstatus != Error && bmsstatus != Boot) {
    6484:	4f74      	ldr	r7, [pc, #464]	; (6658 <loop+0x290>)
    if (settings.ESSmode == 1) {
    6486:	2c01      	cmp	r4, #1
      if (bmsstatus != Error && bmsstatus != Boot) {
    6488:	783b      	ldrb	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    648a:	f000 813c 	beq.w	6706 <loop+0x33e>
      switch (bmsstatus) {
    648e:	2b05      	cmp	r3, #5
    6490:	f200 8087 	bhi.w	65a2 <loop+0x1da>
    6494:	e8df f013 	tbh	[pc, r3, lsl #1]
    6498:	0276020e 	.word	0x0276020e
    649c:	02da02b6 	.word	0x02da02b6
    64a0:	022702fc 	.word	0x022702fc
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    64a4:	6823      	ldr	r3, [r4, #0]
    64a6:	930f      	str	r3, [sp, #60]	; 0x3c
	return ret;
    64a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bms.getAllVoltTemp();
    64aa:	486c      	ldr	r0, [pc, #432]	; (665c <loop+0x294>)
    looptime = millis();
    64ac:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    64ae:	f7fa fba9 	bl	c04 <BMSModuleManager::getAllVoltTemp()>
    if (settings.ESSmode == 1) {
    64b2:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
      if (SOCset != 0) {
    64b6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 6650 <loop+0x288>
    if (settings.ESSmode == 1) {
    64ba:	2b01      	cmp	r3, #1
      if (SOCset != 0) {
    64bc:	f8d8 3000 	ldr.w	r3, [r8]
    if (settings.ESSmode == 1) {
    64c0:	f000 81a0 	beq.w	6804 <loop+0x43c>
      if (SOCset != 0) {
    64c4:	2b00      	cmp	r3, #0
    64c6:	f040 80e3 	bne.w	6690 <loop+0x2c8>
    if (debug != 0) {
    64ca:	f8df 9194 	ldr.w	r9, [pc, #404]	; 6660 <loop+0x298>
    64ce:	f8d9 3000 	ldr.w	r3, [r9]
    64d2:	2b00      	cmp	r3, #0
    64d4:	d17d      	bne.n	65d2 <loop+0x20a>
    if (CSVdebug != 0) {
    64d6:	4f63      	ldr	r7, [pc, #396]	; (6664 <loop+0x29c>)
    64d8:	683b      	ldr	r3, [r7, #0]
    64da:	2b00      	cmp	r3, #0
    64dc:	f040 8087 	bne.w	65ee <loop+0x226>
    if (inputcheck != 0) {
    64e0:	4b61      	ldr	r3, [pc, #388]	; (6668 <loop+0x2a0>)
    64e2:	681b      	ldr	r3, [r3, #0]
    64e4:	2b00      	cmp	r3, #0
    64e6:	f040 8091 	bne.w	660c <loop+0x244>
    if (outputcheck != 0) {
    64ea:	6833      	ldr	r3, [r6, #0]
    64ec:	2b00      	cmp	r3, #0
    64ee:	d163      	bne.n	65b8 <loop+0x1f0>
      gaugeupdate();
    64f0:	f7fb f9e4 	bl	18bc <gaugeupdate()>
    updateSOC();
    64f4:	f7fb ffc8 	bl	2488 <updateSOC()>
    currentlimit();
    64f8:	f7fe ff14 	bl	5324 <currentlimit()>
    if (SOCset != 0) {
    64fc:	f8d8 3000 	ldr.w	r3, [r8]
    6500:	2b00      	cmp	r3, #0
    6502:	d163      	bne.n	65cc <loop+0x204>
    if (cellspresent == 0 && millis() > 3000) {
    6504:	4e59      	ldr	r6, [pc, #356]	; (666c <loop+0x2a4>)
    VEcan();
    6506:	f7fc fb37 	bl	2b78 <VEcan()>
    if (cellspresent == 0 && millis() > 3000) {
    650a:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    650c:	4853      	ldr	r0, [pc, #332]	; (665c <loop+0x294>)
    if (cellspresent == 0 && millis() > 3000) {
    650e:	b93b      	cbnz	r3, 6520 <loop+0x158>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6510:	6823      	ldr	r3, [r4, #0]
    6512:	9315      	str	r3, [sp, #84]	; 0x54
	return ret;
    6514:	9a15      	ldr	r2, [sp, #84]	; 0x54
    6516:	f640 33b8 	movw	r3, #3000	; 0xbb8
    651a:	429a      	cmp	r2, r3
    651c:	f200 8197 	bhi.w	684e <loop+0x486>
      if (cellspresent != bms.seriescells())  //detect a fault in cells detected
    6520:	f7fa fab0 	bl	a84 <BMSModuleManager::seriescells()>
    6524:	6833      	ldr	r3, [r6, #0]
    6526:	4298      	cmp	r0, r3
    6528:	f000 8186 	beq.w	6838 <loop+0x470>
        if (debug != 0) {
    652c:	f8d9 3000 	ldr.w	r3, [r9]
    6530:	2b00      	cmp	r3, #0
    6532:	f040 8198 	bne.w	6866 <loop+0x49e>
        bmsstatus = Error;
    6536:	4b48      	ldr	r3, [pc, #288]	; (6658 <loop+0x290>)
    6538:	2205      	movs	r2, #5
    653a:	701a      	strb	r2, [r3, #0]
        ErrorReason = 3;
    653c:	4b4c      	ldr	r3, [pc, #304]	; (6670 <loop+0x2a8>)
    653e:	2203      	movs	r2, #3
    6540:	601a      	str	r2, [r3, #0]
    if (CSVdebug != 1) {
    6542:	683b      	ldr	r3, [r7, #0]
    6544:	2b01      	cmp	r3, #1
    6546:	d001      	beq.n	654c <loop+0x184>
      dashupdate();
    6548:	f7ff f94a 	bl	57e0 <dashupdate()>
  noInterrupts();  //   No - reset WDT
    654c:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    654e:	4b49      	ldr	r3, [pc, #292]	; (6674 <loop+0x2ac>)
    6550:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    6554:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    6558:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    655a:	819a      	strh	r2, [r3, #12]
  interrupts();
    655c:	b662      	cpsie	i
}
    655e:	e75f      	b.n	6420 <loop+0x58>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6560:	6823      	ldr	r3, [r4, #0]
    6562:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    6564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    commandtime = millis();
    6566:	6013      	str	r3, [r2, #0]
    sendcommand();
    6568:	f7ff fcb8 	bl	5edc <sendcommand()>
    656c:	e74f      	b.n	640e <loop+0x46>
        Discharge = 0;
    656e:	4b42      	ldr	r3, [pc, #264]	; (6678 <loop+0x2b0>)
    6570:	2400      	movs	r4, #0
        digitalWrite(OUT4, LOW);
    6572:	4621      	mov	r1, r4
    6574:	2015      	movs	r0, #21
        Discharge = 0;
    6576:	601c      	str	r4, [r3, #0]
        digitalWrite(OUT4, LOW);
    6578:	f003 fcfa 	bl	9f70 <digitalWrite>
        digitalWrite(OUT3, LOW);  //turn off charger
    657c:	4621      	mov	r1, r4
    657e:	2014      	movs	r0, #20
    6580:	f003 fcf6 	bl	9f70 <digitalWrite>
        digitalWrite(OUT2, LOW);
    6584:	4621      	mov	r1, r4
    6586:	200c      	movs	r0, #12
    6588:	f003 fcf2 	bl	9f70 <digitalWrite>
        digitalWrite(OUT1, LOW);  //turn off discharge
    658c:	4621      	mov	r1, r4
    658e:	200b      	movs	r0, #11
    6590:	f003 fcee 	bl	9f70 <digitalWrite>
        contctrl = 0;             //turn off out 5 and 6
    6594:	4b39      	ldr	r3, [pc, #228]	; (667c <loop+0x2b4>)
    6596:	601c      	str	r4, [r3, #0]
        if (SOCset == 1) {
    6598:	4b2d      	ldr	r3, [pc, #180]	; (6650 <loop+0x288>)
    659a:	6819      	ldr	r1, [r3, #0]
    659c:	2901      	cmp	r1, #1
    659e:	f000 8285 	beq.w	6aac <loop+0x6e4>
    65a2:	4c26      	ldr	r4, [pc, #152]	; (663c <loop+0x274>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    65a4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
    65a8:	f023 0302 	bic.w	r3, r3, #2
    65ac:	2b01      	cmp	r3, #1
    65ae:	f47f af23 	bne.w	63f8 <loop+0x30>
      getcurrent();
    65b2:	f7fb fc97 	bl	1ee4 <getcurrent()>
    65b6:	e71f      	b.n	63f8 <loop+0x30>
      outputdebug();
    65b8:	f7ff f8bc 	bl	5734 <outputdebug()>
    updateSOC();
    65bc:	f7fb ff64 	bl	2488 <updateSOC()>
    currentlimit();
    65c0:	f7fe feb0 	bl	5324 <currentlimit()>
    if (SOCset != 0) {
    65c4:	f8d8 3000 	ldr.w	r3, [r8]
    65c8:	2b00      	cmp	r3, #0
    65ca:	d09b      	beq.n	6504 <loop+0x13c>
      alarmupdate();
    65cc:	f7fb f8e2 	bl	1794 <alarmupdate()>
    65d0:	e798      	b.n	6504 <loop+0x13c>
      printbmsstat();
    65d2:	f7fb fa31 	bl	1a38 <printbmsstat()>
      bms.printPackDetails(debugdigits, settings.CSCvariant);
    65d6:	4b2a      	ldr	r3, [pc, #168]	; (6680 <loop+0x2b8>)
    if (CSVdebug != 0) {
    65d8:	4f22      	ldr	r7, [pc, #136]	; (6664 <loop+0x29c>)
      bms.printPackDetails(debugdigits, settings.CSCvariant);
    65da:	6819      	ldr	r1, [r3, #0]
    65dc:	f895 20ce 	ldrb.w	r2, [r5, #206]	; 0xce
    65e0:	481e      	ldr	r0, [pc, #120]	; (665c <loop+0x294>)
    65e2:	f7fa fcd9 	bl	f98 <BMSModuleManager::printPackDetails(int, int)>
    if (CSVdebug != 0) {
    65e6:	683b      	ldr	r3, [r7, #0]
    65e8:	2b00      	cmp	r3, #0
    65ea:	f43f af79 	beq.w	64e0 <loop+0x118>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    65ee:	6823      	ldr	r3, [r4, #0]
    65f0:	9314      	str	r3, [sp, #80]	; 0x50
      bms.printAllCSV(millis(), currentact, SOC);
    65f2:	4a24      	ldr	r2, [pc, #144]	; (6684 <loop+0x2bc>)
    65f4:	4b24      	ldr	r3, [pc, #144]	; (6688 <loop+0x2c0>)
	return ret;
    65f6:	9914      	ldr	r1, [sp, #80]	; 0x50
    65f8:	681b      	ldr	r3, [r3, #0]
    65fa:	6812      	ldr	r2, [r2, #0]
    65fc:	4817      	ldr	r0, [pc, #92]	; (665c <loop+0x294>)
    65fe:	f7fa fe7b 	bl	12f8 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    if (inputcheck != 0) {
    6602:	4b19      	ldr	r3, [pc, #100]	; (6668 <loop+0x2a0>)
    6604:	681b      	ldr	r3, [r3, #0]
    6606:	2b00      	cmp	r3, #0
    6608:	f43f af6f 	beq.w	64ea <loop+0x122>
      inputdebug();
    660c:	f7ff f82c 	bl	5668 <inputdebug()>
    6610:	e76b      	b.n	64ea <loop+0x122>
}
    6612:	b01b      	add	sp, #108	; 0x6c
    6614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    6618:	f7ff ba92 	b.w	5b40 <chargercomms()>
      if (bms.checkcomms()) {
    661c:	480f      	ldr	r0, [pc, #60]	; (665c <loop+0x294>)
    661e:	f7fa f9f9 	bl	a14 <BMSModuleManager::checkcomms()>
    6622:	2800      	cmp	r0, #0
    6624:	f000 8132 	beq.w	688c <loop+0x4c4>
        commscount = 0;
    6628:	4b18      	ldr	r3, [pc, #96]	; (668c <loop+0x2c4>)
    662a:	2200      	movs	r2, #0
    662c:	701a      	strb	r2, [r3, #0]
    662e:	e706      	b.n	643e <loop+0x76>
    6630:	1fffcef0 	.word	0x1fffcef0
    6634:	1fffcdd4 	.word	0x1fffcdd4
    6638:	1fffcde8 	.word	0x1fffcde8
    663c:	1fffd0e4 	.word	0x1fffd0e4
    6640:	1fffcb50 	.word	0x1fffcb50
    6644:	1fff884c 	.word	0x1fff884c
    6648:	1fffcd0c 	.word	0x1fffcd0c
    664c:	1fffcb4c 	.word	0x1fffcb4c
    6650:	1fff91b4 	.word	0x1fff91b4
    6654:	1fffcd10 	.word	0x1fffcd10
    6658:	1fffcb34 	.word	0x1fffcb34
    665c:	1fff91e0 	.word	0x1fff91e0
    6660:	1fff8850 	.word	0x1fff8850
    6664:	1fff9190 	.word	0x1fff9190
    6668:	1fffcd00 	.word	0x1fffcd00
    666c:	1fffcb3c 	.word	0x1fffcb3c
    6670:	1fff919c 	.word	0x1fff919c
    6674:	40052000 	.word	0x40052000
    6678:	1fff9198 	.word	0x1fff9198
    667c:	1fffcbb8 	.word	0x1fffcbb8
    6680:	1fff8854 	.word	0x1fff8854
    6684:	1fffcccc 	.word	0x1fffcccc
    6688:	1fff8828 	.word	0x1fff8828
    668c:	1fffcb54 	.word	0x1fffcb54
        if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    6690:	48ab      	ldr	r0, [pc, #684]	; (6940 <loop+0x578>)
    6692:	f7fa fb7b 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6696:	6929      	ldr	r1, [r5, #16]
    6698:	f006 fb5a 	bl	cd50 <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    669c:	6823      	ldr	r3, [r4, #0]
    669e:	2800      	cmp	r0, #0
    66a0:	f000 81fd 	beq.w	6a9e <loop+0x6d6>
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    66a4:	4aa7      	ldr	r2, [pc, #668]	; (6944 <loop+0x57c>)
    66a6:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    66a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
    66aa:	6812      	ldr	r2, [r2, #0]
    66ac:	429a      	cmp	r2, r3
    66ae:	d202      	bcs.n	66b6 <loop+0x2ee>
            bmsstatus = Error;
    66b0:	4ba5      	ldr	r3, [pc, #660]	; (6948 <loop+0x580>)
    66b2:	2205      	movs	r2, #5
    66b4:	701a      	strb	r2, [r3, #0]
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    66b6:	48a2      	ldr	r0, [pc, #648]	; (6940 <loop+0x578>)
    66b8:	f7fa fb8e 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    66bc:	6929      	ldr	r1, [r5, #16]
    66be:	f006 fb47 	bl	cd50 <__aeabi_fcmplt>
    66c2:	2800      	cmp	r0, #0
    66c4:	f000 8259 	beq.w	6b7a <loop+0x7b2>
          bmsstatus = Error;
    66c8:	4b9f      	ldr	r3, [pc, #636]	; (6948 <loop+0x580>)
    66ca:	2205      	movs	r2, #5
    66cc:	701a      	strb	r2, [r3, #0]
        if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    66ce:	489c      	ldr	r0, [pc, #624]	; (6940 <loop+0x578>)
    66d0:	f7fa fb82 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    66d4:	68e9      	ldr	r1, [r5, #12]
    66d6:	f006 fb59 	bl	cd8c <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    66da:	6823      	ldr	r3, [r4, #0]
    66dc:	2800      	cmp	r0, #0
    66de:	f000 823e 	beq.w	6b5e <loop+0x796>
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    66e2:	4a9a      	ldr	r2, [pc, #616]	; (694c <loop+0x584>)
    66e4:	9312      	str	r3, [sp, #72]	; 0x48
	return ret;
    66e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    66e8:	6812      	ldr	r2, [r2, #0]
    66ea:	429a      	cmp	r2, r3
    66ec:	f4bf aeed 	bcs.w	64ca <loop+0x102>
            bmsstatus = Error;
    66f0:	4b95      	ldr	r3, [pc, #596]	; (6948 <loop+0x580>)
    if (debug != 0) {
    66f2:	f8df 925c 	ldr.w	r9, [pc, #604]	; 6950 <loop+0x588>
            bmsstatus = Error;
    66f6:	2205      	movs	r2, #5
    66f8:	701a      	strb	r2, [r3, #0]
    if (debug != 0) {
    66fa:	f8d9 3000 	ldr.w	r3, [r9]
    66fe:	2b00      	cmp	r3, #0
    6700:	f43f aee9 	beq.w	64d6 <loop+0x10e>
    6704:	e765      	b.n	65d2 <loop+0x20a>
      if (bmsstatus != Error && bmsstatus != Boot) {
    6706:	2b05      	cmp	r3, #5
    6708:	f43f af31 	beq.w	656e <loop+0x1a6>
    670c:	2b00      	cmp	r3, #0
    670e:	f43f af2e 	beq.w	656e <loop+0x1a6>
        contctrl = contctrl | 4;  //turn on negative contactor
    6712:	f8df 8240 	ldr.w	r8, [pc, #576]	; 6954 <loop+0x58c>
        if (settings.tripcont != 0) {
    6716:	f895 20cd 	ldrb.w	r2, [r5, #205]	; 0xcd
        contctrl = contctrl | 4;  //turn on negative contactor
    671a:	f8d8 3000 	ldr.w	r3, [r8]
    671e:	f043 0304 	orr.w	r3, r3, #4
    6722:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0) {
    6726:	2a00      	cmp	r2, #0
    6728:	f040 8201 	bne.w	6b2e <loop+0x766>
    672c:	4c8a      	ldr	r4, [pc, #552]	; (6958 <loop+0x590>)
          if (storagemode == 1) {
    672e:	f8df 922c 	ldr.w	r9, [pc, #556]	; 695c <loop+0x594>
        if (digitalRead(IN1) == LOW)  //Key OFF
    6732:	2011      	movs	r0, #17
    6734:	f003 fc42 	bl	9fbc <digitalRead>
          if (storagemode == 1) {
    6738:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)  //Key OFF
    673c:	2800      	cmp	r0, #0
    673e:	f000 81ed 	beq.w	6b1c <loop+0x754>
          if (storagemode == 0) {
    6742:	b913      	cbnz	r3, 674a <loop+0x382>
            storagemode = 1;
    6744:	2301      	movs	r3, #1
    6746:	f8c9 3000 	str.w	r3, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    674a:	487d      	ldr	r0, [pc, #500]	; (6940 <loop+0x578>)
    674c:	f7fa fb44 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6750:	6d29      	ldr	r1, [r5, #80]	; 0x50
    6752:	f006 fb1b 	bl	cd8c <__aeabi_fcmpgt>
    6756:	2800      	cmp	r0, #0
    6758:	f040 8233 	bne.w	6bc2 <loop+0x7fa>
        if (storagemode == 1) {
    675c:	f8d9 9000 	ldr.w	r9, [r9]
    6760:	4b7f      	ldr	r3, [pc, #508]	; (6960 <loop+0x598>)
    6762:	f1b9 0f01 	cmp.w	r9, #1
    6766:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6768:	4875      	ldr	r0, [pc, #468]	; (6940 <loop+0x578>)
        if (storagemode == 1) {
    676a:	f000 8210 	beq.w	6b8e <loop+0x7c6>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    676e:	f7fa fb33 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6772:	68e9      	ldr	r1, [r5, #12]
    6774:	f006 fb0a 	bl	cd8c <__aeabi_fcmpgt>
    6778:	2800      	cmp	r0, #0
    677a:	f000 82b5 	beq.w	6ce8 <loop+0x920>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    677e:	6823      	ldr	r3, [r4, #0]
    6780:	9306      	str	r3, [sp, #24]
            if ((millis() - overtriptimer) > settings.triptime) {
    6782:	4b78      	ldr	r3, [pc, #480]	; (6964 <loop+0x59c>)
    6784:	681a      	ldr	r2, [r3, #0]
	return ret;
    6786:	9b06      	ldr	r3, [sp, #24]
    6788:	1a9b      	subs	r3, r3, r2
    678a:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    678c:	4293      	cmp	r3, r2
    678e:	f200 82f0 	bhi.w	6d72 <loop+0x9aa>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6792:	486b      	ldr	r0, [pc, #428]	; (6940 <loop+0x578>)
    6794:	f7fa fafa 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6798:	6929      	ldr	r1, [r5, #16]
    679a:	f006 fad9 	bl	cd50 <__aeabi_fcmplt>
    679e:	b940      	cbnz	r0, 67b2 <loop+0x3ea>
    67a0:	4867      	ldr	r0, [pc, #412]	; (6940 <loop+0x578>)
    67a2:	f7fa faf3 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    67a6:	69e9      	ldr	r1, [r5, #28]
    67a8:	f006 fad2 	bl	cd50 <__aeabi_fcmplt>
    67ac:	2800      	cmp	r0, #0
    67ae:	f000 830c 	beq.w	6dca <loop+0xa02>
          if (digitalRead(OUT1) == 1) {
    67b2:	200b      	movs	r0, #11
    67b4:	f003 fc02 	bl	9fbc <digitalRead>
    67b8:	2801      	cmp	r0, #1
    67ba:	f000 8214 	beq.w	6be6 <loop+0x81e>
        if (SOCset == 1) {
    67be:	4b6a      	ldr	r3, [pc, #424]	; (6968 <loop+0x5a0>)
    67c0:	681b      	ldr	r3, [r3, #0]
    67c2:	2b01      	cmp	r3, #1
    67c4:	f47f aeee 	bne.w	65a4 <loop+0x1dc>
          if (settings.tripcont == 0) {
    67c8:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    67cc:	485c      	ldr	r0, [pc, #368]	; (6940 <loop+0x578>)
          if (settings.tripcont == 0) {
    67ce:	2b00      	cmp	r3, #0
    67d0:	f040 8324 	bne.w	6e1c <loop+0xa54>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    67d4:	f7fa fada 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    67d8:	6929      	ldr	r1, [r5, #16]
    67da:	f006 fab9 	bl	cd50 <__aeabi_fcmplt>
    67de:	b940      	cbnz	r0, 67f2 <loop+0x42a>
    67e0:	4857      	ldr	r0, [pc, #348]	; (6940 <loop+0x578>)
    67e2:	f7fa faf9 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    67e6:	68e9      	ldr	r1, [r5, #12]
    67e8:	f006 fad0 	bl	cd8c <__aeabi_fcmpgt>
    67ec:	2800      	cmp	r0, #0
    67ee:	f000 83f3 	beq.w	6fd8 <loop+0xc10>
              digitalWrite(OUT2, HIGH);  //trip breaker
    67f2:	2101      	movs	r1, #1
    67f4:	200c      	movs	r0, #12
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    67f6:	f003 fbbb 	bl	9f70 <digitalWrite>
              ErrorReason = 5;
    67fa:	4a5c      	ldr	r2, [pc, #368]	; (696c <loop+0x5a4>)
              bmsstatus = Error;
    67fc:	2305      	movs	r3, #5
    67fe:	703b      	strb	r3, [r7, #0]
              ErrorReason = 5;
    6800:	6013      	str	r3, [r2, #0]
    6802:	e6cf      	b.n	65a4 <loop+0x1dc>
      if (SOCset != 0) {
    6804:	2b00      	cmp	r3, #0
    6806:	f43f ae60 	beq.w	64ca <loop+0x102>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    680a:	484d      	ldr	r0, [pc, #308]	; (6940 <loop+0x578>)
          if (debug != 0) {
    680c:	f8df 9140 	ldr.w	r9, [pc, #320]	; 6950 <loop+0x588>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6810:	f7fa fabc 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6814:	6929      	ldr	r1, [r5, #16]
    6816:	f006 fa9b 	bl	cd50 <__aeabi_fcmplt>
    681a:	2800      	cmp	r0, #0
    681c:	f000 82cb 	beq.w	6db6 <loop+0x9ee>
          if (debug != 0) {
    6820:	f8d9 3000 	ldr.w	r3, [r9]
    6824:	2b00      	cmp	r3, #0
    6826:	f040 8315 	bne.w	6e54 <loop+0xa8c>
          bmsstatus = Error;
    682a:	4a47      	ldr	r2, [pc, #284]	; (6948 <loop+0x580>)
          ErrorReason = 1;
    682c:	4b4f      	ldr	r3, [pc, #316]	; (696c <loop+0x5a4>)
          bmsstatus = Error;
    682e:	2105      	movs	r1, #5
    6830:	7011      	strb	r1, [r2, #0]
          ErrorReason = 1;
    6832:	2201      	movs	r2, #1
    6834:	601a      	str	r2, [r3, #0]
    if (debug != 0) {
    6836:	e64e      	b.n	64d6 <loop+0x10e>
        if (ErrorReason == 3) {
    6838:	4b4c      	ldr	r3, [pc, #304]	; (696c <loop+0x5a4>)
    683a:	681a      	ldr	r2, [r3, #0]
    683c:	2a03      	cmp	r2, #3
    683e:	f47f ae80 	bne.w	6542 <loop+0x17a>
          bmsstatus = Ready;
    6842:	4a41      	ldr	r2, [pc, #260]	; (6948 <loop+0x580>)
    6844:	2101      	movs	r1, #1
    6846:	7011      	strb	r1, [r2, #0]
          ErrorReason = 33;
    6848:	2221      	movs	r2, #33	; 0x21
    684a:	601a      	str	r2, [r3, #0]
    684c:	e679      	b.n	6542 <loop+0x17a>
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    684e:	f7fa f919 	bl	a84 <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    6852:	f9b5 30d0 	ldrsh.w	r3, [r5, #208]	; 0xd0
      cellspresent = bms.seriescells();  //set amount of connected cells, might need delay
    6856:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    6858:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    685a:	f895 1048 	ldrb.w	r1, [r5, #72]	; 0x48
    685e:	4838      	ldr	r0, [pc, #224]	; (6940 <loop+0x578>)
    6860:	f7fa fae4 	bl	e2c <BMSModuleManager::setSensors(int, float, int)>
    6864:	e66d      	b.n	6542 <loop+0x17a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6866:	2102      	movs	r1, #2
    6868:	4841      	ldr	r0, [pc, #260]	; (6970 <loop+0x5a8>)
    686a:	f005 f9f3 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    686e:	4841      	ldr	r0, [pc, #260]	; (6974 <loop+0x5ac>)
    6870:	f002 fcac 	bl	91cc <Print::println()>
    6874:	211d      	movs	r1, #29
    6876:	4840      	ldr	r0, [pc, #256]	; (6978 <loop+0x5b0>)
    6878:	f005 f9ec 	bl	bc54 <usb_serial_write>
    687c:	2102      	movs	r1, #2
    687e:	483c      	ldr	r0, [pc, #240]	; (6970 <loop+0x5a8>)
    6880:	f005 f9e8 	bl	bc54 <usb_serial_write>
    6884:	483b      	ldr	r0, [pc, #236]	; (6974 <loop+0x5ac>)
    6886:	f002 fca1 	bl	91cc <Print::println()>
    688a:	e654      	b.n	6536 <loop+0x16e>
        if (commscount <= 2) {
    688c:	4a3b      	ldr	r2, [pc, #236]	; (697c <loop+0x5b4>)
    688e:	7813      	ldrb	r3, [r2, #0]
    6890:	2b02      	cmp	r3, #2
    6892:	f200 8149 	bhi.w	6b28 <loop+0x760>
          if (debug != 0) {
    6896:	4b2e      	ldr	r3, [pc, #184]	; (6950 <loop+0x588>)
    6898:	681b      	ldr	r3, [r3, #0]
    689a:	2b00      	cmp	r3, #0
    689c:	f040 8310 	bne.w	6ec0 <loop+0xaf8>
          bms.clearmodules();
    68a0:	4827      	ldr	r0, [pc, #156]	; (6940 <loop+0x578>)
    68a2:	f7fa f911 	bl	ac8 <BMSModuleManager::clearmodules()>
          bmsstatus = Error;
    68a6:	4b28      	ldr	r3, [pc, #160]	; (6948 <loop+0x580>)
    68a8:	2205      	movs	r2, #5
    68aa:	701a      	strb	r2, [r3, #0]
          ErrorReason = 4;
    68ac:	4b2f      	ldr	r3, [pc, #188]	; (696c <loop+0x5a4>)
    68ae:	2204      	movs	r2, #4
    68b0:	601a      	str	r2, [r3, #0]
    68b2:	e5c4      	b.n	643e <loop+0x76>
          Discharge = 0;
    68b4:	4b32      	ldr	r3, [pc, #200]	; (6980 <loop+0x5b8>)
    68b6:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    68b8:	4621      	mov	r1, r4
    68ba:	2015      	movs	r0, #21
          Discharge = 0;
    68bc:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    68be:	f003 fb57 	bl	9f70 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    68c2:	4621      	mov	r1, r4
    68c4:	2014      	movs	r0, #20
    68c6:	f003 fb53 	bl	9f70 <digitalWrite>
          digitalWrite(OUT2, LOW);
    68ca:	4621      	mov	r1, r4
    68cc:	200c      	movs	r0, #12
    68ce:	f003 fb4f 	bl	9f70 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    68d2:	4621      	mov	r1, r4
    68d4:	200b      	movs	r0, #11
    68d6:	f003 fb4b 	bl	9f70 <digitalWrite>
          contctrl = 0;
    68da:	4b1e      	ldr	r3, [pc, #120]	; (6954 <loop+0x58c>)
    68dc:	601c      	str	r4, [r3, #0]
          bmsstatus = Ready;
    68de:	2301      	movs	r3, #1
    68e0:	4c1d      	ldr	r4, [pc, #116]	; (6958 <loop+0x590>)
    68e2:	703b      	strb	r3, [r7, #0]
          break;
    68e4:	e65e      	b.n	65a4 <loop+0x1dc>
          Discharge = 0;
    68e6:	4b26      	ldr	r3, [pc, #152]	; (6980 <loop+0x5b8>)
    68e8:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    68ea:	4621      	mov	r1, r4
    68ec:	2015      	movs	r0, #21
          Discharge = 0;
    68ee:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    68f0:	f003 fb3e 	bl	9f70 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    68f4:	4621      	mov	r1, r4
    68f6:	2014      	movs	r0, #20
    68f8:	f003 fb3a 	bl	9f70 <digitalWrite>
          digitalWrite(OUT2, LOW);
    68fc:	4621      	mov	r1, r4
    68fe:	200c      	movs	r0, #12
    6900:	f003 fb36 	bl	9f70 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    6904:	4621      	mov	r1, r4
    6906:	200b      	movs	r0, #11
    6908:	f003 fb32 	bl	9f70 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    690c:	4b11      	ldr	r3, [pc, #68]	; (6954 <loop+0x58c>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    690e:	480c      	ldr	r0, [pc, #48]	; (6940 <loop+0x578>)
          contctrl = 0;             //turn off out 5 and 6
    6910:	601c      	str	r4, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    6912:	f7fa fa3b 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6916:	6929      	ldr	r1, [r5, #16]
    6918:	f006 fa2e 	bl	cd78 <__aeabi_fcmpge>
    691c:	2800      	cmp	r0, #0
    691e:	f43f ae40 	beq.w	65a2 <loop+0x1da>
    6922:	4807      	ldr	r0, [pc, #28]	; (6940 <loop+0x578>)
    6924:	f7fa fa58 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6928:	68e9      	ldr	r1, [r5, #12]
    692a:	f006 fa1b 	bl	cd64 <__aeabi_fcmple>
    692e:	2800      	cmp	r0, #0
    6930:	f43f ae37 	beq.w	65a2 <loop+0x1da>
    6934:	2011      	movs	r0, #17
    6936:	f003 fb41 	bl	9fbc <digitalRead>
    693a:	2800      	cmp	r0, #0
    693c:	d0cf      	beq.n	68de <loop+0x516>
    693e:	e630      	b.n	65a2 <loop+0x1da>
    6940:	1fff91e0 	.word	0x1fff91e0
    6944:	1fff91bc 	.word	0x1fff91bc
    6948:	1fffcb34 	.word	0x1fffcb34
    694c:	1fff91a0 	.word	0x1fff91a0
    6950:	1fff8850 	.word	0x1fff8850
    6954:	1fffcbb8 	.word	0x1fffcbb8
    6958:	1fffd0e4 	.word	0x1fffd0e4
    695c:	1fffcec0 	.word	0x1fffcec0
    6960:	1fff91d0 	.word	0x1fff91d0
    6964:	1fffcddc 	.word	0x1fffcddc
    6968:	1fff91b4 	.word	0x1fff91b4
    696c:	1fff919c 	.word	0x1fff919c
    6970:	00014a64 	.word	0x00014a64
    6974:	1fff8a04 	.word	0x1fff8a04
    6978:	00014c9c 	.word	0x00014c9c
    697c:	1fffcb54 	.word	0x1fffcb54
    6980:	1fff9198 	.word	0x1fff9198
          Discharge = 0;
    6984:	2400      	movs	r4, #0
    6986:	4ba9      	ldr	r3, [pc, #676]	; (6c2c <loop+0x864>)
          digitalWrite(OUT4, LOW);
    6988:	4621      	mov	r1, r4
    698a:	2015      	movs	r0, #21
          Discharge = 0;
    698c:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    698e:	f003 faef 	bl	9f70 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    6992:	4621      	mov	r1, r4
    6994:	2014      	movs	r0, #20
    6996:	f003 faeb 	bl	9f70 <digitalWrite>
          digitalWrite(OUT2, LOW);
    699a:	4621      	mov	r1, r4
    699c:	200c      	movs	r0, #12
    699e:	f003 fae7 	bl	9f70 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    69a2:	4621      	mov	r1, r4
    69a4:	200b      	movs	r0, #11
    69a6:	f003 fae3 	bl	9f70 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    69aa:	4ba1      	ldr	r3, [pc, #644]	; (6c30 <loop+0x868>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    69ac:	48a1      	ldr	r0, [pc, #644]	; (6c34 <loop+0x86c>)
          contctrl = 0;             //turn off out 5 and 6
    69ae:	601c      	str	r4, [r3, #0]
          accurlim = 0;
    69b0:	4ba1      	ldr	r3, [pc, #644]	; (6c38 <loop+0x870>)
    69b2:	801c      	strh	r4, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    69b4:	f7fa fa10 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    69b8:	6d29      	ldr	r1, [r5, #80]	; 0x50
    69ba:	f006 f9e7 	bl	cd8c <__aeabi_fcmpgt>
    69be:	2800      	cmp	r0, #0
    69c0:	f040 8180 	bne.w	6cc4 <loop+0x8fc>
    69c4:	4b9d      	ldr	r3, [pc, #628]	; (6c3c <loop+0x874>)
    69c6:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    69c8:	2012      	movs	r0, #18
    69ca:	f003 faf7 	bl	9fbc <digitalRead>
    69ce:	2801      	cmp	r0, #1
    69d0:	f000 825f 	beq.w	6e92 <loop+0xaca>
    69d4:	4c9a      	ldr	r4, [pc, #616]	; (6c40 <loop+0x878>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    69d6:	2011      	movs	r0, #17
    69d8:	f003 faf0 	bl	9fbc <digitalRead>
    69dc:	2801      	cmp	r0, #1
    69de:	f47f ade1 	bne.w	65a4 <loop+0x1dc>
    69e2:	4894      	ldr	r0, [pc, #592]	; (6c34 <loop+0x86c>)
    69e4:	f7fa f9d2 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    69e8:	69e9      	ldr	r1, [r5, #28]
    69ea:	f006 f9cf 	bl	cd8c <__aeabi_fcmpgt>
    69ee:	2800      	cmp	r0, #0
    69f0:	f43f add8 	beq.w	65a4 <loop+0x1dc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    69f4:	6822      	ldr	r2, [r4, #0]
    69f6:	920b      	str	r2, [sp, #44]	; 0x2c
            bmsstatus = Precharge;
    69f8:	2304      	movs	r3, #4
    69fa:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    69fc:	4b91      	ldr	r3, [pc, #580]	; (6c44 <loop+0x87c>)
	return ret;
    69fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6a00:	601a      	str	r2, [r3, #0]
    6a02:	e5cf      	b.n	65a4 <loop+0x1dc>
          Discharge = 1;
    6a04:	4b89      	ldr	r3, [pc, #548]	; (6c2c <loop+0x864>)
    6a06:	2401      	movs	r4, #1
    6a08:	601c      	str	r4, [r3, #0]
          accurlim = 0;
    6a0a:	4b8b      	ldr	r3, [pc, #556]	; (6c38 <loop+0x870>)
    6a0c:	2200      	movs	r2, #0
          if (digitalRead(IN1) == LOW)  //Key OFF
    6a0e:	2011      	movs	r0, #17
          accurlim = 0;
    6a10:	801a      	strh	r2, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    6a12:	f003 fad3 	bl	9fbc <digitalRead>
    6a16:	b900      	cbnz	r0, 6a1a <loop+0x652>
            bmsstatus = Ready;
    6a18:	703c      	strb	r4, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    6a1a:	2012      	movs	r0, #18
    6a1c:	f003 face 	bl	9fbc <digitalRead>
    6a20:	2801      	cmp	r0, #1
    6a22:	f47f adbe 	bne.w	65a2 <loop+0x1da>
    6a26:	4883      	ldr	r0, [pc, #524]	; (6c34 <loop+0x86c>)
    6a28:	f7fa f9d6 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6a2c:	6a29      	ldr	r1, [r5, #32]
    6a2e:	4604      	mov	r4, r0
    6a30:	69a8      	ldr	r0, [r5, #24]
    6a32:	f005 fee5 	bl	c800 <__aeabi_fsub>
    6a36:	4601      	mov	r1, r0
    6a38:	4620      	mov	r0, r4
    6a3a:	f006 f989 	bl	cd50 <__aeabi_fcmplt>
    6a3e:	2800      	cmp	r0, #0
    6a40:	f43f adaf 	beq.w	65a2 <loop+0x1da>
            bmsstatus = Charge;
    6a44:	2303      	movs	r3, #3
    6a46:	4c7e      	ldr	r4, [pc, #504]	; (6c40 <loop+0x878>)
    6a48:	703b      	strb	r3, [r7, #0]
    6a4a:	e5ab      	b.n	65a4 <loop+0x1dc>
          Discharge = 0;
    6a4c:	4b77      	ldr	r3, [pc, #476]	; (6c2c <loop+0x864>)
    6a4e:	4c7b      	ldr	r4, [pc, #492]	; (6c3c <loop+0x874>)
    6a50:	2200      	movs	r2, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    6a52:	2101      	movs	r1, #1
    6a54:	2014      	movs	r0, #20
          Discharge = 0;
    6a56:	601a      	str	r2, [r3, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    6a58:	f003 fa8a 	bl	9f70 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    6a5c:	4875      	ldr	r0, [pc, #468]	; (6c34 <loop+0x86c>)
    6a5e:	f7fa f9bb 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6a62:	6d29      	ldr	r1, [r5, #80]	; 0x50
    6a64:	f006 f992 	bl	cd8c <__aeabi_fcmpgt>
    6a68:	3800      	subs	r0, #0
    6a6a:	bf18      	it	ne
    6a6c:	2001      	movne	r0, #1
    6a6e:	6020      	str	r0, [r4, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    6a70:	4870      	ldr	r0, [pc, #448]	; (6c34 <loop+0x86c>)
    6a72:	f7fa f9b1 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6a76:	69a9      	ldr	r1, [r5, #24]
    6a78:	f006 f988 	bl	cd8c <__aeabi_fcmpgt>
    6a7c:	2800      	cmp	r0, #0
    6a7e:	f040 80f9 	bne.w	6c74 <loop+0x8ac>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    6a82:	2012      	movs	r0, #18
    6a84:	f003 fa9a 	bl	9fbc <digitalRead>
    6a88:	2800      	cmp	r0, #0
    6a8a:	f43f af28 	beq.w	68de <loop+0x516>
    6a8e:	e588      	b.n	65a2 <loop+0x1da>
          Discharge = 0;
    6a90:	4b66      	ldr	r3, [pc, #408]	; (6c2c <loop+0x864>)
    6a92:	4c6b      	ldr	r4, [pc, #428]	; (6c40 <loop+0x878>)
    6a94:	2200      	movs	r2, #0
    6a96:	601a      	str	r2, [r3, #0]
          Prechargecon();
    6a98:	f7fb fe42 	bl	2720 <Prechargecon()>
          break;
    6a9c:	e582      	b.n	65a4 <loop+0x1dc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6a9e:	9311      	str	r3, [sp, #68]	; 0x44
	return ret;
    6aa0:	9a11      	ldr	r2, [sp, #68]	; 0x44
          UnderTime = millis() + settings.triptime;
    6aa2:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    6aa4:	4413      	add	r3, r2
    6aa6:	4a68      	ldr	r2, [pc, #416]	; (6c48 <loop+0x880>)
    6aa8:	6013      	str	r3, [r2, #0]
    6aaa:	e604      	b.n	66b6 <loop+0x2ee>
          if (settings.tripcont == 0) {
    6aac:	f895 30cd 	ldrb.w	r3, [r5, #205]	; 0xcd
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	f040 80b1 	bne.w	6c18 <loop+0x850>
            digitalWrite(OUT2, HIGH);  //trip breaker
    6ab6:	200c      	movs	r0, #12
    6ab8:	f003 fa5a 	bl	9f70 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings)) {
    6abc:	485d      	ldr	r0, [pc, #372]	; (6c34 <loop+0x86c>)
    6abe:	f7fa f965 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6ac2:	6929      	ldr	r1, [r5, #16]
    6ac4:	f006 f962 	bl	cd8c <__aeabi_fcmpgt>
    6ac8:	2800      	cmp	r0, #0
    6aca:	f43f ad6a 	beq.w	65a2 <loop+0x1da>
    6ace:	4859      	ldr	r0, [pc, #356]	; (6c34 <loop+0x86c>)
    6ad0:	f7fa f982 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6ad4:	68e9      	ldr	r1, [r5, #12]
    6ad6:	f006 f93b 	bl	cd50 <__aeabi_fcmplt>
    6ada:	2800      	cmp	r0, #0
    6adc:	f43f ad61 	beq.w	65a2 <loop+0x1da>
    6ae0:	4854      	ldr	r0, [pc, #336]	; (6c34 <loop+0x86c>)
    6ae2:	f7fa fa2d 	bl	f40 <BMSModuleManager::getHighTemperature()>
    6ae6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6ae8:	f006 f932 	bl	cd50 <__aeabi_fcmplt>
    6aec:	2800      	cmp	r0, #0
    6aee:	f43f ad58 	beq.w	65a2 <loop+0x1da>
    6af2:	4850      	ldr	r0, [pc, #320]	; (6c34 <loop+0x86c>)
    6af4:	f7f9 ffc6 	bl	a84 <BMSModuleManager::seriescells()>
    6af8:	4a54      	ldr	r2, [pc, #336]	; (6c4c <loop+0x884>)
    6afa:	6812      	ldr	r2, [r2, #0]
    6afc:	4290      	cmp	r0, r2
    6afe:	f47f ad50 	bne.w	65a2 <loop+0x1da>
    6b02:	6daa      	ldr	r2, [r5, #88]	; 0x58
    6b04:	6de9      	ldr	r1, [r5, #92]	; 0x5c
    6b06:	fb01 f202 	mul.w	r2, r1, r2
    6b0a:	4290      	cmp	r0, r2
    6b0c:	f47f ad49 	bne.w	65a2 <loop+0x1da>
            if (ErrorReason == 0) {
    6b10:	4b4f      	ldr	r3, [pc, #316]	; (6c50 <loop+0x888>)
    6b12:	681b      	ldr	r3, [r3, #0]
    6b14:	2b00      	cmp	r3, #0
    6b16:	f43f aee2 	beq.w	68de <loop+0x516>
    6b1a:	e542      	b.n	65a2 <loop+0x1da>
          if (storagemode == 1) {
    6b1c:	2b01      	cmp	r3, #1
    6b1e:	f47f ae14 	bne.w	674a <loop+0x382>
            storagemode = 0;
    6b22:	f8c9 0000 	str.w	r0, [r9]
    6b26:	e610      	b.n	674a <loop+0x382>
          commscount = commscount + 1;
    6b28:	3301      	adds	r3, #1
    6b2a:	7013      	strb	r3, [r2, #0]
    6b2c:	e487      	b.n	643e <loop+0x76>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    6b2e:	4841      	ldr	r0, [pc, #260]	; (6c34 <loop+0x86c>)
    6b30:	f7fa f92c 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6b34:	6929      	ldr	r1, [r5, #16]
    6b36:	f006 f929 	bl	cd8c <__aeabi_fcmpgt>
    6b3a:	b140      	cbz	r0, 6b4e <loop+0x786>
    6b3c:	483d      	ldr	r0, [pc, #244]	; (6c34 <loop+0x86c>)
    6b3e:	f7fa f94b 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6b42:	68e9      	ldr	r1, [r5, #12]
    6b44:	f006 f904 	bl	cd50 <__aeabi_fcmplt>
    6b48:	2800      	cmp	r0, #0
    6b4a:	f040 81ce 	bne.w	6eea <loop+0xb22>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    6b4e:	2100      	movs	r1, #0
    6b50:	2015      	movs	r0, #21
    6b52:	f003 fa0d 	bl	9f70 <digitalWrite>
            mainconttimer = 0;
    6b56:	4b3f      	ldr	r3, [pc, #252]	; (6c54 <loop+0x88c>)
    6b58:	2200      	movs	r2, #0
    6b5a:	601a      	str	r2, [r3, #0]
    6b5c:	e5e6      	b.n	672c <loop+0x364>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b5e:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6b60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
          OverTime = millis() + settings.triptime;
    6b62:	8eab      	ldrh	r3, [r5, #52]	; 0x34
    if (debug != 0) {
    6b64:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 6c58 <loop+0x890>
          OverTime = millis() + settings.triptime;
    6b68:	4413      	add	r3, r2
    6b6a:	4a3c      	ldr	r2, [pc, #240]	; (6c5c <loop+0x894>)
    6b6c:	6013      	str	r3, [r2, #0]
    if (debug != 0) {
    6b6e:	f8d9 3000 	ldr.w	r3, [r9]
    6b72:	2b00      	cmp	r3, #0
    6b74:	f43f acaf 	beq.w	64d6 <loop+0x10e>
    6b78:	e52b      	b.n	65d2 <loop+0x20a>
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6b7a:	482e      	ldr	r0, [pc, #184]	; (6c34 <loop+0x86c>)
    6b7c:	f7fa f9e0 	bl	f40 <BMSModuleManager::getHighTemperature()>
    6b80:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6b82:	f006 f903 	bl	cd8c <__aeabi_fcmpgt>
    6b86:	2800      	cmp	r0, #0
    6b88:	f47f ad9e 	bne.w	66c8 <loop+0x300>
    6b8c:	e59f      	b.n	66ce <loop+0x306>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6b8e:	f7fa f923 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6b92:	6a69      	ldr	r1, [r5, #36]	; 0x24
    6b94:	f006 f8fa 	bl	cd8c <__aeabi_fcmpgt>
    6b98:	2800      	cmp	r0, #0
    6b9a:	f040 80ce 	bne.w	6d3a <loop+0x972>
    6b9e:	4a30      	ldr	r2, [pc, #192]	; (6c60 <loop+0x898>)
    6ba0:	6812      	ldr	r2, [r2, #0]
    6ba2:	2a00      	cmp	r2, #0
    6ba4:	f000 80c9 	beq.w	6d3a <loop+0x972>
            if (Charged == 1) {
    6ba8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 6c64 <loop+0x89c>
    6bac:	f8db a000 	ldr.w	sl, [fp]
    6bb0:	f1ba 0f01 	cmp.w	sl, #1
    6bb4:	f000 81ec 	beq.w	6f90 <loop+0xbc8>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6bb8:	2101      	movs	r1, #1
    6bba:	2014      	movs	r0, #20
    6bbc:	f003 f9d8 	bl	9f70 <digitalWrite>
    6bc0:	e5e7      	b.n	6792 <loop+0x3ca>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6bc2:	481c      	ldr	r0, [pc, #112]	; (6c34 <loop+0x86c>)
    6bc4:	f7fa f908 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6bc8:	4682      	mov	sl, r0
    6bca:	481a      	ldr	r0, [pc, #104]	; (6c34 <loop+0x86c>)
    6bcc:	f7fa f8de 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6bd0:	6d69      	ldr	r1, [r5, #84]	; 0x54
    6bd2:	f005 fe17 	bl	c804 <__addsf3>
    6bd6:	4601      	mov	r1, r0
    6bd8:	4650      	mov	r0, sl
    6bda:	f006 f8d7 	bl	cd8c <__aeabi_fcmpgt>
    6bde:	3800      	subs	r0, #0
    6be0:	bf18      	it	ne
    6be2:	2001      	movne	r0, #1
    6be4:	e5ba      	b.n	675c <loop+0x394>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6be6:	6823      	ldr	r3, [r4, #0]
    6be8:	9308      	str	r3, [sp, #32]
            if ((millis() - undertriptimer) > settings.triptime) {
    6bea:	4b1f      	ldr	r3, [pc, #124]	; (6c68 <loop+0x8a0>)
    6bec:	681a      	ldr	r2, [r3, #0]
	return ret;
    6bee:	9b08      	ldr	r3, [sp, #32]
    6bf0:	1a9b      	subs	r3, r3, r2
    6bf2:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    6bf4:	4293      	cmp	r3, r2
    6bf6:	f67f ade2 	bls.w	67be <loop+0x3f6>
              Serial.println();
    6bfa:	481c      	ldr	r0, [pc, #112]	; (6c6c <loop+0x8a4>)
    6bfc:	f002 fae6 	bl	91cc <Print::println()>
    6c00:	2112      	movs	r1, #18
    6c02:	481b      	ldr	r0, [pc, #108]	; (6c70 <loop+0x8a8>)
    6c04:	f005 f826 	bl	bc54 <usb_serial_write>
    6c08:	4818      	ldr	r0, [pc, #96]	; (6c6c <loop+0x8a4>)
    6c0a:	f002 fadf 	bl	91cc <Print::println()>
              digitalWrite(OUT1, LOW);  //turn off discharge
    6c0e:	2100      	movs	r1, #0
    6c10:	200b      	movs	r0, #11
    6c12:	f003 f9ad 	bl	9f70 <digitalWrite>
    6c16:	e5d2      	b.n	67be <loop+0x3f6>
            digitalWrite(OUT2, LOW);  //turn off contactor
    6c18:	4621      	mov	r1, r4
    6c1a:	200c      	movs	r0, #12
    6c1c:	f003 f9a8 	bl	9f70 <digitalWrite>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    6c20:	4621      	mov	r1, r4
    6c22:	2015      	movs	r0, #21
    6c24:	f003 f9a4 	bl	9f70 <digitalWrite>
    6c28:	e748      	b.n	6abc <loop+0x6f4>
    6c2a:	bf00      	nop
    6c2c:	1fff9198 	.word	0x1fff9198
    6c30:	1fffcbb8 	.word	0x1fffcbb8
    6c34:	1fff91e0 	.word	0x1fff91e0
    6c38:	1fff91c0 	.word	0x1fff91c0
    6c3c:	1fff91d0 	.word	0x1fff91d0
    6c40:	1fffd0e4 	.word	0x1fffd0e4
    6c44:	1fff91a4 	.word	0x1fff91a4
    6c48:	1fff91bc 	.word	0x1fff91bc
    6c4c:	1fffcb3c 	.word	0x1fffcb3c
    6c50:	1fff919c 	.word	0x1fff919c
    6c54:	1fffcd34 	.word	0x1fffcd34
    6c58:	1fff8850 	.word	0x1fff8850
    6c5c:	1fff91a0 	.word	0x1fff91a0
    6c60:	1fffcb40 	.word	0x1fffcb40
    6c64:	1fff9194 	.word	0x1fff9194
    6c68:	1fffcec8 	.word	0x1fffcec8
    6c6c:	1fff8a04 	.word	0x1fff8a04
    6c70:	00014c4c 	.word	0x00014c4c
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6c74:	48b2      	ldr	r0, [pc, #712]	; (6f40 <loop+0xb78>)
    6c76:	f7fa f967 	bl	f48 <BMSModuleManager::getAvgCellVolt()>
    6c7a:	6a29      	ldr	r1, [r5, #32]
    6c7c:	4604      	mov	r4, r0
    6c7e:	69a8      	ldr	r0, [r5, #24]
    6c80:	f005 fdbe 	bl	c800 <__aeabi_fsub>
    6c84:	4601      	mov	r1, r0
    6c86:	4620      	mov	r0, r4
    6c88:	f006 f880 	bl	cd8c <__aeabi_fcmpgt>
    SOC = 100;
    6c8c:	4bad      	ldr	r3, [pc, #692]	; (6f44 <loop+0xb7c>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6c8e:	2800      	cmp	r0, #0
    6c90:	f000 8129 	beq.w	6ee6 <loop+0xb1e>
    SOC = 100;
    6c94:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    6c96:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6c98:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6c9a:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6c9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6ca0:	fb02 f303 	mul.w	r3, r2, r3
    6ca4:	fb03 f000 	mul.w	r0, r3, r0
    6ca8:	f005 fe60 	bl	c96c <__aeabi_i2f>
    6cac:	49a6      	ldr	r1, [pc, #664]	; (6f48 <loop+0xb80>)
    6cae:	f005 ff65 	bl	cb7c <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cb2:	4aa6      	ldr	r2, [pc, #664]	; (6f4c <loop+0xb84>)
            digitalWrite(OUT3, LOW);  //turn off charger
    6cb4:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6cb6:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    6cb8:	2014      	movs	r0, #20
    6cba:	f003 f959 	bl	9f70 <digitalWrite>
            bmsstatus = Ready;
    6cbe:	2301      	movs	r3, #1
    6cc0:	703b      	strb	r3, [r7, #0]
    6cc2:	e6de      	b.n	6a82 <loop+0x6ba>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6cc4:	489e      	ldr	r0, [pc, #632]	; (6f40 <loop+0xb78>)
    6cc6:	f7fa f887 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6cca:	4604      	mov	r4, r0
    6ccc:	489c      	ldr	r0, [pc, #624]	; (6f40 <loop+0xb78>)
    6cce:	f7fa f85d 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6cd2:	6d69      	ldr	r1, [r5, #84]	; 0x54
    6cd4:	f005 fd96 	bl	c804 <__addsf3>
    6cd8:	4601      	mov	r1, r0
    6cda:	4620      	mov	r0, r4
    6cdc:	f006 f856 	bl	cd8c <__aeabi_fcmpgt>
    6ce0:	3800      	subs	r0, #0
    6ce2:	bf18      	it	ne
    6ce4:	2001      	movne	r0, #1
    6ce6:	e66d      	b.n	69c4 <loop+0x5fc>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    6ce8:	4895      	ldr	r0, [pc, #596]	; (6f40 <loop+0xb78>)
    6cea:	f7fa f875 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6cee:	69a9      	ldr	r1, [r5, #24]
    6cf0:	f006 f84c 	bl	cd8c <__aeabi_fcmpgt>
    6cf4:	2800      	cmp	r0, #0
    6cf6:	f47f ad42 	bne.w	677e <loop+0x3b6>
    6cfa:	4b95      	ldr	r3, [pc, #596]	; (6f50 <loop+0xb88>)
    6cfc:	681b      	ldr	r3, [r3, #0]
    6cfe:	2b00      	cmp	r3, #0
    6d00:	f43f ad3d 	beq.w	677e <loop+0x3b6>
            if (Charged == 1) {
    6d04:	f8df b24c 	ldr.w	fp, [pc, #588]	; 6f54 <loop+0xb8c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d08:	6823      	ldr	r3, [r4, #0]
    6d0a:	f8db a000 	ldr.w	sl, [fp]
    6d0e:	9307      	str	r3, [sp, #28]
            overtriptimer = millis();
    6d10:	4b91      	ldr	r3, [pc, #580]	; (6f58 <loop+0xb90>)
	return ret;
    6d12:	9a07      	ldr	r2, [sp, #28]
    6d14:	601a      	str	r2, [r3, #0]
            if (Charged == 1) {
    6d16:	f1ba 0f01 	cmp.w	sl, #1
    6d1a:	f000 816c 	beq.w	6ff6 <loop+0xc2e>
              if (digitalRead(OUT3) == 0) {
    6d1e:	2014      	movs	r0, #20
    6d20:	f003 f94c 	bl	9fbc <digitalRead>
    6d24:	2800      	cmp	r0, #0
    6d26:	f47f ad34 	bne.w	6792 <loop+0x3ca>
                Serial.println();
    6d2a:	488c      	ldr	r0, [pc, #560]	; (6f5c <loop+0xb94>)
    6d2c:	f002 fa4e 	bl	91cc <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    6d30:	498b      	ldr	r1, [pc, #556]	; (6f60 <loop+0xb98>)
    6d32:	488a      	ldr	r0, [pc, #552]	; (6f5c <loop+0xb94>)
    6d34:	f7fa fc5e 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
    6d38:	e73e      	b.n	6bb8 <loop+0x7f0>
            digitalWrite(OUT3, LOW);  //turn off charger
    6d3a:	2100      	movs	r1, #0
    6d3c:	2014      	movs	r0, #20
    6d3e:	f003 f917 	bl	9f70 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d42:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6d44:	6e2b      	ldr	r3, [r5, #96]	; 0x60
            Charged = 1;
    6d46:	4983      	ldr	r1, [pc, #524]	; (6f54 <loop+0xb8c>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d48:	fb02 f303 	mul.w	r3, r2, r3
    6d4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    6d50:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    6d54:	4a7b      	ldr	r2, [pc, #492]	; (6f44 <loop+0xb7c>)
            Charged = 1;
    6d56:	2301      	movs	r3, #1
    6d58:	600b      	str	r3, [r1, #0]
    SOC = 100;
    6d5a:	2364      	movs	r3, #100	; 0x64
    6d5c:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d5e:	f005 fe05 	bl	c96c <__aeabi_i2f>
    6d62:	4979      	ldr	r1, [pc, #484]	; (6f48 <loop+0xb80>)
    6d64:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 6f4c <loop+0xb84>
    6d68:	f005 ff08 	bl	cb7c <__aeabi_fdiv>
    6d6c:	f8c9 0000 	str.w	r0, [r9]
    6d70:	e50f      	b.n	6792 <loop+0x3ca>
              if (digitalRead(OUT3) == 1) {
    6d72:	2014      	movs	r0, #20
    6d74:	f003 f922 	bl	9fbc <digitalRead>
    6d78:	2801      	cmp	r0, #1
    6d7a:	4681      	mov	r9, r0
    6d7c:	f47f ad09 	bne.w	6792 <loop+0x3ca>
                Serial.println();
    6d80:	4876      	ldr	r0, [pc, #472]	; (6f5c <loop+0xb94>)
    6d82:	f002 fa23 	bl	91cc <Print::println()>
    6d86:	2111      	movs	r1, #17
    6d88:	4876      	ldr	r0, [pc, #472]	; (6f64 <loop+0xb9c>)
    6d8a:	f004 ff63 	bl	bc54 <usb_serial_write>
    6d8e:	4873      	ldr	r0, [pc, #460]	; (6f5c <loop+0xb94>)
    6d90:	f002 fa1c 	bl	91cc <Print::println()>
                digitalWrite(OUT3, LOW);  //turn off charger
    6d94:	2014      	movs	r0, #20
    6d96:	2100      	movs	r1, #0
    6d98:	f003 f8ea 	bl	9f70 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6d9c:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    6d9e:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    6da0:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    6da4:	4a6b      	ldr	r2, [pc, #428]	; (6f54 <loop+0xb8c>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    6daa:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    6dae:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    6db2:	4a64      	ldr	r2, [pc, #400]	; (6f44 <loop+0xb7c>)
    6db4:	e7d1      	b.n	6d5a <loop+0x992>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6db6:	4862      	ldr	r0, [pc, #392]	; (6f40 <loop+0xb78>)
    6db8:	f7fa f80e 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6dbc:	6929      	ldr	r1, [r5, #16]
    6dbe:	f005 ffc7 	bl	cd50 <__aeabi_fcmplt>
    6dc2:	2800      	cmp	r0, #0
    6dc4:	f47f ad2c 	bne.w	6820 <loop+0x458>
    6dc8:	e6d1      	b.n	6b6e <loop+0x7a6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6dca:	6823      	ldr	r3, [r4, #0]
    6dcc:	9309      	str	r3, [sp, #36]	; 0x24
          undertriptimer = millis();
    6dce:	4b66      	ldr	r3, [pc, #408]	; (6f68 <loop+0xba0>)
	return ret;
    6dd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    6dd2:	485b      	ldr	r0, [pc, #364]	; (6f40 <loop+0xb78>)
          undertriptimer = millis();
    6dd4:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    6dd6:	f7f9 ffd9 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6dda:	6969      	ldr	r1, [r5, #20]
    6ddc:	4681      	mov	r9, r0
    6dde:	69e8      	ldr	r0, [r5, #28]
    6de0:	f005 fd10 	bl	c804 <__addsf3>
    6de4:	4601      	mov	r1, r0
    6de6:	4648      	mov	r0, r9
    6de8:	f005 ffd0 	bl	cd8c <__aeabi_fcmpgt>
    6dec:	2800      	cmp	r0, #0
    6dee:	f43f ace6 	beq.w	67be <loop+0x3f6>
            if (digitalRead(OUT1) == 0) {
    6df2:	200b      	movs	r0, #11
    6df4:	f003 f8e2 	bl	9fbc <digitalRead>
    6df8:	2800      	cmp	r0, #0
    6dfa:	f47f ace0 	bne.w	67be <loop+0x3f6>
              Serial.println();
    6dfe:	4857      	ldr	r0, [pc, #348]	; (6f5c <loop+0xb94>)
    6e00:	f002 f9e4 	bl	91cc <Print::println()>
    6e04:	2118      	movs	r1, #24
    6e06:	4859      	ldr	r0, [pc, #356]	; (6f6c <loop+0xba4>)
    6e08:	f004 ff24 	bl	bc54 <usb_serial_write>
    6e0c:	4853      	ldr	r0, [pc, #332]	; (6f5c <loop+0xb94>)
    6e0e:	f002 f9dd 	bl	91cc <Print::println()>
              digitalWrite(OUT1, HIGH);  //turn on discharge
    6e12:	2101      	movs	r1, #1
    6e14:	200b      	movs	r0, #11
    6e16:	f003 f8ab 	bl	9f70 <digitalWrite>
    6e1a:	e4d0      	b.n	67be <loop+0x3f6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6e1c:	f7f9 ffb6 	bl	d8c <BMSModuleManager::getLowCellVolt()>
    6e20:	6929      	ldr	r1, [r5, #16]
    6e22:	f005 ff95 	bl	cd50 <__aeabi_fcmplt>
    6e26:	b940      	cbnz	r0, 6e3a <loop+0xa72>
    6e28:	4845      	ldr	r0, [pc, #276]	; (6f40 <loop+0xb78>)
    6e2a:	f7f9 ffd5 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6e2e:	68e9      	ldr	r1, [r5, #12]
    6e30:	f005 ffac 	bl	cd8c <__aeabi_fcmpgt>
    6e34:	2800      	cmp	r0, #0
    6e36:	f000 80c4 	beq.w	6fc2 <loop+0xbfa>
              digitalWrite(OUT2, LOW);    //turn off contactor
    6e3a:	2100      	movs	r1, #0
    6e3c:	200c      	movs	r0, #12
    6e3e:	f003 f897 	bl	9f70 <digitalWrite>
              contctrl = contctrl & 253;  //turn off contactor
    6e42:	f8d8 3000 	ldr.w	r3, [r8]
    6e46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    6e4a:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    6e4e:	2100      	movs	r1, #0
    6e50:	2015      	movs	r0, #21
    6e52:	e4d0      	b.n	67f6 <loop+0x42e>
    6e54:	2102      	movs	r1, #2
    6e56:	4846      	ldr	r0, [pc, #280]	; (6f70 <loop+0xba8>)
    6e58:	f004 fefc 	bl	bc54 <usb_serial_write>
    6e5c:	483f      	ldr	r0, [pc, #252]	; (6f5c <loop+0xb94>)
    6e5e:	f002 f9b5 	bl	91cc <Print::println()>
    6e62:	211d      	movs	r1, #29
    6e64:	4843      	ldr	r0, [pc, #268]	; (6f74 <loop+0xbac>)
    6e66:	f004 fef5 	bl	bc54 <usb_serial_write>
    6e6a:	2102      	movs	r1, #2
    6e6c:	4840      	ldr	r0, [pc, #256]	; (6f70 <loop+0xba8>)
    6e6e:	f004 fef1 	bl	bc54 <usb_serial_write>
    6e72:	483a      	ldr	r0, [pc, #232]	; (6f5c <loop+0xb94>)
    6e74:	f002 f9aa 	bl	91cc <Print::println()>
          bmsstatus = Error;
    6e78:	4a3f      	ldr	r2, [pc, #252]	; (6f78 <loop+0xbb0>)
          ErrorReason = 1;
    6e7a:	4b40      	ldr	r3, [pc, #256]	; (6f7c <loop+0xbb4>)
          bmsstatus = Error;
    6e7c:	2105      	movs	r1, #5
    6e7e:	7011      	strb	r1, [r2, #0]
          ErrorReason = 1;
    6e80:	2201      	movs	r2, #1
    6e82:	601a      	str	r2, [r3, #0]
    if (debug != 0) {
    6e84:	f8d9 3000 	ldr.w	r3, [r9]
    6e88:	2b00      	cmp	r3, #0
    6e8a:	f43f ab24 	beq.w	64d6 <loop+0x10e>
    6e8e:	f7ff bba0 	b.w	65d2 <loop+0x20a>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    6e92:	482b      	ldr	r0, [pc, #172]	; (6f40 <loop+0xb78>)
    6e94:	f7f9 ffa0 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6e98:	6a29      	ldr	r1, [r5, #32]
    6e9a:	4604      	mov	r4, r0
    6e9c:	69a8      	ldr	r0, [r5, #24]
    6e9e:	f005 fcaf 	bl	c800 <__aeabi_fsub>
    6ea2:	4601      	mov	r1, r0
    6ea4:	4620      	mov	r0, r4
    6ea6:	f005 ff53 	bl	cd50 <__aeabi_fcmplt>
    6eaa:	2800      	cmp	r0, #0
    6eac:	f43f ad92 	beq.w	69d4 <loop+0x60c>
            if (settings.ChargerDirect == 1) {
    6eb0:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
    6eb4:	2b00      	cmp	r3, #0
    6eb6:	d039      	beq.n	6f2c <loop+0xb64>
              bmsstatus = Charge;
    6eb8:	2303      	movs	r3, #3
    6eba:	4c31      	ldr	r4, [pc, #196]	; (6f80 <loop+0xbb8>)
    6ebc:	703b      	strb	r3, [r7, #0]
    6ebe:	e58a      	b.n	69d6 <loop+0x60e>
    6ec0:	2102      	movs	r1, #2
    6ec2:	482b      	ldr	r0, [pc, #172]	; (6f70 <loop+0xba8>)
    6ec4:	f004 fec6 	bl	bc54 <usb_serial_write>
    6ec8:	4824      	ldr	r0, [pc, #144]	; (6f5c <loop+0xb94>)
    6eca:	f002 f97f 	bl	91cc <Print::println()>
    6ece:	2119      	movs	r1, #25
    6ed0:	482c      	ldr	r0, [pc, #176]	; (6f84 <loop+0xbbc>)
    6ed2:	f004 febf 	bl	bc54 <usb_serial_write>
    6ed6:	2102      	movs	r1, #2
    6ed8:	4825      	ldr	r0, [pc, #148]	; (6f70 <loop+0xba8>)
    6eda:	f004 febb 	bl	bc54 <usb_serial_write>
    6ede:	481f      	ldr	r0, [pc, #124]	; (6f5c <loop+0xb94>)
    6ee0:	f002 f974 	bl	91cc <Print::println()>
    6ee4:	e4dc      	b.n	68a0 <loop+0x4d8>
    SOC = 95;
    6ee6:	225f      	movs	r2, #95	; 0x5f
    6ee8:	e6d5      	b.n	6c96 <loop+0x8ce>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    6eea:	200c      	movs	r0, #12
    6eec:	f003 f866 	bl	9fbc <digitalRead>
    6ef0:	2800      	cmp	r0, #0
    6ef2:	f000 80c1 	beq.w	7078 <loop+0xcb0>
    6ef6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 6f88 <loop+0xbc0>
    6efa:	4c21      	ldr	r4, [pc, #132]	; (6f80 <loop+0xbb8>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6efc:	6823      	ldr	r3, [r4, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    6efe:	f8d9 2000 	ldr.w	r2, [r9]
    6f02:	9303      	str	r3, [sp, #12]
    6f04:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    6f08:	4413      	add	r3, r2
	return ret;
    6f0a:	9a03      	ldr	r2, [sp, #12]
    6f0c:	4293      	cmp	r3, r2
    6f0e:	f0c0 8097 	bcc.w	7040 <loop+0xc78>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f12:	6822      	ldr	r2, [r4, #0]
    6f14:	9205      	str	r2, [sp, #20]
	return ret;
    6f16:	9a05      	ldr	r2, [sp, #20]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    6f18:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    6f1c:	4293      	cmp	r3, r2
    6f1e:	f4bf ac06 	bcs.w	672e <loop+0x366>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    6f22:	2100      	movs	r1, #0
    6f24:	2015      	movs	r0, #21
    6f26:	f003 f823 	bl	9f70 <digitalWrite>
    6f2a:	e400      	b.n	672e <loop+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f2c:	4c14      	ldr	r4, [pc, #80]	; (6f80 <loop+0xbb8>)
              bmsstatus = Precharge;
    6f2e:	2304      	movs	r3, #4
    6f30:	703b      	strb	r3, [r7, #0]
    6f32:	6823      	ldr	r3, [r4, #0]
    6f34:	930a      	str	r3, [sp, #40]	; 0x28
              Pretimer = millis();
    6f36:	4b15      	ldr	r3, [pc, #84]	; (6f8c <loop+0xbc4>)
	return ret;
    6f38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    6f3a:	601a      	str	r2, [r3, #0]
    6f3c:	e54b      	b.n	69d6 <loop+0x60e>
    6f3e:	bf00      	nop
    6f40:	1fff91e0 	.word	0x1fff91e0
    6f44:	1fff8828 	.word	0x1fff8828
    6f48:	3e8e38e4 	.word	0x3e8e38e4
    6f4c:	1fff91cc 	.word	0x1fff91cc
    6f50:	1fffcb40 	.word	0x1fffcb40
    6f54:	1fff9194 	.word	0x1fff9194
    6f58:	1fffcddc 	.word	0x1fffcddc
    6f5c:	1fff8a04 	.word	0x1fff8a04
    6f60:	00014c28 	.word	0x00014c28
    6f64:	00014c14 	.word	0x00014c14
    6f68:	1fffcec8 	.word	0x1fffcec8
    6f6c:	00014c60 	.word	0x00014c60
    6f70:	00014a64 	.word	0x00014a64
    6f74:	00014c7c 	.word	0x00014c7c
    6f78:	1fffcb34 	.word	0x1fffcb34
    6f7c:	1fff919c 	.word	0x1fff919c
    6f80:	1fffd0e4 	.word	0x1fffd0e4
    6f84:	00014cbc 	.word	0x00014cbc
    6f88:	1fffcd34 	.word	0x1fffcd34
    6f8c:	1fff91a4 	.word	0x1fff91a4
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    6f90:	9001      	str	r0, [sp, #4]
    6f92:	485c      	ldr	r0, [pc, #368]	; (7104 <loop+0xd3c>)
    6f94:	f7f9 ff20 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6f98:	6a29      	ldr	r1, [r5, #32]
    6f9a:	4681      	mov	r9, r0
    6f9c:	6a68      	ldr	r0, [r5, #36]	; 0x24
    6f9e:	f005 fc2f 	bl	c800 <__aeabi_fsub>
    6fa2:	4601      	mov	r1, r0
    6fa4:	4648      	mov	r0, r9
    6fa6:	f005 fed3 	bl	cd50 <__aeabi_fcmplt>
    6faa:	9b01      	ldr	r3, [sp, #4]
    6fac:	2800      	cmp	r0, #0
    6fae:	f43f abf0 	beq.w	6792 <loop+0x3ca>
                digitalWrite(OUT3, HIGH);  //turn on charger
    6fb2:	4651      	mov	r1, sl
    6fb4:	2014      	movs	r0, #20
                Charged = 0;
    6fb6:	f8cb 3000 	str.w	r3, [fp]
                digitalWrite(OUT3, HIGH);  //turn on charger
    6fba:	f002 ffd9 	bl	9f70 <digitalWrite>
    6fbe:	f7ff bbe8 	b.w	6792 <loop+0x3ca>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6fc2:	4850      	ldr	r0, [pc, #320]	; (7104 <loop+0xd3c>)
    6fc4:	f7f9 ffbc 	bl	f40 <BMSModuleManager::getHighTemperature()>
    6fc8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6fca:	f005 fedf 	bl	cd8c <__aeabi_fcmpgt>
    6fce:	2800      	cmp	r0, #0
    6fd0:	f47f af33 	bne.w	6e3a <loop+0xa72>
    6fd4:	f7ff bae6 	b.w	65a4 <loop+0x1dc>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6fd8:	484a      	ldr	r0, [pc, #296]	; (7104 <loop+0xd3c>)
    6fda:	f7f9 ffb1 	bl	f40 <BMSModuleManager::getHighTemperature()>
    6fde:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    6fe0:	f005 fed4 	bl	cd8c <__aeabi_fcmpgt>
    6fe4:	4601      	mov	r1, r0
    6fe6:	2800      	cmp	r0, #0
    6fe8:	f47f ac03 	bne.w	67f2 <loop+0x42a>
              digitalWrite(OUT2, LOW);  //trip breaker
    6fec:	200c      	movs	r0, #12
    6fee:	f002 ffbf 	bl	9f70 <digitalWrite>
    6ff2:	f7ff bad7 	b.w	65a4 <loop+0x1dc>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6ff6:	4843      	ldr	r0, [pc, #268]	; (7104 <loop+0xd3c>)
    6ff8:	f7f9 feee 	bl	dd8 <BMSModuleManager::getHighCellVolt()>
    6ffc:	6a29      	ldr	r1, [r5, #32]
    6ffe:	4681      	mov	r9, r0
    7000:	69a8      	ldr	r0, [r5, #24]
    7002:	f005 fbfd 	bl	c800 <__aeabi_fsub>
    7006:	4601      	mov	r1, r0
    7008:	4648      	mov	r0, r9
    700a:	f005 fea1 	bl	cd50 <__aeabi_fcmplt>
    700e:	2800      	cmp	r0, #0
    7010:	f43f abbf 	beq.w	6792 <loop+0x3ca>
                if (digitalRead(OUT3) == 0) {
    7014:	2014      	movs	r0, #20
    7016:	f002 ffd1 	bl	9fbc <digitalRead>
    701a:	4681      	mov	r9, r0
    701c:	2800      	cmp	r0, #0
    701e:	f47f abb8 	bne.w	6792 <loop+0x3ca>
                  Serial.println();
    7022:	4839      	ldr	r0, [pc, #228]	; (7108 <loop+0xd40>)
    7024:	f002 f8d2 	bl	91cc <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    7028:	4938      	ldr	r1, [pc, #224]	; (710c <loop+0xd44>)
    702a:	4837      	ldr	r0, [pc, #220]	; (7108 <loop+0xd40>)
    702c:	f7fa fae2 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);  //turn on charger
    7030:	4651      	mov	r1, sl
    7032:	2014      	movs	r0, #20
                  Charged = 0;
    7034:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);  //turn on charger
    7038:	f002 ff9a 	bl	9f70 <digitalWrite>
    703c:	f7ff bba9 	b.w	6792 <loop+0x3ca>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7040:	200c      	movs	r0, #12
    7042:	f002 ffbb 	bl	9fbc <digitalRead>
    7046:	b988      	cbnz	r0, 706c <loop+0xca4>
    7048:	4b31      	ldr	r3, [pc, #196]	; (7110 <loop+0xd48>)
    704a:	f8d3 a000 	ldr.w	sl, [r3]
    704e:	2100      	movs	r1, #0
    7050:	4650      	mov	r0, sl
    7052:	f005 fe9b 	bl	cd8c <__aeabi_fcmpgt>
    7056:	b908      	cbnz	r0, 705c <loop+0xc94>
    7058:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    705c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7060:	f005 fc84 	bl	c96c <__aeabi_i2f>
    7064:	4651      	mov	r1, sl
    7066:	f005 fe91 	bl	cd8c <__aeabi_fcmpgt>
    706a:	bb68      	cbnz	r0, 70c8 <loop+0xd00>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    706c:	f8d9 2000 	ldr.w	r2, [r9]
    7070:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    7074:	4413      	add	r3, r2
    7076:	e74c      	b.n	6f12 <loop+0xb4a>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7078:	2015      	movs	r0, #21
    707a:	f002 ff9f 	bl	9fbc <digitalRead>
    707e:	4682      	mov	sl, r0
    7080:	2800      	cmp	r0, #0
    7082:	f47f af38 	bne.w	6ef6 <loop+0xb2e>
              digitalWrite(OUT4, HIGH);  //Precharge start
    7086:	4621      	mov	r1, r4
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7088:	4c22      	ldr	r4, [pc, #136]	; (7114 <loop+0xd4c>)
              mainconttimer = millis();
    708a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 7118 <loop+0xd50>
    708e:	6823      	ldr	r3, [r4, #0]
    7090:	9302      	str	r3, [sp, #8]
	return ret;
    7092:	9b02      	ldr	r3, [sp, #8]
    7094:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);  //Precharge start
    7098:	2015      	movs	r0, #21
    709a:	f002 ff69 	bl	9f70 <digitalWrite>
              Serial.println();
    709e:	481a      	ldr	r0, [pc, #104]	; (7108 <loop+0xd40>)
    70a0:	f002 f894 	bl	91cc <Print::println()>
              Serial.println("Precharge!!!");
    70a4:	491d      	ldr	r1, [pc, #116]	; (711c <loop+0xd54>)
    70a6:	4818      	ldr	r0, [pc, #96]	; (7108 <loop+0xd40>)
    70a8:	f7fa faa4 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    70ac:	f8d9 1000 	ldr.w	r1, [r9]
    70b0:	4815      	ldr	r0, [pc, #84]	; (7108 <loop+0xd40>)
    70b2:	4653      	mov	r3, sl
    70b4:	220a      	movs	r2, #10
    70b6:	f002 f8a1 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    70ba:	4813      	ldr	r0, [pc, #76]	; (7108 <loop+0xd40>)
    70bc:	f002 f886 	bl	91cc <Print::println()>
              Serial.println();
    70c0:	4811      	ldr	r0, [pc, #68]	; (7108 <loop+0xd40>)
    70c2:	f002 f883 	bl	91cc <Print::println()>
    70c6:	e719      	b.n	6efc <loop+0xb34>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    70c8:	2101      	movs	r1, #1
    70ca:	200c      	movs	r0, #12
    70cc:	f002 ff50 	bl	9f70 <digitalWrite>
              contctrl = contctrl | 2;   //turn on contactor
    70d0:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    70d4:	480c      	ldr	r0, [pc, #48]	; (7108 <loop+0xd40>)
              contctrl = contctrl | 2;   //turn on contactor
    70d6:	f043 0302 	orr.w	r3, r3, #2
    70da:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    70de:	f002 f875 	bl	91cc <Print::println()>
              Serial.println("Main On!!!");
    70e2:	490f      	ldr	r1, [pc, #60]	; (7120 <loop+0xd58>)
    70e4:	4808      	ldr	r0, [pc, #32]	; (7108 <loop+0xd40>)
    70e6:	f7fa fa85 	bl	15f4 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    70ea:	4807      	ldr	r0, [pc, #28]	; (7108 <loop+0xd40>)
    70ec:	f002 f86e 	bl	91cc <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70f0:	6823      	ldr	r3, [r4, #0]
    70f2:	9304      	str	r3, [sp, #16]
	return ret;
    70f4:	9a04      	ldr	r2, [sp, #16]
              mainconttimer = millis() + settings.Pretime;
    70f6:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
    70fa:	441a      	add	r2, r3
    70fc:	f8c9 2000 	str.w	r2, [r9]
    7100:	4413      	add	r3, r2
    7102:	e706      	b.n	6f12 <loop+0xb4a>
    7104:	1fff91e0 	.word	0x1fff91e0
    7108:	1fff8a04 	.word	0x1fff8a04
    710c:	00014c28 	.word	0x00014c28
    7110:	1fffcccc 	.word	0x1fffcccc
    7114:	1fffd0e4 	.word	0x1fffd0e4
    7118:	1fffcd34 	.word	0x1fffcd34
    711c:	00014bf8 	.word	0x00014bf8
    7120:	00014c08 	.word	0x00014c08

00007124 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    7124:	4b0b      	ldr	r3, [pc, #44]	; (7154 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    7126:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    712c:	781c      	ldrb	r4, [r3, #0]
    712e:	f002 fa67 	bl	9600 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    7132:	4284      	cmp	r4, r0
    7134:	d004      	beq.n	7140 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    7136:	4621      	mov	r1, r4
    7138:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    713c:	f002 fa7a 	bl	9634 <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    7140:	4b05      	ldr	r3, [pc, #20]	; (7158 <low_voltage_isr+0x34>)
    7142:	785a      	ldrb	r2, [r3, #1]
    7144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7148:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    714a:	781a      	ldrb	r2, [r3, #0]
    714c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7150:	701a      	strb	r2, [r3, #0]
}
    7152:	bd10      	pop	{r4, pc}
    7154:	1fff8828 	.word	0x1fff8828
    7158:	4007d000 	.word	0x4007d000

0000715c <_GLOBAL__sub_I_bms>:
    715c:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    715e:	f002 fa19 	bl	9594 <eeprom_initialize>
BMSModuleManager bms;
    7162:	480c      	ldr	r0, [pc, #48]	; (7194 <_GLOBAL__sub_I_bms+0x38>)
    7164:	f7f9 fc24 	bl	9b0 <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    7168:	480b      	ldr	r0, [pc, #44]	; (7198 <_GLOBAL__sub_I_bms+0x3c>)
    716a:	f000 fc0d 	bl	7988 <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    716e:	4a0b      	ldr	r2, [pc, #44]	; (719c <_GLOBAL__sub_I_bms+0x40>)
    7170:	480b      	ldr	r0, [pc, #44]	; (71a0 <_GLOBAL__sub_I_bms+0x44>)
    7172:	6812      	ldr	r2, [r2, #0]
    7174:	2300      	movs	r3, #0
    7176:	2101      	movs	r1, #1
    7178:	f001 fd82 	bl	8c80 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
CRC8 crc8;
    717c:	4809      	ldr	r0, [pc, #36]	; (71a4 <_GLOBAL__sub_I_bms+0x48>)
    717e:	f000 fa65 	bl	764c <CRC8::CRC8()>
ADC *adc = new ADC();  // adc object
    7182:	2094      	movs	r0, #148	; 0x94
    7184:	f002 fc50 	bl	9a28 <operator new(unsigned int)>
    7188:	4604      	mov	r4, r0
    718a:	f001 f945 	bl	8418 <ADC::ADC()>
    718e:	4b06      	ldr	r3, [pc, #24]	; (71a8 <_GLOBAL__sub_I_bms+0x4c>)
    7190:	601c      	str	r4, [r3, #0]
}
    7192:	bd10      	pop	{r4, pc}
    7194:	1fff91e0 	.word	0x1fff91e0
    7198:	1fffcb58 	.word	0x1fffcb58
    719c:	1fff8858 	.word	0x1fff8858
    71a0:	1fffcd14 	.word	0x1fffcd14
    71a4:	1fffcbcc 	.word	0x1fffcbcc
    71a8:	1fff91c4 	.word	0x1fff91c4

000071ac <setup>:
void setup() {
    71ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pinMode(IN1, INPUT);
    71b0:	2100      	movs	r1, #0
void setup() {
    71b2:	b085      	sub	sp, #20
  pinMode(IN1, INPUT);
    71b4:	2011      	movs	r0, #17
    71b6:	f002 ff0f 	bl	9fd8 <pinMode>
  pinMode(IN2, INPUT);
    71ba:	2100      	movs	r1, #0
    71bc:	2010      	movs	r0, #16
    71be:	f002 ff0b 	bl	9fd8 <pinMode>
  pinMode(IN3, INPUT);
    71c2:	2100      	movs	r1, #0
    71c4:	2012      	movs	r0, #18
    71c6:	f002 ff07 	bl	9fd8 <pinMode>
  pinMode(IN4, INPUT);
    71ca:	2100      	movs	r1, #0
    71cc:	2013      	movs	r0, #19
    71ce:	f002 ff03 	bl	9fd8 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    71d2:	2101      	movs	r1, #1
    71d4:	200b      	movs	r0, #11
    71d6:	f002 feff 	bl	9fd8 <pinMode>
  pinMode(OUT2, OUTPUT);  // precharge
    71da:	2101      	movs	r1, #1
    71dc:	200c      	movs	r0, #12
    71de:	f002 fefb 	bl	9fd8 <pinMode>
  pinMode(OUT3, OUTPUT);  // charge relay
    71e2:	2101      	movs	r1, #1
    71e4:	2014      	movs	r0, #20
    71e6:	f002 fef7 	bl	9fd8 <pinMode>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    71ea:	2101      	movs	r1, #1
    71ec:	2015      	movs	r0, #21
    71ee:	f002 fef3 	bl	9fd8 <pinMode>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    71f2:	2101      	movs	r1, #1
    71f4:	2016      	movs	r0, #22
    71f6:	f002 feef 	bl	9fd8 <pinMode>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    71fa:	2101      	movs	r1, #1
    71fc:	2017      	movs	r0, #23
    71fe:	f002 feeb 	bl	9fd8 <pinMode>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    7202:	2101      	movs	r1, #1
    7204:	2005      	movs	r0, #5
    7206:	f002 fee7 	bl	9fd8 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    720a:	4cb2      	ldr	r4, [pc, #712]	; (74d4 <L_30691_delayMicroseconds+0xf4>)
    Can0.getFilter(filter, i);
    720c:	4fb2      	ldr	r7, [pc, #712]	; (74d8 <L_30691_delayMicroseconds+0xf8>)
  pinMode(OUT8, OUTPUT);  // pwm driver output
    720e:	2101      	movs	r1, #1
    7210:	2006      	movs	r0, #6
    7212:	f002 fee1 	bl	9fd8 <pinMode>
  pinMode(led, OUTPUT);
    7216:	2101      	movs	r1, #1
    7218:	200d      	movs	r0, #13
    721a:	f002 fedd 	bl	9fd8 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    721e:	8820      	ldrh	r0, [r4, #0]
    7220:	f005 fba0 	bl	c964 <__aeabi_ui2f>
    7224:	4601      	mov	r1, r0
    7226:	2016      	movs	r0, #22
    7228:	f002 fe38 	bl	9e9c <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    722c:	8820      	ldrh	r0, [r4, #0]
    722e:	f005 fb99 	bl	c964 <__aeabi_ui2f>
    7232:	4601      	mov	r1, r0
    7234:	2017      	movs	r0, #23
    7236:	f002 fe31 	bl	9e9c <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    723a:	8820      	ldrh	r0, [r4, #0]
    723c:	f005 fb92 	bl	c964 <__aeabi_ui2f>
    7240:	4601      	mov	r1, r0
    7242:	2005      	movs	r0, #5
    7244:	f002 fe2a 	bl	9e9c <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    7248:	8820      	ldrh	r0, [r4, #0]
    724a:	4ca4      	ldr	r4, [pc, #656]	; (74dc <L_30691_delayMicroseconds+0xfc>)
    724c:	f005 fb8a 	bl	c964 <__aeabi_ui2f>
  Can0.begin(500000);
    7250:	2500      	movs	r5, #0
  analogWriteFrequency(OUT8, pwmfreq);
    7252:	4601      	mov	r1, r0
    7254:	2006      	movs	r0, #6
    7256:	f002 fe21 	bl	9e9c <analogWriteFrequency>
  Can0.begin(500000);
    725a:	4aa1      	ldr	r2, [pc, #644]	; (74e0 <L_30691_delayMicroseconds+0x100>)
    725c:	49a1      	ldr	r1, [pc, #644]	; (74e4 <L_30691_delayMicroseconds+0x104>)
    725e:	489e      	ldr	r0, [pc, #632]	; (74d8 <L_30691_delayMicroseconds+0xf8>)
    7260:	9500      	str	r5, [sp, #0]
    7262:	462b      	mov	r3, r5
    7264:	f000 fd18 	bl	7c98 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    Can0.getFilter(filter, i);
    7268:	b2ee      	uxtb	r6, r5
    726a:	4632      	mov	r2, r6
    726c:	4621      	mov	r1, r4
    726e:	4638      	mov	r0, r7
    7270:	f000 fcba 	bl	7be8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 0;
    7274:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    7276:	4632      	mov	r2, r6
    filter.flags.extended = 0;
    7278:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    727c:	4621      	mov	r1, r4
    727e:	4638      	mov	r0, r7
  for (int i = 0; i < 8; i++) {
    7280:	3501      	adds	r5, #1
    filter.flags.extended = 0;
    7282:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    7284:	f000 fc6e 	bl	7b64 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    7288:	2d08      	cmp	r5, #8
    728a:	d1ed      	bne.n	7268 <setup+0xbc>
    Can0.getFilter(filter, i);
    728c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 74dc <L_30691_delayMicroseconds+0xfc>
    7290:	4f91      	ldr	r7, [pc, #580]	; (74d8 <L_30691_delayMicroseconds+0xf8>)
  for (int i = 9; i < 13; i++) {
    7292:	2509      	movs	r5, #9
    Can0.getFilter(filter, i);
    7294:	b2ee      	uxtb	r6, r5
    7296:	4632      	mov	r2, r6
    7298:	4641      	mov	r1, r8
    729a:	4638      	mov	r0, r7
    729c:	f000 fca4 	bl	7be8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>
    filter.flags.extended = 1;
    72a0:	7923      	ldrb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    72a2:	4632      	mov	r2, r6
    filter.flags.extended = 1;
    72a4:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    72a8:	4641      	mov	r1, r8
    72aa:	4638      	mov	r0, r7
  for (int i = 9; i < 13; i++) {
    72ac:	3501      	adds	r5, #1
    filter.flags.extended = 1;
    72ae:	7123      	strb	r3, [r4, #4]
    Can0.setFilter(filter, i);
    72b0:	f000 fc58 	bl	7b64 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    72b4:	2d0d      	cmp	r5, #13
    72b6:	d1ed      	bne.n	7294 <setup+0xe8>
  adc->adc0->setAveraging(16);   // set number of averages
    72b8:	4c8b      	ldr	r4, [pc, #556]	; (74e8 <L_30691_delayMicroseconds+0x108>)
		uint32_t millis_begin = systick_millis_count;
    72ba:	4f8c      	ldr	r7, [pc, #560]	; (74ec <L_30691_delayMicroseconds+0x10c>)
    72bc:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    72be:	4e8c      	ldr	r6, [pc, #560]	; (74f0 <L_30691_delayMicroseconds+0x110>)
    72c0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    72c4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 74f4 <L_30691_delayMicroseconds+0x114>
    72c8:	2110      	movs	r1, #16
    72ca:	f001 fb7d 	bl	89c8 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    72ce:	6823      	ldr	r3, [r4, #0]
    72d0:	2110      	movs	r1, #16
    72d2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    72d6:	f001 fa3d 	bl	8754 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    72da:	6823      	ldr	r3, [r4, #0]
    72dc:	2102      	movs	r1, #2
    72de:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    72e2:	f001 f91f 	bl	8524 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    72e6:	6823      	ldr	r3, [r4, #0]
    72e8:	2102      	movs	r1, #2
    72ea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    72ee:	f001 fb17 	bl	8920 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    72f2:	6823      	ldr	r3, [r4, #0]
    72f4:	4c80      	ldr	r4, [pc, #512]	; (74f8 <L_30691_delayMicroseconds+0x118>)
    72f6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    72fa:	210f      	movs	r1, #15
    72fc:	f001 fbc8 	bl	8a90 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    7300:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    7302:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    7306:	f004 fdab 	bl	be60 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    730a:	7823      	ldrb	r3, [r4, #0]
    730c:	2b00      	cmp	r3, #0
    730e:	f000 8123 	beq.w	7558 <L_30691_delayMicroseconds+0x178>
    7312:	7833      	ldrb	r3, [r6, #0]
    7314:	07d8      	lsls	r0, r3, #31
    7316:	f140 811f 	bpl.w	7558 <L_30691_delayMicroseconds+0x178>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    731a:	683b      	ldr	r3, [r7, #0]
    731c:	f8d9 2000 	ldr.w	r2, [r9]
    7320:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7322:	2b0e      	cmp	r3, #14
    7324:	f240 8118 	bls.w	7558 <L_30691_delayMicroseconds+0x178>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7328:	210c      	movs	r1, #12
    732a:	4874      	ldr	r0, [pc, #464]	; (74fc <L_30691_delayMicroseconds+0x11c>)
    732c:	f004 fc92 	bl	bc54 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7330:	4873      	ldr	r0, [pc, #460]	; (7500 <L_30691_delayMicroseconds+0x120>)
    7332:	f001 ff4b 	bl	91cc <Print::println()>
    7336:	2111      	movs	r1, #17
    7338:	4872      	ldr	r0, [pc, #456]	; (7504 <L_30691_delayMicroseconds+0x124>)
    733a:	f004 fc8b 	bl	bc54 <usb_serial_write>
    733e:	4870      	ldr	r0, [pc, #448]	; (7500 <L_30691_delayMicroseconds+0x120>)
    7340:	f001 ff44 	bl	91cc <Print::println()>
  Serial2.begin(115200);
    7344:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7348:	486f      	ldr	r0, [pc, #444]	; (7508 <L_30691_delayMicroseconds+0x128>)
    734a:	f001 fd85 	bl	8e58 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    734e:	486c      	ldr	r0, [pc, #432]	; (7500 <L_30691_delayMicroseconds+0x120>)
    7350:	f001 ff3c 	bl	91cc <Print::println()>
    7354:	2117      	movs	r1, #23
    7356:	486d      	ldr	r0, [pc, #436]	; (750c <L_30691_delayMicroseconds+0x12c>)
    7358:	f004 fc7c 	bl	bc54 <usb_serial_write>
    735c:	4868      	ldr	r0, [pc, #416]	; (7500 <L_30691_delayMicroseconds+0x120>)
    735e:	f001 ff35 	bl	91cc <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    7362:	4b6b      	ldr	r3, [pc, #428]	; (7510 <L_30691_delayMicroseconds+0x130>)
    7364:	785b      	ldrb	r3, [r3, #1]
    7366:	0699      	lsls	r1, r3, #26
    7368:	f100 8150 	bmi.w	760c <L_30691_delayMicroseconds+0x22c>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    736c:	4b68      	ldr	r3, [pc, #416]	; (7510 <L_30691_delayMicroseconds+0x130>)
    736e:	785b      	ldrb	r3, [r3, #1]
    7370:	071a      	lsls	r2, r3, #28
    7372:	f100 8143 	bmi.w	75fc <L_30691_delayMicroseconds+0x21c>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    7376:	4b66      	ldr	r3, [pc, #408]	; (7510 <L_30691_delayMicroseconds+0x130>)
    7378:	785b      	ldrb	r3, [r3, #1]
    737a:	075b      	lsls	r3, r3, #29
    737c:	f100 8136 	bmi.w	75ec <L_30691_delayMicroseconds+0x20c>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    7380:	4b63      	ldr	r3, [pc, #396]	; (7510 <L_30691_delayMicroseconds+0x130>)
    7382:	785b      	ldrb	r3, [r3, #1]
    7384:	079e      	lsls	r6, r3, #30
    7386:	f100 811d 	bmi.w	75c4 <L_30691_delayMicroseconds+0x1e4>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    738a:	4b61      	ldr	r3, [pc, #388]	; (7510 <L_30691_delayMicroseconds+0x130>)
    738c:	781b      	ldrb	r3, [r3, #0]
    738e:	061d      	lsls	r5, r3, #24
    7390:	f100 8124 	bmi.w	75dc <L_30691_delayMicroseconds+0x1fc>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    7394:	4b5e      	ldr	r3, [pc, #376]	; (7510 <L_30691_delayMicroseconds+0x130>)
    7396:	781b      	ldrb	r3, [r3, #0]
    7398:	065c      	lsls	r4, r3, #25
    739a:	f100 810b 	bmi.w	75b4 <L_30691_delayMicroseconds+0x1d4>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    739e:	4b5c      	ldr	r3, [pc, #368]	; (7510 <L_30691_delayMicroseconds+0x130>)
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	0698      	lsls	r0, r3, #26
    73a4:	f100 80fe 	bmi.w	75a4 <L_30691_delayMicroseconds+0x1c4>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    73a8:	4b59      	ldr	r3, [pc, #356]	; (7510 <L_30691_delayMicroseconds+0x130>)
    73aa:	781b      	ldrb	r3, [r3, #0]
    73ac:	0759      	lsls	r1, r3, #29
    73ae:	f100 80f1 	bmi.w	7594 <L_30691_delayMicroseconds+0x1b4>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    73b2:	4b57      	ldr	r3, [pc, #348]	; (7510 <L_30691_delayMicroseconds+0x130>)
    73b4:	781b      	ldrb	r3, [r3, #0]
    73b6:	071a      	lsls	r2, r3, #28
    73b8:	f100 80e4 	bmi.w	7584 <L_30691_delayMicroseconds+0x1a4>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    73bc:	4b54      	ldr	r3, [pc, #336]	; (7510 <L_30691_delayMicroseconds+0x130>)
    73be:	781b      	ldrb	r3, [r3, #0]
    73c0:	079b      	lsls	r3, r3, #30
    73c2:	f100 80d7 	bmi.w	7574 <L_30691_delayMicroseconds+0x194>
  Serial.println();
    73c6:	484e      	ldr	r0, [pc, #312]	; (7500 <L_30691_delayMicroseconds+0x120>)
    73c8:	f001 ff00 	bl	91cc <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    73cc:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    73ce:	4b51      	ldr	r3, [pc, #324]	; (7514 <L_30691_delayMicroseconds+0x134>)
    73d0:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    73d4:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    73d8:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    73da:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    73dc:	81da      	strh	r2, [r3, #14]
    73de:	4622      	mov	r2, r4

000073e0 <L_30691_delayMicroseconds>:
    73e0:	3a01      	subs	r2, #1
    73e2:	d1fd      	bne.n	73e0 <L_30691_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    73e4:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    73e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    73ea:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    73ec:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    73ee:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    73f0:	881a      	ldrh	r2, [r3, #0]
    73f2:	b292      	uxth	r2, r2
    73f4:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    73f8:	801a      	strh	r2, [r3, #0]
  interrupts();
    73fa:	b662      	cpsie	i
  SERIALBMS.begin(612500);  //Tesla serial bus
    73fc:	4846      	ldr	r0, [pc, #280]	; (7518 <L_30691_delayMicroseconds+0x138>)
    73fe:	4947      	ldr	r1, [pc, #284]	; (751c <L_30691_delayMicroseconds+0x13c>)
    7400:	f8df 811c 	ldr.w	r8, [pc, #284]	; 7520 <L_30691_delayMicroseconds+0x140>
    7404:	f001 fde0 	bl	8fc8 <HardwareSerial3::begin(unsigned long)>
    7408:	4621      	mov	r1, r4
    740a:	4846      	ldr	r0, [pc, #280]	; (7524 <L_30691_delayMicroseconds+0x144>)
    740c:	f004 fc22 	bl	bc54 <usb_serial_write>
    7410:	483b      	ldr	r0, [pc, #236]	; (7500 <L_30691_delayMicroseconds+0x120>)
    7412:	f001 fedb 	bl	91cc <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7416:	f108 34ff 	add.w	r4, r8, #4294967295
    741a:	f108 06d7 	add.w	r6, r8, #215	; 0xd7
    741e:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7422:	1928      	adds	r0, r5, r4
    7424:	f002 f8ec 	bl	9600 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7428:	f804 0f01 	strb.w	r0, [r4, #1]!
    742c:	42b4      	cmp	r4, r6
    742e:	d1f8      	bne.n	7422 <L_30691_delayMicroseconds+0x42>
  if (settings.version != EEPROM_VERSION) {
    7430:	f898 3000 	ldrb.w	r3, [r8]
    7434:	2b11      	cmp	r3, #17
    7436:	d001      	beq.n	743c <L_30691_delayMicroseconds+0x5c>
    loadSettings();
    7438:	f7fa f8ee 	bl	1618 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    743c:	2004      	movs	r0, #4
    743e:	f000 f93b 	bl	76b8 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    7442:	4b39      	ldr	r3, [pc, #228]	; (7528 <L_30691_delayMicroseconds+0x148>)
  crc8.begin();
    7444:	4839      	ldr	r0, [pc, #228]	; (752c <L_30691_delayMicroseconds+0x14c>)
  lastUpdate = 0;
    7446:	2400      	movs	r4, #0
    7448:	601c      	str	r4, [r3, #0]
  crc8.begin();
    744a:	f000 f901 	bl	7650 <CRC8::begin()>
  digitalWrite(led, HIGH);
    744e:	2101      	movs	r1, #1
    7450:	200d      	movs	r0, #13
    7452:	f002 fd8d 	bl	9f70 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    7456:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
    745a:	4835      	ldr	r0, [pc, #212]	; (7530 <L_30691_delayMicroseconds+0x150>)
    745c:	f7f9 fce4 	bl	e28 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.TempOff);
    7460:	f9b8 30d0 	ldrsh.w	r3, [r8, #208]	; 0xd0
    7464:	f8d8 204c 	ldr.w	r2, [r8, #76]	; 0x4c
    7468:	f898 1048 	ldrb.w	r1, [r8, #72]	; 0x48
    746c:	4830      	ldr	r0, [pc, #192]	; (7530 <L_30691_delayMicroseconds+0x150>)
    746e:	f7f9 fcdd 	bl	e2c <BMSModuleManager::setSensors(int, float, int)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7472:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7476:	f002 f8c3 	bl	9600 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    747a:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
  SOC = (EEPROM.read(1000));
    747e:	4a2d      	ldr	r2, [pc, #180]	; (7534 <L_30691_delayMicroseconds+0x154>)
  if (settings.voltsoc == 1) {
    7480:	2b01      	cmp	r3, #1
  SOC = (EEPROM.read(1000));
    7482:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1) {
    7484:	d003      	beq.n	748e <L_30691_delayMicroseconds+0xae>
    if (SOC > 100) {
    7486:	2864      	cmp	r0, #100	; 0x64
    7488:	bfcc      	ite	gt
    748a:	2400      	movgt	r4, #0
    748c:	2401      	movle	r4, #1
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    748e:	4b2a      	ldr	r3, [pc, #168]	; (7538 <L_30691_delayMicroseconds+0x158>)
    7490:	4a2a      	ldr	r2, [pc, #168]	; (753c <L_30691_delayMicroseconds+0x15c>)
    7492:	681b      	ldr	r3, [r3, #0]
    SOCmem = 0;
    7494:	492a      	ldr	r1, [pc, #168]	; (7540 <L_30691_delayMicroseconds+0x160>)
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    7496:	fb82 0203 	smull	r0, r2, r2, r3
    749a:	17db      	asrs	r3, r3, #31
    749c:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    74a0:	4a28      	ldr	r2, [pc, #160]	; (7544 <L_30691_delayMicroseconds+0x164>)
    SOCmem = 0;
    74a2:	600c      	str	r4, [r1, #0]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    74a4:	6812      	ldr	r2, [r2, #0]
    74a6:	4828      	ldr	r0, [pc, #160]	; (7548 <L_30691_delayMicroseconds+0x168>)
    74a8:	fb13 f302 	smulbb	r3, r3, r2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    74ac:	683a      	ldr	r2, [r7, #0]
    74ae:	9203      	str	r2, [sp, #12]
	return ret;
    74b0:	9903      	ldr	r1, [sp, #12]
  Pretimer = millis();
    74b2:	4a26      	ldr	r2, [pc, #152]	; (754c <L_30691_delayMicroseconds+0x16c>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    74b4:	683c      	ldr	r4, [r7, #0]
    74b6:	9402      	str	r4, [sp, #8]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    74b8:	8003      	strh	r3, [r0, #0]
  Pretimer = millis();
    74ba:	6011      	str	r1, [r2, #0]
	return ret;
    74bc:	9c02      	ldr	r4, [sp, #8]
  Pretimer1 = millis();
    74be:	4b24      	ldr	r3, [pc, #144]	; (7550 <L_30691_delayMicroseconds+0x170>)
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    74c0:	4924      	ldr	r1, [pc, #144]	; (7554 <L_30691_delayMicroseconds+0x174>)
  Pretimer1 = millis();
    74c2:	601c      	str	r4, [r3, #0]
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    74c4:	2204      	movs	r2, #4
    74c6:	2013      	movs	r0, #19
}
    74c8:	b005      	add	sp, #20
    74ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    74ce:	f002 bb01 	b.w	9ad4 <attachInterrupt>
    74d2:	bf00      	nop
    74d4:	1fff8878 	.word	0x1fff8878
    74d8:	1fffcef0 	.word	0x1fffcef0
    74dc:	1fffccdc 	.word	0x1fffccdc
    74e0:	1fffd08c 	.word	0x1fffd08c
    74e4:	0007a120 	.word	0x0007a120
    74e8:	1fff91c4 	.word	0x1fff91c4
    74ec:	1fffd0e4 	.word	0x1fffd0e4
    74f0:	1fffd300 	.word	0x1fffd300
    74f4:	1fffd304 	.word	0x1fffd304
    74f8:	1fffd2dc 	.word	0x1fffd2dc
    74fc:	00014cd8 	.word	0x00014cd8
    7500:	1fff8a04 	.word	0x1fff8a04
    7504:	00014ce8 	.word	0x00014ce8
    7508:	1fff88c4 	.word	0x1fff88c4
    750c:	00014cfc 	.word	0x00014cfc
    7510:	4007f000 	.word	0x4007f000
    7514:	40052000 	.word	0x40052000
    7518:	1fff88d8 	.word	0x1fff88d8
    751c:	00095894 	.word	0x00095894
    7520:	1fffcde8 	.word	0x1fffcde8
    7524:	00014e00 	.word	0x00014e00
    7528:	1fffcd04 	.word	0x1fffcd04
    752c:	1fffcbcc 	.word	0x1fffcbcc
    7530:	1fff91e0 	.word	0x1fff91e0
    7534:	1fff8828 	.word	0x1fff8828
    7538:	1fff8874 	.word	0x1fff8874
    753c:	51eb851f 	.word	0x51eb851f
    7540:	1fff91b0 	.word	0x1fff91b0
    7544:	1fff8870 	.word	0x1fff8870
    7548:	1fffcde4 	.word	0x1fffcde4
    754c:	1fff91a4 	.word	0x1fff91a4
    7550:	1fff91a8 	.word	0x1fff91a8
    7554:	00001545 	.word	0x00001545
			uint32_t elapsed = systick_millis_count - millis_begin;
    7558:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    755a:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    755c:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    755e:	b132      	cbz	r2, 756e <L_30691_delayMicroseconds+0x18e>
				if (elapsed > 2000) break;
    7560:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    7564:	f63f aee0 	bhi.w	7328 <setup+0x17c>
			yield();
    7568:	f004 fc7a 	bl	be60 <yield>
    756c:	e6cb      	b.n	7306 <setup+0x15a>
				if (elapsed > 750) break;
    756e:	4543      	cmp	r3, r8
    7570:	d9fa      	bls.n	7568 <L_30691_delayMicroseconds+0x188>
    7572:	e6d9      	b.n	7328 <setup+0x17c>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7574:	2118      	movs	r1, #24
    7576:	4829      	ldr	r0, [pc, #164]	; (761c <L_30691_delayMicroseconds+0x23c>)
    7578:	f004 fb6c 	bl	bc54 <usb_serial_write>
    757c:	4828      	ldr	r0, [pc, #160]	; (7620 <L_30691_delayMicroseconds+0x240>)
    757e:	f001 fe25 	bl	91cc <Print::println()>
    7582:	e720      	b.n	73c6 <setup+0x21a>
    7584:	2119      	movs	r1, #25
    7586:	4827      	ldr	r0, [pc, #156]	; (7624 <L_30691_delayMicroseconds+0x244>)
    7588:	f004 fb64 	bl	bc54 <usb_serial_write>
    758c:	4824      	ldr	r0, [pc, #144]	; (7620 <L_30691_delayMicroseconds+0x240>)
    758e:	f001 fe1d 	bl	91cc <Print::println()>
    7592:	e713      	b.n	73bc <setup+0x210>
    7594:	211c      	movs	r1, #28
    7596:	4824      	ldr	r0, [pc, #144]	; (7628 <L_30691_delayMicroseconds+0x248>)
    7598:	f004 fb5c 	bl	bc54 <usb_serial_write>
    759c:	4820      	ldr	r0, [pc, #128]	; (7620 <L_30691_delayMicroseconds+0x240>)
    759e:	f001 fe15 	bl	91cc <Print::println()>
    75a2:	e706      	b.n	73b2 <setup+0x206>
    75a4:	2113      	movs	r1, #19
    75a6:	4821      	ldr	r0, [pc, #132]	; (762c <L_30691_delayMicroseconds+0x24c>)
    75a8:	f004 fb54 	bl	bc54 <usb_serial_write>
    75ac:	481c      	ldr	r0, [pc, #112]	; (7620 <L_30691_delayMicroseconds+0x240>)
    75ae:	f001 fe0d 	bl	91cc <Print::println()>
    75b2:	e6f9      	b.n	73a8 <setup+0x1fc>
    75b4:	2112      	movs	r1, #18
    75b6:	481e      	ldr	r0, [pc, #120]	; (7630 <L_30691_delayMicroseconds+0x250>)
    75b8:	f004 fb4c 	bl	bc54 <usb_serial_write>
    75bc:	4818      	ldr	r0, [pc, #96]	; (7620 <L_30691_delayMicroseconds+0x240>)
    75be:	f001 fe05 	bl	91cc <Print::println()>
    75c2:	e6ec      	b.n	739e <setup+0x1f2>
    75c4:	2117      	movs	r1, #23
    75c6:	481b      	ldr	r0, [pc, #108]	; (7634 <L_30691_delayMicroseconds+0x254>)
    75c8:	f004 fb44 	bl	bc54 <usb_serial_write>
    75cc:	4814      	ldr	r0, [pc, #80]	; (7620 <L_30691_delayMicroseconds+0x240>)
    75ce:	f001 fdfd 	bl	91cc <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    75d2:	4b19      	ldr	r3, [pc, #100]	; (7638 <L_30691_delayMicroseconds+0x258>)
    75d4:	781b      	ldrb	r3, [r3, #0]
    75d6:	061d      	lsls	r5, r3, #24
    75d8:	f57f aedc 	bpl.w	7394 <setup+0x1e8>
    75dc:	210e      	movs	r1, #14
    75de:	4817      	ldr	r0, [pc, #92]	; (763c <L_30691_delayMicroseconds+0x25c>)
    75e0:	f004 fb38 	bl	bc54 <usb_serial_write>
    75e4:	480e      	ldr	r0, [pc, #56]	; (7620 <L_30691_delayMicroseconds+0x240>)
    75e6:	f001 fdf1 	bl	91cc <Print::println()>
    75ea:	e6d3      	b.n	7394 <setup+0x1e8>
    75ec:	210e      	movs	r1, #14
    75ee:	4814      	ldr	r0, [pc, #80]	; (7640 <L_30691_delayMicroseconds+0x260>)
    75f0:	f004 fb30 	bl	bc54 <usb_serial_write>
    75f4:	480a      	ldr	r0, [pc, #40]	; (7620 <L_30691_delayMicroseconds+0x240>)
    75f6:	f001 fde9 	bl	91cc <Print::println()>
    75fa:	e6c1      	b.n	7380 <setup+0x1d4>
    75fc:	210c      	movs	r1, #12
    75fe:	4811      	ldr	r0, [pc, #68]	; (7644 <L_30691_delayMicroseconds+0x264>)
    7600:	f004 fb28 	bl	bc54 <usb_serial_write>
    7604:	4806      	ldr	r0, [pc, #24]	; (7620 <L_30691_delayMicroseconds+0x240>)
    7606:	f001 fde1 	bl	91cc <Print::println()>
    760a:	e6b4      	b.n	7376 <setup+0x1ca>
    760c:	2121      	movs	r1, #33	; 0x21
    760e:	480e      	ldr	r0, [pc, #56]	; (7648 <L_30691_delayMicroseconds+0x268>)
    7610:	f004 fb20 	bl	bc54 <usb_serial_write>
    7614:	4802      	ldr	r0, [pc, #8]	; (7620 <L_30691_delayMicroseconds+0x240>)
    7616:	f001 fdd9 	bl	91cc <Print::println()>
    761a:	e6a7      	b.n	736c <setup+0x1c0>
    761c:	00014de4 	.word	0x00014de4
    7620:	1fff8a04 	.word	0x1fff8a04
    7624:	00014dc8 	.word	0x00014dc8
    7628:	00014da8 	.word	0x00014da8
    762c:	00014d94 	.word	0x00014d94
    7630:	00014d80 	.word	0x00014d80
    7634:	00014d58 	.word	0x00014d58
    7638:	4007f000 	.word	0x4007f000
    763c:	00014d70 	.word	0x00014d70
    7640:	00014d48 	.word	0x00014d48
    7644:	00014d38 	.word	0x00014d38
    7648:	00014d14 	.word	0x00014d14

0000764c <CRC8::CRC8()>:


CRC8::CRC8(void) {
 
  
}
    764c:	4770      	bx	lr
    764e:	bf00      	nop

00007650 <CRC8::begin()>:

void CRC8::begin(void) {
  crc  remainder;
    for (int dividend = 0; dividend < 256; ++dividend)
    7650:	f100 3cff 	add.w	ip, r0, #4294967295
    7654:	2000      	movs	r0, #0
    {
        remainder = dividend << (WIDTH - 8);
    7656:	b2c1      	uxtb	r1, r0
    for (int dividend = 0; dividend < 256; ++dividend)
    7658:	2208      	movs	r2, #8
        
        for (uint8_t bit = 8; bit > 0; --bit)
        {  
            if (remainder & TOPBIT)
            {
                remainder = (remainder << 1) ^ POLYNOMIAL;
    765a:	004b      	lsls	r3, r1, #1
            if (remainder & TOPBIT)
    765c:	f011 0f80 	tst.w	r1, #128	; 0x80
                remainder = (remainder << 1) ^ POLYNOMIAL;
    7660:	f083 031d 	eor.w	r3, r3, #29
    7664:	bf14      	ite	ne
    7666:	b2d9      	uxtbne	r1, r3
            }
            else
            {
                remainder = (remainder << 1);
    7668:	0049      	lsleq	r1, r1, #1
        for (uint8_t bit = 8; bit > 0; --bit)
    766a:	f102 33ff 	add.w	r3, r2, #4294967295
                remainder = (remainder << 1);
    766e:	bf08      	it	eq
    7670:	b2c9      	uxtbeq	r1, r1
        for (uint8_t bit = 8; bit > 0; --bit)
    7672:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
    7676:	d1f0      	bne.n	765a <CRC8::begin()+0xa>
    for (int dividend = 0; dividend < 256; ++dividend)
    7678:	3001      	adds	r0, #1
    767a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
            }
        }
        crcTable[dividend] = remainder;
    767e:	f80c 1f01 	strb.w	r1, [ip, #1]!
    for (int dividend = 0; dividend < 256; ++dividend)
    7682:	d1e8      	bne.n	7656 <CRC8::begin()+0x6>
    }
}
    7684:	4770      	bx	lr
    7686:	bf00      	nop

00007688 <CRC8::get_crc8(unsigned char const*, int, unsigned char)>:

crc CRC8::get_crc8(uint8_t const message[], int nBytes, uint8_t final) {
   uint8_t data;
    crc remainder = 0xFF;

    for (int byte = 0; byte < nBytes; ++byte)
    7688:	2a00      	cmp	r2, #0
    768a:	dd10      	ble.n	76ae <CRC8::get_crc8(unsigned char const*, int, unsigned char)+0x26>
crc CRC8::get_crc8(uint8_t const message[], int nBytes, uint8_t final) {
    768c:	b500      	push	{lr}
    768e:	3901      	subs	r1, #1
    7690:	440a      	add	r2, r1
    crc remainder = 0xFF;
    7692:	f04f 0cff 	mov.w	ip, #255	; 0xff
    {
        data = message[byte] ^ (remainder >> (WIDTH - 8));
    7696:	f811 ef01 	ldrb.w	lr, [r1, #1]!
        remainder = crcTable[data] ^ (remainder << 8);
    769a:	ea8c 0c0e 	eor.w	ip, ip, lr
    for (int byte = 0; byte < nBytes; ++byte)
    769e:	428a      	cmp	r2, r1
        remainder = crcTable[data] ^ (remainder << 8);
    76a0:	f810 c00c 	ldrb.w	ip, [r0, ip]
    for (int byte = 0; byte < nBytes; ++byte)
    76a4:	d1f7      	bne.n	7696 <CRC8::get_crc8(unsigned char const*, int, unsigned char)+0xe>
	
remainder = remainder^final;
   
    return (remainder);

    76a6:	ea83 000c 	eor.w	r0, r3, ip
    76aa:	f85d fb04 	ldr.w	pc, [sp], #4
    crc remainder = 0xFF;
    76ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
    76b2:	ea83 000c 	eor.w	r0, r3, ip
    76b6:	4770      	bx	lr

000076b8 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    76b8:	4b01      	ldr	r3, [pc, #4]	; (76c0 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    76ba:	7018      	strb	r0, [r3, #0]
}
    76bc:	4770      	bx	lr
    76be:	bf00      	nop
    76c0:	1fff8880 	.word	0x1fff8880

000076c4 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    76c4:	7802      	ldrb	r2, [r0, #0]
    76c6:	2a00      	cmp	r2, #0
    76c8:	f000 80b8 	beq.w	783c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    76cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    76d0:	4f5c      	ldr	r7, [pc, #368]	; (7844 <Logger::logMessage(char*, std::__va_list)+0x180>)
    76d2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 7848 <Logger::logMessage(char*, std::__va_list)+0x184>
    76d6:	4e5d      	ldr	r6, [pc, #372]	; (784c <Logger::logMessage(char*, std::__va_list)+0x188>)
    76d8:	b083      	sub	sp, #12
    76da:	4603      	mov	r3, r0
    76dc:	460d      	mov	r5, r1
    if (*format == '%') {
    76de:	2a25      	cmp	r2, #37	; 0x25
    76e0:	d134      	bne.n	774c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    76e2:	7858      	ldrb	r0, [r3, #1]
      ++format;
    76e4:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    76e6:	2800      	cmp	r0, #0
    76e8:	d038      	beq.n	775c <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    76ea:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    76ee:	2b55      	cmp	r3, #85	; 0x55
    76f0:	d82e      	bhi.n	7750 <Logger::logMessage(char*, std::__va_list)+0x8c>
    76f2:	e8df f003 	tbb	[pc, r3]
    76f6:	2d9f      	.short	0x2d9f
    76f8:	2d2d2d2d 	.word	0x2d2d2d2d
    76fc:	2d2d2d2d 	.word	0x2d2d2d2d
    7700:	2d2d2d2d 	.word	0x2d2d2d2d
    7704:	2d2d2d2d 	.word	0x2d2d2d2d
    7708:	2d2d2d2d 	.word	0x2d2d2d2d
    770c:	2d2d2d2d 	.word	0x2d2d2d2d
    7710:	932d2d2d 	.word	0x932d2d2d
    7714:	2d2d2d2d 	.word	0x2d2d2d2d
    7718:	2d2d2d2d 	.word	0x2d2d2d2d
    771c:	2d2d2d2d 	.word	0x2d2d2d2d
    7720:	2d2d2d2d 	.word	0x2d2d2d2d
    7724:	2d2d882d 	.word	0x2d2d882d
    7728:	2d2d7c2d 	.word	0x2d2d7c2d
    772c:	2d2d2d2d 	.word	0x2d2d2d2d
    7730:	742d2d2d 	.word	0x742d2d2d
    7734:	5e2d3939 	.word	0x5e2d3939
    7738:	2d392d2d 	.word	0x2d392d2d
    773c:	2d2d392d 	.word	0x2d2d392d
    7740:	2d2d2d2d 	.word	0x2d2d2d2d
    7744:	2d2d3f49 	.word	0x2d2d3f49
    7748:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    774c:	7818      	ldrb	r0, [r3, #0]
    774e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7750:	f004 fb04 	bl	bd5c <usb_serial_putchar>
  for (; *format != 0; ++format) {
    7754:	7862      	ldrb	r2, [r4, #1]
    7756:	1c63      	adds	r3, r4, #1
    7758:	2a00      	cmp	r2, #0
    775a:	d1c0      	bne.n	76de <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    775c:	483c      	ldr	r0, [pc, #240]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    775e:	b003      	add	sp, #12
    7760:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    7764:	f001 bd32 	b.w	91cc <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    7768:	f855 1b04 	ldr.w	r1, [r5], #4
    776c:	4838      	ldr	r0, [pc, #224]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    776e:	f001 fd25 	bl	91bc <Print::print(long)>
        continue;
    7772:	e7ef      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    7774:	f855 1b04 	ldr.w	r1, [r5], #4
    7778:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    777a:	bf0e      	itee	eq
    777c:	4835      	ldreq	r0, [pc, #212]	; (7854 <Logger::logMessage(char*, std::__va_list)+0x190>)
    777e:	2101      	movne	r1, #1
    7780:	4630      	movne	r0, r6
    7782:	f004 fa67 	bl	bc54 <usb_serial_write>
    7786:	e7e5      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    7788:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    778c:	f1b9 0f00 	cmp.w	r9, #0
    7790:	d0e0      	beq.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    7792:	4648      	mov	r0, r9
    7794:	f006 faf4 	bl	dd80 <strlen>
    7798:	4601      	mov	r1, r0
    779a:	4648      	mov	r0, r9
    779c:	f004 fa5a 	bl	bc54 <usb_serial_write>
    77a0:	e7d8      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    77a2:	f855 1b04 	ldr.w	r1, [r5], #4
    77a6:	482a      	ldr	r0, [pc, #168]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    77a8:	2300      	movs	r3, #0
    77aa:	2210      	movs	r2, #16
    77ac:	f001 fd26 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    77b0:	e7d0      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    77b2:	3507      	adds	r5, #7
    77b4:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    77b8:	2103      	movs	r1, #3
    77ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    77be:	4824      	ldr	r0, [pc, #144]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    77c0:	9100      	str	r1, [sp, #0]
    77c2:	f001 fd25 	bl	9210 <Print::printFloat(double, unsigned char)>
        continue;
    77c6:	e7c5      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    77c8:	3507      	adds	r5, #7
    77ca:	f025 0507 	bic.w	r5, r5, #7
    77ce:	2100      	movs	r1, #0
    77d0:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    77d4:	481e      	ldr	r0, [pc, #120]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    77d6:	9100      	str	r1, [sp, #0]
    77d8:	f001 fd1a 	bl	9210 <Print::printFloat(double, unsigned char)>
        continue;
    77dc:	e7ba      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    77de:	f855 1b04 	ldr.w	r1, [r5], #4
    77e2:	481b      	ldr	r0, [pc, #108]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    77e4:	2300      	movs	r3, #0
    77e6:	2202      	movs	r2, #2
    77e8:	f001 fd08 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    77ec:	e7b2      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
    77ee:	2102      	movs	r1, #2
    77f0:	4819      	ldr	r0, [pc, #100]	; (7858 <Logger::logMessage(char*, std::__va_list)+0x194>)
    77f2:	f004 fa2f 	bl	bc54 <usb_serial_write>
    77f6:	f855 1b04 	ldr.w	r1, [r5], #4
    77fa:	4815      	ldr	r0, [pc, #84]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    77fc:	2300      	movs	r3, #0
    77fe:	2210      	movs	r2, #16
    7800:	f001 fcfc 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    7804:	e7a6      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    7806:	f855 3b04 	ldr.w	r3, [r5], #4
    780a:	2b01      	cmp	r3, #1
    780c:	bf07      	ittee	eq
    780e:	2104      	moveq	r1, #4
    7810:	4640      	moveq	r0, r8
    7812:	2105      	movne	r1, #5
    7814:	4638      	movne	r0, r7
    7816:	f004 fa1d 	bl	bc54 <usb_serial_write>
    781a:	e79b      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
    781c:	2102      	movs	r1, #2
    781e:	480f      	ldr	r0, [pc, #60]	; (785c <Logger::logMessage(char*, std::__va_list)+0x198>)
    7820:	f004 fa18 	bl	bc54 <usb_serial_write>
    7824:	f855 1b04 	ldr.w	r1, [r5], #4
    7828:	4809      	ldr	r0, [pc, #36]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    782a:	2300      	movs	r3, #0
    782c:	2202      	movs	r2, #2
    782e:	f001 fce5 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    7832:	e78f      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    7834:	2025      	movs	r0, #37	; 0x25
    7836:	f004 fa91 	bl	bd5c <usb_serial_putchar>
        continue;
    783a:	e78b      	b.n	7754 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    783c:	4804      	ldr	r0, [pc, #16]	; (7850 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    783e:	f001 bcc5 	b.w	91cc <Print::println()>
    7842:	bf00      	nop
    7844:	00014e44 	.word	0x00014e44
    7848:	00014e3c 	.word	0x00014e3c
    784c:	00014e38 	.word	0x00014e38
    7850:	1fff8a04 	.word	0x1fff8a04
    7854:	00013efc 	.word	0x00013efc
    7858:	00014e30 	.word	0x00014e30
    785c:	00014e34 	.word	0x00014e34

00007860 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    7860:	b40f      	push	{r0, r1, r2, r3}
    7862:	b500      	push	{lr}
    7864:	b083      	sub	sp, #12
    7866:	a904      	add	r1, sp, #16
    7868:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    786c:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    786e:	f7ff ff29 	bl	76c4 <Logger::logMessage(char*, std::__va_list)>
}
    7872:	b003      	add	sp, #12
    7874:	f85d eb04 	ldr.w	lr, [sp], #4
    7878:	b004      	add	sp, #16
    787a:	4770      	bx	lr

0000787c <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    787c:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    787e:	4b1c      	ldr	r3, [pc, #112]	; (78f0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    7880:	4f1c      	ldr	r7, [pc, #112]	; (78f4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    7882:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    7884:	b083      	sub	sp, #12
    7886:	4604      	mov	r4, r0
    7888:	9301      	str	r3, [sp, #4]
	return ret;
    788a:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    788c:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    788e:	460d      	mov	r5, r1
    7890:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    7892:	4619      	mov	r1, r3
    7894:	220a      	movs	r2, #10
    7896:	2300      	movs	r3, #0
    7898:	4817      	ldr	r0, [pc, #92]	; (78f8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    789a:	f001 fcaf 	bl	91fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    789e:	2103      	movs	r1, #3
    78a0:	4816      	ldr	r0, [pc, #88]	; (78fc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    78a2:	f004 f9d7 	bl	bc54 <usb_serial_write>
  switch (level) {
    78a6:	2c03      	cmp	r4, #3
    78a8:	d807      	bhi.n	78ba <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    78aa:	e8df f004 	tbb	[pc, r4]
    78ae:	161b      	.short	0x161b
    78b0:	1102      	.short	0x1102
    78b2:	4813      	ldr	r0, [pc, #76]	; (7900 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    78b4:	2107      	movs	r1, #7
    78b6:	f004 f9cd 	bl	bc54 <usb_serial_write>
    78ba:	2102      	movs	r1, #2
    78bc:	4811      	ldr	r0, [pc, #68]	; (7904 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    78be:	f004 f9c9 	bl	bc54 <usb_serial_write>
  logMessage(format, args);
    78c2:	4631      	mov	r1, r6
    78c4:	4628      	mov	r0, r5
}
    78c6:	b003      	add	sp, #12
    78c8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    78cc:	f7ff befa 	b.w	76c4 <Logger::logMessage(char*, std::__va_list)>
    78d0:	2105      	movs	r1, #5
    78d2:	480d      	ldr	r0, [pc, #52]	; (7908 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    78d4:	f004 f9be 	bl	bc54 <usb_serial_write>
    78d8:	e7ef      	b.n	78ba <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    78da:	2104      	movs	r1, #4
    78dc:	480b      	ldr	r0, [pc, #44]	; (790c <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    78de:	f004 f9b9 	bl	bc54 <usb_serial_write>
    78e2:	e7ea      	b.n	78ba <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    78e4:	2105      	movs	r1, #5
    78e6:	480a      	ldr	r0, [pc, #40]	; (7910 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    78e8:	f004 f9b4 	bl	bc54 <usb_serial_write>
    78ec:	e7e5      	b.n	78ba <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    78ee:	bf00      	nop
    78f0:	1fffd0e4 	.word	0x1fffd0e4
    78f4:	1fffcee0 	.word	0x1fffcee0
    78f8:	1fff8a04 	.word	0x1fff8a04
    78fc:	00014e4c 	.word	0x00014e4c
    7900:	00014e60 	.word	0x00014e60
    7904:	00013bf4 	.word	0x00013bf4
    7908:	00014e68 	.word	0x00014e68
    790c:	00014e58 	.word	0x00014e58
    7910:	00014e50 	.word	0x00014e50

00007914 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    7914:	b40f      	push	{r0, r1, r2, r3}
    7916:	b500      	push	{lr}
  if (logLevel > Debug)
    7918:	4b06      	ldr	r3, [pc, #24]	; (7934 <Logger::debug(char*, ...)+0x20>)
    791a:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    791c:	b083      	sub	sp, #12
  if (logLevel > Debug)
    791e:	b920      	cbnz	r0, 792a <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    7920:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    7922:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    7924:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    7926:	f7ff ffa9 	bl	787c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    792a:	b003      	add	sp, #12
    792c:	f85d eb04 	ldr.w	lr, [sp], #4
    7930:	b004      	add	sp, #16
    7932:	4770      	bx	lr
    7934:	1fff8880 	.word	0x1fff8880

00007938 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    7938:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    793a:	4b08      	ldr	r3, [pc, #32]	; (795c <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    793c:	b500      	push	{lr}
  if (logLevel > Info)
    793e:	781b      	ldrb	r3, [r3, #0]
    7940:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    7942:	b083      	sub	sp, #12
  if (logLevel > Info)
    7944:	d805      	bhi.n	7952 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    7946:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    7948:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    794a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    794c:	2001      	movs	r0, #1
    794e:	f7ff ff95 	bl	787c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    7952:	b003      	add	sp, #12
    7954:	f85d eb04 	ldr.w	lr, [sp], #4
    7958:	b004      	add	sp, #16
    795a:	4770      	bx	lr
    795c:	1fff8880 	.word	0x1fff8880

00007960 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    7960:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    7962:	4b08      	ldr	r3, [pc, #32]	; (7984 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    7964:	b500      	push	{lr}
  if (logLevel > Error)
    7966:	781b      	ldrb	r3, [r3, #0]
    7968:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    796a:	b083      	sub	sp, #12
  if (logLevel > Error)
    796c:	d805      	bhi.n	797a <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    796e:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    7970:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    7972:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    7974:	2003      	movs	r0, #3
    7976:	f7ff ff81 	bl	787c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    797a:	b003      	add	sp, #12
    797c:	f85d eb04 	ldr.w	lr, [sp], #4
    7980:	b004      	add	sp, #16
    7982:	4770      	bx	lr
    7984:	1fff8880 	.word	0x1fff8880

00007988 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    7988:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    798a:	4d07      	ldr	r5, [pc, #28]	; (79a8 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    798c:	4c07      	ldr	r4, [pc, #28]	; (79ac <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    798e:	4908      	ldr	r1, [pc, #32]	; (79b0 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    7990:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    7992:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    7994:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    7996:	6503      	str	r3, [r0, #80]	; 0x50
}
    7998:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    799a:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    799c:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    799e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    79a2:	600b      	str	r3, [r1, #0]
}
    79a4:	4770      	bx	lr
    79a6:	bf00      	nop
    79a8:	1fffcee8 	.word	0x1fffcee8
    79ac:	1fffcee4 	.word	0x1fffcee4
    79b0:	1fffceec 	.word	0x1fffceec

000079b4 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    79b4:	2000      	movs	r0, #0
    79b6:	4770      	bx	lr

000079b8 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    79b8:	4770      	bx	lr
    79ba:	bf00      	nop

000079bc <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    79bc:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    79be:	4b1b      	ldr	r3, [pc, #108]	; (7a2c <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    79c0:	491b      	ldr	r1, [pc, #108]	; (7a30 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    79c2:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    79c4:	4604      	mov	r4, r0
    defaultMask.id = 0;
    79c6:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    79c8:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    79ca:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    79ce:	211d      	movs	r1, #29
    79d0:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    79d4:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    79d6:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    79d8:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    79da:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    79dc:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    79de:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    79e2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    79e6:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    79ea:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    79ee:	4629      	mov	r1, r5
    rx_buffer=0;
    79f0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    79f4:	2240      	movs	r2, #64	; 0x40
    79f6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    79fa:	f006 f88d 	bl	db18 <memset>
        listener[i] = NULL;
    79fe:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7a02:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7a06:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    7a0a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    7a0e:	2298      	movs	r2, #152	; 0x98
    7a10:	4629      	mov	r1, r5
    7a12:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    7a16:	f006 f87f 	bl	db18 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7a1a:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7a1c:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7a1e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7a22:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    7a26:	4620      	mov	r0, r4
    7a28:	bd38      	pop	{r3, r4, r5, pc}
    7a2a:	bf00      	nop
    7a2c:	1fffd08c 	.word	0x1fffd08c
    7a30:	40024000 	.word	0x40024000

00007a34 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    7a34:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    7a36:	4e2d      	ldr	r6, [pc, #180]	; (7aec <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    7a38:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    7a3c:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    7a40:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    7a44:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    7a48:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    7a4c:	d921      	bls.n	7a92 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    7a4e:	462b      	mov	r3, r5
        divisor++;
    7a50:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    7a54:	3302      	adds	r3, #2
    7a56:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    7a5a:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    7a5c:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    7a60:	d80f      	bhi.n	7a82 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    7a62:	fbb6 f3f3 	udiv	r3, r6, r3
    7a66:	1acb      	subs	r3, r1, r3
            if (error < 0)
    7a68:	2b00      	cmp	r3, #0
    7a6a:	bfb8      	it	lt
    7a6c:	425b      	neglt	r3, r3
            if (error < bestError) {
    7a6e:	42a3      	cmp	r3, r4
    7a70:	da09      	bge.n	7a86 <FlexCAN::setBaudRate(unsigned long)+0x52>
    7a72:	461c      	mov	r4, r3
                bestDivisor = divisor;
    7a74:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7a76:	2a0b      	cmp	r2, #11
    7a78:	d906      	bls.n	7a88 <FlexCAN::setBaudRate(unsigned long)+0x54>
    7a7a:	2a12      	cmp	r2, #18
    7a7c:	bf9c      	itt	ls
    7a7e:	461c      	movls	r4, r3
    7a80:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    7a82:	4673      	mov	r3, lr
    7a84:	e7e4      	b.n	7a50 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7a86:	d0f6      	beq.n	7a76 <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    7a88:	2a05      	cmp	r2, #5
    7a8a:	d8fa      	bhi.n	7a82 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    7a8c:	1c6b      	adds	r3, r5, #1
    7a8e:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    7a92:	f1ac 0c05 	sub.w	ip, ip, #5
    7a96:	f1bc 0f14 	cmp.w	ip, #20
    7a9a:	d81e      	bhi.n	7ada <FlexCAN::setBaudRate(unsigned long)+0xa6>
    7a9c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    7aa0:	dc1b      	bgt.n	7ada <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    7aa2:	4b13      	ldr	r3, [pc, #76]	; (7af0 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7aa4:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    7aa6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    7aaa:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7aae:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7ab2:	7853      	ldrb	r3, [r2, #1]
    7ab4:	7892      	ldrb	r2, [r2, #2]
    7ab6:	04db      	lsls	r3, r3, #19
    7ab8:	0412      	lsls	r2, r2, #16
    7aba:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    7abe:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7ac2:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7ac6:	4313      	orrs	r3, r2
    7ac8:	430b      	orrs	r3, r1
    7aca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    7ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7ad2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7ad6:	6043      	str	r3, [r0, #4]
}
    7ad8:	bd70      	pop	{r4, r5, r6, pc}
    7ada:	4806      	ldr	r0, [pc, #24]	; (7af4 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    7adc:	2139      	movs	r1, #57	; 0x39
    7ade:	f004 f8b9 	bl	bc54 <usb_serial_write>
    7ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    7ae6:	4804      	ldr	r0, [pc, #16]	; (7af8 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    7ae8:	f001 bb70 	b.w	91cc <Print::println()>
    7aec:	00f42400 	.word	0x00f42400
    7af0:	1fff8884 	.word	0x1fff8884
    7af4:	00014e70 	.word	0x00014e70
    7af8:	1fff8a04 	.word	0x1fff8a04

00007afc <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    7afc:	b530      	push	{r4, r5, lr}
    7afe:	2901      	cmp	r1, #1
    7b00:	4604      	mov	r4, r0
    7b02:	bf38      	it	cc
    7b04:	2101      	movcc	r1, #1
    7b06:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7b08:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7b0c:	4608      	mov	r0, r1
    7b0e:	bf28      	it	cs
    7b10:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    7b12:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7b16:	b31b      	cbz	r3, 7b60 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    7b18:	f1c0 0e10 	rsb	lr, r0, #16
    7b1c:	fa5f f58e 	uxtb.w	r5, lr
    7b20:	46ae      	mov	lr, r5
    7b22:	2200      	movs	r2, #0
    7b24:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    7b26:	6823      	ldr	r3, [r4, #0]
    7b28:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    7b2c:	f85c 3002 	ldr.w	r3, [ip, r2]
    7b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    7b34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7b38:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    7b3c:	3210      	adds	r2, #16
    7b3e:	4295      	cmp	r5, r2
    7b40:	d1f1      	bne.n	7b26 <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7b42:	2510      	movs	r5, #16
    7b44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7b48:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7b4a:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7b4e:	3380      	adds	r3, #128	; 0x80
    7b50:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7b54:	fa5f fe82 	uxtb.w	lr, r2
    7b58:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7b5c:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7b5e:	d1f3      	bne.n	7b48 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    7b60:	bd30      	pop	{r4, r5, pc}
    7b62:	bf00      	nop

00007b64 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    7b64:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7b68:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7b6c:	b2db      	uxtb	r3, r3
    7b6e:	429a      	cmp	r2, r3
    7b70:	d222      	bcs.n	7bb8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    7b72:	b510      	push	{r4, lr}
    7b74:	468c      	mov	ip, r1
    7b76:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    7b78:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    7b7c:	e9d1 0100 	ldrd	r0, r1, [r1]
    7b80:	3304      	adds	r3, #4
    7b82:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    7b86:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7b8a:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    7b8e:	07db      	lsls	r3, r3, #31
    7b90:	d513      	bpl.n	7bba <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7b92:	f8dc 0000 	ldr.w	r0, [ip]
    7b96:	2310      	movs	r3, #16
    7b98:	3184      	adds	r1, #132	; 0x84
    7b9a:	fb13 1102 	smlabb	r1, r3, r2, r1
    7b9e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    7ba2:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    7ba4:	f8de 1000 	ldr.w	r1, [lr]
    7ba8:	3180      	adds	r1, #128	; 0x80
    7baa:	fb13 1302 	smlabb	r3, r3, r2, r1
    7bae:	681a      	ldr	r2, [r3, #0]
    7bb0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    7bb4:	601a      	str	r2, [r3, #0]
}
    7bb6:	bd10      	pop	{r4, pc}
    7bb8:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    7bba:	f8dc 4000 	ldr.w	r4, [ip]
    7bbe:	4809      	ldr	r0, [pc, #36]	; (7be4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    7bc0:	2310      	movs	r3, #16
    7bc2:	3184      	adds	r1, #132	; 0x84
    7bc4:	fb13 1102 	smlabb	r1, r3, r2, r1
    7bc8:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    7bcc:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    7bce:	f8de 1000 	ldr.w	r1, [lr]
    7bd2:	3180      	adds	r1, #128	; 0x80
    7bd4:	fb13 1302 	smlabb	r3, r3, r2, r1
    7bd8:	681a      	ldr	r2, [r3, #0]
    7bda:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    7bde:	601a      	str	r2, [r3, #0]
}
    7be0:	bd10      	pop	{r4, pc}
    7be2:	bf00      	nop
    7be4:	1ffc0000 	.word	0x1ffc0000

00007be8 <FlexCAN::getFilter(CAN_filter_t&, unsigned char)>:
    7be8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7bec:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7bf0:	b2db      	uxtb	r3, r3
    7bf2:	429a      	cmp	r2, r3
    7bf4:	d301      	bcc.n	7bfa <FlexCAN::getFilter(CAN_filter_t&, unsigned char)+0x12>
    return (false);
    7bf6:	2000      	movs	r0, #0
}
    7bf8:	4770      	bx	lr
        filter.id = MBFilters[mbox].id;
    7bfa:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
        filter.flags.extended = MBFilters[mbox].flags.extended;
    7bfe:	790b      	ldrb	r3, [r1, #4]
        filter.id = MBFilters[mbox].id;
    7c00:	6850      	ldr	r0, [r2, #4]
    7c02:	6008      	str	r0, [r1, #0]
        filter.flags.extended = MBFilters[mbox].flags.extended;
    7c04:	f892 c008 	ldrb.w	ip, [r2, #8]
    7c08:	f36c 0300 	bfi	r3, ip, #0, #1
    7c0c:	710b      	strb	r3, [r1, #4]
        filter.flags.remote = MBFilters[mbox].flags.remote;
    7c0e:	7a13      	ldrb	r3, [r2, #8]
    7c10:	f891 c004 	ldrb.w	ip, [r1, #4]
    7c14:	f3c3 0340 	ubfx	r3, r3, #1, #1
    7c18:	f363 0c41 	bfi	ip, r3, #1, #1
    7c1c:	f881 c004 	strb.w	ip, [r1, #4]
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    7c20:	7a13      	ldrb	r3, [r2, #8]
    7c22:	fa5f f28c 	uxtb.w	r2, ip
    7c26:	089b      	lsrs	r3, r3, #2
    7c28:	f363 0287 	bfi	r2, r3, #2, #6
        return (true);
    7c2c:	2001      	movs	r0, #1
        filter.flags.reserved = MBFilters[mbox].flags.reserved;
    7c2e:	710a      	strb	r2, [r1, #4]
        return (true);
    7c30:	4770      	bx	lr
    7c32:	bf00      	nop

00007c34 <FlexCAN::setMask(unsigned long, unsigned char)>:
    7c34:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7c38:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7c3c:	b2db      	uxtb	r3, r3
    7c3e:	429a      	cmp	r2, r3
    7c40:	d221      	bcs.n	7c86 <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7c42:	6803      	ldr	r3, [r0, #0]
{
    7c44:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7c46:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    7c48:	01e4      	lsls	r4, r4, #7
    7c4a:	d41d      	bmi.n	7c88 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    7c4c:	681c      	ldr	r4, [r3, #0]
    7c4e:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    7c52:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    7c54:	6804      	ldr	r4, [r0, #0]
    7c56:	6823      	ldr	r3, [r4, #0]
    7c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7c5c:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7c5e:	6804      	ldr	r4, [r0, #0]
    7c60:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    7c62:	01db      	lsls	r3, r3, #7
    7c64:	d5fc      	bpl.n	7c60 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7c66:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    7c6a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    7c6e:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7c70:	6802      	ldr	r2, [r0, #0]
    7c72:	6813      	ldr	r3, [r2, #0]
    7c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7c78:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7c7a:	6802      	ldr	r2, [r0, #0]
    7c7c:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    7c7e:	01db      	lsls	r3, r3, #7
    7c80:	d4fc      	bmi.n	7c7c <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    7c82:	bc10      	pop	{r4}
    7c84:	4770      	bx	lr
    7c86:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7c88:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    7c8c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    7c90:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    7c92:	6019      	str	r1, [r3, #0]
}
    7c94:	4770      	bx	lr
    7c96:	bf00      	nop

00007c98 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    7c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c9c:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    7c9e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    7ca2:	f89d 8018 	ldrb.w	r8, [sp, #24]
    7ca6:	4606      	mov	r6, r0
    7ca8:	460d      	mov	r5, r1
    7caa:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    7cac:	2a00      	cmp	r2, #0
    7cae:	f000 808f 	beq.w	7dd0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    7cb2:	4a63      	ldr	r2, [pc, #396]	; (7e40 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    7cb4:	6831      	ldr	r1, [r6, #0]
    7cb6:	4291      	cmp	r1, r2
    7cb8:	d07c      	beq.n	7db4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    7cba:	4a62      	ldr	r2, [pc, #392]	; (7e44 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    7cbc:	7813      	ldrb	r3, [r2, #0]
    7cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    7cc2:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    7cc4:	6833      	ldr	r3, [r6, #0]
    7cc6:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    7cca:	4293      	cmp	r3, r2
    7ccc:	d106      	bne.n	7cdc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    7cce:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    7cd2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    7cd4:	f043 0310 	orr.w	r3, r3, #16
    7cd8:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    7cda:	6833      	ldr	r3, [r6, #0]
    7cdc:	685a      	ldr	r2, [r3, #4]
    7cde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    7ce2:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    7ce4:	6832      	ldr	r2, [r6, #0]
    7ce6:	6813      	ldr	r3, [r2, #0]
    7ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    7cec:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    7cee:	6832      	ldr	r2, [r6, #0]
    7cf0:	6813      	ldr	r3, [r2, #0]
    7cf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    7cf6:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    7cf8:	6832      	ldr	r2, [r6, #0]
    7cfa:	6813      	ldr	r3, [r2, #0]
    7cfc:	02d9      	lsls	r1, r3, #11
    7cfe:	d4fc      	bmi.n	7cfa <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    7d00:	6813      	ldr	r3, [r2, #0]
    7d02:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    7d06:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    7d08:	6833      	ldr	r3, [r6, #0]
    7d0a:	681c      	ldr	r4, [r3, #0]
    7d0c:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    7d10:	d1fb      	bne.n	7d0a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7d12:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    7d14:	01d2      	lsls	r2, r2, #7
    7d16:	d5fc      	bpl.n	7d12 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    7d18:	681a      	ldr	r2, [r3, #0]
    7d1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7d1e:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    7d20:	4629      	mov	r1, r5
    7d22:	4630      	mov	r0, r6
    7d24:	f7ff fe86 	bl	7a34 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    7d28:	6832      	ldr	r2, [r6, #0]
    7d2a:	6813      	ldr	r3, [r2, #0]
    7d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    7d30:	6013      	str	r3, [r2, #0]
    7d32:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7d36:	2910      	cmp	r1, #16
    7d38:	d012      	beq.n	7d60 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    7d3a:	2500      	movs	r5, #0
        setMask (0, c);
    7d3c:	462a      	mov	r2, r5
    7d3e:	4630      	mov	r0, r6
    7d40:	2100      	movs	r1, #0
    7d42:	f7ff ff77 	bl	7c34 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    7d46:	462a      	mov	r2, r5
    7d48:	4639      	mov	r1, r7
    7d4a:	f7ff ff0b 	bl	7b64 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    7d4e:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    7d52:	3401      	adds	r4, #1
    7d54:	f1c1 0310 	rsb	r3, r1, #16
    7d58:	b2e5      	uxtb	r5, r4
    7d5a:	b2db      	uxtb	r3, r3
    7d5c:	429d      	cmp	r5, r3
    7d5e:	d3ed      	bcc.n	7d3c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    7d60:	6832      	ldr	r2, [r6, #0]
    7d62:	6813      	ldr	r3, [r2, #0]
    7d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    7d68:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    7d6a:	6833      	ldr	r3, [r6, #0]
    7d6c:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    7d6e:	01d0      	lsls	r0, r2, #7
    7d70:	d4fc      	bmi.n	7d6c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    7d72:	681a      	ldr	r2, [r3, #0]
    7d74:	0112      	lsls	r2, r2, #4
    7d76:	d4fc      	bmi.n	7d72 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    7d78:	4630      	mov	r0, r6
    7d7a:	f7ff febf 	bl	7afc <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    7d7e:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    7d82:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    7d86:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    7d8a:	2240      	movs	r2, #64	; 0x40
    7d8c:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    7d8e:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    7d92:	0953      	lsrs	r3, r2, #5
    7d94:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7d98:	3340      	adds	r3, #64	; 0x40
    7d9a:	009b      	lsls	r3, r3, #2
    7d9c:	2101      	movs	r1, #1
    7d9e:	f002 021f 	and.w	r2, r2, #31
    7da2:	fa01 f202 	lsl.w	r2, r1, r2
    7da6:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    7da8:	6833      	ldr	r3, [r6, #0]
    7daa:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7dae:	6298      	str	r0, [r3, #40]	; 0x28
}
    7db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    7db4:	2c01      	cmp	r4, #1
    7db6:	d02b      	beq.n	7e10 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    7db8:	4b23      	ldr	r3, [pc, #140]	; (7e48 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    7dba:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    7dbe:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    7dc2:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    7dc4:	d02b      	beq.n	7e1e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    7dc6:	4b20      	ldr	r3, [pc, #128]	; (7e48 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    7dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
    7dcc:	635a      	str	r2, [r3, #52]	; 0x34
    7dce:	e774      	b.n	7cba <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    7dd0:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    7dd4:	0100      	lsls	r0, r0, #4
    7dd6:	f001 fe29 	bl	9a2c <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    7dda:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    7dde:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    7de2:	b30b      	cbz	r3, 7e28 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    7de4:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    7de8:	2300      	movs	r3, #0
    7dea:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    7dee:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    7df2:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    7df6:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    7dfa:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    7dfe:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    7e02:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    7e06:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    7e0a:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    7e0e:	e750      	b.n	7cb2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    7e10:	4b0e      	ldr	r3, [pc, #56]	; (7e4c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    7e12:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    7e16:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    7e1a:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    7e1c:	d1d3      	bne.n	7dc6 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    7e1e:	4b0b      	ldr	r3, [pc, #44]	; (7e4c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    7e20:	f44f 7200 	mov.w	r2, #512	; 0x200
    7e24:	64da      	str	r2, [r3, #76]	; 0x4c
    7e26:	e748      	b.n	7cba <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    7e28:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    7e2c:	0100      	lsls	r0, r0, #4
    7e2e:	f001 fdfd 	bl	9a2c <operator new[](unsigned int)>
    7e32:	4603      	mov	r3, r0
    7e34:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    7e38:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    7e3c:	e7d2      	b.n	7de4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    7e3e:	bf00      	nop
    7e40:	40024000 	.word	0x40024000
    7e44:	40065000 	.word	0x40065000
    7e48:	40049000 	.word	0x40049000
    7e4c:	4004a000 	.word	0x4004a000

00007e50 <FlexCAN::available()>:
{
    7e50:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7e52:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    7e56:	0963      	lsrs	r3, r4, #5
    7e58:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7e5c:	3340      	adds	r3, #64	; 0x40
    7e5e:	009b      	lsls	r3, r3, #2
    7e60:	4602      	mov	r2, r0
    7e62:	f004 041f 	and.w	r4, r4, #31
    7e66:	6818      	ldr	r0, [r3, #0]
    7e68:	2101      	movs	r1, #1
    7e6a:	40a1      	lsls	r1, r4
    7e6c:	ea10 0401 	ands.w	r4, r0, r1
    7e70:	bf14      	ite	ne
    7e72:	2001      	movne	r0, #1
    7e74:	2000      	moveq	r0, #0
    7e76:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    7e7a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    7e7e:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    7e82:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    7e86:	b280      	uxth	r0, r0
    7e88:	b29b      	uxth	r3, r3
    if (entries < 0) {
    7e8a:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    7e8c:	bf44      	itt	mi
    7e8e:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    7e92:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    7e94:	b164      	cbz	r4, 7eb0 <FlexCAN::available()+0x60>
    7e96:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    7e9a:	0953      	lsrs	r3, r2, #5
    7e9c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7ea0:	3340      	adds	r3, #64	; 0x40
    7ea2:	2101      	movs	r1, #1
    7ea4:	009b      	lsls	r3, r3, #2
    7ea6:	f002 021f 	and.w	r2, r2, #31
    7eaa:	fa01 f202 	lsl.w	r2, r1, r2
    7eae:	601a      	str	r2, [r3, #0]
}
    7eb0:	bc10      	pop	{r4}
    7eb2:	4770      	bx	lr

00007eb4 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    7eb4:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    7eb8:	b538      	push	{r3, r4, r5, lr}
    7eba:	0953      	lsrs	r3, r2, #5
    7ebc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7ec0:	3340      	adds	r3, #64	; 0x40
    7ec2:	009b      	lsls	r3, r3, #2
    7ec4:	4604      	mov	r4, r0
    7ec6:	2501      	movs	r5, #1
    7ec8:	4608      	mov	r0, r1
    7eca:	f002 021f 	and.w	r2, r2, #31
    7ece:	6819      	ldr	r1, [r3, #0]
    7ed0:	fa05 f202 	lsl.w	r2, r5, r2
    7ed4:	4211      	tst	r1, r2
    7ed6:	bf14      	ite	ne
    7ed8:	4629      	movne	r1, r5
    7eda:	2100      	moveq	r1, #0
    7edc:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    7ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    7ee4:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7ee8:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7eec:	b292      	uxth	r2, r2
    7eee:	b29b      	uxth	r3, r3
    7ef0:	429a      	cmp	r2, r3
    7ef2:	d028      	beq.n	7f46 <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    7ef4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7ef8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    7efc:	b29b      	uxth	r3, r3
    7efe:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    7f02:	2210      	movs	r2, #16
    7f04:	f001 fc42 	bl	978c <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    7f08:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7f0c:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    7f10:	b29b      	uxth	r3, r3
    7f12:	442b      	add	r3, r5
    7f14:	fbb3 f1f2 	udiv	r1, r3, r2
    7f18:	fb02 3311 	mls	r3, r2, r1, r3
    7f1c:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    7f1e:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    7f22:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    7f26:	4628      	mov	r0, r5
    7f28:	b161      	cbz	r1, 7f44 <FlexCAN::read(CAN_message_t&)+0x90>
    7f2a:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    7f2e:	0953      	lsrs	r3, r2, #5
    7f30:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    7f34:	3340      	adds	r3, #64	; 0x40
    7f36:	2101      	movs	r1, #1
    7f38:	009b      	lsls	r3, r3, #2
    7f3a:	f002 021f 	and.w	r2, r2, #31
    7f3e:	fa01 f202 	lsl.w	r2, r1, r2
    7f42:	601a      	str	r2, [r3, #0]
}
    7f44:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    7f46:	2000      	movs	r0, #0
    7f48:	e7ee      	b.n	7f28 <FlexCAN::read(CAN_message_t&)+0x74>
    7f4a:	bf00      	nop

00007f4c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    7f4c:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    7f4e:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7f50:	6804      	ldr	r4, [r0, #0]
    7f52:	f04f 0e10 	mov.w	lr, #16
    7f56:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    7f5a:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7f5c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    7f60:	d525      	bpl.n	7fae <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7f62:	680c      	ldr	r4, [r1, #0]
    7f64:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    7f68:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    7f6c:	6804      	ldr	r4, [r0, #0]
    7f6e:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    7f72:	688c      	ldr	r4, [r1, #8]
    7f74:	fb1e cc02 	smlabb	ip, lr, r2, ip
    7f78:	ba24      	rev	r4, r4
    7f7a:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7f7e:	6804      	ldr	r4, [r0, #0]
    7f80:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    7f84:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    7f88:	fb12 fe0e 	smulbb	lr, r2, lr
    7f8c:	68ca      	ldr	r2, [r1, #12]
    7f8e:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7f90:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    7f94:	079a      	lsls	r2, r3, #30
    7f96:	d53c      	bpl.n	8012 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7f98:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7f9a:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7f9c:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7f9e:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    7fa0:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    7fa4:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7fa8:	f842 300e 	str.w	r3, [r2, lr]
}
    7fac:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    7fae:	680d      	ldr	r5, [r1, #0]
    7fb0:	4c1d      	ldr	r4, [pc, #116]	; (8028 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    7fb2:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    7fb6:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    7fba:	6804      	ldr	r4, [r0, #0]
    7fbc:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    7fc0:	688c      	ldr	r4, [r1, #8]
    7fc2:	fb1e cc02 	smlabb	ip, lr, r2, ip
    7fc6:	ba24      	rev	r4, r4
    7fc8:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7fcc:	6804      	ldr	r4, [r0, #0]
    7fce:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    7fd2:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    7fd6:	fb12 fe0e 	smulbb	lr, r2, lr
    7fda:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    7fdc:	079b      	lsls	r3, r3, #30
    7fde:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    7fe0:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    7fe4:	d50a      	bpl.n	7ffc <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    7fe6:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7fe8:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    7fea:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7fec:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    7fee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    7ff2:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7ff6:	f842 300e 	str.w	r3, [r2, lr]
}
    7ffa:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    7ffc:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    7ffe:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8000:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8002:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8004:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8008:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    800c:	f842 300e 	str.w	r3, [r2, lr]
}
    8010:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8012:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8014:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8016:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8018:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    801a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    801e:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8022:	f842 300e 	str.w	r3, [r2, lr]
}
    8026:	bd30      	pop	{r4, r5, pc}
    8028:	1ffc0000 	.word	0x1ffc0000

0000802c <FlexCAN::write(CAN_message_t const&)>:
{
    802c:	b570      	push	{r4, r5, r6, lr}
    802e:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8030:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    8034:	0943      	lsrs	r3, r0, #5
    8036:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    803a:	3340      	adds	r3, #64	; 0x40
    803c:	009b      	lsls	r3, r3, #2
    803e:	f000 001f 	and.w	r0, r0, #31
    8042:	681d      	ldr	r5, [r3, #0]
    8044:	2201      	movs	r2, #1
    8046:	4082      	lsls	r2, r0
    8048:	4215      	tst	r5, r2
    804a:	bf14      	ite	ne
    804c:	2501      	movne	r5, #1
    804e:	2500      	moveq	r5, #0
    8050:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    8054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8058:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    805c:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    8060:	b29b      	uxth	r3, r3
    8062:	b292      	uxth	r2, r2
    8064:	429a      	cmp	r2, r3
    8066:	d02d      	beq.n	80c4 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    8068:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    806c:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    8070:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    8074:	b29b      	uxth	r3, r3
    8076:	3301      	adds	r3, #1
    8078:	fbb3 f6f0 	udiv	r6, r3, r0
    807c:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    8080:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8082:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8084:	4296      	cmp	r6, r2
    8086:	d042      	beq.n	810e <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8088:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    808c:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8090:	b29b      	uxth	r3, r3
    8092:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    8096:	2210      	movs	r2, #16
    8098:	f001 fb78 	bl	978c <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    809c:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    80a0:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    80a4:	2001      	movs	r0, #1
    80a6:	b165      	cbz	r5, 80c2 <FlexCAN::write(CAN_message_t const&)+0x96>
    80a8:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    80ac:	0953      	lsrs	r3, r2, #5
    80ae:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    80b2:	3340      	adds	r3, #64	; 0x40
    80b4:	2101      	movs	r1, #1
    80b6:	009b      	lsls	r3, r3, #2
    80b8:	f002 021f 	and.w	r2, r2, #31
    80bc:	fa01 f202 	lsl.w	r2, r1, r2
    80c0:	601a      	str	r2, [r3, #0]
}
    80c2:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    80c4:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    80c8:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    80cc:	b2d2      	uxtb	r2, r2
    80ce:	2a0f      	cmp	r2, #15
    80d0:	d8ca      	bhi.n	8068 <FlexCAN::write(CAN_message_t const&)+0x3c>
    80d2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    80d6:	332c      	adds	r3, #44	; 0x2c
    80d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    80dc:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    80e0:	e003      	b.n	80ea <FlexCAN::write(CAN_message_t const&)+0xbe>
    80e2:	4563      	cmp	r3, ip
    80e4:	f102 0201 	add.w	r2, r2, #1
    80e8:	d0be      	beq.n	8068 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    80ea:	f853 0f04 	ldr.w	r0, [r3, #4]!
    80ee:	2800      	cmp	r0, #0
    80f0:	d1f7      	bne.n	80e2 <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    80f2:	6826      	ldr	r6, [r4, #0]
    80f4:	0110      	lsls	r0, r2, #4
    80f6:	3680      	adds	r6, #128	; 0x80
    80f8:	5830      	ldr	r0, [r6, r0]
    80fa:	f3c0 6003 	ubfx	r0, r0, #24, #4
    80fe:	2808      	cmp	r0, #8
    8100:	d1ef      	bne.n	80e2 <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    8102:	4620      	mov	r0, r4
    8104:	b2d2      	uxtb	r2, r2
    8106:	f7ff ff21 	bl	7f4c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    810a:	2001      	movs	r0, #1
    810c:	e7cb      	b.n	80a6 <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    810e:	2000      	movs	r0, #0
    8110:	e7c9      	b.n	80a6 <FlexCAN::write(CAN_message_t const&)+0x7a>
    8112:	bf00      	nop

00008114 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    8114:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8116:	6801      	ldr	r1, [r0, #0]
    8118:	f04f 0c10 	mov.w	ip, #16
    811c:	3180      	adds	r1, #128	; 0x80
    811e:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    8122:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8124:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    8126:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    8128:	f3c1 4603 	ubfx	r6, r1, #16, #4
    812c:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    812e:	6804      	ldr	r4, [r0, #0]
    8130:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8132:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8136:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    813a:	f3c1 5500 	ubfx	r5, r1, #20, #1
    813e:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8142:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8146:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    814a:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    814e:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8150:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    8154:	b2d2      	uxtb	r2, r2
    8156:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8158:	fabc fc8c 	clz	ip, ip
    815c:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    815e:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8162:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8166:	601c      	str	r4, [r3, #0]
    8168:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    816c:	bf5c      	itt	pl
    816e:	0ca4      	lsrpl	r4, r4, #18
    8170:	601c      	strpl	r4, [r3, #0]
    8172:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    8174:	6802      	ldr	r2, [r0, #0]
    8176:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    8178:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    817a:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    817e:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    8180:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    8184:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    8186:	d905      	bls.n	8194 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    8188:	6802      	ldr	r2, [r0, #0]
    818a:	328c      	adds	r2, #140	; 0x8c
    818c:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    8190:	ba12      	rev	r2, r2
    8192:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    8194:	f015 0108 	ands.w	r1, r5, #8
    8198:	d108      	bne.n	81ac <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    819a:	f106 0008 	add.w	r0, r6, #8
    819e:	f1c6 0208 	rsb	r2, r6, #8
    81a2:	4418      	add	r0, r3
}
    81a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    81a8:	f005 bcb6 	b.w	db18 <memset>
}
    81ac:	bd70      	pop	{r4, r5, r6, pc}
    81ae:	bf00      	nop

000081b0 <FlexCAN::message_isr()>:
{
    81b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    81b4:	4683      	mov	fp, r0
{
    81b6:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    81b8:	f85b 2bb4 	ldr.w	r2, [fp], #180
    81bc:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    81c0:	f8cd 900c 	str.w	r9, [sp, #12]
{
    81c4:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    81c6:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    81c8:	2400      	movs	r4, #0
    81ca:	e008      	b.n	81de <FlexCAN::message_isr()+0x2e>
        switch (code) {
    81cc:	2b02      	cmp	r3, #2
    81ce:	d04c      	beq.n	826a <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    81d0:	3401      	adds	r4, #1
    81d2:	2c10      	cmp	r4, #16
    81d4:	f10a 0a08 	add.w	sl, sl, #8
    81d8:	f10b 0b04 	add.w	fp, fp, #4
    81dc:	d040      	beq.n	8260 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    81de:	fa29 f304 	lsr.w	r3, r9, r4
    81e2:	07d9      	lsls	r1, r3, #31
    81e4:	d5f4      	bpl.n	81d0 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    81e6:	0127      	lsls	r7, r4, #4
    81e8:	f102 0380 	add.w	r3, r2, #128	; 0x80
    81ec:	59db      	ldr	r3, [r3, r7]
    81ee:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    81f2:	2b06      	cmp	r3, #6
    81f4:	d039      	beq.n	826a <FlexCAN::message_isr()+0xba>
    81f6:	2b08      	cmp	r3, #8
    81f8:	d1e8      	bne.n	81cc <FlexCAN::message_isr()+0x1c>
    81fa:	f8db 6000 	ldr.w	r6, [fp]
    81fe:	2e00      	cmp	r6, #0
    8200:	f000 80b9 	beq.w	8376 <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    8204:	8831      	ldrh	r1, [r6, #0]
    8206:	8873      	ldrh	r3, [r6, #2]
    8208:	b289      	uxth	r1, r1
    820a:	b29b      	uxth	r3, r3
    820c:	4299      	cmp	r1, r3
    820e:	f000 80be 	beq.w	838e <FlexCAN::message_isr()+0x1de>
    8212:	8831      	ldrh	r1, [r6, #0]
    8214:	8873      	ldrh	r3, [r6, #2]
    8216:	b289      	uxth	r1, r1
    8218:	b29b      	uxth	r3, r3
    821a:	4299      	cmp	r1, r3
    821c:	d0d8      	beq.n	81d0 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    821e:	8873      	ldrh	r3, [r6, #2]
    8220:	68b1      	ldr	r1, [r6, #8]
    8222:	b29b      	uxth	r3, r3
    8224:	2210      	movs	r2, #16
    8226:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    822a:	eb0d 0002 	add.w	r0, sp, r2
    822e:	f001 faad 	bl	978c <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8232:	8873      	ldrh	r3, [r6, #2]
    8234:	88b2      	ldrh	r2, [r6, #4]
    8236:	b29b      	uxth	r3, r3
    8238:	3301      	adds	r3, #1
    823a:	fbb3 f1f2 	udiv	r1, r3, r2
    823e:	fb02 3311 	mls	r3, r2, r1, r3
    8242:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    8244:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    8246:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    8248:	a904      	add	r1, sp, #16
    824a:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    824c:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    824e:	f7ff fe7d 	bl	7f4c <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8252:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8254:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    8256:	f10a 0a08 	add.w	sl, sl, #8
    825a:	f10b 0b04 	add.w	fp, fp, #4
    825e:	d1be      	bne.n	81de <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8260:	9b03      	ldr	r3, [sp, #12]
    8262:	6313      	str	r3, [r2, #48]	; 0x30
}
    8264:	b009      	add	sp, #36	; 0x24
    8266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    826a:	b2e2      	uxtb	r2, r4
    826c:	a904      	add	r1, sp, #16
    826e:	4628      	mov	r0, r5
    8270:	f7ff ff50 	bl	8114 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    8274:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8278:	b16b      	cbz	r3, 8296 <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    827a:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    827e:	3301      	adds	r3, #1
    8280:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    8284:	f89d 3016 	ldrb.w	r3, [sp, #22]
    8288:	075b      	lsls	r3, r3, #29
    828a:	d504      	bpl.n	8296 <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    828c:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    8290:	3301      	adds	r3, #1
    8292:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    8296:	2301      	movs	r3, #1
    8298:	40a3      	lsls	r3, r4
    829a:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    829c:	2300      	movs	r3, #0
    829e:	f105 0680 	add.w	r6, r5, #128	; 0x80
    82a2:	f105 0890 	add.w	r8, r5, #144	; 0x90
    82a6:	9301      	str	r3, [sp, #4]
    82a8:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    82ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    82b0:	b148      	cbz	r0, 82c6 <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    82b2:	6842      	ldr	r2, [r0, #4]
    82b4:	9b00      	ldr	r3, [sp, #0]
    82b6:	4013      	ands	r3, r2
    82b8:	d033      	beq.n	8322 <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    82ba:	6803      	ldr	r3, [r0, #0]
    82bc:	f8d3 b000 	ldr.w	fp, [r3]
    82c0:	4b45      	ldr	r3, [pc, #276]	; (83d8 <FlexCAN::message_isr()+0x228>)
    82c2:	459b      	cmp	fp, r3
    82c4:	d15a      	bne.n	837c <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    82c6:	45b0      	cmp	r8, r6
    82c8:	d1f0      	bne.n	82ac <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    82ca:	9b01      	ldr	r3, [sp, #4]
    82cc:	f8dd b008 	ldr.w	fp, [sp, #8]
    82d0:	b393      	cbz	r3, 8338 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    82d2:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    82d6:	b183      	cbz	r3, 82fa <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    82d8:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    82dc:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    82e0:	b29b      	uxth	r3, r3
    82e2:	b292      	uxth	r2, r2
    if (entries < 0) {
    82e4:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    82e6:	bf44      	itt	mi
    82e8:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    82ec:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    82ee:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    82f2:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    82f4:	bf38      	it	cc
    82f6:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    82fa:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    82fe:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    8302:	7a1b      	ldrb	r3, [r3, #8]
    8304:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8308:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    830a:	bf08      	it	eq
    830c:	4933      	ldreq	r1, [pc, #204]	; (83dc <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    830e:	f103 0384 	add.w	r3, r3, #132	; 0x84
    8312:	bf14      	ite	ne
    8314:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8318:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    831c:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    831e:	682a      	ldr	r2, [r5, #0]
    8320:	e756      	b.n	81d0 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    8322:	2a00      	cmp	r2, #0
    8324:	dacf      	bge.n	82c6 <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8326:	6802      	ldr	r2, [r0, #0]
    8328:	f8d2 b000 	ldr.w	fp, [r2]
    832c:	4a2a      	ldr	r2, [pc, #168]	; (83d8 <FlexCAN::message_isr()+0x228>)
    832e:	4593      	cmp	fp, r2
    8330:	d0c9      	beq.n	82c6 <FlexCAN::message_isr()+0x116>
    8332:	f04f 32ff 	mov.w	r2, #4294967295
    8336:	e023      	b.n	8380 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    8338:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    833c:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    8340:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    8344:	b29b      	uxth	r3, r3
    8346:	3301      	adds	r3, #1
    8348:	fbb3 f0f1 	udiv	r0, r3, r1
    834c:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    8350:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8352:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8354:	4296      	cmp	r6, r2
    8356:	d031      	beq.n	83bc <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8358:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    835c:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    8360:	b29b      	uxth	r3, r3
    8362:	2210      	movs	r2, #16
    8364:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    8368:	eb0d 0102 	add.w	r1, sp, r2
    836c:	f001 fa0e 	bl	978c <memcpy>
    ring.head = nextEntry;
    8370:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    8374:	e7ad      	b.n	82d2 <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    8376:	f105 0694 	add.w	r6, r5, #148	; 0x94
    837a:	e743      	b.n	8204 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    837c:	2300      	movs	r3, #0
    837e:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8380:	a904      	add	r1, sp, #16
    8382:	47d8      	blx	fp
    8384:	9b01      	ldr	r3, [sp, #4]
    8386:	4318      	orrs	r0, r3
    8388:	b2c3      	uxtb	r3, r0
    838a:	9301      	str	r3, [sp, #4]
    838c:	e79b      	b.n	82c6 <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    838e:	2701      	movs	r7, #1
    8390:	40a7      	lsls	r7, r4
    8392:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    8396:	f105 0680 	add.w	r6, r5, #128	; 0x80
    839a:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    839e:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    83a2:	b138      	cbz	r0, 83b4 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    83a4:	6843      	ldr	r3, [r0, #4]
    83a6:	421f      	tst	r7, r3
    83a8:	d004      	beq.n	83b4 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    83aa:	6803      	ldr	r3, [r0, #0]
    83ac:	4a0c      	ldr	r2, [pc, #48]	; (83e0 <FlexCAN::message_isr()+0x230>)
    83ae:	685b      	ldr	r3, [r3, #4]
    83b0:	4293      	cmp	r3, r2
    83b2:	d10d      	bne.n	83d0 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    83b4:	45b0      	cmp	r8, r6
    83b6:	d1f2      	bne.n	839e <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    83b8:	682a      	ldr	r2, [r5, #0]
    83ba:	e709      	b.n	81d0 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    83bc:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    83c0:	2b00      	cmp	r3, #0
    83c2:	d09a      	beq.n	82fa <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    83c4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    83c8:	3301      	adds	r3, #1
    83ca:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    83ce:	e783      	b.n	82d8 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    83d0:	2200      	movs	r2, #0
    83d2:	4621      	mov	r1, r4
    83d4:	4798      	blx	r3
    83d6:	e7ed      	b.n	83b4 <FlexCAN::message_isr()+0x204>
    83d8:	000079b5 	.word	0x000079b5
    83dc:	1ffc0000 	.word	0x1ffc0000
    83e0:	000079b9 	.word	0x000079b9

000083e4 <can0_message_isr>:
    Can0.message_isr ();
    83e4:	4801      	ldr	r0, [pc, #4]	; (83ec <can0_message_isr+0x8>)
    83e6:	f7ff bee3 	b.w	81b0 <FlexCAN::message_isr()>
    83ea:	bf00      	nop
    83ec:	1fffcef0 	.word	0x1fffcef0

000083f0 <can0_bus_off_isr>:
}
    83f0:	4770      	bx	lr
    83f2:	bf00      	nop

000083f4 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    83f4:	4b01      	ldr	r3, [pc, #4]	; (83fc <can0_error_isr+0x8>)
    83f6:	681b      	ldr	r3, [r3, #0]
    83f8:	6a1b      	ldr	r3, [r3, #32]
}
    83fa:	4770      	bx	lr
    83fc:	1fffcef0 	.word	0x1fffcef0

00008400 <can0_tx_warn_isr>:
    8400:	4770      	bx	lr
    8402:	bf00      	nop

00008404 <can0_rx_warn_isr>:
    8404:	4770      	bx	lr
    8406:	bf00      	nop

00008408 <can0_wakeup_isr>:
    8408:	4770      	bx	lr
    840a:	bf00      	nop

0000840c <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    840c:	4801      	ldr	r0, [pc, #4]	; (8414 <_GLOBAL__sub_I_Can0+0x8>)
    840e:	2100      	movs	r1, #0
    8410:	f7ff bad4 	b.w	79bc <FlexCAN::FlexCAN(unsigned char)>
    8414:	1fffcef0 	.word	0x1fffcef0

00008418 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8418:	b530      	push	{r4, r5, lr}
    841a:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    841c:	490f      	ldr	r1, [pc, #60]	; (845c <ADC::ADC()+0x44>)
    841e:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8420:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8422:	4b0f      	ldr	r3, [pc, #60]	; (8460 <ADC::ADC()+0x48>)
    8424:	4a0f      	ldr	r2, [pc, #60]	; (8464 <ADC::ADC()+0x4c>)
    8426:	2100      	movs	r1, #0
    8428:	f000 fa60 	bl	88ec <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    842c:	f104 0540 	add.w	r5, r4, #64	; 0x40
    8430:	490d      	ldr	r1, [pc, #52]	; (8468 <ADC::ADC()+0x50>)
    8432:	9100      	str	r1, [sp, #0]
    8434:	4b0d      	ldr	r3, [pc, #52]	; (846c <ADC::ADC()+0x54>)
    8436:	4a0e      	ldr	r2, [pc, #56]	; (8470 <ADC::ADC()+0x58>)
    8438:	2101      	movs	r1, #1
    843a:	4628      	mov	r0, r5
    843c:	f000 fa56 	bl	88ec <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    8440:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    8442:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8444:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    8448:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    844c:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8450:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    8454:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    8458:	b003      	add	sp, #12
    845a:	bd30      	pop	{r4, r5, pc}
    845c:	4003b000 	.word	0x4003b000
    8460:	00014eac 	.word	0x00014eac
    8464:	00014eb4 	.word	0x00014eb4
    8468:	400bb000 	.word	0x400bb000
    846c:	00014eb0 	.word	0x00014eb0
    8470:	00014ee0 	.word	0x00014ee0

00008474 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    8474:	1c53      	adds	r3, r2, #1
{
    8476:	b570      	push	{r4, r5, r6, lr}
    8478:	4604      	mov	r4, r0
    if (adc_num == -1)
    847a:	d011      	beq.n	84a0 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    847c:	b152      	cbz	r2, 8494 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    847e:	2a01      	cmp	r2, #1
    8480:	d029      	beq.n	84d6 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    8482:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    8486:	8ad3      	ldrh	r3, [r2, #22]
    8488:	b29b      	uxth	r3, r3
    848a:	f043 0301 	orr.w	r3, r3, #1
    848e:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    8490:	2000      	movs	r0, #0
    8492:	bd70      	pop	{r4, r5, r6, pc}
    8494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    8498:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    849c:	f000 baf8 	b.w	8a90 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    84a0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    84a4:	460d      	mov	r5, r1
    84a6:	f000 fac9 	bl	8a3c <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    84aa:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    84ac:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    84ae:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    84b2:	f000 fac3 	bl	8a3c <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    84b6:	b1a6      	cbz	r6, 84e2 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    84b8:	b318      	cbz	r0, 8502 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    84ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    84be:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    84c2:	7d59      	ldrb	r1, [r3, #21]
    84c4:	7d42      	ldrb	r2, [r0, #21]
    84c6:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    84c8:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    84ca:	d806      	bhi.n	84da <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    84cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    84d0:	4618      	mov	r0, r3
    84d2:	f000 badd 	b.w	8a90 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    84d6:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    84da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    84de:	f000 bad7 	b.w	8a90 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    84e2:	b9a8      	cbnz	r0, 8510 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    84e4:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    84e8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    84ec:	8acb      	ldrh	r3, [r1, #22]
    84ee:	b29b      	uxth	r3, r3
    84f0:	f043 0304 	orr.w	r3, r3, #4
    84f4:	82cb      	strh	r3, [r1, #22]
    84f6:	8ad3      	ldrh	r3, [r2, #22]
    84f8:	b29b      	uxth	r3, r3
    84fa:	f043 0304 	orr.w	r3, r3, #4
    84fe:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8500:	e7c6      	b.n	8490 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    8502:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8506:	4629      	mov	r1, r5
}
    8508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    850c:	f000 bac0 	b.w	8a90 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8510:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8514:	4629      	mov	r1, r5
}
    8516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    851a:	f000 bab9 	b.w	8a90 <ADC_Module::startContinuous(unsigned char)>
    851e:	bf00      	nop

00008520 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8520:	69c0      	ldr	r0, [r0, #28]
    8522:	4770      	bx	lr

00008524 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8524:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8528:	428b      	cmp	r3, r1
    852a:	d00a      	beq.n	8542 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    852c:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    852e:	2909      	cmp	r1, #9
    8530:	f200 8093 	bhi.w	865a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8534:	e8df f001 	tbb	[pc, r1]
    8538:	06612f2f 	.word	0x06612f2f
    853c:	8e817106 	.word	0x8e817106
    8540:	5440      	.short	0x5440
    8542:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8544:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8546:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    854a:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    854e:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8552:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8556:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8558:	2201      	movs	r2, #1
    855a:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    855e:	4626      	mov	r6, r4
    8560:	61dc      	str	r4, [r3, #28]
    8562:	2500      	movs	r5, #0
    8564:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8568:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    856a:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    856c:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    856e:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8570:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    8574:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8576:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8578:	015b      	lsls	r3, r3, #5
    857a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    857e:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8580:	2100      	movs	r1, #0
    8582:	7642      	strb	r2, [r0, #25]
    8584:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8588:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    858c:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8590:	b662      	cpsie	i
    calibrate();
}
    8592:	bc70      	pop	{r4, r5, r6}
    8594:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8596:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8598:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    859c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    85a0:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    85a4:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85a8:	2200      	movs	r2, #0
    85aa:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    85ae:	2201      	movs	r2, #1
    85b0:	61da      	str	r2, [r3, #28]
    85b2:	4614      	mov	r4, r2
    85b4:	4616      	mov	r6, r2
    85b6:	e7d4      	b.n	8562 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    85b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85ba:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    85bc:	015a      	lsls	r2, r3, #5
    85be:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    85c2:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85c6:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    85ca:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85ce:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    85d0:	2401      	movs	r4, #1
    85d2:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85d4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    85d6:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    85d8:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85da:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    85dc:	615a      	str	r2, [r3, #20]
    }
    85de:	e7c7      	b.n	8570 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    85e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    85e2:	015a      	lsls	r2, r3, #5
    85e4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    85e8:	f502 7380 	add.w	r3, r2, #256	; 0x100
    85ec:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    85f0:	2401      	movs	r4, #1
    85f2:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    85f4:	2400      	movs	r4, #0
    85f6:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    85f8:	e7ea      	b.n	85d0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    85fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    85fc:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8600:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8604:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8608:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    860c:	2600      	movs	r6, #0
    860e:	2201      	movs	r2, #1
    8610:	f8cc 6008 	str.w	r6, [ip, #8]
    8614:	4614      	mov	r4, r2
    8616:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8618:	e7a3      	b.n	8562 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    861a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    861c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8620:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8624:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8628:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    862c:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    862e:	2401      	movs	r4, #1
    8630:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8634:	4616      	mov	r6, r2
    8636:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8638:	e793      	b.n	8562 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    863a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    863c:	015a      	lsls	r2, r3, #5
    863e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8642:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8646:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    864a:	2400      	movs	r4, #0
    864c:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    864e:	2401      	movs	r4, #1
    8650:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8652:	e7bd      	b.n	85d0 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8654:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8656:	2401      	movs	r4, #1
    8658:	e7b0      	b.n	85bc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    865a:	8ac3      	ldrh	r3, [r0, #22]
    865c:	b29b      	uxth	r3, r3
    865e:	f043 0301 	orr.w	r3, r3, #1
    8662:	82c3      	strh	r3, [r0, #22]
    8664:	e795      	b.n	8592 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    8666:	bf00      	nop

00008668 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8668:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    866a:	015b      	lsls	r3, r3, #5
    866c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    8670:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8672:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8676:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    867a:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    867c:	b152      	cbz	r2, 8694 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    867e:	f003 fbef 	bl	be60 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8682:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8684:	015b      	lsls	r3, r3, #5
    8686:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    868a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    868e:	69da      	ldr	r2, [r3, #28]
    8690:	2a00      	cmp	r2, #0
    8692:	d1f4      	bne.n	867e <ADC_Module::wait_for_cal()+0x16>
    8694:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    8696:	b123      	cbz	r3, 86a2 <ADC_Module::wait_for_cal()+0x3a>
    8698:	8ae3      	ldrh	r3, [r4, #22]
    869a:	b29b      	uxth	r3, r3
    869c:	f043 0302 	orr.w	r3, r3, #2
    86a0:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    86a2:	b672      	cpsid	i
    if (calibrating)
    86a4:	7e63      	ldrb	r3, [r4, #25]
    86a6:	b303      	cbz	r3, 86ea <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    86a8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    86aa:	6b93      	ldr	r3, [r2, #56]	; 0x38
    86ac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    86ae:	440b      	add	r3, r1
    86b0:	6c11      	ldr	r1, [r2, #64]	; 0x40
    86b2:	6c50      	ldr	r0, [r2, #68]	; 0x44
    86b4:	440b      	add	r3, r1
    86b6:	6c91      	ldr	r1, [r2, #72]	; 0x48
    86b8:	4403      	add	r3, r0
    86ba:	440b      	add	r3, r1
    86bc:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    86be:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    86c0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    86c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    86c8:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    86ca:	6d93      	ldr	r3, [r2, #88]	; 0x58
    86cc:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    86ce:	440b      	add	r3, r1
    86d0:	6e11      	ldr	r1, [r2, #96]	; 0x60
    86d2:	6e50      	ldr	r0, [r2, #100]	; 0x64
    86d4:	440b      	add	r3, r1
    86d6:	6e91      	ldr	r1, [r2, #104]	; 0x68
    86d8:	4403      	add	r3, r0
    86da:	440b      	add	r3, r1
    86dc:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    86de:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    86e0:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    86e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    86e8:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    86ea:	b662      	cpsie	i
    if (init_calib)
    86ec:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    86ee:	2200      	movs	r2, #0
    86f0:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    86f2:	b903      	cbnz	r3, 86f6 <ADC_Module::wait_for_cal()+0x8e>
}
    86f4:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    86f6:	2102      	movs	r1, #2
    86f8:	4620      	mov	r0, r4
    86fa:	f7ff ff13 	bl	8524 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    86fe:	7e63      	ldrb	r3, [r4, #25]
    8700:	bb03      	cbnz	r3, 8744 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8702:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8704:	0159      	lsls	r1, r3, #5
    8706:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    870a:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    870c:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    870e:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8712:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8716:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    871a:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    871c:	2102      	movs	r1, #2
    871e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    8722:	b992      	cbnz	r2, 874a <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8724:	015b      	lsls	r3, r3, #5
    8726:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    872a:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    872c:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    872e:	2104      	movs	r1, #4
    8730:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8734:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8738:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    873c:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    8740:	76a2      	strb	r2, [r4, #26]
}
    8742:	bd10      	pop	{r4, pc}
        wait_for_cal();
    8744:	f7ff ff90 	bl	8668 <ADC_Module::wait_for_cal()>
    8748:	e7db      	b.n	8702 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    874a:	4620      	mov	r0, r4
    874c:	f7ff ff8c 	bl	8668 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8750:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8752:	e7e7      	b.n	8724 <ADC_Module::wait_for_cal()+0xbc>

00008754 <ADC_Module::setResolution(unsigned char)>:
{
    8754:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    8756:	7ec3      	ldrb	r3, [r0, #27]
    8758:	428b      	cmp	r3, r1
    875a:	d012      	beq.n	8782 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    875c:	7e43      	ldrb	r3, [r0, #25]
    875e:	4604      	mov	r4, r0
    8760:	460d      	mov	r5, r1
    8762:	bb0b      	cbnz	r3, 87a8 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    8764:	2d09      	cmp	r5, #9
    8766:	d80d      	bhi.n	8784 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8768:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    876a:	015b      	lsls	r3, r3, #5
    876c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8770:	2000      	movs	r0, #0
    8772:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8776:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    8778:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    877a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    877e:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    8780:	76e2      	strb	r2, [r4, #27]
}
    8782:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    8784:	2d0b      	cmp	r5, #11
    8786:	d912      	bls.n	87ae <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    8788:	2d0d      	cmp	r5, #13
    878a:	d81e      	bhi.n	87ca <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    878c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    878e:	015b      	lsls	r3, r3, #5
    8790:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8794:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8796:	2001      	movs	r0, #1
    8798:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    879c:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    87a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    87a4:	220c      	movs	r2, #12
    87a6:	e7ea      	b.n	877e <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    87a8:	f7ff ff5e 	bl	8668 <ADC_Module::wait_for_cal()>
    87ac:	e7da      	b.n	8764 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    87ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    87b0:	015b      	lsls	r3, r3, #5
    87b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    87b6:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    87b8:	2000      	movs	r0, #0
    87ba:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    87be:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    87c2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    87c6:	220a      	movs	r2, #10
    87c8:	e7d9      	b.n	877e <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    87ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    87cc:	015b      	lsls	r3, r3, #5
    87ce:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    87d2:	2001      	movs	r0, #1
    87d4:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    87d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    87dc:	2210      	movs	r2, #16
    87de:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    87e2:	e7cc      	b.n	877e <ADC_Module::setResolution(unsigned char)+0x2a>

000087e4 <ADC_Module::analog_init()>:
{
    87e4:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    87e6:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    87e8:	4a3d      	ldr	r2, [pc, #244]	; (88e0 <ADC_Module::analog_init()+0xfc>)
    87ea:	4604      	mov	r4, r0
        if (ADC_num == 0)
    87ec:	2b00      	cmp	r3, #0
    87ee:	d16a      	bne.n	88c6 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    87f0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    87f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    87f6:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    87f8:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    87fa:	483a      	ldr	r0, [pc, #232]	; (88e4 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    87fc:	493a      	ldr	r1, [pc, #232]	; (88e8 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    87fe:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8802:	0152      	lsls	r2, r2, #5
    8804:	8465      	strh	r5, [r4, #34]	; 0x22
    8806:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    880a:	2504      	movs	r5, #4
    analog_res_bits = 0;
    880c:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    880e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8812:	2501      	movs	r5, #1
    analog_res_bits = 0;
    8814:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    8816:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    8818:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    881c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    8820:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    8822:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    8824:	7563      	strb	r3, [r4, #21]
    8826:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    882a:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    882c:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    8830:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    8832:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8836:	0152      	lsls	r2, r2, #5
    8838:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    883c:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    8840:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8842:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    8844:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8846:	0152      	lsls	r2, r2, #5
    8848:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    884c:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8850:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    8854:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    8858:	b662      	cpsie	i
    setResolution(10);
    885a:	210a      	movs	r1, #10
    885c:	4620      	mov	r0, r4
    885e:	f7ff ff79 	bl	8754 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    8862:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    8864:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    8866:	bb9b      	cbnz	r3, 88d0 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8868:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    886a:	015b      	lsls	r3, r3, #5
    886c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8870:	2101      	movs	r1, #1
    analog_num_average = num;
    8872:	2220      	movs	r2, #32
    8874:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8878:	4620      	mov	r0, r4
    887a:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    887e:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    8882:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8886:	f7ff fe4d 	bl	8524 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    888a:	7e63      	ldrb	r3, [r4, #25]
    888c:	bb23      	cbnz	r3, 88d8 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    888e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8890:	0159      	lsls	r1, r3, #5
    8892:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8896:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8898:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    889a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    889e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    88a2:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    88a6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    88aa:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    88ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    88ae:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    88b0:	015b      	lsls	r3, r3, #5
    88b2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    88b6:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    88ba:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    88be:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    88c2:	b662      	cpsie	i
}
    88c4:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    88c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    88c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    88cc:	6313      	str	r3, [r2, #48]	; 0x30
    88ce:	e793      	b.n	87f8 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    88d0:	4620      	mov	r0, r4
    88d2:	f7ff fec9 	bl	8668 <ADC_Module::wait_for_cal()>
    88d6:	e7c7      	b.n	8868 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    88d8:	f7ff fec6 	bl	8668 <ADC_Module::wait_for_cal()>
    88dc:	e7d7      	b.n	888e <ADC_Module::analog_init()+0xaa>
    88de:	bf00      	nop
    88e0:	40048000 	.word	0x40048000
    88e4:	40074000 	.word	0x40074000
    88e8:	42fa0000 	.word	0x42fa0000

000088ec <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    88ec:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    88ee:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    88f0:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    88f2:	4a09      	ldr	r2, [pc, #36]	; (8918 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    88f4:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    88f6:	bf0c      	ite	eq
    88f8:	2339      	moveq	r3, #57	; 0x39
    88fa:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    88fc:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    88fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8902:	4906      	ldr	r1, [pc, #24]	; (891c <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    8904:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    8906:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8908:	bf18      	it	ne
    890a:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    890c:	4604      	mov	r4, r0
    890e:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    8910:	f7ff ff68 	bl	87e4 <ADC_Module::analog_init()>
}
    8914:	4620      	mov	r0, r4
    8916:	bd10      	pop	{r4, pc}
    8918:	40036038 	.word	0x40036038
    891c:	40036010 	.word	0x40036010

00008920 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    8920:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8922:	7e43      	ldrb	r3, [r0, #25]
{
    8924:	4605      	mov	r5, r0
    8926:	460c      	mov	r4, r1
    if (calibrating)
    8928:	b9a3      	cbnz	r3, 8954 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    892a:	2c04      	cmp	r4, #4
    892c:	d80f      	bhi.n	894e <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    892e:	e8df f004 	tbb	[pc, r4]
    8932:	2d1e      	.short	0x2d1e
    8934:	033c      	.short	0x033c
    8936:	14          	.byte	0x14
    8937:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    8938:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    893a:	015a      	lsls	r2, r3, #5
    893c:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8940:	2101      	movs	r1, #1
    8942:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    8946:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    894a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    894e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8952:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8954:	f7ff fe88 	bl	8668 <ADC_Module::wait_for_cal()>
    8958:	e7e7      	b.n	892a <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    895a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    895c:	015b      	lsls	r3, r3, #5
    895e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8962:	2200      	movs	r2, #0
    8964:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    8968:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    896c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    896e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8970:	015a      	lsls	r2, r3, #5
    8972:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8976:	2101      	movs	r1, #1
    8978:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    897c:	2100      	movs	r1, #0
    897e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8982:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8986:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    898a:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    898c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    898e:	015a      	lsls	r2, r3, #5
    8990:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8994:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8996:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8998:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    899c:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    89a0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    89a4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    89a8:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    89aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89ac:	015a      	lsls	r2, r3, #5
    89ae:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89b2:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    89b4:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89b6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    89ba:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    89be:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    89c2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    89c6:	bd38      	pop	{r3, r4, r5, pc}

000089c8 <ADC_Module::setAveraging(unsigned char)>:
{
    89c8:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    89ca:	7e43      	ldrb	r3, [r0, #25]
{
    89cc:	4604      	mov	r4, r0
    89ce:	460d      	mov	r5, r1
    if (calibrating)
    89d0:	bb2b      	cbnz	r3, 8a1e <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    89d2:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    89d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    89d6:	d918      	bls.n	8a0a <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89d8:	015b      	lsls	r3, r3, #5
    89da:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    89de:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89e2:	2101      	movs	r1, #1
        if (num <= 4)
    89e4:	2d04      	cmp	r5, #4
    89e6:	6099      	str	r1, [r3, #8]
    89e8:	d806      	bhi.n	89f8 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89ea:	2100      	movs	r1, #0
    89ec:	6059      	str	r1, [r3, #4]
            num = 4;
    89ee:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    89f0:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    89f2:	f884 2020 	strb.w	r2, [r4, #32]
}
    89f6:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    89f8:	2d08      	cmp	r5, #8
    89fa:	d913      	bls.n	8a24 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    89fc:	2d10      	cmp	r5, #16
    89fe:	d818      	bhi.n	8a32 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8a00:	2200      	movs	r2, #0
    8a02:	601a      	str	r2, [r3, #0]
            num = 16;
    8a04:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8a06:	6059      	str	r1, [r3, #4]
    }
    8a08:	e7f3      	b.n	89f2 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a0a:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a0c:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a0e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8a12:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a14:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8a18:	f884 2020 	strb.w	r2, [r4, #32]
}
    8a1c:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8a1e:	f7ff fe23 	bl	8668 <ADC_Module::wait_for_cal()>
    8a22:	e7d6      	b.n	89d2 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8a24:	2000      	movs	r0, #0
            num = 8;
    8a26:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8a28:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8a2a:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    8a2c:	f884 2020 	strb.w	r2, [r4, #32]
}
    8a30:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a32:	6059      	str	r1, [r3, #4]
            num = 32;
    8a34:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8a36:	6019      	str	r1, [r3, #0]
    }
    8a38:	e7db      	b.n	89f2 <ADC_Module::setAveraging(unsigned char)+0x2a>
    8a3a:	bf00      	nop

00008a3c <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    8a3c:	292b      	cmp	r1, #43	; 0x2b
    8a3e:	d807      	bhi.n	8a50 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8a40:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8a42:	5c58      	ldrb	r0, [r3, r1]
    8a44:	f000 001f 	and.w	r0, r0, #31
    8a48:	381f      	subs	r0, #31
    8a4a:	bf18      	it	ne
    8a4c:	2001      	movne	r0, #1
    8a4e:	4770      	bx	lr
        return false; // all others are invalid
    8a50:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8a52:	4770      	bx	lr

00008a54 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8a54:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8a56:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8a58:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8a5a:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8a5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a5e:	ea4f 1242 	mov.w	r2, r2, lsl #5
    8a62:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a66:	bfb4      	ite	lt
    8a68:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a6a:	2101      	movge	r1, #1
    8a6c:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    8a70:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    8a72:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a74:	014a      	lsls	r2, r1, #5
    8a76:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8a7a:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8a7e:	6992      	ldr	r2, [r2, #24]
    8a80:	3a00      	subs	r2, #0
    8a82:	bf18      	it	ne
    8a84:	2201      	movne	r2, #1
    8a86:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    8a8a:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    8a8c:	b662      	cpsie	i
}
    8a8e:	4770      	bx	lr

00008a90 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    8a90:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    8a92:	292b      	cmp	r1, #43	; 0x2b
{
    8a94:	b083      	sub	sp, #12
    8a96:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    8a98:	d817      	bhi.n	8aca <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8a9a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8a9c:	5c5b      	ldrb	r3, [r3, r1]
    8a9e:	f003 031f 	and.w	r3, r3, #31
    8aa2:	2b1f      	cmp	r3, #31
    8aa4:	d011      	beq.n	8aca <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    8aa6:	7e43      	ldrb	r3, [r0, #25]
    8aa8:	b9bb      	cbnz	r3, 8ada <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    8aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    8aac:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8aae:	015b      	lsls	r3, r3, #5
    8ab0:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8ab4:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ab6:	2601      	movs	r6, #1
    8ab8:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    8aba:	4620      	mov	r0, r4
    8abc:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    8ac0:	f7ff ffc8 	bl	8a54 <ADC_Module::startReadFast(unsigned char)>

    return true;
    8ac4:	4630      	mov	r0, r6
}
    8ac6:	b003      	add	sp, #12
    8ac8:	bd50      	pop	{r4, r6, pc}
    8aca:	8ae3      	ldrh	r3, [r4, #22]
    8acc:	b29b      	uxth	r3, r3
        return false;
    8ace:	2000      	movs	r0, #0
    8ad0:	f043 0304 	orr.w	r3, r3, #4
    8ad4:	82e3      	strh	r3, [r4, #22]
}
    8ad6:	b003      	add	sp, #12
    8ad8:	bd50      	pop	{r4, r6, pc}
    8ada:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    8adc:	f7ff fdc4 	bl	8668 <ADC_Module::wait_for_cal()>
    8ae0:	9901      	ldr	r1, [sp, #4]
    8ae2:	e7e2      	b.n	8aaa <ADC_Module::startContinuous(unsigned char)+0x1a>

00008ae4 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    8ae4:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    8ae8:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    8aea:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    8aee:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8af0:	d101      	bne.n	8af6 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    8af2:	6883      	ldr	r3, [r0, #8]
    8af4:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    8af6:	f000 b941 	b.w	8d7c <EventResponder::triggerEventNotImmediate()>
    8afa:	bf00      	nop

00008afc <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    8afc:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    8afe:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8b00:	4a4a      	ldr	r2, [pc, #296]	; (8c2c <SPIClass::dma_rxisr()+0x130>)
    8b02:	7909      	ldrb	r1, [r1, #4]
    8b04:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    8b06:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8b08:	7909      	ldrb	r1, [r1, #4]
    8b0a:	7711      	strb	r1, [r2, #28]
    8b0c:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8b0e:	7909      	ldrb	r1, [r1, #4]
    8b10:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    8b12:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    8b14:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    8b16:	b32a      	cbz	r2, 8b64 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    8b18:	6841      	ldr	r1, [r0, #4]
    8b1a:	68c9      	ldr	r1, [r1, #12]
    8b1c:	428a      	cmp	r2, r1
    8b1e:	d943      	bls.n	8ba8 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    8b20:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8b22:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    8b24:	1a52      	subs	r2, r2, r1
    8b26:	6821      	ldr	r1, [r4, #0]
    8b28:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8b2a:	680d      	ldr	r5, [r1, #0]
    8b2c:	f103 0424 	add.w	r4, r3, #36	; 0x24
    8b30:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8b32:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8b36:	d059      	beq.n	8bec <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8b38:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8b3a:	68e5      	ldr	r5, [r4, #12]
    8b3c:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8b40:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8b42:	d129      	bne.n	8b98 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    8b44:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8b46:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8b48:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8b4c:	3601      	adds	r6, #1
    8b4e:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8b50:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    8b52:	4936      	ldr	r1, [pc, #216]	; (8c2c <SPIClass::dma_rxisr()+0x130>)
    8b54:	7900      	ldrb	r0, [r0, #4]
    8b56:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    8b58:	b112      	cbz	r2, 8b60 <SPIClass::dma_rxisr()+0x64>
    8b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8b5c:	791b      	ldrb	r3, [r3, #4]
    8b5e:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    8b60:	bc70      	pop	{r4, r5, r6}
    8b62:	4770      	bx	lr
    8b64:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    8b66:	4c32      	ldr	r4, [pc, #200]	; (8c30 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    8b68:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    8b6a:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    8b6c:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8b6e:	68cc      	ldr	r4, [r1, #12]
    8b70:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    8b74:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    8b76:	6804      	ldr	r4, [r0, #0]
    8b78:	492e      	ldr	r1, [pc, #184]	; (8c34 <SPIClass::dma_rxisr()+0x138>)
    8b7a:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8b7c:	f04f 0c03 	mov.w	ip, #3
    8b80:	428c      	cmp	r4, r1
    8b82:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    8b86:	d139      	bne.n	8bfc <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    8b88:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    8b8a:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    8b8c:	2b02      	cmp	r3, #2
		_data = data;
    8b8e:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8b90:	d138      	bne.n	8c04 <SPIClass::dma_rxisr()+0x108>
}
    8b92:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    8b94:	6883      	ldr	r3, [r0, #8]
    8b96:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8b98:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8b9a:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8b9c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8ba0:	3602      	adds	r6, #2
    8ba2:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8ba4:	6365      	str	r5, [r4, #52]	; 0x34
    8ba6:	e7d4      	b.n	8b52 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8ba8:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8baa:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8bac:	8bcc      	ldrh	r4, [r1, #30]
    8bae:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8bb0:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8bb4:	d431      	bmi.n	8c1a <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    8bb6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    8bba:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    8bbc:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8bbe:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    8bc0:	b2a4      	uxth	r4, r4
    8bc2:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8bc4:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8bc6:	8be5      	ldrh	r5, [r4, #30]
    8bc8:	042d      	lsls	r5, r5, #16
    8bca:	d41e      	bmi.n	8c0a <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    8bcc:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8bd0:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    8bd2:	8be5      	ldrh	r5, [r4, #30]
    8bd4:	b2ad      	uxth	r5, r5
    8bd6:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8bd8:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    8bda:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8bdc:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    8bde:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8be0:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8be4:	bf18      	it	ne
    8be6:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8be8:	42a5      	cmp	r5, r4
    8bea:	d1a5      	bne.n	8b38 <SPIClass::dma_rxisr()+0x3c>
    8bec:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8bee:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8bf0:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    8bf4:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    8bf8:	634c      	str	r4, [r1, #52]	; 0x34
    8bfa:	e7aa      	b.n	8b52 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    8bfc:	4623      	mov	r3, r4
    8bfe:	4611      	mov	r1, r2
}
    8c00:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    8c02:	4718      	bx	r3
}
    8c04:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    8c06:	f000 b8b9 	b.w	8d7c <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    8c0a:	8be5      	ldrh	r5, [r4, #30]
    8c0c:	f3c2 0608 	ubfx	r6, r2, #0, #9
    8c10:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    8c14:	4335      	orrs	r5, r6
    8c16:	83e5      	strh	r5, [r4, #30]
    8c18:	e7db      	b.n	8bd2 <SPIClass::dma_rxisr()+0xd6>
    8c1a:	8bcc      	ldrh	r4, [r1, #30]
    8c1c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    8c20:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    8c24:	4320      	orrs	r0, r4
    8c26:	83c8      	strh	r0, [r1, #30]
    8c28:	e7c8      	b.n	8bbc <SPIClass::dma_rxisr()+0xc0>
    8c2a:	bf00      	nop
    8c2c:	40008000 	.word	0x40008000
    8c30:	ff0f0000 	.word	0xff0f0000
    8c34:	00008ae5 	.word	0x00008ae5

00008c38 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    8c38:	b508      	push	{r3, lr}
    8c3a:	4802      	ldr	r0, [pc, #8]	; (8c44 <_spi_dma_rxISR0()+0xc>)
    8c3c:	f7ff ff5e 	bl	8afc <SPIClass::dma_rxisr()>
    8c40:	bd08      	pop	{r3, pc}
    8c42:	bf00      	nop
    8c44:	1fffd094 	.word	0x1fffd094

00008c48 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    8c48:	4a0a      	ldr	r2, [pc, #40]	; (8c74 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    8c4a:	490b      	ldr	r1, [pc, #44]	; (8c78 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    8c4c:	2300      	movs	r3, #0
}
    8c4e:	b410      	push	{r4}
    8c50:	4c0a      	ldr	r4, [pc, #40]	; (8c7c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    8c52:	6093      	str	r3, [r2, #8]
    8c54:	8493      	strh	r3, [r2, #36]	; 0x24
    8c56:	6014      	str	r4, [r2, #0]
    8c58:	6051      	str	r1, [r2, #4]
    8c5a:	bc10      	pop	{r4}
    8c5c:	60d3      	str	r3, [r2, #12]
    8c5e:	6193      	str	r3, [r2, #24]
    8c60:	6293      	str	r3, [r2, #40]	; 0x28
    8c62:	62d3      	str	r3, [r2, #44]	; 0x2c
    8c64:	6313      	str	r3, [r2, #48]	; 0x30
    8c66:	6353      	str	r3, [r2, #52]	; 0x34
    8c68:	6113      	str	r3, [r2, #16]
    8c6a:	6153      	str	r3, [r2, #20]
    8c6c:	61d3      	str	r3, [r2, #28]
    8c6e:	6213      	str	r3, [r2, #32]
    8c70:	4770      	bx	lr
    8c72:	bf00      	nop
    8c74:	1fffd094 	.word	0x1fffd094
    8c78:	00014f0c 	.word	0x00014f0c
    8c7c:	4002c000 	.word	0x4002c000

00008c80 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    8c80:	b538      	push	{r3, r4, r5, lr}
    8c82:	4604      	mov	r4, r0
    8c84:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    8c86:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    8c88:	490a      	ldr	r1, [pc, #40]	; (8cb4 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    8c8a:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    8c8c:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    8c8e:	f003 fec1 	bl	ca14 <__aeabi_fmul>
    8c92:	4601      	mov	r1, r0
    8c94:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8c98:	f003 ff70 	bl	cb7c <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    8c9c:	4906      	ldr	r1, [pc, #24]	; (8cb8 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    8c9e:	f003 feb9 	bl	ca14 <__aeabi_fmul>
  Y = initialValue;
    8ca2:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    8ca4:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    8ca6:	6125      	str	r5, [r4, #16]
  X = initialValue;
    8ca8:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    8caa:	f001 f9d1 	bl	a050 <micros>
    8cae:	61e0      	str	r0, [r4, #28]
}
    8cb0:	4620      	mov	r0, r4
    8cb2:	bd38      	pop	{r3, r4, r5, pc}
    8cb4:	40c90fdb 	.word	0x40c90fdb
    8cb8:	49742400 	.word	0x49742400

00008cbc <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    8cbc:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    8cbe:	b510      	push	{r4, lr}
    8cc0:	4604      	mov	r4, r0
  switch (FT) {
    8cc2:	2b03      	cmp	r3, #3
    8cc4:	d821      	bhi.n	8d0a <FilterOnePole::output()+0x4e>
    8cc6:	e8df f003 	tbb	[pc, r3]
    8cca:	1e19      	.short	0x1e19
    8ccc:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    8cce:	68c1      	ldr	r1, [r0, #12]
    8cd0:	6940      	ldr	r0, [r0, #20]
    8cd2:	f003 fd95 	bl	c800 <__aeabi_fsub>
    8cd6:	490e      	ldr	r1, [pc, #56]	; (8d10 <FilterOnePole::output()+0x54>)
    8cd8:	4603      	mov	r3, r0
    8cda:	6860      	ldr	r0, [r4, #4]
    8cdc:	461c      	mov	r4, r3
    8cde:	f003 ff4d 	bl	cb7c <__aeabi_fdiv>
    8ce2:	4601      	mov	r1, r0
    8ce4:	4620      	mov	r0, r4
    8ce6:	f003 ff49 	bl	cb7c <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    8cea:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    8cec:	4908      	ldr	r1, [pc, #32]	; (8d10 <FilterOnePole::output()+0x54>)
    8cee:	6840      	ldr	r0, [r0, #4]
    8cf0:	f003 ff44 	bl	cb7c <__aeabi_fdiv>
    8cf4:	68e1      	ldr	r1, [r4, #12]
    8cf6:	f003 fe8d 	bl	ca14 <__aeabi_fmul>
}
    8cfa:	bd10      	pop	{r4, pc}
      return X-Y;
    8cfc:	68c1      	ldr	r1, [r0, #12]
    8cfe:	6940      	ldr	r0, [r0, #20]
    8d00:	f003 fd7e 	bl	c800 <__aeabi_fsub>
}
    8d04:	bd10      	pop	{r4, pc}
      return Y; 
    8d06:	68c0      	ldr	r0, [r0, #12]
}
    8d08:	bd10      	pop	{r4, pc}
  switch (FT) {
    8d0a:	2000      	movs	r0, #0
}
    8d0c:	bd10      	pop	{r4, pc}
    8d0e:	bf00      	nop
    8d10:	49742400 	.word	0x49742400

00008d14 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    8d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d16:	4604      	mov	r4, r0
    8d18:	460e      	mov	r6, r1
  long time = micros();
    8d1a:	f001 f999 	bl	a050 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8d1e:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    8d20:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8d22:	1ac0      	subs	r0, r0, r3
    8d24:	f003 fe22 	bl	c96c <__aeabi_i2f>
  Ylast = Y;
    8d28:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    8d2a:	61a0      	str	r0, [r4, #24]
    8d2c:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    8d2e:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    8d30:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    8d32:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    8d34:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    8d36:	f003 ff21 	bl	cb7c <__aeabi_fdiv>
    8d3a:	4601      	mov	r1, r0
    8d3c:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    8d3e:	480e      	ldr	r0, [pc, #56]	; (8d78 <FilterOnePole::input(float)+0x64>)
    8d40:	f003 ff1c 	bl	cb7c <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    8d44:	f003 f966 	bl	c014 <expf>
    8d48:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    8d4a:	4601      	mov	r1, r0
    8d4c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    8d50:	f003 fd56 	bl	c800 <__aeabi_fsub>
    8d54:	4631      	mov	r1, r6
    8d56:	f003 fe5d 	bl	ca14 <__aeabi_fmul>
    8d5a:	4629      	mov	r1, r5
    8d5c:	4606      	mov	r6, r0
    8d5e:	4638      	mov	r0, r7
    8d60:	f003 fe58 	bl	ca14 <__aeabi_fmul>
    8d64:	4601      	mov	r1, r0
    8d66:	4630      	mov	r0, r6
    8d68:	f003 fd4c 	bl	c804 <__addsf3>
    8d6c:	60e0      	str	r0, [r4, #12]
  return output();
    8d6e:	4620      	mov	r0, r4
}
    8d70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    8d74:	f7ff bfa2 	b.w	8cbc <FilterOnePole::output()>
    8d78:	bf800000 	.word	0xbf800000

00008d7c <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8d7c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8d80:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    8d82:	7f43      	ldrb	r3, [r0, #29]
    8d84:	b95b      	cbnz	r3, 8d9e <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    8d86:	7f01      	ldrb	r1, [r0, #28]
    8d88:	2901      	cmp	r1, #1
{
    8d8a:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    8d8c:	d00b      	beq.n	8da6 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    8d8e:	2903      	cmp	r1, #3
    8d90:	d013      	beq.n	8dba <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    8d92:	2301      	movs	r3, #1
    8d94:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8d96:	b902      	cbnz	r2, 8d9a <EventResponder::triggerEventNotImmediate()+0x1e>
    8d98:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    8d9a:	bc30      	pop	{r4, r5}
    8d9c:	4770      	bx	lr
    8d9e:	b90a      	cbnz	r2, 8da4 <EventResponder::triggerEventNotImmediate()+0x28>
    8da0:	b662      	cpsie	i
    8da2:	4770      	bx	lr
    8da4:	4770      	bx	lr
			if (firstYield == nullptr) {
    8da6:	4c12      	ldr	r4, [pc, #72]	; (8df0 <EventResponder::triggerEventNotImmediate()+0x74>)
    8da8:	6821      	ldr	r1, [r4, #0]
    8daa:	b1b1      	cbz	r1, 8dda <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    8dac:	4911      	ldr	r1, [pc, #68]	; (8df4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8dae:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    8db0:	680b      	ldr	r3, [r1, #0]
    8db2:	6183      	str	r3, [r0, #24]
				lastYield = this;
    8db4:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    8db6:	6158      	str	r0, [r3, #20]
				lastYield = this;
    8db8:	e7eb      	b.n	8d92 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    8dba:	4d0f      	ldr	r5, [pc, #60]	; (8df8 <EventResponder::triggerEventNotImmediate()+0x7c>)
    8dbc:	490f      	ldr	r1, [pc, #60]	; (8dfc <EventResponder::triggerEventNotImmediate()+0x80>)
    8dbe:	682c      	ldr	r4, [r5, #0]
    8dc0:	b18c      	cbz	r4, 8de6 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    8dc2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    8dc4:	680b      	ldr	r3, [r1, #0]
    8dc6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    8dc8:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8dca:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    8dce:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    8dd2:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    8dd4:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    8dd8:	e7db      	b.n	8d92 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    8dda:	4b06      	ldr	r3, [pc, #24]	; (8df4 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    8ddc:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    8dde:	6181      	str	r1, [r0, #24]
				firstYield = this;
    8de0:	6020      	str	r0, [r4, #0]
				lastYield = this;
    8de2:	6018      	str	r0, [r3, #0]
    8de4:	e7d5      	b.n	8d92 <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    8de6:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    8de8:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    8dea:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    8dec:	e7ed      	b.n	8dca <EventResponder::triggerEventNotImmediate()+0x4e>
    8dee:	bf00      	nop
    8df0:	1fffd0cc 	.word	0x1fffd0cc
    8df4:	1fffd0dc 	.word	0x1fffd0dc
    8df8:	1fffd0d4 	.word	0x1fffd0d4
    8dfc:	1fffd0d0 	.word	0x1fffd0d0

00008e00 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    8e00:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8e02:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8e06:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    8e08:	4c0c      	ldr	r4, [pc, #48]	; (8e3c <EventResponder::runFromInterrupt()+0x3c>)
    8e0a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8e0c:	b180      	cbz	r0, 8e30 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    8e0e:	4e0c      	ldr	r6, [pc, #48]	; (8e40 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    8e10:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    8e12:	6943      	ldr	r3, [r0, #20]
    8e14:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    8e16:	b173      	cbz	r3, 8e36 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    8e18:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    8e1a:	b902      	cbnz	r2, 8e1e <EventResponder::runFromInterrupt()+0x1e>
    8e1c:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    8e1e:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    8e20:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    8e22:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8e24:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    8e28:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    8e2a:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d1f0      	bne.n	8e12 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    8e30:	b902      	cbnz	r2, 8e34 <EventResponder::runFromInterrupt()+0x34>
    8e32:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    8e34:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    8e36:	6033      	str	r3, [r6, #0]
    8e38:	e7ef      	b.n	8e1a <EventResponder::runFromInterrupt()+0x1a>
    8e3a:	bf00      	nop
    8e3c:	1fffd0d4 	.word	0x1fffd0d4
    8e40:	1fffd0d0 	.word	0x1fffd0d0

00008e44 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    8e44:	f7ff bfdc 	b.w	8e00 <EventResponder::runFromInterrupt()>

00008e48 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    8e48:	4a02      	ldr	r2, [pc, #8]	; (8e54 <systick_isr+0xc>)
    8e4a:	6813      	ldr	r3, [r2, #0]
    8e4c:	3301      	adds	r3, #1
    8e4e:	6013      	str	r3, [r2, #0]
}
    8e50:	4770      	bx	lr
    8e52:	bf00      	nop
    8e54:	1fffd0e4 	.word	0x1fffd0e4

00008e58 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    8e58:	084b      	lsrs	r3, r1, #1
    8e5a:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    8e5e:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    8e62:	b510      	push	{r4, lr}
    8e64:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    8e66:	fbb3 f0f1 	udiv	r0, r3, r1
    8e6a:	f001 f95d 	bl	a128 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    8e6e:	4b04      	ldr	r3, [pc, #16]	; (8e80 <HardwareSerial2::begin(unsigned long)+0x28>)
    8e70:	781b      	ldrb	r3, [r3, #0]
    8e72:	b103      	cbz	r3, 8e76 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    8e74:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    8e76:	4620      	mov	r0, r4
}
    8e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    8e7c:	f003 b868 	b.w	bf50 <HardwareSerial::addToSerialEventsList()>
    8e80:	1fff8a01 	.word	0x1fff8a01

00008e84 <HardwareSerial2::write9bit(unsigned long)>:
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    8e84:	b508      	push	{r3, lr}
    8e86:	4608      	mov	r0, r1
    8e88:	f001 fb3c 	bl	a504 <serial2_putchar>
    8e8c:	2001      	movs	r0, #1
    8e8e:	bd08      	pop	{r3, pc}

00008e90 <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8e90:	b508      	push	{r3, lr}
    8e92:	4608      	mov	r0, r1
    8e94:	f001 fb36 	bl	a504 <serial2_putchar>
    8e98:	2001      	movs	r0, #1
    8e9a:	bd08      	pop	{r3, pc}

00008e9c <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    8e9c:	b538      	push	{r3, r4, r5, lr}
    8e9e:	4608      	mov	r0, r1
    8ea0:	460d      	mov	r5, r1
    8ea2:	f004 ff6d 	bl	dd80 <strlen>
    8ea6:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    8ea8:	4601      	mov	r1, r0
    8eaa:	4628      	mov	r0, r5
    8eac:	f001 fba6 	bl	a5fc <serial2_write>
					  return len; }
    8eb0:	4620      	mov	r0, r4
    8eb2:	bd38      	pop	{r3, r4, r5, pc}

00008eb4 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    8eb4:	b510      	push	{r4, lr}
    8eb6:	4608      	mov	r0, r1
    8eb8:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    8eba:	4611      	mov	r1, r2
    8ebc:	f001 fb9e 	bl	a5fc <serial2_write>
    8ec0:	4620      	mov	r0, r4
    8ec2:	bd10      	pop	{r4, pc}

00008ec4 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    8ec4:	4608      	mov	r0, r1
    8ec6:	4611      	mov	r1, r2
    8ec8:	f001 bdc6 	b.w	aa58 <serial2_add_memory_for_write>

00008ecc <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    8ecc:	4608      	mov	r0, r1
    8ece:	4611      	mov	r1, r2
    8ed0:	f001 bda6 	b.w	aa20 <serial2_add_memory_for_read>

00008ed4 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    8ed4:	f001 bcbe 	b.w	a854 <serial2_clear>

00008ed8 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    8ed8:	b508      	push	{r3, lr}
    8eda:	4608      	mov	r0, r1
    8edc:	f001 faf2 	bl	a4c4 <serial2_set_cts>
    8ee0:	3800      	subs	r0, #0
    8ee2:	bf18      	it	ne
    8ee4:	2001      	movne	r0, #1
    8ee6:	bd08      	pop	{r3, pc}

00008ee8 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    8ee8:	b508      	push	{r3, lr}
    8eea:	4608      	mov	r0, r1
    8eec:	f001 fac8 	bl	a480 <serial2_set_rts>
    8ef0:	3800      	subs	r0, #0
    8ef2:	bf18      	it	ne
    8ef4:	2001      	movne	r0, #1
    8ef6:	bd08      	pop	{r3, pc}

00008ef8 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    8ef8:	4608      	mov	r0, r1
    8efa:	4611      	mov	r1, r2
    8efc:	f001 ba54 	b.w	a3a8 <serial2_set_tx>

00008f00 <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    8f00:	4608      	mov	r0, r1
    8f02:	f001 ba8f 	b.w	a424 <serial2_set_rx>
    8f06:	bf00      	nop

00008f08 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    8f08:	4608      	mov	r0, r1
    8f0a:	f001 ba31 	b.w	a370 <serial2_set_transmit_pin>
    8f0e:	bf00      	nop

00008f10 <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    8f10:	f001 b9c6 	b.w	a2a0 <serial2_end>

00008f14 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    8f14:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    8f16:	084b      	lsrs	r3, r1, #1
    8f18:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    8f1c:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    8f1e:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    8f22:	fbb3 f0f1 	udiv	r0, r3, r1
    8f26:	f001 f8ff 	bl	a128 <serial2_begin>
					  serial2_format(format); }
    8f2a:	4620      	mov	r0, r4
    8f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8f30:	f001 b968 	b.w	a204 <serial2_format>

00008f34 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    8f34:	f001 bc68 	b.w	a808 <serial2_peek>

00008f38 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    8f38:	f001 bc20 	b.w	a77c <serial2_getchar>

00008f3c <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    8f3c:	f001 bc0a 	b.w	a754 <serial2_available>

00008f40 <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    8f40:	f001 bbe4 	b.w	a70c <serial2_flush>

00008f44 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    8f44:	f001 bbee 	b.w	a724 <serial2_write_buffer_free>

00008f48 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8f48:	6803      	ldr	r3, [r0, #0]
    8f4a:	4a06      	ldr	r2, [pc, #24]	; (8f64 <HardwareSerial2::write(int)+0x1c>)
    8f4c:	681b      	ldr	r3, [r3, #0]
    8f4e:	4293      	cmp	r3, r2
    8f50:	d105      	bne.n	8f5e <HardwareSerial2::write(int)+0x16>
    8f52:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8f54:	b2c8      	uxtb	r0, r1
    8f56:	f001 fad5 	bl	a504 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    8f5a:	2001      	movs	r0, #1
    8f5c:	bd10      	pop	{r4, pc}
    8f5e:	b2c9      	uxtb	r1, r1
    8f60:	4718      	bx	r3
    8f62:	bf00      	nop
    8f64:	00008e91 	.word	0x00008e91

00008f68 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8f68:	6803      	ldr	r3, [r0, #0]
    8f6a:	4a06      	ldr	r2, [pc, #24]	; (8f84 <HardwareSerial2::write(unsigned long)+0x1c>)
    8f6c:	681b      	ldr	r3, [r3, #0]
    8f6e:	4293      	cmp	r3, r2
    8f70:	d105      	bne.n	8f7e <HardwareSerial2::write(unsigned long)+0x16>
    8f72:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8f74:	b2c8      	uxtb	r0, r1
    8f76:	f001 fac5 	bl	a504 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    8f7a:	2001      	movs	r0, #1
    8f7c:	bd10      	pop	{r4, pc}
    8f7e:	b2c9      	uxtb	r1, r1
    8f80:	4718      	bx	r3
    8f82:	bf00      	nop
    8f84:	00008e91 	.word	0x00008e91

00008f88 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8f88:	6803      	ldr	r3, [r0, #0]
    8f8a:	4a06      	ldr	r2, [pc, #24]	; (8fa4 <HardwareSerial2::write(long)+0x1c>)
    8f8c:	681b      	ldr	r3, [r3, #0]
    8f8e:	4293      	cmp	r3, r2
    8f90:	d105      	bne.n	8f9e <HardwareSerial2::write(long)+0x16>
    8f92:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8f94:	b2c8      	uxtb	r0, r1
    8f96:	f001 fab5 	bl	a504 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    8f9a:	2001      	movs	r0, #1
    8f9c:	bd10      	pop	{r4, pc}
    8f9e:	b2c9      	uxtb	r1, r1
    8fa0:	4718      	bx	r3
    8fa2:	bf00      	nop
    8fa4:	00008e91 	.word	0x00008e91

00008fa8 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8fa8:	6803      	ldr	r3, [r0, #0]
    8faa:	4a06      	ldr	r2, [pc, #24]	; (8fc4 <HardwareSerial2::write(unsigned int)+0x1c>)
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	4293      	cmp	r3, r2
    8fb0:	d105      	bne.n	8fbe <HardwareSerial2::write(unsigned int)+0x16>
    8fb2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    8fb4:	b2c8      	uxtb	r0, r1
    8fb6:	f001 faa5 	bl	a504 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    8fba:	2001      	movs	r0, #1
    8fbc:	bd10      	pop	{r4, pc}
    8fbe:	b2c9      	uxtb	r1, r1
    8fc0:	4718      	bx	r3
    8fc2:	bf00      	nop
    8fc4:	00008e91 	.word	0x00008e91

00008fc8 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    8fc8:	084b      	lsrs	r3, r1, #1
    8fca:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    8fce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    8fd2:	b510      	push	{r4, lr}
    8fd4:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    8fd6:	fbb3 f0f1 	udiv	r0, r3, r1
    8fda:	f001 fdc3 	bl	ab64 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    8fde:	4b04      	ldr	r3, [pc, #16]	; (8ff0 <HardwareSerial3::begin(unsigned long)+0x28>)
    8fe0:	781b      	ldrb	r3, [r3, #0]
    8fe2:	b103      	cbz	r3, 8fe6 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    8fe4:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    8fe6:	4620      	mov	r0, r4
}
    8fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    8fec:	f002 bfb0 	b.w	bf50 <HardwareSerial::addToSerialEventsList()>
    8ff0:	1fff8a02 	.word	0x1fff8a02

00008ff4 <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    8ff4:	b508      	push	{r3, lr}
    8ff6:	4608      	mov	r0, r1
    8ff8:	f001 ff10 	bl	ae1c <serial3_putchar>
    8ffc:	2001      	movs	r0, #1
    8ffe:	bd08      	pop	{r3, pc}

00009000 <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9000:	b508      	push	{r3, lr}
    9002:	4608      	mov	r0, r1
    9004:	f001 ff0a 	bl	ae1c <serial3_putchar>
    9008:	2001      	movs	r0, #1
    900a:	bd08      	pop	{r3, pc}

0000900c <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    900c:	b538      	push	{r3, r4, r5, lr}
    900e:	4608      	mov	r0, r1
    9010:	460d      	mov	r5, r1
    9012:	f004 feb5 	bl	dd80 <strlen>
    9016:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9018:	4601      	mov	r1, r0
    901a:	4628      	mov	r0, r5
    901c:	f001 ff08 	bl	ae30 <serial3_write>
					  return len; }
    9020:	4620      	mov	r0, r4
    9022:	bd38      	pop	{r3, r4, r5, pc}

00009024 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9024:	b510      	push	{r4, lr}
    9026:	4608      	mov	r0, r1
    9028:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    902a:	4611      	mov	r1, r2
    902c:	f001 ff00 	bl	ae30 <serial3_write>
    9030:	4620      	mov	r0, r4
    9032:	bd10      	pop	{r4, pc}

00009034 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    9034:	4608      	mov	r0, r1
    9036:	4611      	mov	r1, r2
    9038:	f002 b874 	b.w	b124 <serial3_add_memory_for_write>

0000903c <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    903c:	4608      	mov	r0, r1
    903e:	4611      	mov	r1, r2
    9040:	f002 b854 	b.w	b0ec <serial3_add_memory_for_read>

00009044 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    9044:	f001 bfac 	b.w	afa0 <serial3_clear>

00009048 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    9048:	b508      	push	{r3, lr}
    904a:	4608      	mov	r0, r1
    904c:	f001 fec6 	bl	addc <serial3_set_cts>
    9050:	3800      	subs	r0, #0
    9052:	bf18      	it	ne
    9054:	2001      	movne	r0, #1
    9056:	bd08      	pop	{r3, pc}

00009058 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    9058:	b508      	push	{r3, lr}
    905a:	4608      	mov	r0, r1
    905c:	f001 fe9c 	bl	ad98 <serial3_set_rts>
    9060:	3800      	subs	r0, #0
    9062:	bf18      	it	ne
    9064:	2001      	movne	r0, #1
    9066:	bd08      	pop	{r3, pc}

00009068 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    9068:	4608      	mov	r0, r1
    906a:	4611      	mov	r1, r2
    906c:	f001 be66 	b.w	ad3c <serial3_set_tx>

00009070 <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    9070:	4608      	mov	r0, r1
    9072:	f001 be8f 	b.w	ad94 <serial3_set_rx>
    9076:	bf00      	nop

00009078 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    9078:	4608      	mov	r0, r1
    907a:	f001 be43 	b.w	ad04 <serial3_set_transmit_pin>
    907e:	bf00      	nop

00009080 <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    9080:	f001 be0a 	b.w	ac98 <serial3_end>

00009084 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9084:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    9086:	084b      	lsrs	r3, r1, #1
    9088:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    908c:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    908e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    9092:	fbb3 f0f1 	udiv	r0, r3, r1
    9096:	f001 fd65 	bl	ab64 <serial3_begin>
					  serial3_format(format); }
    909a:	4620      	mov	r0, r4
    909c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    90a0:	f001 bdac 	b.w	abfc <serial3_format>

000090a4 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    90a4:	f001 bf56 	b.w	af54 <serial3_peek>

000090a8 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    90a8:	f001 bf0e 	b.w	aec8 <serial3_getchar>

000090ac <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    90ac:	f001 bef8 	b.w	aea0 <serial3_available>

000090b0 <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    90b0:	f001 bed2 	b.w	ae58 <serial3_flush>

000090b4 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    90b4:	f001 bedc 	b.w	ae70 <serial3_write_buffer_free>

000090b8 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    90b8:	6803      	ldr	r3, [r0, #0]
    90ba:	4a06      	ldr	r2, [pc, #24]	; (90d4 <HardwareSerial3::write(int)+0x1c>)
    90bc:	681b      	ldr	r3, [r3, #0]
    90be:	4293      	cmp	r3, r2
    90c0:	d105      	bne.n	90ce <HardwareSerial3::write(int)+0x16>
    90c2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    90c4:	b2c8      	uxtb	r0, r1
    90c6:	f001 fea9 	bl	ae1c <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    90ca:	2001      	movs	r0, #1
    90cc:	bd10      	pop	{r4, pc}
    90ce:	b2c9      	uxtb	r1, r1
    90d0:	4718      	bx	r3
    90d2:	bf00      	nop
    90d4:	00009001 	.word	0x00009001

000090d8 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    90d8:	6803      	ldr	r3, [r0, #0]
    90da:	4a06      	ldr	r2, [pc, #24]	; (90f4 <HardwareSerial3::write(unsigned long)+0x1c>)
    90dc:	681b      	ldr	r3, [r3, #0]
    90de:	4293      	cmp	r3, r2
    90e0:	d105      	bne.n	90ee <HardwareSerial3::write(unsigned long)+0x16>
    90e2:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    90e4:	b2c8      	uxtb	r0, r1
    90e6:	f001 fe99 	bl	ae1c <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    90ea:	2001      	movs	r0, #1
    90ec:	bd10      	pop	{r4, pc}
    90ee:	b2c9      	uxtb	r1, r1
    90f0:	4718      	bx	r3
    90f2:	bf00      	nop
    90f4:	00009001 	.word	0x00009001

000090f8 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    90f8:	6803      	ldr	r3, [r0, #0]
    90fa:	4a06      	ldr	r2, [pc, #24]	; (9114 <HardwareSerial3::write(long)+0x1c>)
    90fc:	681b      	ldr	r3, [r3, #0]
    90fe:	4293      	cmp	r3, r2
    9100:	d105      	bne.n	910e <HardwareSerial3::write(long)+0x16>
    9102:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9104:	b2c8      	uxtb	r0, r1
    9106:	f001 fe89 	bl	ae1c <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    910a:	2001      	movs	r0, #1
    910c:	bd10      	pop	{r4, pc}
    910e:	b2c9      	uxtb	r1, r1
    9110:	4718      	bx	r3
    9112:	bf00      	nop
    9114:	00009001 	.word	0x00009001

00009118 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9118:	6803      	ldr	r3, [r0, #0]
    911a:	4a06      	ldr	r2, [pc, #24]	; (9134 <HardwareSerial3::write(unsigned int)+0x1c>)
    911c:	681b      	ldr	r3, [r3, #0]
    911e:	4293      	cmp	r3, r2
    9120:	d105      	bne.n	912e <HardwareSerial3::write(unsigned int)+0x16>
    9122:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9124:	b2c8      	uxtb	r0, r1
    9126:	f001 fe79 	bl	ae1c <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    912a:	2001      	movs	r0, #1
    912c:	bd10      	pop	{r4, pc}
    912e:	b2c9      	uxtb	r1, r1
    9130:	4718      	bx	r3
    9132:	bf00      	nop
    9134:	00009001 	.word	0x00009001

00009138 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9138:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    913a:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    913c:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    913e:	bf08      	it	eq
    9140:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    9142:	b3a1      	cbz	r1, 91ae <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    9144:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9148:	e002      	b.n	9150 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    914a:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    914e:	4629      	mov	r1, r5
			digit = n % base;
    9150:	fbb1 f5f2 	udiv	r5, r1, r2
    9154:	fb02 1415 	mls	r4, r2, r5, r1
    9158:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    915c:	2c09      	cmp	r4, #9
    915e:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    9162:	bf98      	it	ls
    9164:	fa5f fc84 	uxtbls.w	ip, r4
    9168:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    916c:	bf88      	it	hi
    916e:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    9172:	446c      	add	r4, sp
    9174:	bf88      	it	hi
    9176:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    917a:	4291      	cmp	r1, r2
			i--;
    917c:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9180:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    9184:	d2e1      	bcs.n	914a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    9186:	b14b      	cbz	r3, 919c <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    9188:	f10e 3eff 	add.w	lr, lr, #4294967295
    918c:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    9190:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    9194:	446b      	add	r3, sp
    9196:	222d      	movs	r2, #45	; 0x2d
    9198:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    919c:	6803      	ldr	r3, [r0, #0]
    919e:	a901      	add	r1, sp, #4
    91a0:	685b      	ldr	r3, [r3, #4]
    91a2:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    91a6:	4471      	add	r1, lr
    91a8:	4798      	blx	r3
}
    91aa:	b00a      	add	sp, #40	; 0x28
    91ac:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    91ae:	2230      	movs	r2, #48	; 0x30
    91b0:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    91b4:	f04f 0e21 	mov.w	lr, #33	; 0x21
    91b8:	e7e5      	b.n	9186 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    91ba:	bf00      	nop

000091bc <Print::print(long)>:
	if (n < 0) {
    91bc:	2900      	cmp	r1, #0
		n = -n;
    91be:	bfba      	itte	lt
    91c0:	4249      	neglt	r1, r1
		sign = '-';
    91c2:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    91c4:	2300      	movge	r3, #0
	if (base == 0) {
    91c6:	220a      	movs	r2, #10
    91c8:	f7ff bfb6 	b.w	9138 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

000091cc <Print::println()>:
{
    91cc:	b500      	push	{lr}
	return write(buf, 2);
    91ce:	6803      	ldr	r3, [r0, #0]
{
    91d0:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    91d2:	f640 220d 	movw	r2, #2573	; 0xa0d
    91d6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    91da:	685b      	ldr	r3, [r3, #4]
    91dc:	2202      	movs	r2, #2
    91de:	a901      	add	r1, sp, #4
    91e0:	4798      	blx	r3
}
    91e2:	b003      	add	sp, #12
    91e4:	f85d fb04 	ldr.w	pc, [sp], #4

000091e8 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    91e8:	4b03      	ldr	r3, [pc, #12]	; (91f8 <_write+0x10>)
    91ea:	2802      	cmp	r0, #2
    91ec:	bf88      	it	hi
    91ee:	4603      	movhi	r3, r0
    91f0:	4618      	mov	r0, r3
    91f2:	681b      	ldr	r3, [r3, #0]
    91f4:	685b      	ldr	r3, [r3, #4]
    91f6:	4718      	bx	r3
    91f8:	1fff8a04 	.word	0x1fff8a04

000091fc <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    91fc:	b932      	cbnz	r2, 920c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    91fe:	6803      	ldr	r3, [r0, #0]
{
    9200:	b500      	push	{lr}
		return write((uint8_t)n);
    9202:	681b      	ldr	r3, [r3, #0]
}
    9204:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    9208:	b2c9      	uxtb	r1, r1
    920a:	4718      	bx	r3
    920c:	f7ff bf94 	b.w	9138 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009210 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9214:	4619      	mov	r1, r3
{
    9216:	b087      	sub	sp, #28
    9218:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    921a:	4610      	mov	r0, r2
{
    921c:	4614      	mov	r4, r2
    921e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    9220:	f003 fab4 	bl	c78c <__aeabi_dcmpun>
{
    9224:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    9228:	2800      	cmp	r0, #0
    922a:	f040 80a9 	bne.w	9380 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    922e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    9232:	4b5f      	ldr	r3, [pc, #380]	; (93b0 <Print::printFloat(double, unsigned char)+0x1a0>)
    9234:	4620      	mov	r0, r4
    9236:	4629      	mov	r1, r5
    9238:	f04f 32ff 	mov.w	r2, #4294967295
    923c:	f003 faa6 	bl	c78c <__aeabi_dcmpun>
    9240:	b948      	cbnz	r0, 9256 <Print::printFloat(double, unsigned char)+0x46>
    9242:	4b5b      	ldr	r3, [pc, #364]	; (93b0 <Print::printFloat(double, unsigned char)+0x1a0>)
    9244:	4620      	mov	r0, r4
    9246:	4629      	mov	r1, r5
    9248:	f04f 32ff 	mov.w	r2, #4294967295
    924c:	f003 fa80 	bl	c750 <__aeabi_dcmple>
    9250:	2800      	cmp	r0, #0
    9252:	f000 808e 	beq.w	9372 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    9256:	4b57      	ldr	r3, [pc, #348]	; (93b4 <Print::printFloat(double, unsigned char)+0x1a4>)
    9258:	4620      	mov	r0, r4
    925a:	4651      	mov	r1, sl
    925c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9260:	f003 fa8a 	bl	c778 <__aeabi_dcmpgt>
    9264:	2800      	cmp	r0, #0
    9266:	d17b      	bne.n	9360 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9268:	4b53      	ldr	r3, [pc, #332]	; (93b8 <Print::printFloat(double, unsigned char)+0x1a8>)
    926a:	4620      	mov	r0, r4
    926c:	4651      	mov	r1, sl
    926e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9272:	f003 fa63 	bl	c73c <__aeabi_dcmplt>
    9276:	2800      	cmp	r0, #0
    9278:	d172      	bne.n	9360 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    927a:	4620      	mov	r0, r4
    927c:	4651      	mov	r1, sl
    927e:	2200      	movs	r2, #0
    9280:	2300      	movs	r3, #0
    9282:	f003 fa5b 	bl	c73c <__aeabi_dcmplt>
    9286:	4605      	mov	r5, r0
    9288:	2800      	cmp	r0, #0
    928a:	d175      	bne.n	9378 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    928c:	2f00      	cmp	r7, #0
    928e:	d07a      	beq.n	9386 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    9290:	f20f 1914 	addw	r9, pc, #276	; 0x114
    9294:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    9298:	4948      	ldr	r1, [pc, #288]	; (93bc <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    929a:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    929e:	2000      	movs	r0, #0
		rounding *= 0.1;
    92a0:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    92a2:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    92a6:	4642      	mov	r2, r8
    92a8:	f00a f816 	bl	132d8 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    92ac:	fa5f f38b 	uxtb.w	r3, fp
    92b0:	42bb      	cmp	r3, r7
    92b2:	d3f5      	bcc.n	92a0 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    92b4:	4602      	mov	r2, r0
    92b6:	460b      	mov	r3, r1
    92b8:	4620      	mov	r0, r4
    92ba:	4651      	mov	r1, sl
    92bc:	f003 f828 	bl	c310 <__adddf3>
    92c0:	4689      	mov	r9, r1
    92c2:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    92c4:	f003 fa78 	bl	c7b8 <__aeabi_d2uiz>
    92c8:	2f0f      	cmp	r7, #15
    92ca:	bf28      	it	cs
    92cc:	270f      	movcs	r7, #15
    92ce:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    92d0:	9701      	str	r7, [sp, #4]
    92d2:	f003 f959 	bl	c588 <__aeabi_ui2d>
    92d6:	4602      	mov	r2, r0
    92d8:	460b      	mov	r3, r1
    92da:	4640      	mov	r0, r8
    92dc:	4649      	mov	r1, r9
    92de:	f003 f815 	bl	c30c <__aeabi_dsub>
    92e2:	462b      	mov	r3, r5
    92e4:	4680      	mov	r8, r0
    92e6:	4689      	mov	r9, r1
    92e8:	220a      	movs	r2, #10
    92ea:	4651      	mov	r1, sl
    92ec:	4630      	mov	r0, r6
    92ee:	f7ff ff23 	bl	9138 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    92f2:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    92f4:	464d      	mov	r5, r9
		buf[0] = '.';
    92f6:	f88d 3008 	strb.w	r3, [sp, #8]
    92fa:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    92fe:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    9300:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 93c0 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    9304:	4644      	mov	r4, r8
	if (base == 0) {
    9306:	4683      	mov	fp, r0
		while (digits-- > 0) {
    9308:	fa52 fa83 	uxtab	sl, r2, r3
    930c:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    930e:	f04f 0800 	mov.w	r8, #0
    9312:	4642      	mov	r2, r8
    9314:	464b      	mov	r3, r9
    9316:	4620      	mov	r0, r4
    9318:	4629      	mov	r1, r5
    931a:	f009 ffdd 	bl	132d8 <__aeabi_dmul>
    931e:	460d      	mov	r5, r1
    9320:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    9322:	f003 fa49 	bl	c7b8 <__aeabi_d2uiz>
    9326:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    9328:	f100 0330 	add.w	r3, r0, #48	; 0x30
    932c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    9330:	f003 f93a 	bl	c5a8 <__aeabi_i2d>
    9334:	4602      	mov	r2, r0
    9336:	460b      	mov	r3, r1
    9338:	4620      	mov	r0, r4
    933a:	4629      	mov	r1, r5
    933c:	f002 ffe6 	bl	c30c <__aeabi_dsub>
		while (digits-- > 0) {
    9340:	45ba      	cmp	sl, r7
			remainder -= n; 
    9342:	4604      	mov	r4, r0
    9344:	460d      	mov	r5, r1
		while (digits-- > 0) {
    9346:	d1e4      	bne.n	9312 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    9348:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    934a:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    934c:	3201      	adds	r2, #1
		count += write(buf, count);
    934e:	685b      	ldr	r3, [r3, #4]
    9350:	b2d2      	uxtb	r2, r2
    9352:	a902      	add	r1, sp, #8
    9354:	4630      	mov	r0, r6
    9356:	4798      	blx	r3
	}
	return count;
}
    9358:	4658      	mov	r0, fp
    935a:	b007      	add	sp, #28
    935c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    9360:	6833      	ldr	r3, [r6, #0]
    9362:	4918      	ldr	r1, [pc, #96]	; (93c4 <Print::printFloat(double, unsigned char)+0x1b4>)
    9364:	685b      	ldr	r3, [r3, #4]
    9366:	2203      	movs	r2, #3
    9368:	4630      	mov	r0, r6
    936a:	b007      	add	sp, #28
    936c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9370:	4718      	bx	r3
    9372:	6833      	ldr	r3, [r6, #0]
    9374:	4914      	ldr	r1, [pc, #80]	; (93c8 <Print::printFloat(double, unsigned char)+0x1b8>)
    9376:	e7f5      	b.n	9364 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    9378:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    937c:	2501      	movs	r5, #1
    937e:	e785      	b.n	928c <Print::printFloat(double, unsigned char)+0x7c>
    9380:	6833      	ldr	r3, [r6, #0]
    9382:	4912      	ldr	r1, [pc, #72]	; (93cc <Print::printFloat(double, unsigned char)+0x1bc>)
    9384:	e7ee      	b.n	9364 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    9386:	4b0d      	ldr	r3, [pc, #52]	; (93bc <Print::printFloat(double, unsigned char)+0x1ac>)
    9388:	2200      	movs	r2, #0
    938a:	4620      	mov	r0, r4
    938c:	4651      	mov	r1, sl
    938e:	f002 ffbf 	bl	c310 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    9392:	f003 fa11 	bl	c7b8 <__aeabi_d2uiz>
    9396:	462b      	mov	r3, r5
    9398:	4601      	mov	r1, r0
    939a:	220a      	movs	r2, #10
    939c:	4630      	mov	r0, r6
}
    939e:	b007      	add	sp, #28
    93a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93a4:	f7ff bec8 	b.w	9138 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    93a8:	a0000000 	.word	0xa0000000
    93ac:	3fb99999 	.word	0x3fb99999
    93b0:	7fefffff 	.word	0x7fefffff
    93b4:	41efffff 	.word	0x41efffff
    93b8:	c1efffff 	.word	0xc1efffff
    93bc:	3fe00000 	.word	0x3fe00000
    93c0:	40240000 	.word	0x40240000
    93c4:	00015060 	.word	0x00015060
    93c8:	0001505c 	.word	0x0001505c
    93cc:	00015058 	.word	0x00015058

000093d0 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    93d0:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    93d2:	4d0e      	ldr	r5, [pc, #56]	; (940c <Stream::timedPeek()+0x3c>)
    93d4:	b082      	sub	sp, #8
    93d6:	682b      	ldr	r3, [r5, #0]
    93d8:	9300      	str	r3, [sp, #0]
	return ret;
    93da:	9e00      	ldr	r6, [sp, #0]
    93dc:	4604      	mov	r4, r0
    93de:	e008      	b.n	93f2 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    93e0:	f002 fd3e 	bl	be60 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    93e4:	682b      	ldr	r3, [r5, #0]
    93e6:	9301      	str	r3, [sp, #4]
	return ret;
    93e8:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    93ea:	68a2      	ldr	r2, [r4, #8]
    93ec:	1b9b      	subs	r3, r3, r6
    93ee:	4293      	cmp	r3, r2
    93f0:	d207      	bcs.n	9402 <Stream::timedPeek()+0x32>
    c = peek();
    93f2:	6823      	ldr	r3, [r4, #0]
    93f4:	4620      	mov	r0, r4
    93f6:	699b      	ldr	r3, [r3, #24]
    93f8:	4798      	blx	r3
    if (c >= 0) return c;
    93fa:	2800      	cmp	r0, #0
    93fc:	dbf0      	blt.n	93e0 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    93fe:	b002      	add	sp, #8
    9400:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    9402:	f04f 30ff 	mov.w	r0, #4294967295
}
    9406:	b002      	add	sp, #8
    9408:	bd70      	pop	{r4, r5, r6, pc}
    940a:	bf00      	nop
    940c:	1fffd0e4 	.word	0x1fffd0e4

00009410 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    9410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9412:	4604      	mov	r4, r0
    9414:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    9416:	e006      	b.n	9426 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    9418:	2b2d      	cmp	r3, #45	; 0x2d
    941a:	d00f      	beq.n	943c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    941c:	2a09      	cmp	r2, #9
    941e:	d90d      	bls.n	943c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    9420:	6823      	ldr	r3, [r4, #0]
    9422:	695b      	ldr	r3, [r3, #20]
    9424:	4798      	blx	r3
    c = timedPeek();
    9426:	4620      	mov	r0, r4
    9428:	f7ff ffd2 	bl	93d0 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    942c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    942e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    9432:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    9434:	daf0      	bge.n	9418 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    9436:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    9438:	4638      	mov	r0, r7
    943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    943c:	2700      	movs	r7, #0
    943e:	463e      	mov	r6, r7
    9440:	42ab      	cmp	r3, r5
    9442:	d00b      	beq.n	945c <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    9444:	2b2d      	cmp	r3, #45	; 0x2d
    9446:	d01c      	beq.n	9482 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    9448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    944c:	2a09      	cmp	r2, #9
    944e:	d805      	bhi.n	945c <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    9450:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9454:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9458:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    945c:	6823      	ldr	r3, [r4, #0]
    945e:	4620      	mov	r0, r4
    9460:	695b      	ldr	r3, [r3, #20]
    9462:	4798      	blx	r3
    c = timedPeek();
    9464:	4620      	mov	r0, r4
    9466:	f7ff ffb3 	bl	93d0 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    946a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    946e:	2a09      	cmp	r2, #9
    c = timedPeek();
    9470:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    9472:	d9e5      	bls.n	9440 <Stream::parseInt(char)+0x30>
    9474:	42a8      	cmp	r0, r5
    9476:	d0f1      	beq.n	945c <Stream::parseInt(char)+0x4c>
  if(isNegative)
    9478:	2e00      	cmp	r6, #0
    947a:	d0dd      	beq.n	9438 <Stream::parseInt(char)+0x28>
    value = -value;
    947c:	427f      	negs	r7, r7
}
    947e:	4638      	mov	r0, r7
    9480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    9482:	2601      	movs	r6, #1
    9484:	e7ea      	b.n	945c <Stream::parseInt(char)+0x4c>
    9486:	bf00      	nop

00009488 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    9488:	2101      	movs	r1, #1
    948a:	f7ff bfc1 	b.w	9410 <Stream::parseInt(char)>
    948e:	bf00      	nop

00009490 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    9490:	4b2a      	ldr	r3, [pc, #168]	; (953c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    9492:	4a2b      	ldr	r2, [pc, #172]	; (9540 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    9494:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    9496:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    9498:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    949a:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    949c:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    949e:	4829      	ldr	r0, [pc, #164]	; (9544 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    94a0:	2b08      	cmp	r3, #8
    94a2:	d034      	beq.n	950e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    94a4:	2b0a      	cmp	r3, #10
    94a6:	d020      	beq.n	94ea <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    94a8:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    94aa:	4b27      	ldr	r3, [pc, #156]	; (9548 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    94ac:	bf0c      	ite	eq
    94ae:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    94b0:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    94b2:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    94b4:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    94b6:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    94b8:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    94ba:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    94bc:	4b23      	ldr	r3, [pc, #140]	; (954c <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    94be:	4921      	ldr	r1, [pc, #132]	; (9544 <analog_init+0xb4>)
	if (analog_reference_internal) {
    94c0:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    94c2:	4a21      	ldr	r2, [pc, #132]	; (9548 <analog_init+0xb8>)
	if (analog_reference_internal) {
    94c4:	b1cb      	cbz	r3, 94fa <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    94c6:	2301      	movs	r3, #1
    94c8:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    94ca:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    94cc:	4b20      	ldr	r3, [pc, #128]	; (9550 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    94ce:	491d      	ldr	r1, [pc, #116]	; (9544 <analog_init+0xb4>)
	num = analog_num_average;
    94d0:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    94d2:	4a1d      	ldr	r2, [pc, #116]	; (9548 <analog_init+0xb8>)
	if (num <= 1) {
    94d4:	2b01      	cmp	r3, #1
    94d6:	d913      	bls.n	9500 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    94d8:	2b04      	cmp	r3, #4
    94da:	d81b      	bhi.n	9514 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    94dc:	2384      	movs	r3, #132	; 0x84
    94de:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    94e0:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    94e2:	4b1c      	ldr	r3, [pc, #112]	; (9554 <analog_init+0xc4>)
    94e4:	2201      	movs	r2, #1
    94e6:	701a      	strb	r2, [r3, #0]
}
    94e8:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    94ea:	4b17      	ldr	r3, [pc, #92]	; (9548 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    94ec:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    94ee:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    94f0:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    94f2:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    94f4:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    94f6:	60da      	str	r2, [r3, #12]
    94f8:	e7e0      	b.n	94bc <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    94fa:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    94fc:	6213      	str	r3, [r2, #32]
    94fe:	e7e5      	b.n	94cc <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9500:	2380      	movs	r3, #128	; 0x80
    9502:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9504:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9506:	4b13      	ldr	r3, [pc, #76]	; (9554 <analog_init+0xc4>)
    9508:	2201      	movs	r2, #1
    950a:	701a      	strb	r2, [r3, #0]
}
    950c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    950e:	4b0e      	ldr	r3, [pc, #56]	; (9548 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9510:	2101      	movs	r1, #1
    9512:	e7ec      	b.n	94ee <analog_init+0x5e>
	} else if (num <= 8) {
    9514:	2b08      	cmp	r3, #8
    9516:	d806      	bhi.n	9526 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9518:	2385      	movs	r3, #133	; 0x85
    951a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    951c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    951e:	4b0d      	ldr	r3, [pc, #52]	; (9554 <analog_init+0xc4>)
    9520:	2201      	movs	r2, #1
    9522:	701a      	strb	r2, [r3, #0]
}
    9524:	4770      	bx	lr
	} else if (num <= 16) {
    9526:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    9528:	bf94      	ite	ls
    952a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    952c:	2387      	movhi	r3, #135	; 0x87
    952e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9530:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9532:	4b08      	ldr	r3, [pc, #32]	; (9554 <analog_init+0xc4>)
    9534:	2201      	movs	r2, #1
    9536:	701a      	strb	r2, [r3, #0]
}
    9538:	4770      	bx	lr
    953a:	bf00      	nop
    953c:	40074000 	.word	0x40074000
    9540:	1fff88ec 	.word	0x1fff88ec
    9544:	4003b000 	.word	0x4003b000
    9548:	400bb000 	.word	0x400bb000
    954c:	1fffd0e0 	.word	0x1fffd0e0
    9550:	1fff88ed 	.word	0x1fff88ed
    9554:	1fffd0e1 	.word	0x1fffd0e1

00009558 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9558:	4a0b      	ldr	r2, [pc, #44]	; (9588 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    955a:	490c      	ldr	r1, [pc, #48]	; (958c <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    955c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    955e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9562:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    9564:	780b      	ldrb	r3, [r1, #0]
    9566:	b14b      	cbz	r3, 957c <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    9568:	4b09      	ldr	r3, [pc, #36]	; (9590 <analogWriteDAC0+0x38>)
    956a:	2280      	movs	r2, #128	; 0x80
    956c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9570:	4b07      	ldr	r3, [pc, #28]	; (9590 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    9572:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9576:	b200      	sxth	r0, r0
    9578:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    957a:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    957c:	4b04      	ldr	r3, [pc, #16]	; (9590 <analogWriteDAC0+0x38>)
    957e:	22c0      	movs	r2, #192	; 0xc0
    9580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    9584:	e7f4      	b.n	9570 <analogWriteDAC0+0x18>
    9586:	bf00      	nop
    9588:	40048000 	.word	0x40048000
    958c:	1fffd0e0 	.word	0x1fffd0e0
    9590:	400cc000 	.word	0x400cc000

00009594 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    9594:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    9596:	4b17      	ldr	r3, [pc, #92]	; (95f4 <eeprom_initialize+0x60>)
    9598:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    959a:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    959c:	46ec      	mov	ip, sp
    959e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    95a2:	4b15      	ldr	r3, [pc, #84]	; (95f8 <eeprom_initialize+0x64>)
    95a4:	785a      	ldrb	r2, [r3, #1]
    95a6:	0791      	lsls	r1, r2, #30
    95a8:	d517      	bpl.n	95da <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    95aa:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    95ac:	4c12      	ldr	r4, [pc, #72]	; (95f8 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    95ae:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    95b2:	bf18      	it	ne
    95b4:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    95b6:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    95b8:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    95ba:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    95bc:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    95be:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    95c0:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    95c2:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    95c4:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    95c6:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    95c8:	f04c 0301 	orr.w	r3, ip, #1
    95cc:	4620      	mov	r0, r4
    95ce:	4798      	blx	r3
		__enable_irq();
    95d0:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    95d2:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    95d4:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    95d8:	d109      	bne.n	95ee <eeprom_initialize+0x5a>
{
    95da:	4b08      	ldr	r3, [pc, #32]	; (95fc <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    95dc:	4906      	ldr	r1, [pc, #24]	; (95f8 <eeprom_initialize+0x64>)
    95de:	e001      	b.n	95e4 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    95e0:	3b01      	subs	r3, #1
    95e2:	d002      	beq.n	95ea <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    95e4:	784a      	ldrb	r2, [r1, #1]
    95e6:	07d2      	lsls	r2, r2, #31
    95e8:	d5fa      	bpl.n	95e0 <eeprom_initialize+0x4c>
	}
}
    95ea:	b004      	add	sp, #16
    95ec:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    95ee:	7023      	strb	r3, [r4, #0]
}
    95f0:	b004      	add	sp, #16
    95f2:	bd10      	pop	{r4, pc}
    95f4:	00015064 	.word	0x00015064
    95f8:	40020000 	.word	0x40020000
    95fc:	00030d41 	.word	0x00030d41

00009600 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    9600:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9604:	d211      	bcs.n	962a <eeprom_read_byte+0x2a>
{
    9606:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9608:	4b09      	ldr	r3, [pc, #36]	; (9630 <eeprom_read_byte+0x30>)
    960a:	785b      	ldrb	r3, [r3, #1]
    960c:	07db      	lsls	r3, r3, #31
    960e:	4604      	mov	r4, r0
    9610:	d504      	bpl.n	961c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    9612:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9616:	7820      	ldrb	r0, [r4, #0]
    9618:	b2c0      	uxtb	r0, r0
}
    961a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    961c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9620:	f7ff ffb8 	bl	9594 <eeprom_initialize>
	return FlexRAM[offset];
    9624:	7820      	ldrb	r0, [r4, #0]
    9626:	b2c0      	uxtb	r0, r0
}
    9628:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    962a:	2000      	movs	r0, #0
}
    962c:	4770      	bx	lr
    962e:	bf00      	nop
    9630:	40020000 	.word	0x40020000

00009634 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    9634:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9638:	d21f      	bcs.n	967a <eeprom_write_byte+0x46>
{
    963a:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    963c:	4b0f      	ldr	r3, [pc, #60]	; (967c <eeprom_write_byte+0x48>)
    963e:	785b      	ldrb	r3, [r3, #1]
    9640:	07da      	lsls	r2, r3, #31
    9642:	4604      	mov	r4, r0
    9644:	460d      	mov	r5, r1
    9646:	d510      	bpl.n	966a <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    9648:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    964c:	7823      	ldrb	r3, [r4, #0]
    964e:	42ab      	cmp	r3, r5
    9650:	d00a      	beq.n	9668 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    9652:	4a0a      	ldr	r2, [pc, #40]	; (967c <eeprom_write_byte+0x48>)
    9654:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    9656:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    965a:	bf18      	it	ne
    965c:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    965e:	4a07      	ldr	r2, [pc, #28]	; (967c <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    9660:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9662:	7853      	ldrb	r3, [r2, #1]
    9664:	07db      	lsls	r3, r3, #31
    9666:	d5fc      	bpl.n	9662 <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    9668:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    966a:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    966e:	f7ff ff91 	bl	9594 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    9672:	7823      	ldrb	r3, [r4, #0]
    9674:	42ab      	cmp	r3, r5
    9676:	d1ec      	bne.n	9652 <eeprom_write_byte+0x1e>
    9678:	e7f6      	b.n	9668 <eeprom_write_byte+0x34>
    967a:	4770      	bx	lr
    967c:	40020000 	.word	0x40020000

00009680 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    9680:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9684:	d276      	bcs.n	9774 <eeprom_write_block+0xf4>
{
    9686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9688:	4b3b      	ldr	r3, [pc, #236]	; (9778 <eeprom_write_block+0xf8>)
    968a:	785b      	ldrb	r3, [r3, #1]
    968c:	07db      	lsls	r3, r3, #31
    968e:	460e      	mov	r6, r1
    9690:	4604      	mov	r4, r0
    9692:	4617      	mov	r7, r2
    9694:	460d      	mov	r5, r1
    9696:	d51f      	bpl.n	96d8 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    9698:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    969c:	4638      	mov	r0, r7
    969e:	bf28      	it	cs
    96a0:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    96a4:	1833      	adds	r3, r6, r0
    96a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    96aa:	d212      	bcs.n	96d2 <eeprom_write_block+0x52>
	while (len > 0) {
    96ac:	b187      	cbz	r7, 96d0 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    96ae:	4a32      	ldr	r2, [pc, #200]	; (9778 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    96b0:	f015 0303 	ands.w	r3, r5, #3
    96b4:	d026      	beq.n	9704 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    96b6:	2b02      	cmp	r3, #2
    96b8:	d011      	beq.n	96de <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    96ba:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    96be:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    96c2:	781e      	ldrb	r6, [r3, #0]
    96c4:	428e      	cmp	r6, r1
    96c6:	d137      	bne.n	9738 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    96c8:	3801      	subs	r0, #1
			offset++;
    96ca:	3501      	adds	r5, #1
	while (len > 0) {
    96cc:	2800      	cmp	r0, #0
    96ce:	d1ef      	bne.n	96b0 <eeprom_write_block+0x30>
		}
	}
}
    96d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    96d2:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    96d6:	e7ea      	b.n	96ae <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    96d8:	f7ff ff5c 	bl	9594 <eeprom_initialize>
    96dc:	e7dc      	b.n	9698 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    96de:	2801      	cmp	r0, #1
    96e0:	d0eb      	beq.n	96ba <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    96e2:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    96e4:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    96e8:	7867      	ldrb	r7, [r4, #1]
    96ea:	f811 3b02 	ldrb.w	r3, [r1], #2
    96ee:	8834      	ldrh	r4, [r6, #0]
    96f0:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    96f4:	429c      	cmp	r4, r3
    96f6:	d129      	bne.n	974c <eeprom_write_block+0xcc>
			len -= 2;
    96f8:	3802      	subs	r0, #2
			offset += 2;
    96fa:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    96fc:	460c      	mov	r4, r1
	while (len > 0) {
    96fe:	2800      	cmp	r0, #0
    9700:	d1d6      	bne.n	96b0 <eeprom_write_block+0x30>
    9702:	e7e5      	b.n	96d0 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    9704:	2803      	cmp	r0, #3
    9706:	d9ea      	bls.n	96de <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    9708:	4621      	mov	r1, r4
    970a:	f894 c001 	ldrb.w	ip, [r4, #1]
    970e:	f811 3b04 	ldrb.w	r3, [r1], #4
    9712:	78a7      	ldrb	r7, [r4, #2]
    9714:	78e6      	ldrb	r6, [r4, #3]
    9716:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    971a:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    971e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    9722:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9726:	6826      	ldr	r6, [r4, #0]
    9728:	429e      	cmp	r6, r3
    972a:	d119      	bne.n	9760 <eeprom_write_block+0xe0>
			len -= 4;
    972c:	3804      	subs	r0, #4
			offset += 4;
    972e:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    9730:	460c      	mov	r4, r1
	while (len > 0) {
    9732:	2800      	cmp	r0, #0
    9734:	d1bc      	bne.n	96b0 <eeprom_write_block+0x30>
    9736:	e7cb      	b.n	96d0 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9738:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    973a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    973e:	bf18      	it	ne
    9740:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    9742:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9744:	7853      	ldrb	r3, [r2, #1]
    9746:	07db      	lsls	r3, r3, #31
    9748:	d5fc      	bpl.n	9744 <eeprom_write_block+0xc4>
    974a:	e7bd      	b.n	96c8 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    974c:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    974e:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    9752:	bf18      	it	ne
    9754:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    9756:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9758:	7853      	ldrb	r3, [r2, #1]
    975a:	07dc      	lsls	r4, r3, #31
    975c:	d5fc      	bpl.n	9758 <eeprom_write_block+0xd8>
    975e:	e7cb      	b.n	96f8 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9760:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9762:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9766:	bf18      	it	ne
    9768:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    976a:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    976c:	7853      	ldrb	r3, [r2, #1]
    976e:	07de      	lsls	r6, r3, #31
    9770:	d5fc      	bpl.n	976c <eeprom_write_block+0xec>
    9772:	e7db      	b.n	972c <eeprom_write_block+0xac>
    9774:	4770      	bx	lr
    9776:	bf00      	nop
    9778:	40020000 	.word	0x40020000

0000977c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    977c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    977e:	f7fd fd15 	bl	71ac <setup>
	while (1) {
		loop();
    9782:	f7fc fe21 	bl	63c8 <loop>
		yield();
    9786:	f002 fb6b 	bl	be60 <yield>
	while (1) {
    978a:	e7fa      	b.n	9782 <main+0x6>

0000978c <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    978c:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    978e:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9792:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9796:	d16f      	bne.n	9878 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9798:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    979a:	d341      	bcc.n	9820 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    979c:	f851 3b04 	ldr.w	r3, [r1], #4
    97a0:	f840 3b04 	str.w	r3, [r0], #4
    97a4:	f851 3b04 	ldr.w	r3, [r1], #4
    97a8:	f840 3b04 	str.w	r3, [r0], #4
    97ac:	f851 3b04 	ldr.w	r3, [r1], #4
    97b0:	f840 3b04 	str.w	r3, [r0], #4
    97b4:	f851 3b04 	ldr.w	r3, [r1], #4
    97b8:	f840 3b04 	str.w	r3, [r0], #4
    97bc:	f851 3b04 	ldr.w	r3, [r1], #4
    97c0:	f840 3b04 	str.w	r3, [r0], #4
    97c4:	f851 3b04 	ldr.w	r3, [r1], #4
    97c8:	f840 3b04 	str.w	r3, [r0], #4
    97cc:	f851 3b04 	ldr.w	r3, [r1], #4
    97d0:	f840 3b04 	str.w	r3, [r0], #4
    97d4:	f851 3b04 	ldr.w	r3, [r1], #4
    97d8:	f840 3b04 	str.w	r3, [r0], #4
    97dc:	f851 3b04 	ldr.w	r3, [r1], #4
    97e0:	f840 3b04 	str.w	r3, [r0], #4
    97e4:	f851 3b04 	ldr.w	r3, [r1], #4
    97e8:	f840 3b04 	str.w	r3, [r0], #4
    97ec:	f851 3b04 	ldr.w	r3, [r1], #4
    97f0:	f840 3b04 	str.w	r3, [r0], #4
    97f4:	f851 3b04 	ldr.w	r3, [r1], #4
    97f8:	f840 3b04 	str.w	r3, [r0], #4
    97fc:	f851 3b04 	ldr.w	r3, [r1], #4
    9800:	f840 3b04 	str.w	r3, [r0], #4
    9804:	f851 3b04 	ldr.w	r3, [r1], #4
    9808:	f840 3b04 	str.w	r3, [r0], #4
    980c:	f851 3b04 	ldr.w	r3, [r1], #4
    9810:	f840 3b04 	str.w	r3, [r0], #4
    9814:	f851 3b04 	ldr.w	r3, [r1], #4
    9818:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    981c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    981e:	d2bd      	bcs.n	979c <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9820:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9822:	d311      	bcc.n	9848 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9824:	f851 3b04 	ldr.w	r3, [r1], #4
    9828:	f840 3b04 	str.w	r3, [r0], #4
    982c:	f851 3b04 	ldr.w	r3, [r1], #4
    9830:	f840 3b04 	str.w	r3, [r0], #4
    9834:	f851 3b04 	ldr.w	r3, [r1], #4
    9838:	f840 3b04 	str.w	r3, [r0], #4
    983c:	f851 3b04 	ldr.w	r3, [r1], #4
    9840:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9844:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9846:	d2ed      	bcs.n	9824 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9848:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    984a:	d305      	bcc.n	9858 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    984c:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9850:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9854:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9856:	d2f9      	bcs.n	984c <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9858:	3204      	adds	r2, #4
	beq	.Ldone
    985a:	d00a      	beq.n	9872 <memcpy+0xe6>

	lsls	r2, r2, #31
    985c:	07d2      	lsls	r2, r2, #31
	itt ne
    985e:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9860:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9864:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9868:	d303      	bcc.n	9872 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    986a:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    986c:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    986e:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9870:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9872:	bc01      	pop	{r0}
#endif
	bx	lr
    9874:	4770      	bx	lr
    9876:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    9878:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    987a:	d34a      	bcc.n	9912 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    987c:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9880:	d011      	beq.n	98a6 <memcpy+0x11a>

	rsb	r3, #4
    9882:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9886:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9888:	07db      	lsls	r3, r3, #31
	itt ne
    988a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    988c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9890:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9894:	d307      	bcc.n	98a6 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    9896:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    989a:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    989e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    98a2:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    98a6:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    98aa:	f43f af75 	beq.w	9798 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    98ae:	b430      	push	{r4, r5}
	subs	r2, #4
    98b0:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    98b2:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    98b4:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    98b8:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    98bc:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    98be:	d019      	beq.n	98f4 <memcpy+0x168>
	cmp	r3, #3
    98c0:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    98c2:	d00b      	beq.n	98dc <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    98c4:	0a24      	lsrs	r4, r4, #8
    98c6:	f851 3b04 	ldr.w	r3, [r1], #4
    98ca:	061d      	lsls	r5, r3, #24
    98cc:	ea44 0405 	orr.w	r4, r4, r5
    98d0:	f840 4b04 	str.w	r4, [r0], #4
    98d4:	461c      	mov	r4, r3
    98d6:	3a04      	subs	r2, #4
    98d8:	d2f4      	bcs.n	98c4 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    98da:	e016      	b.n	990a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    98dc:	0e24      	lsrs	r4, r4, #24
    98de:	f851 3b04 	ldr.w	r3, [r1], #4
    98e2:	021d      	lsls	r5, r3, #8
    98e4:	ea44 0405 	orr.w	r4, r4, r5
    98e8:	f840 4b04 	str.w	r4, [r0], #4
    98ec:	461c      	mov	r4, r3
    98ee:	3a04      	subs	r2, #4
    98f0:	d2f4      	bcs.n	98dc <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    98f2:	e00a      	b.n	990a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    98f4:	0c24      	lsrs	r4, r4, #16
    98f6:	f851 3b04 	ldr.w	r3, [r1], #4
    98fa:	041d      	lsls	r5, r3, #16
    98fc:	ea44 0405 	orr.w	r4, r4, r5
    9900:	f840 4b04 	str.w	r4, [r0], #4
    9904:	461c      	mov	r4, r3
    9906:	3a04      	subs	r2, #4
    9908:	d2f4      	bcs.n	98f4 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    990a:	3204      	adds	r2, #4
	subs	r1, ip
    990c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9910:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9912:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9914:	d3a0      	bcc.n	9858 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9916:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9918:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    991c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9920:	d2f9      	bcs.n	9916 <memcpy+0x18a>

	ldrb	r3, [r1]
    9922:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9924:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9926:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9928:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    992a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    992c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    992e:	bc01      	pop	{r0}
#endif
	bx	lr
    9930:	4770      	bx	lr
    9932:	bf00      	nop

00009934 <fault_isr>:
{
    9934:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9936:	4c0f      	ldr	r4, [pc, #60]	; (9974 <fault_isr+0x40>)
    9938:	6b63      	ldr	r3, [r4, #52]	; 0x34
    993a:	0358      	lsls	r0, r3, #13
    993c:	d40d      	bmi.n	995a <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    993e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9940:	0559      	lsls	r1, r3, #21
    9942:	d40f      	bmi.n	9964 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9944:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9946:	051a      	lsls	r2, r3, #20
    9948:	d411      	bmi.n	996e <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    994a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    994c:	04db      	lsls	r3, r3, #19
    994e:	d5f3      	bpl.n	9938 <fault_isr+0x4>
    9950:	f001 fb38 	bl	afc4 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9954:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9956:	0358      	lsls	r0, r3, #13
    9958:	d5f1      	bpl.n	993e <fault_isr+0xa>
    995a:	f001 fcb3 	bl	b2c4 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    995e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9960:	0559      	lsls	r1, r3, #21
    9962:	d5ef      	bpl.n	9944 <fault_isr+0x10>
    9964:	f000 f808 	bl	9978 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9968:	6b63      	ldr	r3, [r4, #52]	; 0x34
    996a:	051a      	lsls	r2, r3, #20
    996c:	d5ed      	bpl.n	994a <fault_isr+0x16>
    996e:	f000 ff95 	bl	a89c <uart1_status_isr>
    9972:	e7ea      	b.n	994a <fault_isr+0x16>
    9974:	40048000 	.word	0x40048000

00009978 <unused_isr>:
{
    9978:	b508      	push	{r3, lr}
	fault_isr();
    997a:	f7ff ffdb 	bl	9934 <fault_isr>
    997e:	bf00      	nop

00009980 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9980:	4b01      	ldr	r3, [pc, #4]	; (9988 <startup_early_hook+0x8>)
    9982:	2210      	movs	r2, #16
    9984:	801a      	strh	r2, [r3, #0]
}
    9986:	4770      	bx	lr
    9988:	40052000 	.word	0x40052000

0000998c <startup_late_hook>:
static void startup_default_late_hook(void) {}
    998c:	4770      	bx	lr
    998e:	bf00      	nop

00009990 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9990:	4a09      	ldr	r2, [pc, #36]	; (99b8 <_sbrk+0x28>)
{
    9992:	b508      	push	{r3, lr}
    9994:	4603      	mov	r3, r0
	prev = __brkval;
    9996:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    9998:	b133      	cbz	r3, 99a8 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    999a:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    999c:	4403      	add	r3, r0
    999e:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    99a2:	428b      	cmp	r3, r1
    99a4:	d201      	bcs.n	99aa <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    99a6:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    99a8:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    99aa:	f004 f9a5 	bl	dcf8 <__errno>
    99ae:	230c      	movs	r3, #12
    99b0:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    99b2:	f04f 30ff 	mov.w	r0, #4294967295
}
    99b6:	bd08      	pop	{r3, pc}
    99b8:	1fff88f0 	.word	0x1fff88f0

000099bc <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    99bc:	2000      	movs	r0, #0
    99be:	4770      	bx	lr

000099c0 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    99c0:	f04f 30ff 	mov.w	r0, #4294967295
    99c4:	4770      	bx	lr
    99c6:	bf00      	nop

000099c8 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    99c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    99cc:	604b      	str	r3, [r1, #4]
	return 0;
}
    99ce:	2000      	movs	r0, #0
    99d0:	4770      	bx	lr
    99d2:	bf00      	nop

000099d4 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    99d4:	2001      	movs	r0, #1
    99d6:	4770      	bx	lr

000099d8 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    99d8:	f04f 30ff 	mov.w	r0, #4294967295
    99dc:	4770      	bx	lr
    99de:	bf00      	nop

000099e0 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    99e0:	e7fe      	b.n	99e0 <abort>
    99e2:	Address 0x000099e2 is out of bounds.


000099e4 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    99e4:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    99e8:	b9cb      	cbnz	r3, 9a1e <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    99ea:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    99ee:	b9a0      	cbnz	r0, 9a1a <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    99f0:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    99f4:	b943      	cbnz	r3, 9a08 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    99f6:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    99fa:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    99fe:	b15b      	cbz	r3, 9a18 <nvic_execution_priority+0x34>
    9a00:	4298      	cmp	r0, r3
    9a02:	bf28      	it	cs
    9a04:	4618      	movcs	r0, r3
	return priority;
    9a06:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    9a08:	2b0f      	cmp	r3, #15
    9a0a:	d9f6      	bls.n	99fa <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9a0c:	4a05      	ldr	r2, [pc, #20]	; (9a24 <nvic_execution_priority+0x40>)
    9a0e:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9a10:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9a14:	2b00      	cmp	r3, #0
    9a16:	d1f3      	bne.n	9a00 <nvic_execution_priority+0x1c>
}
    9a18:	4770      	bx	lr
	if (primask) return 0;
    9a1a:	4618      	mov	r0, r3
}
    9a1c:	4770      	bx	lr
	if (faultmask) return -1;
    9a1e:	f04f 30ff 	mov.w	r0, #4294967295
    9a22:	4770      	bx	lr
    9a24:	e000e3f0 	.word	0xe000e3f0

00009a28 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    9a28:	f003 ba00 	b.w	ce2c <malloc>

00009a2c <operator new[](unsigned int)>:
    9a2c:	f003 b9fe 	b.w	ce2c <malloc>

00009a30 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9a30:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9a34:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    9a36:	4665      	mov	r5, ip
	int i=0, j;
    9a38:	2400      	movs	r4, #0
    9a3a:	e001      	b.n	9a40 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9a3c:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9a3e:	3401      	adds	r4, #1
		digit = val % radix;
    9a40:	fbb0 fef2 	udiv	lr, r0, r2
    9a44:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a48:	2b09      	cmp	r3, #9
    9a4a:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9a4e:	bf8a      	itet	hi
    9a50:	3337      	addhi	r3, #55	; 0x37
    9a52:	b2f3      	uxtbls	r3, r6
    9a54:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    9a56:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9a58:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    9a5c:	d2ee      	bcs.n	9a3c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    9a5e:	1c63      	adds	r3, r4, #1
    9a60:	2200      	movs	r2, #0
    9a62:	54ca      	strb	r2, [r1, r3]
    9a64:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    9a66:	b17c      	cbz	r4, 9a88 <ultoa+0x58>
		t = buf[j];
    9a68:	4662      	mov	r2, ip
    9a6a:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9a6e:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    9a72:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    9a76:	eba1 030c 	sub.w	r3, r1, ip
    9a7a:	3202      	adds	r2, #2
    9a7c:	3b01      	subs	r3, #1
    9a7e:	1a52      	subs	r2, r2, r1
    9a80:	4423      	add	r3, r4
    9a82:	429a      	cmp	r2, r3
		buf[i] = t;
    9a84:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9a86:	dbef      	blt.n	9a68 <ultoa+0x38>
	}
	return buf;
}
    9a88:	4608      	mov	r0, r1
    9a8a:	bd70      	pop	{r4, r5, r6, pc}

00009a8c <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9a8c:	4770      	bx	lr
    9a8e:	bf00      	nop

00009a90 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9a90:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9a92:	4b0f      	ldr	r3, [pc, #60]	; (9ad0 <digitalWrite.part.0+0x40>)
    9a94:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9a98:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9a9c:	b12c      	cbz	r4, 9aaa <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    9a9e:	2301      	movs	r3, #1
		if (val) {
    9aa0:	b191      	cbz	r1, 9ac8 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    9aa2:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9aa6:	bc10      	pop	{r4}
    9aa8:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    9aaa:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    9aae:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9ab0:	681a      	ldr	r2, [r3, #0]
		if (val) {
    9ab2:	b921      	cbnz	r1, 9abe <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    9ab4:	f022 0202 	bic.w	r2, r2, #2
}
    9ab8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    9aba:	601a      	str	r2, [r3, #0]
}
    9abc:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9abe:	f042 0203 	orr.w	r2, r2, #3
}
    9ac2:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9ac4:	601a      	str	r2, [r3, #0]
}
    9ac6:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    9ac8:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    9acc:	bc10      	pop	{r4}
    9ace:	4770      	bx	lr
    9ad0:	00015088 	.word	0x00015088

00009ad4 <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9ad4:	2821      	cmp	r0, #33	; 0x21
    9ad6:	d835      	bhi.n	9b44 <attachInterrupt+0x70>
	switch (mode) {
    9ad8:	2a04      	cmp	r2, #4
    9ada:	d833      	bhi.n	9b44 <attachInterrupt+0x70>
{
    9adc:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    9ade:	4b2a      	ldr	r3, [pc, #168]	; (9b88 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    9ae0:	4d2a      	ldr	r5, [pc, #168]	; (9b8c <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    9ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    9ae6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    9aea:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    9aec:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    9aee:	6822      	ldr	r2, [r4, #0]
    9af0:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    9af4:	d039      	beq.n	9b6a <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    9af6:	4a26      	ldr	r2, [pc, #152]	; (9b90 <attachInterrupt+0xbc>)
    9af8:	4826      	ldr	r0, [pc, #152]	; (9b94 <attachInterrupt+0xc0>)
    9afa:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    9afe:	4826      	ldr	r0, [pc, #152]	; (9b98 <attachInterrupt+0xc4>)
    9b00:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    9b04:	4825      	ldr	r0, [pc, #148]	; (9b9c <attachInterrupt+0xc8>)
    9b06:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    9b0a:	4825      	ldr	r0, [pc, #148]	; (9ba0 <attachInterrupt+0xcc>)
    9b0c:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    9b10:	4824      	ldr	r0, [pc, #144]	; (9ba4 <attachInterrupt+0xd0>)
    9b12:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9b16:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    9b1a:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    9b1e:	287c      	cmp	r0, #124	; 0x7c
    9b20:	d811      	bhi.n	9b46 <attachInterrupt+0x72>
    9b22:	4821      	ldr	r0, [pc, #132]	; (9ba8 <attachInterrupt+0xd4>)
	__disable_irq();
    9b24:	b672      	cpsid	i
	cfg = *config;
    9b26:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    9b28:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    9b2c:	6022      	str	r2, [r4, #0]
    9b2e:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    9b30:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    9b34:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    9b38:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    9b3c:	6023      	str	r3, [r4, #0]
	__enable_irq();
    9b3e:	b662      	cpsie	i
}
    9b40:	bc30      	pop	{r4, r5}
    9b42:	4770      	bx	lr
    9b44:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9b46:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    9b4a:	287c      	cmp	r0, #124	; 0x7c
    9b4c:	d915      	bls.n	9b7a <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9b4e:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    9b52:	287c      	cmp	r0, #124	; 0x7c
    9b54:	d913      	bls.n	9b7e <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9b56:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    9b5a:	287c      	cmp	r0, #124	; 0x7c
    9b5c:	d911      	bls.n	9b82 <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    9b5e:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    9b62:	2a7c      	cmp	r2, #124	; 0x7c
    9b64:	d8ec      	bhi.n	9b40 <attachInterrupt+0x6c>
    9b66:	4811      	ldr	r0, [pc, #68]	; (9bac <attachInterrupt+0xd8>)
    9b68:	e7dc      	b.n	9b24 <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9b6a:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    9b6e:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9b72:	f44f 7280 	mov.w	r2, #256	; 0x100
    9b76:	6022      	str	r2, [r4, #0]
    9b78:	e7bd      	b.n	9af6 <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9b7a:	480d      	ldr	r0, [pc, #52]	; (9bb0 <attachInterrupt+0xdc>)
    9b7c:	e7d2      	b.n	9b24 <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9b7e:	480d      	ldr	r0, [pc, #52]	; (9bb4 <attachInterrupt+0xe0>)
    9b80:	e7d0      	b.n	9b24 <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9b82:	480d      	ldr	r0, [pc, #52]	; (9bb8 <attachInterrupt+0xe4>)
    9b84:	e7ce      	b.n	9b24 <attachInterrupt+0x50>
    9b86:	bf00      	nop
    9b88:	00015074 	.word	0x00015074
    9b8c:	00015088 	.word	0x00015088
    9b90:	1fff8200 	.word	0x1fff8200
    9b94:	1fff87f1 	.word	0x1fff87f1
    9b98:	1fff87bd 	.word	0x1fff87bd
    9b9c:	1fff8789 	.word	0x1fff8789
    9ba0:	1fff8755 	.word	0x1fff8755
    9ba4:	1fff8721 	.word	0x1fff8721
    9ba8:	1fff88f8 	.word	0x1fff88f8
    9bac:	1fff89d0 	.word	0x1fff89d0
    9bb0:	1fff8930 	.word	0x1fff8930
    9bb4:	1fff8980 	.word	0x1fff8980
    9bb8:	1fff89b0 	.word	0x1fff89b0

00009bbc <rtc_set>:
	RTC_SR = 0;
    9bbc:	4b03      	ldr	r3, [pc, #12]	; (9bcc <rtc_set+0x10>)
    9bbe:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    9bc0:	2110      	movs	r1, #16
	RTC_SR = 0;
    9bc2:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    9bc4:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    9bc6:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    9bc8:	6159      	str	r1, [r3, #20]
}
    9bca:	4770      	bx	lr
    9bcc:	4003d000 	.word	0x4003d000

00009bd0 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    9bd0:	4770      	bx	lr
    9bd2:	bf00      	nop

00009bd4 <_init_Teensyduino_internal_>:
{
    9bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9bd6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    9bda:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9bde:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9be2:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    9be6:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    9bea:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    9bee:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    9bf2:	4a1d      	ldr	r2, [pc, #116]	; (9c68 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    9bf4:	481d      	ldr	r0, [pc, #116]	; (9c6c <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    9bf6:	491e      	ldr	r1, [pc, #120]	; (9c70 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    9bf8:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    9bfc:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9c00:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    9c02:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    9c04:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c08:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    9c0a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    9c0e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    9c12:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    9c14:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    9c16:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    9c18:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    9c1a:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    9c1c:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    9c1e:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    9c20:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    9c22:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    9c24:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    9c26:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c28:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    9c2a:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    9c2c:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    9c2e:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    9c30:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c32:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    9c34:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    9c36:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    9c38:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    9c3a:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    9c3c:	600d      	str	r5, [r1, #0]
	analog_init();
    9c3e:	f7ff fc27 	bl	9490 <analog_init>
	startup_middle_hook();
    9c42:	f7ff ffc5 	bl	9bd0 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9c46:	4c0b      	ldr	r4, [pc, #44]	; (9c74 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c48:	6823      	ldr	r3, [r4, #0]
    9c4a:	9300      	str	r3, [sp, #0]
	return ret;
    9c4c:	9b00      	ldr	r3, [sp, #0]
    9c4e:	2b13      	cmp	r3, #19
    9c50:	d9fa      	bls.n	9c48 <_init_Teensyduino_internal_+0x74>
	usb_init();
    9c52:	f001 fef1 	bl	ba38 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9c56:	6823      	ldr	r3, [r4, #0]
    9c58:	9301      	str	r3, [sp, #4]
	return ret;
    9c5a:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    9c5c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    9c60:	d3f9      	bcc.n	9c56 <_init_Teensyduino_internal_+0x82>
}
    9c62:	b003      	add	sp, #12
    9c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c66:	bf00      	nop
    9c68:	40038000 	.word	0x40038000
    9c6c:	40039000 	.word	0x40039000
    9c70:	400b8000 	.word	0x400b8000
    9c74:	1fffd0e4 	.word	0x1fffd0e4

00009c78 <analogWrite>:
	if (pin == A14) {
    9c78:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    9c7a:	4b7f      	ldr	r3, [pc, #508]	; (9e78 <analogWrite+0x200>)
	if (pin == A14) {
    9c7c:	d036      	beq.n	9cec <analogWrite+0x74>
	if (val <= 0) {
    9c7e:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    9c80:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    9c82:	dd3f      	ble.n	9d04 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    9c84:	2201      	movs	r2, #1
    9c86:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    9c8a:	4561      	cmp	r1, ip
{
    9c8c:	b510      	push	{r4, lr}
	} else if (val >= max) {
    9c8e:	d254      	bcs.n	9d3a <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    9c90:	1ec2      	subs	r2, r0, #3
    9c92:	2a01      	cmp	r2, #1
    9c94:	d970      	bls.n	9d78 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    9c96:	2820      	cmp	r0, #32
    9c98:	d067      	beq.n	9d6a <analogWrite+0xf2>
    9c9a:	2819      	cmp	r0, #25
    9c9c:	d065      	beq.n	9d6a <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    9c9e:	4a77      	ldr	r2, [pc, #476]	; (9e7c <analogWrite+0x204>)
    9ca0:	6892      	ldr	r2, [r2, #8]
    9ca2:	fb02 1201 	mla	r2, r2, r1, r1
    9ca6:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    9caa:	1f42      	subs	r2, r0, #5
    9cac:	2a1b      	cmp	r2, #27
    9cae:	d87d      	bhi.n	9dac <analogWrite+0x134>
    9cb0:	e8df f012 	tbh	[pc, r2, lsl #1]
    9cb4:	00bf00c6 	.word	0x00bf00c6
    9cb8:	007c007c 	.word	0x007c007c
    9cbc:	00b100b8 	.word	0x00b100b8
    9cc0:	007c007c 	.word	0x007c007c
    9cc4:	007c007c 	.word	0x007c007c
    9cc8:	007c007c 	.word	0x007c007c
    9ccc:	007c007c 	.word	0x007c007c
    9cd0:	00aa007c 	.word	0x00aa007c
    9cd4:	009c00a3 	.word	0x009c00a3
    9cd8:	007c0095 	.word	0x007c0095
    9cdc:	007c00cd 	.word	0x007c00cd
    9ce0:	007c007c 	.word	0x007c007c
    9ce4:	007c007c 	.word	0x007c007c
    9ce8:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    9cec:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    9cee:	280b      	cmp	r0, #11
			val <<= 12 - res;
    9cf0:	bf95      	itete	ls
    9cf2:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    9cf6:	380c      	subhi	r0, #12
			val <<= 12 - res;
    9cf8:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    9cfc:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    9d00:	f7ff bc2a 	b.w	9558 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    9d04:	2821      	cmp	r0, #33	; 0x21
    9d06:	d817      	bhi.n	9d38 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    9d08:	4b5d      	ldr	r3, [pc, #372]	; (9e80 <analogWrite+0x208>)
    9d0a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9d0e:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9d12:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9d16:	2900      	cmp	r1, #0
    9d18:	d03c      	beq.n	9d94 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    9d1a:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    9d1c:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    9d1e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    9d22:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d24:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    9d28:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d2c:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9d2e:	681a      	ldr	r2, [r3, #0]
    9d30:	f022 0220 	bic.w	r2, r2, #32
    9d34:	601a      	str	r2, [r3, #0]
    9d36:	4770      	bx	lr
    9d38:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    9d3a:	2821      	cmp	r0, #33	; 0x21
    9d3c:	d814      	bhi.n	9d68 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    9d3e:	4b50      	ldr	r3, [pc, #320]	; (9e80 <analogWrite+0x208>)
    9d40:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    9d44:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    9d48:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    9d4c:	b344      	cbz	r4, 9da0 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    9d4e:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    9d50:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d54:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9d58:	2001      	movs	r0, #1
    9d5a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9d5e:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9d60:	681a      	ldr	r2, [r3, #0]
    9d62:	f022 0220 	bic.w	r2, r2, #32
    9d66:	601a      	str	r2, [r3, #0]
}
    9d68:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    9d6a:	4a46      	ldr	r2, [pc, #280]	; (9e84 <analogWrite+0x20c>)
    9d6c:	6892      	ldr	r2, [r2, #8]
    9d6e:	fb02 1201 	mla	r2, r2, r1, r1
    9d72:	fa22 f303 	lsr.w	r3, r2, r3
    9d76:	e798      	b.n	9caa <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9d78:	4c43      	ldr	r4, [pc, #268]	; (9e88 <analogWrite+0x210>)
    9d7a:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    9d7c:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    9d7e:	fb02 1201 	mla	r2, r2, r1, r1
    9d82:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    9d86:	d170      	bne.n	9e6a <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9d88:	4b40      	ldr	r3, [pc, #256]	; (9e8c <analogWrite+0x214>)
		FTM1_C1V = cval;
    9d8a:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9d8c:	f44f 7151 	mov.w	r1, #836	; 0x344
    9d90:	6359      	str	r1, [r3, #52]	; 0x34
}
    9d92:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    9d94:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    9d96:	6819      	ldr	r1, [r3, #0]
    9d98:	f021 0102 	bic.w	r1, r1, #2
    9d9c:	6019      	str	r1, [r3, #0]
    9d9e:	e7c0      	b.n	9d22 <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    9da0:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9da2:	681a      	ldr	r2, [r3, #0]
    9da4:	f042 0203 	orr.w	r2, r2, #3
    9da8:	601a      	str	r2, [r3, #0]
    9daa:	e7d3      	b.n	9d54 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    9dac:	2821      	cmp	r0, #33	; 0x21
    9dae:	d8db      	bhi.n	9d68 <analogWrite+0xf0>
    9db0:	297f      	cmp	r1, #127	; 0x7f
    9db2:	bfd4      	ite	le
    9db4:	2100      	movle	r1, #0
    9db6:	2101      	movgt	r1, #1
    9db8:	f7ff fe6a 	bl	9a90 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    9dbc:	4b30      	ldr	r3, [pc, #192]	; (9e80 <analogWrite+0x208>)
    9dbe:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    9dc2:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    9dc6:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    9dc8:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9dca:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    9dce:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    9dd2:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    9dd4:	681a      	ldr	r2, [r3, #0]
    9dd6:	f022 0220 	bic.w	r2, r2, #32
    9dda:	601a      	str	r2, [r3, #0]
}
    9ddc:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    9dde:	4827      	ldr	r0, [pc, #156]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9de0:	4a2b      	ldr	r2, [pc, #172]	; (9e90 <analogWrite+0x218>)
		FTM0_C1V = cval;
    9de2:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9de4:	f240 4144 	movw	r1, #1092	; 0x444
    9de8:	6091      	str	r1, [r2, #8]
}
    9dea:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    9dec:	4823      	ldr	r0, [pc, #140]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9dee:	4a28      	ldr	r2, [pc, #160]	; (9e90 <analogWrite+0x218>)
		FTM0_C0V = cval;
    9df0:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9df2:	f240 4144 	movw	r1, #1092	; 0x444
    9df6:	6051      	str	r1, [r2, #4]
}
    9df8:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    9dfa:	4820      	ldr	r0, [pc, #128]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9dfc:	4a25      	ldr	r2, [pc, #148]	; (9e94 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    9dfe:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e00:	f240 4144 	movw	r1, #1092	; 0x444
    9e04:	6191      	str	r1, [r2, #24]
}
    9e06:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    9e08:	481c      	ldr	r0, [pc, #112]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e0a:	4a22      	ldr	r2, [pc, #136]	; (9e94 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    9e0c:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e0e:	f240 4144 	movw	r1, #1092	; 0x444
    9e12:	6151      	str	r1, [r2, #20]
}
    9e14:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    9e16:	4819      	ldr	r0, [pc, #100]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e18:	4a1d      	ldr	r2, [pc, #116]	; (9e90 <analogWrite+0x218>)
		FTM0_C3V = cval;
    9e1a:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e1c:	f240 4144 	movw	r1, #1092	; 0x444
    9e20:	6111      	str	r1, [r2, #16]
}
    9e22:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    9e24:	4815      	ldr	r0, [pc, #84]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e26:	4a1a      	ldr	r2, [pc, #104]	; (9e90 <analogWrite+0x218>)
		FTM0_C2V = cval;
    9e28:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e2a:	f240 4144 	movw	r1, #1092	; 0x444
    9e2e:	60d1      	str	r1, [r2, #12]
}
    9e30:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    9e32:	4812      	ldr	r0, [pc, #72]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e34:	4a17      	ldr	r2, [pc, #92]	; (9e94 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    9e36:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e38:	f240 4144 	movw	r1, #1092	; 0x444
    9e3c:	6111      	str	r1, [r2, #16]
}
    9e3e:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    9e40:	480e      	ldr	r0, [pc, #56]	; (9e7c <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e42:	4a14      	ldr	r2, [pc, #80]	; (9e94 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    9e44:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e46:	f240 4144 	movw	r1, #1092	; 0x444
    9e4a:	61d1      	str	r1, [r2, #28]
}
    9e4c:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    9e4e:	480d      	ldr	r0, [pc, #52]	; (9e84 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e50:	4a11      	ldr	r2, [pc, #68]	; (9e98 <analogWrite+0x220>)
		FTM2_C1V = cval;
    9e52:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e54:	f44f 7151 	mov.w	r1, #836	; 0x344
    9e58:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    9e5a:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    9e5c:	4809      	ldr	r0, [pc, #36]	; (9e84 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e5e:	4a0e      	ldr	r2, [pc, #56]	; (9e98 <analogWrite+0x220>)
		FTM2_C0V = cval;
    9e60:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e62:	f44f 7151 	mov.w	r1, #836	; 0x344
    9e66:	6491      	str	r1, [r2, #72]	; 0x48
}
    9e68:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e6a:	4b08      	ldr	r3, [pc, #32]	; (9e8c <analogWrite+0x214>)
		FTM1_C0V = cval;
    9e6c:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    9e6e:	f44f 7151 	mov.w	r1, #836	; 0x344
    9e72:	6319      	str	r1, [r3, #48]	; 0x30
}
    9e74:	bd10      	pop	{r4, pc}
    9e76:	bf00      	nop
    9e78:	1fff88f4 	.word	0x1fff88f4
    9e7c:	40038000 	.word	0x40038000
    9e80:	00015088 	.word	0x00015088
    9e84:	400b8000 	.word	0x400b8000
    9e88:	40039000 	.word	0x40039000
    9e8c:	40049000 	.word	0x40049000
    9e90:	4004b000 	.word	0x4004b000
    9e94:	4004c000 	.word	0x4004c000
    9e98:	4004a000 	.word	0x4004a000

00009e9c <analogWriteFrequency>:
{
    9e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ea0:	460e      	mov	r6, r1
    9ea2:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    9ea4:	492c      	ldr	r1, [pc, #176]	; (9f58 <analogWriteFrequency+0xbc>)
    9ea6:	4630      	mov	r0, r6
    9ea8:	f002 ff52 	bl	cd50 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    9eac:	4b2b      	ldr	r3, [pc, #172]	; (9f5c <analogWriteFrequency+0xc0>)
    9eae:	2800      	cmp	r0, #0
    9eb0:	f647 2712 	movw	r7, #31250	; 0x7a12
    9eb4:	bf12      	itee	ne
    9eb6:	f04f 0a02 	movne.w	sl, #2
    9eba:	f04f 0a01 	moveq.w	sl, #1
    9ebe:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    9ec0:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    9ec2:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    9ec6:	fa27 f004 	lsr.w	r0, r7, r4
    9eca:	f002 fd4b 	bl	c964 <__aeabi_ui2f>
    9ece:	4649      	mov	r1, r9
    9ed0:	4605      	mov	r5, r0
    9ed2:	f002 fd9f 	bl	ca14 <__aeabi_fmul>
    9ed6:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    9ed8:	4630      	mov	r0, r6
    9eda:	f002 ff4d 	bl	cd78 <__aeabi_fcmpge>
    9ede:	b930      	cbnz	r0, 9eee <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    9ee0:	3401      	adds	r4, #1
    9ee2:	2c07      	cmp	r4, #7
    9ee4:	d1ef      	bne.n	9ec6 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    9ee6:	09f8      	lsrs	r0, r7, #7
    9ee8:	f002 fd3c 	bl	c964 <__aeabi_ui2f>
    9eec:	4605      	mov	r5, r0
    9eee:	4631      	mov	r1, r6
    9ef0:	4628      	mov	r0, r5
    9ef2:	f002 fe43 	bl	cb7c <__aeabi_fdiv>
    9ef6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    9efa:	f002 fc81 	bl	c800 <__aeabi_fsub>
    9efe:	f002 ff75 	bl	cdec <__aeabi_f2uiz>
    9f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9f06:	4298      	cmp	r0, r3
    9f08:	bf28      	it	cs
    9f0a:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    9f0c:	f1a8 0303 	sub.w	r3, r8, #3
    9f10:	2b01      	cmp	r3, #1
    9f12:	d911      	bls.n	9f38 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    9f14:	f1a8 0805 	sub.w	r8, r8, #5
    9f18:	fa5f f888 	uxtb.w	r8, r8
    9f1c:	f1b8 0f1b 	cmp.w	r8, #27
    9f20:	d808      	bhi.n	9f34 <analogWriteFrequency+0x98>
    9f22:	4a0f      	ldr	r2, [pc, #60]	; (9f60 <analogWriteFrequency+0xc4>)
    9f24:	2301      	movs	r3, #1
    9f26:	fa03 f308 	lsl.w	r3, r3, r8
    9f2a:	401a      	ands	r2, r3
    9f2c:	d110      	bne.n	9f50 <analogWriteFrequency+0xb4>
    9f2e:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    9f32:	d10b      	bne.n	9f4c <analogWriteFrequency+0xb0>
}
    9f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    9f38:	4b0a      	ldr	r3, [pc, #40]	; (9f64 <analogWriteFrequency+0xc8>)
    9f3a:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    9f3c:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    9f40:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    9f42:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    9f44:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    9f46:	601c      	str	r4, [r3, #0]
}
    9f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    9f4c:	4b06      	ldr	r3, [pc, #24]	; (9f68 <analogWriteFrequency+0xcc>)
    9f4e:	e7f5      	b.n	9f3c <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    9f50:	4b06      	ldr	r3, [pc, #24]	; (9f6c <analogWriteFrequency+0xd0>)
    9f52:	2200      	movs	r2, #0
    9f54:	e7f2      	b.n	9f3c <analogWriteFrequency+0xa0>
    9f56:	bf00      	nop
    9f58:	40b71b00 	.word	0x40b71b00
    9f5c:	02dc6c00 	.word	0x02dc6c00
    9f60:	00078033 	.word	0x00078033
    9f64:	40039000 	.word	0x40039000
    9f68:	400b8000 	.word	0x400b8000
    9f6c:	40038000 	.word	0x40038000

00009f70 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9f70:	2821      	cmp	r0, #33	; 0x21
    9f72:	d816      	bhi.n	9fa2 <digitalWrite+0x32>
{
    9f74:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    9f76:	4b10      	ldr	r3, [pc, #64]	; (9fb8 <digitalWrite+0x48>)
    9f78:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9f7c:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9f80:	b12c      	cbz	r4, 9f8e <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    9f82:	2301      	movs	r3, #1
		if (val) {
    9f84:	b971      	cbnz	r1, 9fa4 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    9f86:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    9f8a:	bc10      	pop	{r4}
    9f8c:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    9f8e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    9f92:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9f94:	681a      	ldr	r2, [r3, #0]
		if (val) {
    9f96:	b149      	cbz	r1, 9fac <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9f98:	f042 0203 	orr.w	r2, r2, #3
}
    9f9c:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9f9e:	601a      	str	r2, [r3, #0]
}
    9fa0:	4770      	bx	lr
    9fa2:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    9fa4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    9fa8:	bc10      	pop	{r4}
    9faa:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    9fac:	f022 0202 	bic.w	r2, r2, #2
}
    9fb0:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    9fb2:	601a      	str	r2, [r3, #0]
}
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop
    9fb8:	00015088 	.word	0x00015088

00009fbc <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9fbc:	2821      	cmp	r0, #33	; 0x21
    9fbe:	d806      	bhi.n	9fce <digitalRead+0x12>
	return *portInputRegister(pin);
    9fc0:	4b04      	ldr	r3, [pc, #16]	; (9fd4 <digitalRead+0x18>)
    9fc2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    9fc6:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    9fca:	b2c0      	uxtb	r0, r0
    9fcc:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    9fce:	2000      	movs	r0, #0
}
    9fd0:	4770      	bx	lr
    9fd2:	bf00      	nop
    9fd4:	00015088 	.word	0x00015088

00009fd8 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9fd8:	2821      	cmp	r0, #33	; 0x21
    9fda:	d820      	bhi.n	a01e <pinMode+0x46>
	config = portConfigRegister(pin);
    9fdc:	4a1b      	ldr	r2, [pc, #108]	; (a04c <pinMode+0x74>)
    9fde:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9fe2:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    9fe4:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9fe6:	d00f      	beq.n	a008 <pinMode+0x30>
    9fe8:	2904      	cmp	r1, #4
    9fea:	d01d      	beq.n	a028 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    9fec:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    9ff0:	2200      	movs	r2, #0
    9ff2:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    9ff6:	b199      	cbz	r1, a020 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    9ff8:	2902      	cmp	r1, #2
    9ffa:	d022      	beq.n	a042 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    9ffc:	2903      	cmp	r1, #3
    9ffe:	d10d      	bne.n	a01c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    a000:	f44f 7281 	mov.w	r2, #258	; 0x102
    a004:	601a      	str	r2, [r3, #0]
    a006:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a008:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a00c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a010:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a014:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a016:	681a      	ldr	r2, [r3, #0]
    a018:	f022 0220 	bic.w	r2, r2, #32
    a01c:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    a01e:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    a020:	f44f 7280 	mov.w	r2, #256	; 0x100
    a024:	601a      	str	r2, [r3, #0]
    a026:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a028:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a02c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a030:	2001      	movs	r0, #1
    a032:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a036:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    a038:	681a      	ldr	r2, [r3, #0]
    a03a:	f042 0220 	orr.w	r2, r2, #32
    a03e:	601a      	str	r2, [r3, #0]
    a040:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    a042:	f240 1203 	movw	r2, #259	; 0x103
    a046:	601a      	str	r2, [r3, #0]
    a048:	4770      	bx	lr
    a04a:	bf00      	nop
    a04c:	00015088 	.word	0x00015088

0000a050 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a050:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a052:	490d      	ldr	r1, [pc, #52]	; (a088 <micros+0x38>)
	current = SYST_CVR;
    a054:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a058:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a05a:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a05c:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a060:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a062:	0152      	lsls	r2, r2, #5
    a064:	d502      	bpl.n	a06c <micros+0x1c>
    a066:	2b32      	cmp	r3, #50	; 0x32
    a068:	bf88      	it	hi
    a06a:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a06c:	4a07      	ldr	r2, [pc, #28]	; (a08c <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    a06e:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    a072:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    a076:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    a078:	fba2 2303 	umull	r2, r3, r2, r3
    a07c:	fb01 f000 	mul.w	r0, r1, r0
}
    a080:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    a084:	4770      	bx	lr
    a086:	bf00      	nop
    a088:	1fffd0e4 	.word	0x1fffd0e4
    a08c:	aaaaaaab 	.word	0xaaaaaaab

0000a090 <delay>:

void delay(uint32_t ms)
{
    a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a094:	4604      	mov	r4, r0
	__disable_irq();
    a096:	b672      	cpsid	i
	count = systick_millis_count;
    a098:	4f20      	ldr	r7, [pc, #128]	; (a11c <delay+0x8c>)
	current = SYST_CVR;
    a09a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a09e:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a0a0:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a0a2:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a0a6:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a0a8:	0152      	lsls	r2, r2, #5
    a0aa:	d502      	bpl.n	a0b2 <delay+0x22>
    a0ac:	2b32      	cmp	r3, #50	; 0x32
    a0ae:	bf88      	it	hi
    a0b0:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    a0b2:	b90c      	cbnz	r4, a0b8 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    a0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    a0b8:	f8df 9064 	ldr.w	r9, [pc, #100]	; a120 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    a0bc:	f8df 8064 	ldr.w	r8, [pc, #100]	; a124 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    a0c0:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    a0c4:	fba8 2303 	umull	r2, r3, r8, r3
    a0c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a0cc:	fb02 f505 	mul.w	r5, r2, r5
    a0d0:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    a0d4:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    a0d8:	b672      	cpsid	i
	current = SYST_CVR;
    a0da:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    a0dc:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a0de:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    a0e2:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    a0e4:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    a0e8:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a0ec:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    a0f0:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    a0f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a0f8:	d002      	beq.n	a100 <delay+0x70>
    a0fa:	2932      	cmp	r1, #50	; 0x32
    a0fc:	bf88      	it	hi
    a0fe:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    a100:	fb00 3302 	mla	r3, r0, r2, r3
    a104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a108:	d304      	bcc.n	a114 <delay+0x84>
				if (ms == 0) return;
    a10a:	3c01      	subs	r4, #1
    a10c:	d0d2      	beq.n	a0b4 <delay+0x24>
				start += 1000;
    a10e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    a112:	e7e1      	b.n	a0d8 <delay+0x48>
			yield();
    a114:	f001 fea4 	bl	be60 <yield>
			while ((micros() - start) >= 1000) {
    a118:	e7de      	b.n	a0d8 <delay+0x48>
    a11a:	bf00      	nop
    a11c:	1fffd0e4 	.word	0x1fffd0e4
    a120:	000176ff 	.word	0x000176ff
    a124:	aaaaaaab 	.word	0xaaaaaaab

0000a128 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a128:	4a2a      	ldr	r2, [pc, #168]	; (a1d4 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    a12a:	492b      	ldr	r1, [pc, #172]	; (a1d8 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a12c:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a12e:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a130:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    a134:	4d29      	ldr	r5, [pc, #164]	; (a1dc <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a136:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    a138:	4e29      	ldr	r6, [pc, #164]	; (a1e0 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    a13a:	4c2a      	ldr	r4, [pc, #168]	; (a1e4 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    a13c:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    a13e:	2300      	movs	r3, #0
    a140:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    a142:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    a144:	4928      	ldr	r1, [pc, #160]	; (a1e8 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    a146:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    a148:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    a14a:	4928      	ldr	r1, [pc, #160]	; (a1ec <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    a14c:	2a09      	cmp	r2, #9
	transmitting = 0;
    a14e:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    a150:	d033      	beq.n	a1ba <serial2_begin+0x92>
    a152:	2a1a      	cmp	r2, #26
    a154:	d103      	bne.n	a15e <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a156:	4b26      	ldr	r3, [pc, #152]	; (a1f0 <serial2_begin+0xc8>)
    a158:	f240 3213 	movw	r2, #787	; 0x313
    a15c:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    a15e:	4b25      	ldr	r3, [pc, #148]	; (a1f4 <serial2_begin+0xcc>)
    a160:	781b      	ldrb	r3, [r3, #0]
    a162:	2b0a      	cmp	r3, #10
    a164:	d031      	beq.n	a1ca <serial2_begin+0xa2>
    a166:	2b1f      	cmp	r3, #31
    a168:	d103      	bne.n	a172 <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a16a:	4b21      	ldr	r3, [pc, #132]	; (a1f0 <serial2_begin+0xc8>)
    a16c:	f44f 7251 	mov.w	r2, #836	; 0x344
    a170:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    a172:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a174:	4b20      	ldr	r3, [pc, #128]	; (a1f8 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a176:	4c21      	ldr	r4, [pc, #132]	; (a1fc <serial2_begin+0xd4>)
    a178:	bf38      	it	cc
    a17a:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a17c:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    a180:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    a184:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    a188:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    a18c:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    a190:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    a192:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a194:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    a196:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a198:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a19a:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    a19c:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a19e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a1a2:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a1a4:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    a1a6:	203c      	movs	r0, #60	; 0x3c
    a1a8:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a1aa:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    a1b2:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a1b4:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    a1b8:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a1ba:	4b11      	ldr	r3, [pc, #68]	; (a200 <serial2_begin+0xd8>)
    a1bc:	f240 3213 	movw	r2, #787	; 0x313
    a1c0:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    a1c2:	4b0c      	ldr	r3, [pc, #48]	; (a1f4 <serial2_begin+0xcc>)
    a1c4:	781b      	ldrb	r3, [r3, #0]
    a1c6:	2b0a      	cmp	r3, #10
    a1c8:	d1cd      	bne.n	a166 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a1ca:	4b0d      	ldr	r3, [pc, #52]	; (a200 <serial2_begin+0xd8>)
    a1cc:	f44f 7251 	mov.w	r2, #836	; 0x344
    a1d0:	611a      	str	r2, [r3, #16]
    a1d2:	e7ce      	b.n	a172 <serial2_begin+0x4a>
    a1d4:	40048000 	.word	0x40048000
    a1d8:	1fffd134 	.word	0x1fffd134
    a1dc:	1fffd12c 	.word	0x1fffd12c
    a1e0:	1fff89e4 	.word	0x1fff89e4
    a1e4:	1fffd168 	.word	0x1fffd168
    a1e8:	1fffd170 	.word	0x1fffd170
    a1ec:	1fffd13c 	.word	0x1fffd13c
    a1f0:	4004d000 	.word	0x4004d000
    a1f4:	1fff89ec 	.word	0x1fff89ec
    a1f8:	4006b000 	.word	0x4006b000
    a1fc:	e000e400 	.word	0xe000e400
    a200:	4004b000 	.word	0x4004b000

0000a204 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    a204:	4b21      	ldr	r3, [pc, #132]	; (a28c <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    a206:	4921      	ldr	r1, [pc, #132]	; (a28c <serial2_format+0x88>)
	c = UART1_C1;
    a208:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a20a:	f000 0203 	and.w	r2, r0, #3
    a20e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a212:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a214:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a216:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a21a:	bf48      	it	mi
    a21c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a220:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    a222:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a224:	d103      	bne.n	a22e <serial2_format+0x2a>
    a226:	798b      	ldrb	r3, [r1, #6]
    a228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a22c:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    a22e:	4b17      	ldr	r3, [pc, #92]	; (a28c <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    a230:	4a16      	ldr	r2, [pc, #88]	; (a28c <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    a232:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a234:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    a236:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a23a:	bf48      	it	mi
    a23c:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    a240:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    a242:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a244:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    a246:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    a24a:	4a10      	ldr	r2, [pc, #64]	; (a28c <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a24c:	bf48      	it	mi
    a24e:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a252:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    a256:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a258:	d010      	beq.n	a27c <serial2_format+0x78>
		c = UART1_C1;
    a25a:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a25c:	490c      	ldr	r1, [pc, #48]	; (a290 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a25e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    a262:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a264:	7809      	ldrb	r1, [r1, #0]
    a266:	4b0b      	ldr	r3, [pc, #44]	; (a294 <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a268:	4a0b      	ldr	r2, [pc, #44]	; (a298 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a26a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a26e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a272:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a274:	4909      	ldr	r1, [pc, #36]	; (a29c <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a276:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a278:	6011      	str	r1, [r2, #0]
    a27a:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a27c:	4b06      	ldr	r3, [pc, #24]	; (a298 <serial2_format+0x94>)
    a27e:	4a07      	ldr	r2, [pc, #28]	; (a29c <serial2_format+0x98>)
    a280:	6819      	ldr	r1, [r3, #0]
    a282:	4291      	cmp	r1, r2
    a284:	bf08      	it	eq
    a286:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    a288:	4770      	bx	lr
    a28a:	bf00      	nop
    a28c:	4006b000 	.word	0x4006b000
    a290:	1fff89ec 	.word	0x1fff89ec
    a294:	00015088 	.word	0x00015088
    a298:	1fffd138 	.word	0x1fffd138
    a29c:	42d600d4 	.word	0x42d600d4

0000a2a0 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a2a0:	4b29      	ldr	r3, [pc, #164]	; (a348 <serial2_end+0xa8>)
    a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a2a4:	051b      	lsls	r3, r3, #20
    a2a6:	d54d      	bpl.n	a344 <serial2_end+0xa4>
{
    a2a8:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    a2aa:	4c28      	ldr	r4, [pc, #160]	; (a34c <serial2_end+0xac>)
    a2ac:	7823      	ldrb	r3, [r4, #0]
    a2ae:	b123      	cbz	r3, a2ba <serial2_end+0x1a>
    a2b0:	f001 fdd6 	bl	be60 <yield>
    a2b4:	7823      	ldrb	r3, [r4, #0]
    a2b6:	2b00      	cmp	r3, #0
    a2b8:	d1fa      	bne.n	a2b0 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    a2ba:	4a25      	ldr	r2, [pc, #148]	; (a350 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    a2bc:	4b25      	ldr	r3, [pc, #148]	; (a354 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a2be:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    a2c2:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    a2c6:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a2c8:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    a2cc:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    a2ce:	781b      	ldrb	r3, [r3, #0]
    a2d0:	2b09      	cmp	r3, #9
    a2d2:	d02c      	beq.n	a32e <serial2_end+0x8e>
    a2d4:	2b1a      	cmp	r3, #26
    a2d6:	d01b      	beq.n	a310 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    a2d8:	4b1f      	ldr	r3, [pc, #124]	; (a358 <serial2_end+0xb8>)
    a2da:	781b      	ldrb	r3, [r3, #0]
    a2dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a2e0:	2b0a      	cmp	r3, #10
    a2e2:	d01f      	beq.n	a324 <serial2_end+0x84>
    a2e4:	2b1f      	cmp	r3, #31
    a2e6:	d00e      	beq.n	a306 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    a2e8:	4b1c      	ldr	r3, [pc, #112]	; (a35c <serial2_end+0xbc>)
	UART1_S1;
    a2ea:	4a19      	ldr	r2, [pc, #100]	; (a350 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    a2ec:	4c1c      	ldr	r4, [pc, #112]	; (a360 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    a2ee:	481d      	ldr	r0, [pc, #116]	; (a364 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    a2f0:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    a2f2:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    a2f6:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a2f8:	2300      	movs	r3, #0
    a2fa:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a2fc:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a2fe:	b109      	cbz	r1, a304 <serial2_end+0x64>
    a300:	2301      	movs	r3, #1
    a302:	700b      	strb	r3, [r1, #0]
}
    a304:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    a306:	4b18      	ldr	r3, [pc, #96]	; (a368 <serial2_end+0xc8>)
    a308:	f240 1203 	movw	r2, #259	; 0x103
    a30c:	601a      	str	r2, [r3, #0]
    a30e:	e7eb      	b.n	a2e8 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    a310:	4b15      	ldr	r3, [pc, #84]	; (a368 <serial2_end+0xc8>)
    a312:	f240 1203 	movw	r2, #259	; 0x103
    a316:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    a318:	4b0f      	ldr	r3, [pc, #60]	; (a358 <serial2_end+0xb8>)
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a320:	2b0a      	cmp	r3, #10
    a322:	d1df      	bne.n	a2e4 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    a324:	4b11      	ldr	r3, [pc, #68]	; (a36c <serial2_end+0xcc>)
    a326:	f240 1203 	movw	r2, #259	; 0x103
    a32a:	611a      	str	r2, [r3, #16]
    a32c:	e7dc      	b.n	a2e8 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    a32e:	4b0f      	ldr	r3, [pc, #60]	; (a36c <serial2_end+0xcc>)
    a330:	f240 1203 	movw	r2, #259	; 0x103
    a334:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    a336:	4b08      	ldr	r3, [pc, #32]	; (a358 <serial2_end+0xb8>)
    a338:	781b      	ldrb	r3, [r3, #0]
    a33a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a33e:	2b0a      	cmp	r3, #10
    a340:	d1d0      	bne.n	a2e4 <serial2_end+0x44>
    a342:	e7ef      	b.n	a324 <serial2_end+0x84>
    a344:	4770      	bx	lr
    a346:	bf00      	nop
    a348:	40048000 	.word	0x40048000
    a34c:	1fffd13c 	.word	0x1fffd13c
    a350:	4006b000 	.word	0x4006b000
    a354:	1fff89e4 	.word	0x1fff89e4
    a358:	1fff89ec 	.word	0x1fff89ec
    a35c:	1fffd0e8 	.word	0x1fffd0e8
    a360:	1fffd12c 	.word	0x1fffd12c
    a364:	1fffd134 	.word	0x1fffd134
    a368:	4004d000 	.word	0x4004d000
    a36c:	4004b000 	.word	0x4004b000

0000a370 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    a370:	4a0a      	ldr	r2, [pc, #40]	; (a39c <serial2_set_transmit_pin+0x2c>)
{
    a372:	b538      	push	{r3, r4, r5, lr}
    a374:	4605      	mov	r5, r0
	while (transmitting) ;
    a376:	7813      	ldrb	r3, [r2, #0]
    a378:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a37c:	2b00      	cmp	r3, #0
    a37e:	d1fa      	bne.n	a376 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a380:	2101      	movs	r1, #1
    a382:	4628      	mov	r0, r5
    a384:	f7ff fe28 	bl	9fd8 <pinMode>
	digitalWrite(pin, LOW);
    a388:	4621      	mov	r1, r4
    a38a:	4628      	mov	r0, r5
    a38c:	f7ff fdf0 	bl	9f70 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a390:	4a03      	ldr	r2, [pc, #12]	; (a3a0 <serial2_set_transmit_pin+0x30>)
    a392:	4b04      	ldr	r3, [pc, #16]	; (a3a4 <serial2_set_transmit_pin+0x34>)
    a394:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a398:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    a39a:	bd38      	pop	{r3, r4, r5, pc}
    a39c:	1fffd13c 	.word	0x1fffd13c
    a3a0:	00015088 	.word	0x00015088
    a3a4:	1fffd138 	.word	0x1fffd138

0000a3a8 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    a3a8:	b109      	cbz	r1, a3ae <serial2_set_tx+0x6>
    a3aa:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a3ae:	4a19      	ldr	r2, [pc, #100]	; (a414 <serial2_set_tx+0x6c>)
    a3b0:	7813      	ldrb	r3, [r2, #0]
    a3b2:	4283      	cmp	r3, r0
    a3b4:	d017      	beq.n	a3e6 <serial2_set_tx+0x3e>
{
    a3b6:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a3b8:	4c17      	ldr	r4, [pc, #92]	; (a418 <serial2_set_tx+0x70>)
    a3ba:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a3bc:	0524      	lsls	r4, r4, #20
    a3be:	d50f      	bpl.n	a3e0 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    a3c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a3c4:	2b0a      	cmp	r3, #10
    a3c6:	d021      	beq.n	a40c <serial2_set_tx+0x64>
    a3c8:	2b1f      	cmp	r3, #31
    a3ca:	d014      	beq.n	a3f6 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a3cc:	2900      	cmp	r1, #0
    a3ce:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a3d2:	bf14      	ite	ne
    a3d4:	2160      	movne	r1, #96	; 0x60
    a3d6:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    a3d8:	2b0a      	cmp	r3, #10
    a3da:	d010      	beq.n	a3fe <serial2_set_tx+0x56>
    a3dc:	2b1f      	cmp	r3, #31
    a3de:	d003      	beq.n	a3e8 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    a3e0:	7010      	strb	r0, [r2, #0]
	#endif
}
    a3e2:	bc10      	pop	{r4}
    a3e4:	4770      	bx	lr
    a3e6:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a3e8:	4b0c      	ldr	r3, [pc, #48]	; (a41c <serial2_set_tx+0x74>)
    a3ea:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a3ee:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    a3f0:	7010      	strb	r0, [r2, #0]
}
    a3f2:	bc10      	pop	{r4}
    a3f4:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    a3f6:	4b09      	ldr	r3, [pc, #36]	; (a41c <serial2_set_tx+0x74>)
    a3f8:	2400      	movs	r4, #0
    a3fa:	601c      	str	r4, [r3, #0]
    a3fc:	e7e6      	b.n	a3cc <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a3fe:	4b08      	ldr	r3, [pc, #32]	; (a420 <serial2_set_tx+0x78>)
    a400:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a404:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    a406:	7010      	strb	r0, [r2, #0]
}
    a408:	bc10      	pop	{r4}
    a40a:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    a40c:	4b04      	ldr	r3, [pc, #16]	; (a420 <serial2_set_tx+0x78>)
    a40e:	2400      	movs	r4, #0
    a410:	611c      	str	r4, [r3, #16]
    a412:	e7db      	b.n	a3cc <serial2_set_tx+0x24>
    a414:	1fff89ec 	.word	0x1fff89ec
    a418:	40048000 	.word	0x40048000
    a41c:	4004d000 	.word	0x4004d000
    a420:	4004b000 	.word	0x4004b000

0000a424 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    a424:	4b12      	ldr	r3, [pc, #72]	; (a470 <serial2_set_rx+0x4c>)
    a426:	781a      	ldrb	r2, [r3, #0]
    a428:	4282      	cmp	r2, r0
    a42a:	d00c      	beq.n	a446 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a42c:	4911      	ldr	r1, [pc, #68]	; (a474 <serial2_set_rx+0x50>)
    a42e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    a430:	0509      	lsls	r1, r1, #20
    a432:	d507      	bpl.n	a444 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    a434:	2a09      	cmp	r2, #9
    a436:	d016      	beq.n	a466 <serial2_set_rx+0x42>
    a438:	2a1a      	cmp	r2, #26
    a43a:	d00a      	beq.n	a452 <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    a43c:	2809      	cmp	r0, #9
    a43e:	d00d      	beq.n	a45c <serial2_set_rx+0x38>
    a440:	281a      	cmp	r0, #26
    a442:	d001      	beq.n	a448 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    a444:	7018      	strb	r0, [r3, #0]
	#endif
}
    a446:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a448:	4a0b      	ldr	r2, [pc, #44]	; (a478 <serial2_set_rx+0x54>)
    a44a:	f240 3113 	movw	r1, #787	; 0x313
    a44e:	6051      	str	r1, [r2, #4]
    a450:	e7f8      	b.n	a444 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a452:	4a09      	ldr	r2, [pc, #36]	; (a478 <serial2_set_rx+0x54>)
    a454:	2100      	movs	r1, #0
		switch (pin) {
    a456:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a458:	6051      	str	r1, [r2, #4]
		switch (pin) {
    a45a:	d1f1      	bne.n	a440 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a45c:	4a07      	ldr	r2, [pc, #28]	; (a47c <serial2_set_rx+0x58>)
    a45e:	f240 3113 	movw	r1, #787	; 0x313
    a462:	60d1      	str	r1, [r2, #12]
    a464:	e7ee      	b.n	a444 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    a466:	4a05      	ldr	r2, [pc, #20]	; (a47c <serial2_set_rx+0x58>)
    a468:	2100      	movs	r1, #0
    a46a:	60d1      	str	r1, [r2, #12]
    a46c:	e7e6      	b.n	a43c <serial2_set_rx+0x18>
    a46e:	bf00      	nop
    a470:	1fff89e4 	.word	0x1fff89e4
    a474:	40048000 	.word	0x40048000
    a478:	4004d000 	.word	0x4004d000
    a47c:	4004b000 	.word	0x4004b000

0000a480 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a480:	4b0d      	ldr	r3, [pc, #52]	; (a4b8 <serial2_set_rts+0x38>)
    a482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a484:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a488:	d013      	beq.n	a4b2 <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a48a:	2821      	cmp	r0, #33	; 0x21
    a48c:	d903      	bls.n	a496 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    a48e:	4b0b      	ldr	r3, [pc, #44]	; (a4bc <serial2_set_rts+0x3c>)
    a490:	2000      	movs	r0, #0
    a492:	6018      	str	r0, [r3, #0]
		return 0;
    a494:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a496:	4b0a      	ldr	r3, [pc, #40]	; (a4c0 <serial2_set_rts+0x40>)
{
    a498:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a49a:	4c08      	ldr	r4, [pc, #32]	; (a4bc <serial2_set_rts+0x3c>)
    a49c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a4a0:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    a4a2:	2101      	movs	r1, #1
    a4a4:	f7ff fd98 	bl	9fd8 <pinMode>
		rts_assert();
    a4a8:	6823      	ldr	r3, [r4, #0]
    a4aa:	2200      	movs	r2, #0
    a4ac:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    a4ae:	2001      	movs	r0, #1
}
    a4b0:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a4b2:	4618      	mov	r0, r3
}
    a4b4:	4770      	bx	lr
    a4b6:	bf00      	nop
    a4b8:	40048000 	.word	0x40048000
    a4bc:	1fffd0e8 	.word	0x1fffd0e8
    a4c0:	00015088 	.word	0x00015088

0000a4c4 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a4c4:	4b0c      	ldr	r3, [pc, #48]	; (a4f8 <serial2_set_cts+0x34>)
    a4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a4c8:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a4cc:	d012      	beq.n	a4f4 <serial2_set_cts+0x30>
	if (pin == 23) {
    a4ce:	2817      	cmp	r0, #23
    a4d0:	d109      	bne.n	a4e6 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a4d2:	4b0a      	ldr	r3, [pc, #40]	; (a4fc <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a4d4:	4a0a      	ldr	r2, [pc, #40]	; (a500 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a4d6:	f240 3102 	movw	r1, #770	; 0x302
    a4da:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a4dc:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    a4de:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a4e0:	4303      	orrs	r3, r0
    a4e2:	7353      	strb	r3, [r2, #13]
	return 1;
    a4e4:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a4e6:	4a06      	ldr	r2, [pc, #24]	; (a500 <serial2_set_cts+0x3c>)
    a4e8:	7b53      	ldrb	r3, [r2, #13]
    a4ea:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    a4ee:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a4f0:	7353      	strb	r3, [r2, #13]
		return 0;
    a4f2:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a4f4:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    a4f6:	4770      	bx	lr
    a4f8:	40048000 	.word	0x40048000
    a4fc:	4004b000 	.word	0x4004b000
    a500:	4006b000 	.word	0x4006b000

0000a504 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    a504:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a508:	4b33      	ldr	r3, [pc, #204]	; (a5d8 <serial2_putchar+0xd4>)
    a50a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a50c:	051a      	lsls	r2, r3, #20
    a50e:	d53a      	bpl.n	a586 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    a510:	4b32      	ldr	r3, [pc, #200]	; (a5dc <serial2_putchar+0xd8>)
    a512:	681b      	ldr	r3, [r3, #0]
    a514:	4606      	mov	r6, r0
    a516:	b10b      	cbz	r3, a51c <serial2_putchar+0x18>
    a518:	2201      	movs	r2, #1
    a51a:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    a51c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; a5e0 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    a520:	f8df 80c0 	ldr.w	r8, [pc, #192]	; a5e4 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    a524:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    a528:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    a52c:	4d2e      	ldr	r5, [pc, #184]	; (a5e8 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    a52e:	3401      	adds	r4, #1
    a530:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    a532:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    a534:	d929      	bls.n	a58a <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    a536:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    a538:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    a53c:	d114      	bne.n	a568 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a53e:	4f2b      	ldr	r7, [pc, #172]	; (a5ec <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    a540:	f8df b0ac 	ldr.w	fp, [pc, #172]	; a5f0 <serial2_putchar+0xec>
    a544:	e005      	b.n	a552 <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a546:	793b      	ldrb	r3, [r7, #4]
    a548:	061b      	lsls	r3, r3, #24
    a54a:	d423      	bmi.n	a594 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    a54c:	782b      	ldrb	r3, [r5, #0]
    a54e:	42a3      	cmp	r3, r4
    a550:	d10a      	bne.n	a568 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    a552:	f7ff fa47 	bl	99e4 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    a556:	2840      	cmp	r0, #64	; 0x40
    a558:	ddf5      	ble.n	a546 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    a55a:	28ff      	cmp	r0, #255	; 0xff
    a55c:	ddf6      	ble.n	a54c <serial2_putchar+0x48>
			yield(); // wait
    a55e:	f001 fc7f 	bl	be60 <yield>
	while (tx_buffer_tail == head) {
    a562:	782b      	ldrb	r3, [r5, #0]
    a564:	42a3      	cmp	r3, r4
    a566:	d0f4      	beq.n	a552 <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    a568:	2c27      	cmp	r4, #39	; 0x27
    a56a:	d929      	bls.n	a5c0 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    a56c:	4b21      	ldr	r3, [pc, #132]	; (a5f4 <serial2_putchar+0xf0>)
    a56e:	3c28      	subs	r4, #40	; 0x28
    a570:	681b      	ldr	r3, [r3, #0]
    a572:	b2f6      	uxtb	r6, r6
    a574:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    a576:	4a20      	ldr	r2, [pc, #128]	; (a5f8 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    a578:	4b1c      	ldr	r3, [pc, #112]	; (a5ec <serial2_putchar+0xe8>)
	transmitting = 1;
    a57a:	2101      	movs	r1, #1
    a57c:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    a57e:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    a580:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    a584:	70da      	strb	r2, [r3, #3]
}
    a586:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    a58a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    a58e:	b9a3      	cbnz	r3, a5ba <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    a590:	4654      	mov	r4, sl
    a592:	e7d4      	b.n	a53e <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    a594:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a596:	f8d8 1000 	ldr.w	r1, [r8]
    a59a:	1c5a      	adds	r2, r3, #1
    a59c:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    a59e:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a5a0:	d908      	bls.n	a5b4 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a5a2:	2a27      	cmp	r2, #39	; 0x27
    a5a4:	d810      	bhi.n	a5c8 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    a5a6:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    a5a8:	f81b 3002 	ldrb.w	r3, [fp, r2]
    a5ac:	b2db      	uxtb	r3, r3
				UART1_D = n;
    a5ae:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    a5b0:	7029      	strb	r1, [r5, #0]
    a5b2:	e7cb      	b.n	a54c <serial2_putchar+0x48>
    a5b4:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a5b6:	460a      	mov	r2, r1
    a5b8:	e7f6      	b.n	a5a8 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    a5ba:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    a5be:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    a5c0:	4b0b      	ldr	r3, [pc, #44]	; (a5f0 <serial2_putchar+0xec>)
    a5c2:	b2f6      	uxtb	r6, r6
    a5c4:	551e      	strb	r6, [r3, r4]
    a5c6:	e7d6      	b.n	a576 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    a5c8:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a5ca:	4a0a      	ldr	r2, [pc, #40]	; (a5f4 <serial2_putchar+0xf0>)
    a5cc:	3b27      	subs	r3, #39	; 0x27
    a5ce:	6812      	ldr	r2, [r2, #0]
    a5d0:	5cd3      	ldrb	r3, [r2, r3]
    a5d2:	b2db      	uxtb	r3, r3
    a5d4:	e7eb      	b.n	a5ae <serial2_putchar+0xaa>
    a5d6:	bf00      	nop
    a5d8:	40048000 	.word	0x40048000
    a5dc:	1fffd138 	.word	0x1fffd138
    a5e0:	1fffd168 	.word	0x1fffd168
    a5e4:	1fff89e8 	.word	0x1fff89e8
    a5e8:	1fffd170 	.word	0x1fffd170
    a5ec:	4006b000 	.word	0x4006b000
    a5f0:	1fffd140 	.word	0x1fffd140
    a5f4:	1fffd16c 	.word	0x1fffd16c
    a5f8:	1fffd13c 	.word	0x1fffd13c

0000a5fc <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    a5fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a600:	4b39      	ldr	r3, [pc, #228]	; (a6e8 <serial2_write+0xec>)
    a602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a604:	051a      	lsls	r2, r3, #20
    a606:	d53c      	bpl.n	a682 <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    a608:	4b38      	ldr	r3, [pc, #224]	; (a6ec <serial2_write+0xf0>)
    a60a:	681b      	ldr	r3, [r3, #0]
    a60c:	b10b      	cbz	r3, a612 <serial2_write+0x16>
    a60e:	2201      	movs	r2, #1
    a610:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    a612:	1847      	adds	r7, r0, r1
	while (p < end) {
    a614:	42b8      	cmp	r0, r7
    a616:	d231      	bcs.n	a67c <serial2_write+0x80>
    a618:	4e35      	ldr	r6, [pc, #212]	; (a6f0 <serial2_write+0xf4>)
    a61a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; a6f4 <serial2_write+0xf8>
    a61e:	4c36      	ldr	r4, [pc, #216]	; (a6f8 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    a620:	f8df 90d8 	ldr.w	r9, [pc, #216]	; a6fc <serial2_write+0x100>
    a624:	f100 0a01 	add.w	sl, r0, #1
    a628:	e013      	b.n	a652 <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    a62a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    a62e:	b353      	cbz	r3, a686 <serial2_write+0x8a>
    a630:	f04f 0b00 	mov.w	fp, #0
    a634:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    a636:	4a32      	ldr	r2, [pc, #200]	; (a700 <serial2_write+0x104>)
    a638:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    a63c:	5553      	strb	r3, [r2, r5]
    a63e:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    a640:	4930      	ldr	r1, [pc, #192]	; (a704 <serial2_write+0x108>)
    a642:	2301      	movs	r3, #1
	while (p < end) {
    a644:	42ba      	cmp	r2, r7
		transmitting = 1;
    a646:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    a648:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    a64c:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    a650:	d214      	bcs.n	a67c <serial2_write+0x80>
		head = tx_buffer_head;
    a652:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    a654:	f8d8 3000 	ldr.w	r3, [r8]
    a658:	3501      	adds	r5, #1
    a65a:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    a65c:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    a65e:	d9e4      	bls.n	a62a <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    a660:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    a662:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    a666:	d00f      	beq.n	a688 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    a668:	2d27      	cmp	r5, #39	; 0x27
    a66a:	d9e4      	bls.n	a636 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    a66c:	4b26      	ldr	r3, [pc, #152]	; (a708 <serial2_write+0x10c>)
    a66e:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    a672:	681b      	ldr	r3, [r3, #0]
    a674:	3d28      	subs	r5, #40	; 0x28
    a676:	555a      	strb	r2, [r3, r5]
    a678:	4652      	mov	r2, sl
    a67a:	e7e1      	b.n	a640 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    a67c:	4b1f      	ldr	r3, [pc, #124]	; (a6fc <serial2_write+0x100>)
    a67e:	22bc      	movs	r2, #188	; 0xbc
    a680:	70da      	strb	r2, [r3, #3]
}
    a682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    a686:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    a688:	f06f 0343 	mvn.w	r3, #67	; 0x43
    a68c:	f889 3003 	strb.w	r3, [r9, #3]
    a690:	e006      	b.n	a6a0 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    a692:	f899 3004 	ldrb.w	r3, [r9, #4]
    a696:	061b      	lsls	r3, r3, #24
    a698:	d40b      	bmi.n	a6b2 <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    a69a:	7823      	ldrb	r3, [r4, #0]
    a69c:	42ab      	cmp	r3, r5
    a69e:	d1e3      	bne.n	a668 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    a6a0:	f7ff f9a0 	bl	99e4 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    a6a4:	2840      	cmp	r0, #64	; 0x40
    a6a6:	ddf4      	ble.n	a692 <serial2_write+0x96>
				} else if (priority >= 256) {
    a6a8:	28ff      	cmp	r0, #255	; 0xff
    a6aa:	ddf6      	ble.n	a69a <serial2_write+0x9e>
					yield();
    a6ac:	f001 fbd8 	bl	be60 <yield>
    a6b0:	e7f3      	b.n	a69a <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    a6b2:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a6b4:	f8d8 1000 	ldr.w	r1, [r8]
    a6b8:	1c5a      	adds	r2, r3, #1
    a6ba:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    a6bc:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a6be:	d903      	bls.n	a6c8 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a6c0:	2a27      	cmp	r2, #39	; 0x27
    a6c2:	d80a      	bhi.n	a6da <serial2_write+0xde>
						tx_buffer_tail = tail;
    a6c4:	b2d1      	uxtb	r1, r2
    a6c6:	e001      	b.n	a6cc <serial2_write+0xd0>
    a6c8:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    a6ca:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    a6cc:	4b0c      	ldr	r3, [pc, #48]	; (a700 <serial2_write+0x104>)
    a6ce:	5c9b      	ldrb	r3, [r3, r2]
    a6d0:	b2db      	uxtb	r3, r3
						UART1_D = n;
    a6d2:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    a6d6:	7021      	strb	r1, [r4, #0]
    a6d8:	e7df      	b.n	a69a <serial2_write+0x9e>
    a6da:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a6dc:	4a0a      	ldr	r2, [pc, #40]	; (a708 <serial2_write+0x10c>)
    a6de:	3b27      	subs	r3, #39	; 0x27
    a6e0:	6812      	ldr	r2, [r2, #0]
    a6e2:	5cd3      	ldrb	r3, [r2, r3]
    a6e4:	b2db      	uxtb	r3, r3
    a6e6:	e7f4      	b.n	a6d2 <serial2_write+0xd6>
    a6e8:	40048000 	.word	0x40048000
    a6ec:	1fffd138 	.word	0x1fffd138
    a6f0:	1fffd168 	.word	0x1fffd168
    a6f4:	1fff89e8 	.word	0x1fff89e8
    a6f8:	1fffd170 	.word	0x1fffd170
    a6fc:	4006b000 	.word	0x4006b000
    a700:	1fffd140 	.word	0x1fffd140
    a704:	1fffd13c 	.word	0x1fffd13c
    a708:	1fffd16c 	.word	0x1fffd16c

0000a70c <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    a70c:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    a70e:	4c04      	ldr	r4, [pc, #16]	; (a720 <serial2_flush+0x14>)
    a710:	7823      	ldrb	r3, [r4, #0]
    a712:	b123      	cbz	r3, a71e <serial2_flush+0x12>
    a714:	f001 fba4 	bl	be60 <yield>
    a718:	7823      	ldrb	r3, [r4, #0]
    a71a:	2b00      	cmp	r3, #0
    a71c:	d1fa      	bne.n	a714 <serial2_flush+0x8>
}
    a71e:	bd10      	pop	{r4, pc}
    a720:	1fffd13c 	.word	0x1fffd13c

0000a724 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    a724:	4a08      	ldr	r2, [pc, #32]	; (a748 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    a726:	4b09      	ldr	r3, [pc, #36]	; (a74c <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    a728:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    a72a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a72c:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    a72e:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    a730:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a732:	d202      	bcs.n	a73a <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    a734:	3b01      	subs	r3, #1
    a736:	1a18      	subs	r0, r3, r0
}
    a738:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    a73a:	4a05      	ldr	r2, [pc, #20]	; (a750 <serial2_write_buffer_free+0x2c>)
    a73c:	6812      	ldr	r2, [r2, #0]
    a73e:	3a01      	subs	r2, #1
    a740:	4413      	add	r3, r2
    a742:	1a18      	subs	r0, r3, r0
    a744:	4770      	bx	lr
    a746:	bf00      	nop
    a748:	1fffd168 	.word	0x1fffd168
    a74c:	1fffd170 	.word	0x1fffd170
    a750:	1fff89e8 	.word	0x1fff89e8

0000a754 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a754:	4a06      	ldr	r2, [pc, #24]	; (a770 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    a756:	4b07      	ldr	r3, [pc, #28]	; (a774 <serial2_available+0x20>)
	head = rx_buffer_head;
    a758:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a75a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    a75c:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    a75e:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    a760:	bf3c      	itt	cc
    a762:	4a05      	ldrcc	r2, [pc, #20]	; (a778 <serial2_available+0x24>)
    a764:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    a766:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    a768:	bf38      	it	cc
    a76a:	189b      	addcc	r3, r3, r2
    a76c:	1a18      	subs	r0, r3, r0
}
    a76e:	4770      	bx	lr
    a770:	1fffd12c 	.word	0x1fffd12c
    a774:	1fffd134 	.word	0x1fffd134
    a778:	1fff89e0 	.word	0x1fff89e0

0000a77c <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    a77c:	4b1b      	ldr	r3, [pc, #108]	; (a7ec <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    a77e:	491c      	ldr	r1, [pc, #112]	; (a7f0 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    a780:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    a782:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    a784:	429a      	cmp	r2, r3
    a786:	d02e      	beq.n	a7e6 <serial2_getchar+0x6a>
{
    a788:	b510      	push	{r4, lr}
    a78a:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a78e:	4a19      	ldr	r2, [pc, #100]	; (a7f4 <serial2_getchar+0x78>)
    a790:	b2d8      	uxtb	r0, r3
    a792:	6812      	ldr	r2, [r2, #0]
    a794:	1c43      	adds	r3, r0, #1
    a796:	429a      	cmp	r2, r3
    a798:	d919      	bls.n	a7ce <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    a79a:	2b3f      	cmp	r3, #63	; 0x3f
    a79c:	d81b      	bhi.n	a7d6 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    a79e:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    a7a2:	4815      	ldr	r0, [pc, #84]	; (a7f8 <serial2_getchar+0x7c>)
    a7a4:	5cc0      	ldrb	r0, [r0, r3]
    a7a6:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    a7a8:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    a7ac:	4913      	ldr	r1, [pc, #76]	; (a7fc <serial2_getchar+0x80>)
    a7ae:	6809      	ldr	r1, [r1, #0]
    a7b0:	b161      	cbz	r1, a7cc <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    a7b2:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    a7b4:	bf3c      	itt	cc
    a7b6:	4472      	addcc	r2, lr
    a7b8:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a7ba:	4a11      	ldr	r2, [pc, #68]	; (a800 <serial2_getchar+0x84>)
    a7bc:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    a7be:	bf28      	it	cs
    a7c0:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    a7c4:	429a      	cmp	r2, r3
    a7c6:	d301      	bcc.n	a7cc <serial2_getchar+0x50>
    a7c8:	2300      	movs	r3, #0
    a7ca:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    a7cc:	bd10      	pop	{r4, pc}
    a7ce:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a7d2:	4663      	mov	r3, ip
    a7d4:	e7e5      	b.n	a7a2 <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    a7d6:	4c0b      	ldr	r4, [pc, #44]	; (a804 <serial2_getchar+0x88>)
    a7d8:	383f      	subs	r0, #63	; 0x3f
    a7da:	6824      	ldr	r4, [r4, #0]
    a7dc:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    a7de:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    a7e2:	b2c0      	uxtb	r0, r0
    a7e4:	e7e0      	b.n	a7a8 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    a7e6:	f04f 30ff 	mov.w	r0, #4294967295
}
    a7ea:	4770      	bx	lr
    a7ec:	1fffd12c 	.word	0x1fffd12c
    a7f0:	1fffd134 	.word	0x1fffd134
    a7f4:	1fff89e0 	.word	0x1fff89e0
    a7f8:	1fffd0ec 	.word	0x1fffd0ec
    a7fc:	1fffd0e8 	.word	0x1fffd0e8
    a800:	1fff89dc 	.word	0x1fff89dc
    a804:	1fffd130 	.word	0x1fffd130

0000a808 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    a808:	4a0d      	ldr	r2, [pc, #52]	; (a840 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    a80a:	4b0e      	ldr	r3, [pc, #56]	; (a844 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    a80c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    a80e:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    a810:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    a812:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    a814:	d011      	beq.n	a83a <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a816:	490c      	ldr	r1, [pc, #48]	; (a848 <serial2_peek+0x40>)
    a818:	6809      	ldr	r1, [r1, #0]
    a81a:	1c53      	adds	r3, r2, #1
    a81c:	4299      	cmp	r1, r3
    a81e:	d907      	bls.n	a830 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    a820:	2b3f      	cmp	r3, #63	; 0x3f
    a822:	d906      	bls.n	a832 <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    a824:	4b09      	ldr	r3, [pc, #36]	; (a84c <serial2_peek+0x44>)
    a826:	3a3f      	subs	r2, #63	; 0x3f
    a828:	681b      	ldr	r3, [r3, #0]
    a82a:	5c98      	ldrb	r0, [r3, r2]
    a82c:	b2c0      	uxtb	r0, r0
    a82e:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    a830:	2300      	movs	r3, #0
		return rx_buffer[tail];
    a832:	4a07      	ldr	r2, [pc, #28]	; (a850 <serial2_peek+0x48>)
    a834:	5cd0      	ldrb	r0, [r2, r3]
    a836:	b2c0      	uxtb	r0, r0
    a838:	4770      	bx	lr
	if (head == tail) return -1;
    a83a:	f04f 30ff 	mov.w	r0, #4294967295
}
    a83e:	4770      	bx	lr
    a840:	1fffd12c 	.word	0x1fffd12c
    a844:	1fffd134 	.word	0x1fffd134
    a848:	1fff89e0 	.word	0x1fff89e0
    a84c:	1fffd130 	.word	0x1fffd130
    a850:	1fffd0ec 	.word	0x1fffd0ec

0000a854 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a854:	4b0c      	ldr	r3, [pc, #48]	; (a888 <serial2_clear+0x34>)
    a856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a858:	051b      	lsls	r3, r3, #20
    a85a:	d514      	bpl.n	a886 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    a85c:	4b0b      	ldr	r3, [pc, #44]	; (a88c <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    a85e:	480c      	ldr	r0, [pc, #48]	; (a890 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    a860:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a862:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    a864:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    a868:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a86a:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    a86c:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    a86e:	4909      	ldr	r1, [pc, #36]	; (a894 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    a870:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    a874:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    a876:	4a08      	ldr	r2, [pc, #32]	; (a898 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    a878:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    a87a:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    a87c:	b2db      	uxtb	r3, r3
    a87e:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    a880:	b10a      	cbz	r2, a886 <serial2_clear+0x32>
    a882:	2300      	movs	r3, #0
    a884:	7013      	strb	r3, [r2, #0]
}
    a886:	4770      	bx	lr
    a888:	40048000 	.word	0x40048000
    a88c:	4006b000 	.word	0x4006b000
    a890:	1fffd134 	.word	0x1fffd134
    a894:	1fffd12c 	.word	0x1fffd12c
    a898:	1fffd0e8 	.word	0x1fffd0e8

0000a89c <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    a89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    a8a0:	4c50      	ldr	r4, [pc, #320]	; (a9e4 <uart1_status_isr+0x148>)
    a8a2:	7923      	ldrb	r3, [r4, #4]
    a8a4:	f013 0f30 	tst.w	r3, #48	; 0x30
    a8a8:	d047      	beq.n	a93a <uart1_status_isr+0x9e>
		__disable_irq();
    a8aa:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    a8ac:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    a8ae:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    a8b2:	2b00      	cmp	r3, #0
    a8b4:	d058      	beq.n	a968 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    a8b6:	b662      	cpsie	i
			head = rx_buffer_head;
    a8b8:	f8df 812c 	ldr.w	r8, [pc, #300]	; a9e8 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    a8bc:	484b      	ldr	r0, [pc, #300]	; (a9ec <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    a8be:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a8c2:	4a4b      	ldr	r2, [pc, #300]	; (a9f0 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    a8c4:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a8c6:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    a8c8:	4f4a      	ldr	r7, [pc, #296]	; (a9f4 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    a8ca:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a8ce:	4b4a      	ldr	r3, [pc, #296]	; (a9f8 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    a8d0:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a8d2:	f8d3 e000 	ldr.w	lr, [r3]
    a8d6:	e008      	b.n	a8ea <uart1_status_isr+0x4e>
				if (newhead != tail) {
    a8d8:	b11d      	cbz	r5, a8e2 <uart1_status_isr+0x46>
    a8da:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    a8de:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    a8e2:	1e4a      	subs	r2, r1, #1
    a8e4:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    a8e8:	d012      	beq.n	a910 <uart1_status_isr+0x74>
					n = UART1_D;
    a8ea:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    a8ec:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a8f0:	4296      	cmp	r6, r2
					n = UART1_D;
    a8f2:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    a8f4:	d9f0      	bls.n	a8d8 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    a8f6:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a8f8:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    a8fc:	d0f1      	beq.n	a8e2 <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    a8fe:	2a3f      	cmp	r2, #63	; 0x3f
    a900:	d96d      	bls.n	a9de <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a902:	4694      	mov	ip, r2
			} while (--avail > 0);
    a904:	1e4a      	subs	r2, r1, #1
    a906:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    a90a:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    a90e:	d1ec      	bne.n	a8ea <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    a910:	fa5f f38c 	uxtb.w	r3, ip
    a914:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    a918:	4b38      	ldr	r3, [pc, #224]	; (a9fc <uart1_status_isr+0x160>)
    a91a:	6819      	ldr	r1, [r3, #0]
    a91c:	b169      	cbz	r1, a93a <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    a91e:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    a920:	bf3c      	itt	cc
    a922:	1b72      	subcc	r2, r6, r5
    a924:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    a928:	4a35      	ldr	r2, [pc, #212]	; (aa00 <uart1_status_isr+0x164>)
    a92a:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    a92c:	bf28      	it	cs
    a92e:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    a932:	429a      	cmp	r2, r3
    a934:	bf9c      	itt	ls
    a936:	2301      	movls	r3, #1
    a938:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    a93a:	482a      	ldr	r0, [pc, #168]	; (a9e4 <uart1_status_isr+0x148>)
    a93c:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a93e:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    a940:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a942:	d416      	bmi.n	a972 <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    a944:	066a      	lsls	r2, r5, #25
    a946:	d50d      	bpl.n	a964 <uart1_status_isr+0xc8>
    a948:	4b26      	ldr	r3, [pc, #152]	; (a9e4 <uart1_status_isr+0x148>)
    a94a:	791b      	ldrb	r3, [r3, #4]
    a94c:	065b      	lsls	r3, r3, #25
    a94e:	d509      	bpl.n	a964 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    a950:	4b2c      	ldr	r3, [pc, #176]	; (aa04 <uart1_status_isr+0x168>)
		transmitting = 0;
    a952:	492d      	ldr	r1, [pc, #180]	; (aa08 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    a954:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    a956:	2200      	movs	r2, #0
    a958:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    a95a:	b103      	cbz	r3, a95e <uart1_status_isr+0xc2>
    a95c:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    a95e:	4b21      	ldr	r3, [pc, #132]	; (a9e4 <uart1_status_isr+0x148>)
    a960:	223c      	movs	r2, #60	; 0x3c
    a962:	70da      	strb	r2, [r3, #3]
	}
}
    a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a968:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    a96a:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    a96c:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    a96e:	b662      	cpsie	i
    a970:	e7e3      	b.n	a93a <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    a972:	7903      	ldrb	r3, [r0, #4]
    a974:	061c      	lsls	r4, r3, #24
    a976:	d5e5      	bpl.n	a944 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    a978:	4b24      	ldr	r3, [pc, #144]	; (aa0c <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a97a:	4a25      	ldr	r2, [pc, #148]	; (aa10 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    a97c:	f8df e094 	ldr.w	lr, [pc, #148]	; aa14 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    a980:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a982:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    a984:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a988:	4a23      	ldr	r2, [pc, #140]	; (aa18 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    a98a:	4f24      	ldr	r7, [pc, #144]	; (aa1c <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a98c:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    a990:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    a992:	b2db      	uxtb	r3, r3
    a994:	e007      	b.n	a9a6 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    a996:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a998:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    a99a:	5cfa      	ldrb	r2, [r7, r3]
    a99c:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    a99e:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    a9a0:	7d02      	ldrb	r2, [r0, #20]
    a9a2:	2a07      	cmp	r2, #7
    a9a4:	d811      	bhi.n	a9ca <uart1_status_isr+0x12e>
			if (tail == head) break;
    a9a6:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a9a8:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    a9ac:	d00e      	beq.n	a9cc <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    a9ae:	428e      	cmp	r6, r1
    a9b0:	d9f1      	bls.n	a996 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a9b2:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    a9b4:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a9b6:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a9ba:	d801      	bhi.n	a9c0 <uart1_status_isr+0x124>
    a9bc:	460b      	mov	r3, r1
    a9be:	e7ec      	b.n	a99a <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a9c0:	f81c 2003 	ldrb.w	r2, [ip, r3]
    a9c4:	460b      	mov	r3, r1
    a9c6:	b2d2      	uxtb	r2, r2
    a9c8:	e7e9      	b.n	a99e <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    a9ca:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9cc:	4b05      	ldr	r3, [pc, #20]	; (a9e4 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    a9ce:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    a9d2:	791a      	ldrb	r2, [r3, #4]
    a9d4:	0611      	lsls	r1, r2, #24
    a9d6:	bf44      	itt	mi
    a9d8:	227c      	movmi	r2, #124	; 0x7c
    a9da:	70da      	strbmi	r2, [r3, #3]
    a9dc:	e7b2      	b.n	a944 <uart1_status_isr+0xa8>
    a9de:	4694      	mov	ip, r2
    a9e0:	e77d      	b.n	a8de <uart1_status_isr+0x42>
    a9e2:	bf00      	nop
    a9e4:	4006b000 	.word	0x4006b000
    a9e8:	1fffd12c 	.word	0x1fffd12c
    a9ec:	1fffd134 	.word	0x1fffd134
    a9f0:	1fff89e0 	.word	0x1fff89e0
    a9f4:	1fffd0ec 	.word	0x1fffd0ec
    a9f8:	1fffd130 	.word	0x1fffd130
    a9fc:	1fffd0e8 	.word	0x1fffd0e8
    aa00:	1fff89d8 	.word	0x1fff89d8
    aa04:	1fffd138 	.word	0x1fffd138
    aa08:	1fffd13c 	.word	0x1fffd13c
    aa0c:	1fffd168 	.word	0x1fffd168
    aa10:	1fff89e8 	.word	0x1fff89e8
    aa14:	1fffd170 	.word	0x1fffd170
    aa18:	1fffd16c 	.word	0x1fffd16c
    aa1c:	1fffd140 	.word	0x1fffd140

0000aa20 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    aa20:	4b09      	ldr	r3, [pc, #36]	; (aa48 <serial2_add_memory_for_read+0x28>)
{
    aa22:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    aa24:	6018      	str	r0, [r3, #0]
	if (buffer) {
    aa26:	b160      	cbz	r0, aa42 <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    aa28:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    aa2c:	4b07      	ldr	r3, [pc, #28]	; (aa4c <serial2_add_memory_for_read+0x2c>)
    aa2e:	4808      	ldr	r0, [pc, #32]	; (aa50 <serial2_add_memory_for_read+0x30>)
    aa30:	f101 021a 	add.w	r2, r1, #26
    aa34:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    aa36:	4b07      	ldr	r3, [pc, #28]	; (aa54 <serial2_add_memory_for_read+0x34>)
    aa38:	6004      	str	r4, [r0, #0]
    aa3a:	3128      	adds	r1, #40	; 0x28
}
    aa3c:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    aa3e:	6019      	str	r1, [r3, #0]
}
    aa40:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    aa42:	2440      	movs	r4, #64	; 0x40
    aa44:	e7f2      	b.n	aa2c <serial2_add_memory_for_read+0xc>
    aa46:	bf00      	nop
    aa48:	1fffd130 	.word	0x1fffd130
    aa4c:	1fff89dc 	.word	0x1fff89dc
    aa50:	1fff89e0 	.word	0x1fff89e0
    aa54:	1fff89d8 	.word	0x1fff89d8

0000aa58 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    aa58:	4b05      	ldr	r3, [pc, #20]	; (aa70 <serial2_add_memory_for_write+0x18>)
    aa5a:	6018      	str	r0, [r3, #0]
	if (buffer) {
    aa5c:	b118      	cbz	r0, aa66 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    aa5e:	4b05      	ldr	r3, [pc, #20]	; (aa74 <serial2_add_memory_for_write+0x1c>)
    aa60:	3128      	adds	r1, #40	; 0x28
    aa62:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    aa64:	4770      	bx	lr
    aa66:	4b03      	ldr	r3, [pc, #12]	; (aa74 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    aa68:	2128      	movs	r1, #40	; 0x28
    aa6a:	6019      	str	r1, [r3, #0]
}
    aa6c:	4770      	bx	lr
    aa6e:	bf00      	nop
    aa70:	1fffd16c 	.word	0x1fffd16c
    aa74:	1fff89e8 	.word	0x1fff89e8

0000aa78 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    aa78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    aa7c:	4b31      	ldr	r3, [pc, #196]	; (ab44 <serial3_putchar.part.0+0xcc>)
    aa7e:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    aa80:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    aa82:	b10b      	cbz	r3, aa88 <serial3_putchar.part.0+0x10>
    aa84:	2201      	movs	r2, #1
    aa86:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    aa88:	f8df 90bc 	ldr.w	r9, [pc, #188]	; ab48 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    aa8c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; ab4c <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    aa90:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    aa94:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    aa98:	4d2d      	ldr	r5, [pc, #180]	; (ab50 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    aa9a:	3401      	adds	r4, #1
    aa9c:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    aa9e:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    aaa0:	d32a      	bcc.n	aaf8 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    aaa2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d13e      	bne.n	ab28 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    aaaa:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    aaac:	4e29      	ldr	r6, [pc, #164]	; (ab54 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    aaae:	f8df b0a8 	ldr.w	fp, [pc, #168]	; ab58 <serial3_putchar.part.0+0xe0>
    aab2:	e005      	b.n	aac0 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    aab4:	7933      	ldrb	r3, [r6, #4]
    aab6:	061b      	lsls	r3, r3, #24
    aab8:	d423      	bmi.n	ab02 <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    aaba:	782b      	ldrb	r3, [r5, #0]
    aabc:	42a3      	cmp	r3, r4
    aabe:	d10a      	bne.n	aad6 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    aac0:	f7fe ff90 	bl	99e4 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    aac4:	2840      	cmp	r0, #64	; 0x40
    aac6:	ddf5      	ble.n	aab4 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    aac8:	28ff      	cmp	r0, #255	; 0xff
    aaca:	ddf6      	ble.n	aaba <serial3_putchar.part.0+0x42>
			yield(); // wait
    aacc:	f001 f9c8 	bl	be60 <yield>
	while (tx_buffer_tail == head) {
    aad0:	782b      	ldrb	r3, [r5, #0]
    aad2:	42a3      	cmp	r3, r4
    aad4:	d0f4      	beq.n	aac0 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    aad6:	2c27      	cmp	r4, #39	; 0x27
    aad8:	d929      	bls.n	ab2e <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    aada:	4b20      	ldr	r3, [pc, #128]	; (ab5c <serial3_putchar.part.0+0xe4>)
    aadc:	3c28      	subs	r4, #40	; 0x28
    aade:	681b      	ldr	r3, [r3, #0]
    aae0:	b2ff      	uxtb	r7, r7
    aae2:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    aae4:	4a1e      	ldr	r2, [pc, #120]	; (ab60 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    aae6:	4b1b      	ldr	r3, [pc, #108]	; (ab54 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    aae8:	2101      	movs	r1, #1
    aaea:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    aaec:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    aaee:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    aaf2:	70da      	strb	r2, [r3, #3]
}
    aaf4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    aaf8:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    aafa:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    aafe:	d0d5      	beq.n	aaac <serial3_putchar.part.0+0x34>
    ab00:	e7e9      	b.n	aad6 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    ab02:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab04:	f8d8 1000 	ldr.w	r1, [r8]
    ab08:	1c5a      	adds	r2, r3, #1
    ab0a:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    ab0c:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab0e:	d203      	bcs.n	ab18 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    ab10:	2a27      	cmp	r2, #39	; 0x27
    ab12:	d810      	bhi.n	ab36 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    ab14:	b2d1      	uxtb	r1, r2
    ab16:	e001      	b.n	ab1c <serial3_putchar.part.0+0xa4>
    ab18:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab1a:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    ab1c:	f81b 3002 	ldrb.w	r3, [fp, r2]
    ab20:	b2db      	uxtb	r3, r3
				UART2_D = n;
    ab22:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    ab24:	7029      	strb	r1, [r5, #0]
    ab26:	e7c8      	b.n	aaba <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    ab28:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    ab2c:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    ab2e:	4b0a      	ldr	r3, [pc, #40]	; (ab58 <serial3_putchar.part.0+0xe0>)
    ab30:	b2ff      	uxtb	r7, r7
    ab32:	551f      	strb	r7, [r3, r4]
    ab34:	e7d6      	b.n	aae4 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    ab36:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    ab38:	4a08      	ldr	r2, [pc, #32]	; (ab5c <serial3_putchar.part.0+0xe4>)
    ab3a:	3b27      	subs	r3, #39	; 0x27
    ab3c:	6812      	ldr	r2, [r2, #0]
    ab3e:	5cd3      	ldrb	r3, [r2, r3]
    ab40:	b2db      	uxtb	r3, r3
    ab42:	e7ee      	b.n	ab22 <serial3_putchar.part.0+0xaa>
    ab44:	1fffd1c4 	.word	0x1fffd1c4
    ab48:	1fffd1f4 	.word	0x1fffd1f4
    ab4c:	1fff89fc 	.word	0x1fff89fc
    ab50:	1fffd1fc 	.word	0x1fffd1fc
    ab54:	4006c000 	.word	0x4006c000
    ab58:	1fffd1cc 	.word	0x1fffd1cc
    ab5c:	1fffd1f8 	.word	0x1fffd1f8
    ab60:	1fffd1c8 	.word	0x1fffd1c8

0000ab64 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ab64:	4a1d      	ldr	r2, [pc, #116]	; (abdc <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    ab66:	491e      	ldr	r1, [pc, #120]	; (abe0 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ab68:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    ab6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ab6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    ab72:	4d1c      	ldr	r5, [pc, #112]	; (abe4 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    ab74:	f8df 8070 	ldr.w	r8, [pc, #112]	; abe8 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    ab78:	f8df 9070 	ldr.w	r9, [pc, #112]	; abec <serial3_begin+0x88>
	tx_buffer_head = 0;
    ab7c:	4f1c      	ldr	r7, [pc, #112]	; (abf0 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    ab7e:	4e1d      	ldr	r6, [pc, #116]	; (abf4 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    ab80:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    ab82:	2300      	movs	r3, #0
    ab84:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    ab88:	2820      	cmp	r0, #32
    ab8a:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    ab8e:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    ab90:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    ab92:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    ab94:	f240 3513 	movw	r5, #787	; 0x313
    ab98:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    ab9a:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    ab9e:	bf38      	it	cc
    aba0:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    aba2:	f44f 7551 	mov.w	r5, #836	; 0x344
    aba6:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    aba8:	f3c0 3144 	ubfx	r1, r0, #13, #5
    abac:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    abae:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    abb2:	4c11      	ldr	r4, [pc, #68]	; (abf8 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    abb4:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    abb8:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    abbc:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    abbe:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    abc0:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    abc4:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    abc6:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    abc8:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    abca:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    abcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    abd0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    abd4:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    abd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    abdc:	40048000 	.word	0x40048000
    abe0:	4004c000 	.word	0x4004c000
    abe4:	1fffd1c8 	.word	0x1fffd1c8
    abe8:	1fffd1b8 	.word	0x1fffd1b8
    abec:	1fffd1c0 	.word	0x1fffd1c0
    abf0:	1fffd1f4 	.word	0x1fffd1f4
    abf4:	1fffd1fc 	.word	0x1fffd1fc
    abf8:	e000e400 	.word	0xe000e400

0000abfc <serial3_format>:
	c = UART2_C1;
    abfc:	4b21      	ldr	r3, [pc, #132]	; (ac84 <serial3_format+0x88>)
	UART2_C1 = c;
    abfe:	4921      	ldr	r1, [pc, #132]	; (ac84 <serial3_format+0x88>)
	c = UART2_C1;
    ac00:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    ac02:	f000 0203 	and.w	r2, r0, #3
    ac06:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    ac0a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ac0c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ac0e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    ac12:	bf48      	it	mi
    ac14:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ac18:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    ac1a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    ac1c:	d103      	bne.n	ac26 <serial3_format+0x2a>
    ac1e:	798b      	ldrb	r3, [r1, #6]
    ac20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ac24:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    ac26:	4b17      	ldr	r3, [pc, #92]	; (ac84 <serial3_format+0x88>)
	UART2_S2 = c;
    ac28:	4a16      	ldr	r2, [pc, #88]	; (ac84 <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    ac2a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    ac2c:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    ac2e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    ac32:	bf48      	it	mi
    ac34:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    ac38:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    ac3a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    ac3c:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    ac3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    ac42:	4a10      	ldr	r2, [pc, #64]	; (ac84 <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    ac44:	bf48      	it	mi
    ac46:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ac4a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    ac4e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    ac50:	d010      	beq.n	ac74 <serial3_format+0x78>
		c = UART2_C1;
    ac52:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ac54:	490c      	ldr	r1, [pc, #48]	; (ac88 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    ac56:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    ac5a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ac5c:	7809      	ldrb	r1, [r1, #0]
    ac5e:	4b0b      	ldr	r3, [pc, #44]	; (ac8c <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    ac60:	4a0b      	ldr	r2, [pc, #44]	; (ac90 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ac62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    ac66:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    ac6a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    ac6c:	4909      	ldr	r1, [pc, #36]	; (ac94 <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    ac6e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    ac70:	6011      	str	r1, [r2, #0]
    ac72:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    ac74:	4b06      	ldr	r3, [pc, #24]	; (ac90 <serial3_format+0x94>)
    ac76:	4a07      	ldr	r2, [pc, #28]	; (ac94 <serial3_format+0x98>)
    ac78:	6819      	ldr	r1, [r3, #0]
    ac7a:	4291      	cmp	r1, r2
    ac7c:	bf08      	it	eq
    ac7e:	6018      	streq	r0, [r3, #0]
}
    ac80:	4770      	bx	lr
    ac82:	bf00      	nop
    ac84:	4006c000 	.word	0x4006c000
    ac88:	1fff8a00 	.word	0x1fff8a00
    ac8c:	00015088 	.word	0x00015088
    ac90:	1fffd1c4 	.word	0x1fffd1c4
    ac94:	42d800d4 	.word	0x42d800d4

0000ac98 <serial3_end>:
{
    ac98:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    ac9a:	4b13      	ldr	r3, [pc, #76]	; (ace8 <serial3_end+0x50>)
    ac9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ac9e:	04db      	lsls	r3, r3, #19
    aca0:	d520      	bpl.n	ace4 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    aca2:	4c12      	ldr	r4, [pc, #72]	; (acec <serial3_end+0x54>)
    aca4:	7823      	ldrb	r3, [r4, #0]
    aca6:	b123      	cbz	r3, acb2 <serial3_end+0x1a>
    aca8:	f001 f8da 	bl	be60 <yield>
    acac:	7823      	ldrb	r3, [r4, #0]
    acae:	2b00      	cmp	r3, #0
    acb0:	d1fa      	bne.n	aca8 <serial3_end+0x10>
	UART2_C2 = 0;
    acb2:	4a0f      	ldr	r2, [pc, #60]	; (acf0 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    acb4:	490f      	ldr	r1, [pc, #60]	; (acf4 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    acb6:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    acba:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    acbc:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    acc0:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    acc4:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    acc8:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    acca:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    accc:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    acce:	490a      	ldr	r1, [pc, #40]	; (acf8 <serial3_end+0x60>)
	rx_buffer_head = 0;
    acd0:	4c0a      	ldr	r4, [pc, #40]	; (acfc <serial3_end+0x64>)
	rx_buffer_tail = 0;
    acd2:	480b      	ldr	r0, [pc, #44]	; (ad00 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    acd4:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    acd6:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    acd8:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    acda:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    acdc:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    acde:	b109      	cbz	r1, ace4 <serial3_end+0x4c>
    ace0:	2301      	movs	r3, #1
    ace2:	700b      	strb	r3, [r1, #0]
}
    ace4:	bd38      	pop	{r3, r4, r5, pc}
    ace6:	bf00      	nop
    ace8:	40048000 	.word	0x40048000
    acec:	1fffd1c8 	.word	0x1fffd1c8
    acf0:	4006c000 	.word	0x4006c000
    acf4:	4004c000 	.word	0x4004c000
    acf8:	1fffd174 	.word	0x1fffd174
    acfc:	1fffd1b8 	.word	0x1fffd1b8
    ad00:	1fffd1c0 	.word	0x1fffd1c0

0000ad04 <serial3_set_transmit_pin>:
	while (transmitting) ;
    ad04:	4a0a      	ldr	r2, [pc, #40]	; (ad30 <serial3_set_transmit_pin+0x2c>)
{
    ad06:	b538      	push	{r3, r4, r5, lr}
    ad08:	4605      	mov	r5, r0
	while (transmitting) ;
    ad0a:	7813      	ldrb	r3, [r2, #0]
    ad0c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    ad10:	2b00      	cmp	r3, #0
    ad12:	d1fa      	bne.n	ad0a <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    ad14:	2101      	movs	r1, #1
    ad16:	4628      	mov	r0, r5
    ad18:	f7ff f95e 	bl	9fd8 <pinMode>
	digitalWrite(pin, LOW);
    ad1c:	4621      	mov	r1, r4
    ad1e:	4628      	mov	r0, r5
    ad20:	f7ff f926 	bl	9f70 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    ad24:	4a03      	ldr	r2, [pc, #12]	; (ad34 <serial3_set_transmit_pin+0x30>)
    ad26:	4b04      	ldr	r3, [pc, #16]	; (ad38 <serial3_set_transmit_pin+0x34>)
    ad28:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    ad2c:	601a      	str	r2, [r3, #0]
}
    ad2e:	bd38      	pop	{r3, r4, r5, pc}
    ad30:	1fffd1c8 	.word	0x1fffd1c8
    ad34:	00015088 	.word	0x00015088
    ad38:	1fffd1c4 	.word	0x1fffd1c4

0000ad3c <serial3_set_tx>:
	if (opendrain) pin |= 128;
    ad3c:	b109      	cbz	r1, ad42 <serial3_set_tx+0x6>
    ad3e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    ad42:	4a11      	ldr	r2, [pc, #68]	; (ad88 <serial3_set_tx+0x4c>)
    ad44:	7813      	ldrb	r3, [r2, #0]
    ad46:	4283      	cmp	r3, r0
    ad48:	d016      	beq.n	ad78 <serial3_set_tx+0x3c>
{
    ad4a:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    ad4c:	4c0f      	ldr	r4, [pc, #60]	; (ad8c <serial3_set_tx+0x50>)
    ad4e:	6b64      	ldr	r4, [r4, #52]	; 0x34
    ad50:	04e4      	lsls	r4, r4, #19
    ad52:	d50e      	bpl.n	ad72 <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    ad54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ad58:	2b08      	cmp	r3, #8
    ad5a:	d102      	bne.n	ad62 <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    ad5c:	4b0c      	ldr	r3, [pc, #48]	; (ad90 <serial3_set_tx+0x54>)
    ad5e:	2400      	movs	r4, #0
    ad60:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    ad62:	2900      	cmp	r1, #0
		switch (pin & 127) {
    ad64:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    ad68:	bf14      	ite	ne
    ad6a:	2160      	movne	r1, #96	; 0x60
    ad6c:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    ad6e:	2b08      	cmp	r3, #8
    ad70:	d003      	beq.n	ad7a <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    ad72:	7010      	strb	r0, [r2, #0]
}
    ad74:	bc10      	pop	{r4}
    ad76:	4770      	bx	lr
    ad78:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    ad7a:	4b05      	ldr	r3, [pc, #20]	; (ad90 <serial3_set_tx+0x54>)
    ad7c:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    ad80:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    ad82:	7010      	strb	r0, [r2, #0]
}
    ad84:	bc10      	pop	{r4}
    ad86:	4770      	bx	lr
    ad88:	1fff8a00 	.word	0x1fff8a00
    ad8c:	40048000 	.word	0x40048000
    ad90:	4004c000 	.word	0x4004c000

0000ad94 <serial3_set_rx>:
}
    ad94:	4770      	bx	lr
    ad96:	bf00      	nop

0000ad98 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    ad98:	4b0d      	ldr	r3, [pc, #52]	; (add0 <serial3_set_rts+0x38>)
    ad9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ad9c:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    ada0:	d013      	beq.n	adca <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    ada2:	2821      	cmp	r0, #33	; 0x21
    ada4:	d903      	bls.n	adae <serial3_set_rts+0x16>
		rts_pin = NULL;
    ada6:	4b0b      	ldr	r3, [pc, #44]	; (add4 <serial3_set_rts+0x3c>)
    ada8:	2000      	movs	r0, #0
    adaa:	6018      	str	r0, [r3, #0]
		return 0;
    adac:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    adae:	4b0a      	ldr	r3, [pc, #40]	; (add8 <serial3_set_rts+0x40>)
{
    adb0:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    adb2:	4c08      	ldr	r4, [pc, #32]	; (add4 <serial3_set_rts+0x3c>)
    adb4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    adb8:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    adba:	2101      	movs	r1, #1
    adbc:	f7ff f90c 	bl	9fd8 <pinMode>
		rts_assert();
    adc0:	6823      	ldr	r3, [r4, #0]
    adc2:	2200      	movs	r2, #0
    adc4:	701a      	strb	r2, [r3, #0]
	return 1;
    adc6:	2001      	movs	r0, #1
}
    adc8:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    adca:	4618      	mov	r0, r3
}
    adcc:	4770      	bx	lr
    adce:	bf00      	nop
    add0:	40048000 	.word	0x40048000
    add4:	1fffd174 	.word	0x1fffd174
    add8:	00015088 	.word	0x00015088

0000addc <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    addc:	4b0c      	ldr	r3, [pc, #48]	; (ae10 <serial3_set_cts+0x34>)
    adde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ade0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    ade4:	d012      	beq.n	ae0c <serial3_set_cts+0x30>
	if (pin == 14) {
    ade6:	280e      	cmp	r0, #14
    ade8:	d109      	bne.n	adfe <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    adea:	4b0a      	ldr	r3, [pc, #40]	; (ae14 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    adec:	4a0a      	ldr	r2, [pc, #40]	; (ae18 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    adee:	f240 3102 	movw	r1, #770	; 0x302
    adf2:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    adf4:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    adf6:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    adf8:	4303      	orrs	r3, r0
    adfa:	7353      	strb	r3, [r2, #13]
	return 1;
    adfc:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    adfe:	4a06      	ldr	r2, [pc, #24]	; (ae18 <serial3_set_cts+0x3c>)
    ae00:	7b53      	ldrb	r3, [r2, #13]
    ae02:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    ae06:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    ae08:	7353      	strb	r3, [r2, #13]
		return 0;
    ae0a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    ae0c:	4618      	mov	r0, r3
}
    ae0e:	4770      	bx	lr
    ae10:	40048000 	.word	0x40048000
    ae14:	4004c000 	.word	0x4004c000
    ae18:	4006c000 	.word	0x4006c000

0000ae1c <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    ae1c:	4b03      	ldr	r3, [pc, #12]	; (ae2c <serial3_putchar+0x10>)
    ae1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ae20:	04db      	lsls	r3, r3, #19
    ae22:	d501      	bpl.n	ae28 <serial3_putchar+0xc>
    ae24:	f7ff be28 	b.w	aa78 <serial3_putchar.part.0>
}
    ae28:	4770      	bx	lr
    ae2a:	bf00      	nop
    ae2c:	40048000 	.word	0x40048000

0000ae30 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    ae30:	b179      	cbz	r1, ae52 <serial3_write+0x22>
{
    ae32:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    ae34:	4e07      	ldr	r6, [pc, #28]	; (ae54 <serial3_write+0x24>)
    ae36:	4604      	mov	r4, r0
    ae38:	1845      	adds	r5, r0, r1
    ae3a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    ae3c:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    ae3e:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    ae42:	d503      	bpl.n	ae4c <serial3_write+0x1c>
    ae44:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    ae48:	f7ff fe16 	bl	aa78 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    ae4c:	42ac      	cmp	r4, r5
    ae4e:	d1f4      	bne.n	ae3a <serial3_write+0xa>
}
    ae50:	bd70      	pop	{r4, r5, r6, pc}
    ae52:	4770      	bx	lr
    ae54:	40048000 	.word	0x40048000

0000ae58 <serial3_flush>:

void serial3_flush(void)
{
    ae58:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    ae5a:	4c04      	ldr	r4, [pc, #16]	; (ae6c <serial3_flush+0x14>)
    ae5c:	7823      	ldrb	r3, [r4, #0]
    ae5e:	b123      	cbz	r3, ae6a <serial3_flush+0x12>
    ae60:	f000 fffe 	bl	be60 <yield>
    ae64:	7823      	ldrb	r3, [r4, #0]
    ae66:	2b00      	cmp	r3, #0
    ae68:	d1fa      	bne.n	ae60 <serial3_flush+0x8>
}
    ae6a:	bd10      	pop	{r4, pc}
    ae6c:	1fffd1c8 	.word	0x1fffd1c8

0000ae70 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    ae70:	4a08      	ldr	r2, [pc, #32]	; (ae94 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    ae72:	4b09      	ldr	r3, [pc, #36]	; (ae98 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    ae74:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    ae76:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ae78:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    ae7a:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    ae7c:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ae7e:	d202      	bcs.n	ae86 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    ae80:	3b01      	subs	r3, #1
    ae82:	1a18      	subs	r0, r3, r0
}
    ae84:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ae86:	4a05      	ldr	r2, [pc, #20]	; (ae9c <serial3_write_buffer_free+0x2c>)
    ae88:	6812      	ldr	r2, [r2, #0]
    ae8a:	3a01      	subs	r2, #1
    ae8c:	4413      	add	r3, r2
    ae8e:	1a18      	subs	r0, r3, r0
    ae90:	4770      	bx	lr
    ae92:	bf00      	nop
    ae94:	1fffd1f4 	.word	0x1fffd1f4
    ae98:	1fffd1fc 	.word	0x1fffd1fc
    ae9c:	1fff89fc 	.word	0x1fff89fc

0000aea0 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    aea0:	4a06      	ldr	r2, [pc, #24]	; (aebc <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    aea2:	4b07      	ldr	r3, [pc, #28]	; (aec0 <serial3_available+0x20>)
	head = rx_buffer_head;
    aea4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    aea6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    aea8:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    aeaa:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    aeac:	bf3c      	itt	cc
    aeae:	4a05      	ldrcc	r2, [pc, #20]	; (aec4 <serial3_available+0x24>)
    aeb0:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    aeb2:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    aeb4:	bf38      	it	cc
    aeb6:	189b      	addcc	r3, r3, r2
    aeb8:	1a18      	subs	r0, r3, r0
}
    aeba:	4770      	bx	lr
    aebc:	1fffd1b8 	.word	0x1fffd1b8
    aec0:	1fffd1c0 	.word	0x1fffd1c0
    aec4:	1fff89f8 	.word	0x1fff89f8

0000aec8 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    aec8:	4b1b      	ldr	r3, [pc, #108]	; (af38 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    aeca:	491c      	ldr	r1, [pc, #112]	; (af3c <serial3_getchar+0x74>)
	head = rx_buffer_head;
    aecc:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    aece:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    aed0:	429a      	cmp	r2, r3
    aed2:	d02e      	beq.n	af32 <serial3_getchar+0x6a>
{
    aed4:	b510      	push	{r4, lr}
    aed6:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    aeda:	4a19      	ldr	r2, [pc, #100]	; (af40 <serial3_getchar+0x78>)
    aedc:	b2d8      	uxtb	r0, r3
    aede:	6812      	ldr	r2, [r2, #0]
    aee0:	1c43      	adds	r3, r0, #1
    aee2:	429a      	cmp	r2, r3
    aee4:	d919      	bls.n	af1a <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    aee6:	2b3f      	cmp	r3, #63	; 0x3f
    aee8:	d81b      	bhi.n	af22 <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    aeea:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    aeee:	4815      	ldr	r0, [pc, #84]	; (af44 <serial3_getchar+0x7c>)
    aef0:	5cc0      	ldrb	r0, [r0, r3]
    aef2:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    aef4:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    aef8:	4913      	ldr	r1, [pc, #76]	; (af48 <serial3_getchar+0x80>)
    aefa:	6809      	ldr	r1, [r1, #0]
    aefc:	b161      	cbz	r1, af18 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    aefe:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    af00:	bf3c      	itt	cc
    af02:	4472      	addcc	r2, lr
    af04:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    af06:	4a11      	ldr	r2, [pc, #68]	; (af4c <serial3_getchar+0x84>)
    af08:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    af0a:	bf28      	it	cs
    af0c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    af10:	429a      	cmp	r2, r3
    af12:	d301      	bcc.n	af18 <serial3_getchar+0x50>
    af14:	2300      	movs	r3, #0
    af16:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    af18:	bd10      	pop	{r4, pc}
    af1a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af1e:	4663      	mov	r3, ip
    af20:	e7e5      	b.n	aeee <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    af22:	4c0b      	ldr	r4, [pc, #44]	; (af50 <serial3_getchar+0x88>)
    af24:	383f      	subs	r0, #63	; 0x3f
    af26:	6824      	ldr	r4, [r4, #0]
    af28:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    af2a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    af2e:	b2c0      	uxtb	r0, r0
    af30:	e7e0      	b.n	aef4 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    af32:	f04f 30ff 	mov.w	r0, #4294967295
}
    af36:	4770      	bx	lr
    af38:	1fffd1b8 	.word	0x1fffd1b8
    af3c:	1fffd1c0 	.word	0x1fffd1c0
    af40:	1fff89f8 	.word	0x1fff89f8
    af44:	1fffd178 	.word	0x1fffd178
    af48:	1fffd174 	.word	0x1fffd174
    af4c:	1fff89f4 	.word	0x1fff89f4
    af50:	1fffd1bc 	.word	0x1fffd1bc

0000af54 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    af54:	4a0d      	ldr	r2, [pc, #52]	; (af8c <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    af56:	4b0e      	ldr	r3, [pc, #56]	; (af90 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    af58:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    af5a:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    af5c:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    af5e:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    af60:	d011      	beq.n	af86 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af62:	490c      	ldr	r1, [pc, #48]	; (af94 <serial3_peek+0x40>)
    af64:	6809      	ldr	r1, [r1, #0]
    af66:	1c53      	adds	r3, r2, #1
    af68:	4299      	cmp	r1, r3
    af6a:	d907      	bls.n	af7c <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    af6c:	2b3f      	cmp	r3, #63	; 0x3f
    af6e:	d906      	bls.n	af7e <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    af70:	4b09      	ldr	r3, [pc, #36]	; (af98 <serial3_peek+0x44>)
    af72:	3a3f      	subs	r2, #63	; 0x3f
    af74:	681b      	ldr	r3, [r3, #0]
    af76:	5c98      	ldrb	r0, [r3, r2]
    af78:	b2c0      	uxtb	r0, r0
    af7a:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    af7c:	2300      	movs	r3, #0
		return rx_buffer[tail];
    af7e:	4a07      	ldr	r2, [pc, #28]	; (af9c <serial3_peek+0x48>)
    af80:	5cd0      	ldrb	r0, [r2, r3]
    af82:	b2c0      	uxtb	r0, r0
    af84:	4770      	bx	lr
	if (head == tail) return -1;
    af86:	f04f 30ff 	mov.w	r0, #4294967295
}
    af8a:	4770      	bx	lr
    af8c:	1fffd1b8 	.word	0x1fffd1b8
    af90:	1fffd1c0 	.word	0x1fffd1c0
    af94:	1fff89f8 	.word	0x1fff89f8
    af98:	1fffd1bc 	.word	0x1fffd1bc
    af9c:	1fffd178 	.word	0x1fffd178

0000afa0 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    afa0:	4b05      	ldr	r3, [pc, #20]	; (afb8 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    afa2:	4a06      	ldr	r2, [pc, #24]	; (afbc <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    afa4:	781b      	ldrb	r3, [r3, #0]
    afa6:	4906      	ldr	r1, [pc, #24]	; (afc0 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    afa8:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    afaa:	b2db      	uxtb	r3, r3
    afac:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    afae:	b10a      	cbz	r2, afb4 <serial3_clear+0x14>
    afb0:	2300      	movs	r3, #0
    afb2:	7013      	strb	r3, [r2, #0]
}
    afb4:	4770      	bx	lr
    afb6:	bf00      	nop
    afb8:	1fffd1c0 	.word	0x1fffd1c0
    afbc:	1fffd174 	.word	0x1fffd174
    afc0:	1fffd1b8 	.word	0x1fffd1b8

0000afc4 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    afc4:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    afc6:	4b3a      	ldr	r3, [pc, #232]	; (b0b0 <uart2_status_isr+0xec>)
    afc8:	791a      	ldrb	r2, [r3, #4]
    afca:	0695      	lsls	r5, r2, #26
    afcc:	d524      	bpl.n	b018 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    afce:	4d39      	ldr	r5, [pc, #228]	; (b0b4 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    afd0:	4939      	ldr	r1, [pc, #228]	; (b0b8 <uart2_status_isr+0xf4>)
			n = UART2_D;
    afd2:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    afd4:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    afd6:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    afd8:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    afda:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    afdc:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    afde:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    afe0:	d831      	bhi.n	b046 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    afe2:	4b36      	ldr	r3, [pc, #216]	; (b0bc <uart2_status_isr+0xf8>)
    afe4:	781a      	ldrb	r2, [r3, #0]
    afe6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    afea:	b122      	cbz	r2, aff6 <uart2_status_isr+0x32>
    afec:	2200      	movs	r2, #0
    afee:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    aff0:	4933      	ldr	r1, [pc, #204]	; (b0c0 <uart2_status_isr+0xfc>)
    aff2:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    aff4:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    aff6:	4933      	ldr	r1, [pc, #204]	; (b0c4 <uart2_status_isr+0x100>)
    aff8:	6809      	ldr	r1, [r1, #0]
    affa:	b169      	cbz	r1, b018 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    affc:	4a32      	ldr	r2, [pc, #200]	; (b0c8 <uart2_status_isr+0x104>)
    affe:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    b000:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    b002:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    b004:	bf8a      	itet	hi
    b006:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    b008:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    b00a:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    b00c:	4a2f      	ldr	r2, [pc, #188]	; (b0cc <uart2_status_isr+0x108>)
    b00e:	6812      	ldr	r2, [r2, #0]
    b010:	429a      	cmp	r2, r3
    b012:	bf9c      	itt	ls
    b014:	2301      	movls	r3, #1
    b016:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    b018:	4a25      	ldr	r2, [pc, #148]	; (b0b0 <uart2_status_isr+0xec>)
    b01a:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b01c:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    b01e:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b020:	d41e      	bmi.n	b060 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    b022:	064a      	lsls	r2, r1, #25
    b024:	d50d      	bpl.n	b042 <uart2_status_isr+0x7e>
    b026:	4b22      	ldr	r3, [pc, #136]	; (b0b0 <uart2_status_isr+0xec>)
    b028:	791b      	ldrb	r3, [r3, #4]
    b02a:	065b      	lsls	r3, r3, #25
    b02c:	d509      	bpl.n	b042 <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b02e:	4b28      	ldr	r3, [pc, #160]	; (b0d0 <uart2_status_isr+0x10c>)
		transmitting = 0;
    b030:	4928      	ldr	r1, [pc, #160]	; (b0d4 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    b032:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b034:	2200      	movs	r2, #0
    b036:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b038:	b103      	cbz	r3, b03c <uart2_status_isr+0x78>
    b03a:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    b03c:	4b1c      	ldr	r3, [pc, #112]	; (b0b0 <uart2_status_isr+0xec>)
    b03e:	222c      	movs	r2, #44	; 0x2c
    b040:	70da      	strb	r2, [r3, #3]
	}
}
    b042:	bc30      	pop	{r4, r5}
    b044:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    b046:	491d      	ldr	r1, [pc, #116]	; (b0bc <uart2_status_isr+0xf8>)
    b048:	7809      	ldrb	r1, [r1, #0]
    b04a:	4299      	cmp	r1, r3
    b04c:	d0d3      	beq.n	aff6 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    b04e:	2b3f      	cmp	r3, #63	; 0x3f
    b050:	d92c      	bls.n	b0ac <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    b052:	4921      	ldr	r1, [pc, #132]	; (b0d8 <uart2_status_isr+0x114>)
    b054:	3a3f      	subs	r2, #63	; 0x3f
    b056:	6809      	ldr	r1, [r1, #0]
    b058:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    b05a:	b2da      	uxtb	r2, r3
    b05c:	702a      	strb	r2, [r5, #0]
    b05e:	e7ca      	b.n	aff6 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b060:	7913      	ldrb	r3, [r2, #4]
    b062:	0618      	lsls	r0, r3, #24
    b064:	d5dd      	bpl.n	b022 <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    b066:	4b1d      	ldr	r3, [pc, #116]	; (b0dc <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    b068:	4817      	ldr	r0, [pc, #92]	; (b0c8 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    b06a:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    b06c:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    b06e:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    b070:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    b072:	d008      	beq.n	b086 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b074:	4a1a      	ldr	r2, [pc, #104]	; (b0e0 <uart2_status_isr+0x11c>)
    b076:	6812      	ldr	r2, [r2, #0]
    b078:	1c63      	adds	r3, r4, #1
    b07a:	429a      	cmp	r2, r3
    b07c:	d906      	bls.n	b08c <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b07e:	2b27      	cmp	r3, #39	; 0x27
    b080:	d80d      	bhi.n	b09e <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    b082:	b2da      	uxtb	r2, r3
    b084:	e004      	b.n	b090 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    b086:	236c      	movs	r3, #108	; 0x6c
    b088:	70d3      	strb	r3, [r2, #3]
    b08a:	e7ca      	b.n	b022 <uart2_status_isr+0x5e>
    b08c:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b08e:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    b090:	4c14      	ldr	r4, [pc, #80]	; (b0e4 <uart2_status_isr+0x120>)
    b092:	5ce3      	ldrb	r3, [r4, r3]
    b094:	b2db      	uxtb	r3, r3
			UART2_D = n;
    b096:	4c06      	ldr	r4, [pc, #24]	; (b0b0 <uart2_status_isr+0xec>)
    b098:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    b09a:	7002      	strb	r2, [r0, #0]
    b09c:	e7c1      	b.n	b022 <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b09e:	4a12      	ldr	r2, [pc, #72]	; (b0e8 <uart2_status_isr+0x124>)
    b0a0:	3c27      	subs	r4, #39	; 0x27
    b0a2:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    b0a4:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b0a6:	5d2b      	ldrb	r3, [r5, r4]
    b0a8:	b2db      	uxtb	r3, r3
    b0aa:	e7f4      	b.n	b096 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    b0ac:	b2da      	uxtb	r2, r3
    b0ae:	e79f      	b.n	aff0 <uart2_status_isr+0x2c>
    b0b0:	4006c000 	.word	0x4006c000
    b0b4:	1fffd1b8 	.word	0x1fffd1b8
    b0b8:	1fff89f8 	.word	0x1fff89f8
    b0bc:	1fffd1c0 	.word	0x1fffd1c0
    b0c0:	1fffd178 	.word	0x1fffd178
    b0c4:	1fffd174 	.word	0x1fffd174
    b0c8:	1fffd1fc 	.word	0x1fffd1fc
    b0cc:	1fff89f0 	.word	0x1fff89f0
    b0d0:	1fffd1c4 	.word	0x1fffd1c4
    b0d4:	1fffd1c8 	.word	0x1fffd1c8
    b0d8:	1fffd1bc 	.word	0x1fffd1bc
    b0dc:	1fffd1f4 	.word	0x1fffd1f4
    b0e0:	1fff89fc 	.word	0x1fff89fc
    b0e4:	1fffd1cc 	.word	0x1fffd1cc
    b0e8:	1fffd1f8 	.word	0x1fffd1f8

0000b0ec <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b0ec:	4b09      	ldr	r3, [pc, #36]	; (b114 <serial3_add_memory_for_read+0x28>)
{
    b0ee:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b0f0:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b0f2:	b160      	cbz	r0, b10e <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    b0f4:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b0f8:	4b07      	ldr	r3, [pc, #28]	; (b118 <serial3_add_memory_for_read+0x2c>)
    b0fa:	4808      	ldr	r0, [pc, #32]	; (b11c <serial3_add_memory_for_read+0x30>)
    b0fc:	f101 021a 	add.w	r2, r1, #26
    b100:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b102:	4b07      	ldr	r3, [pc, #28]	; (b120 <serial3_add_memory_for_read+0x34>)
    b104:	6004      	str	r4, [r0, #0]
    b106:	3128      	adds	r1, #40	; 0x28
}
    b108:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b10a:	6019      	str	r1, [r3, #0]
}
    b10c:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    b10e:	2440      	movs	r4, #64	; 0x40
    b110:	e7f2      	b.n	b0f8 <serial3_add_memory_for_read+0xc>
    b112:	bf00      	nop
    b114:	1fffd1bc 	.word	0x1fffd1bc
    b118:	1fff89f4 	.word	0x1fff89f4
    b11c:	1fff89f8 	.word	0x1fff89f8
    b120:	1fff89f0 	.word	0x1fff89f0

0000b124 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b124:	4b05      	ldr	r3, [pc, #20]	; (b13c <serial3_add_memory_for_write+0x18>)
    b126:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b128:	b118      	cbz	r0, b132 <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    b12a:	4b05      	ldr	r3, [pc, #20]	; (b140 <serial3_add_memory_for_write+0x1c>)
    b12c:	3128      	adds	r1, #40	; 0x28
    b12e:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    b130:	4770      	bx	lr
    b132:	4b03      	ldr	r3, [pc, #12]	; (b140 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    b134:	2128      	movs	r1, #40	; 0x28
    b136:	6019      	str	r1, [r3, #0]
}
    b138:	4770      	bx	lr
    b13a:	bf00      	nop
    b13c:	1fffd1f8 	.word	0x1fffd1f8
    b140:	1fff89fc 	.word	0x1fff89fc

0000b144 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    b144:	4770      	bx	lr
    b146:	bf00      	nop

0000b148 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    b148:	4770      	bx	lr
    b14a:	bf00      	nop

0000b14c <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b14c:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b14e:	2b03      	cmp	r3, #3
    b150:	d817      	bhi.n	b182 <usb_rx+0x36>
	__disable_irq();
    b152:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b154:	490c      	ldr	r1, [pc, #48]	; (b188 <usb_rx+0x3c>)
    b156:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b15a:	b180      	cbz	r0, b17e <usb_rx+0x32>
{
    b15c:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b15e:	4c0b      	ldr	r4, [pc, #44]	; (b18c <usb_rx+0x40>)
    b160:	f8b0 c000 	ldrh.w	ip, [r0]
    b164:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    b168:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    b16c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b170:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b174:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b178:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b17a:	bc10      	pop	{r4}
    b17c:	4770      	bx	lr
	__enable_irq();
    b17e:	b662      	cpsie	i
}
    b180:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b182:	2000      	movs	r0, #0
    b184:	4770      	bx	lr
    b186:	bf00      	nop
    b188:	1fffd290 	.word	0x1fffd290
    b18c:	1fffd2e0 	.word	0x1fffd2e0

0000b190 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b190:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b192:	2803      	cmp	r0, #3
    b194:	d80b      	bhi.n	b1ae <usb_tx_packet_count+0x1e>
	__disable_irq();
    b196:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b198:	4b07      	ldr	r3, [pc, #28]	; (b1b8 <usb_tx_packet_count+0x28>)
    b19a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b19e:	b143      	cbz	r3, b1b2 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    b1a0:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b1a2:	685b      	ldr	r3, [r3, #4]
    b1a4:	3001      	adds	r0, #1
    b1a6:	2b00      	cmp	r3, #0
    b1a8:	d1fb      	bne.n	b1a2 <usb_tx_packet_count+0x12>
	__enable_irq();
    b1aa:	b662      	cpsie	i
	return count;
    b1ac:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b1ae:	2000      	movs	r0, #0
}
    b1b0:	4770      	bx	lr
	uint32_t count=0;
    b1b2:	4618      	mov	r0, r3
    b1b4:	e7f9      	b.n	b1aa <usb_tx_packet_count+0x1a>
    b1b6:	bf00      	nop
    b1b8:	1fffd2b8 	.word	0x1fffd2b8

0000b1bc <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b1bc:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b1be:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    b1c0:	4a19      	ldr	r2, [pc, #100]	; (b228 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b1c2:	4c1a      	ldr	r4, [pc, #104]	; (b22c <usb_rx_memory+0x70>)
	__disable_irq();
    b1c4:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b1c6:	f812 1b01 	ldrb.w	r1, [r2], #1
    b1ca:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b1cc:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b1d0:	d505      	bpl.n	b1de <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b1d2:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    b1d6:	b161      	cbz	r1, b1f2 <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    b1d8:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    b1dc:	b1b9      	cbz	r1, b20e <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    b1de:	3304      	adds	r3, #4
    b1e0:	2b14      	cmp	r3, #20
    b1e2:	d1f0      	bne.n	b1c6 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b1e4:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b1e6:	4b12      	ldr	r3, [pc, #72]	; (b230 <usb_rx_memory+0x74>)
    b1e8:	2200      	movs	r2, #0
    b1ea:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b1ec:	bc10      	pop	{r4}
	usb_free(packet);
    b1ee:	f000 bc9b 	b.w	bb28 <usb_free>
				usb_rx_memory_needed--;
    b1f2:	490f      	ldr	r1, [pc, #60]	; (b230 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    b1f4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b1f8:	3008      	adds	r0, #8
    b1fa:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    b1fc:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b1fe:	480d      	ldr	r0, [pc, #52]	; (b234 <usb_rx_memory+0x78>)
    b200:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    b204:	3a01      	subs	r2, #1
    b206:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    b208:	b662      	cpsie	i
}
    b20a:	bc10      	pop	{r4}
    b20c:	4770      	bx	lr
				usb_rx_memory_needed--;
    b20e:	4a08      	ldr	r2, [pc, #32]	; (b230 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b210:	4909      	ldr	r1, [pc, #36]	; (b238 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    b212:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    b216:	3008      	adds	r0, #8
    b218:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    b21a:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b21c:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    b220:	3b01      	subs	r3, #1
    b222:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    b224:	b662      	cpsie	i
				return;
    b226:	e7f0      	b.n	b20a <usb_rx_memory+0x4e>
    b228:	00015214 	.word	0x00015214
    b22c:	1fff8000 	.word	0x1fff8000
    b230:	1fffd2e8 	.word	0x1fffd2e8
    b234:	00400088 	.word	0x00400088
    b238:	004000c8 	.word	0x004000c8

0000b23c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b23c:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b23e:	2a03      	cmp	r2, #3
    b240:	d80e      	bhi.n	b260 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b242:	4b1c      	ldr	r3, [pc, #112]	; (b2b4 <usb_tx+0x78>)
    b244:	0140      	lsls	r0, r0, #5
    b246:	f040 0010 	orr.w	r0, r0, #16
{
    b24a:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b24c:	4403      	add	r3, r0
	__disable_irq();
    b24e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b250:	4c19      	ldr	r4, [pc, #100]	; (b2b8 <usb_tx+0x7c>)
    b252:	5ca0      	ldrb	r0, [r4, r2]
    b254:	2803      	cmp	r0, #3
    b256:	d81c      	bhi.n	b292 <usb_tx+0x56>
    b258:	e8df f000 	tbb	[pc, r0]
    b25c:	18031513 	.word	0x18031513
    b260:	4770      	bx	lr
    b262:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b264:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b266:	f013 0f08 	tst.w	r3, #8
    b26a:	8808      	ldrh	r0, [r1, #0]
    b26c:	bf14      	ite	ne
    b26e:	22c8      	movne	r2, #200	; 0xc8
    b270:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    b272:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b274:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    b278:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b27a:	601a      	str	r2, [r3, #0]
	__enable_irq();
    b27c:	b662      	cpsie	i
}
    b27e:	bc10      	pop	{r4}
    b280:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    b282:	2003      	movs	r0, #3
    b284:	e7ee      	b.n	b264 <usb_tx+0x28>
		b++;
    b286:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    b288:	2002      	movs	r0, #2
		break;
    b28a:	e7eb      	b.n	b264 <usb_tx+0x28>
		b++;
    b28c:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b28e:	2004      	movs	r0, #4
		break;
    b290:	e7e8      	b.n	b264 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    b292:	4b0a      	ldr	r3, [pc, #40]	; (b2bc <usb_tx+0x80>)
    b294:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b298:	b138      	cbz	r0, b2aa <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    b29a:	4b09      	ldr	r3, [pc, #36]	; (b2c0 <usb_tx+0x84>)
    b29c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b2a0:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    b2a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    b2a6:	b662      	cpsie	i
		return;
    b2a8:	e7e9      	b.n	b27e <usb_tx+0x42>
			tx_first[endpoint] = packet;
    b2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    b2ae:	4b04      	ldr	r3, [pc, #16]	; (b2c0 <usb_tx+0x84>)
    b2b0:	e7f7      	b.n	b2a2 <usb_tx+0x66>
    b2b2:	bf00      	nop
    b2b4:	1fff8000 	.word	0x1fff8000
    b2b8:	1fffd2d8 	.word	0x1fffd2d8
    b2bc:	1fffd2b8 	.word	0x1fffd2b8
    b2c0:	1fffd2c8 	.word	0x1fffd2c8

0000b2c4 <usb_isr>:
}



void usb_isr(void)
{
    b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b2c8:	f8df a2cc 	ldr.w	sl, [pc, #716]	; b598 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b2cc:	f8df b2cc 	ldr.w	fp, [pc, #716]	; b59c <usb_isr+0x2d8>
{
    b2d0:	b085      	sub	sp, #20
    b2d2:	e03d      	b.n	b350 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    b2d4:	4db2      	ldr	r5, [pc, #712]	; (b5a0 <usb_isr+0x2dc>)
    b2d6:	089e      	lsrs	r6, r3, #2
    b2d8:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    b2dc:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b2de:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    b2e0:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    b2e4:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b2e6:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    b2ea:	f040 80b8 	bne.w	b45e <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    b2ee:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    b2f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    b2f6:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    b2f8:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    b2fc:	f000 80a7 	beq.w	b44e <usb_isr+0x18a>
					packet->index = 0;
    b300:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    b304:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    b308:	4ba6      	ldr	r3, [pc, #664]	; (b5a4 <usb_isr+0x2e0>)
    b30a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b30e:	2a00      	cmp	r2, #0
    b310:	f000 8201 	beq.w	b716 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    b314:	4ba4      	ldr	r3, [pc, #656]	; (b5a8 <usb_isr+0x2e4>)
    b316:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b31a:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    b31c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b320:	4ba2      	ldr	r3, [pc, #648]	; (b5ac <usb_isr+0x2e8>)
    b322:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    b326:	4494      	add	ip, r2
    b328:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    b32c:	f000 fbdc 	bl	bae8 <usb_malloc>
					if (packet) {
    b330:	2800      	cmp	r0, #0
    b332:	f000 81e9 	beq.w	b708 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    b336:	f017 0f08 	tst.w	r7, #8
    b33a:	4b9d      	ldr	r3, [pc, #628]	; (b5b0 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    b33c:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b340:	bf18      	it	ne
    b342:	465b      	movne	r3, fp
						b->addr = packet->buf;
    b344:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    b346:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b34a:	2308      	movs	r3, #8
    b34c:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    b350:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b354:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    b356:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b358:	d51b      	bpl.n	b392 <usb_isr+0xce>
		if (usb_configuration) {
    b35a:	4b96      	ldr	r3, [pc, #600]	; (b5b4 <usb_isr+0x2f0>)
    b35c:	781b      	ldrb	r3, [r3, #0]
    b35e:	b1ab      	cbz	r3, b38c <usb_isr+0xc8>
			t = usb_reboot_timer;
    b360:	4995      	ldr	r1, [pc, #596]	; (b5b8 <usb_isr+0x2f4>)
    b362:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b364:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b368:	b12a      	cbz	r2, b376 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    b36a:	3b01      	subs	r3, #1
    b36c:	b2db      	uxtb	r3, r3
    b36e:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b370:	2b00      	cmp	r3, #0
    b372:	f000 8346 	beq.w	ba02 <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    b376:	4991      	ldr	r1, [pc, #580]	; (b5bc <usb_isr+0x2f8>)
    b378:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b37a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b37e:	b12a      	cbz	r2, b38c <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    b380:	3b01      	subs	r3, #1
    b382:	b2db      	uxtb	r3, r3
    b384:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b386:	2b00      	cmp	r3, #0
    b388:	f000 81eb 	beq.w	b762 <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b38c:	2304      	movs	r3, #4
    b38e:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b392:	f014 0208 	ands.w	r2, r4, #8
    b396:	f000 81cc 	beq.w	b732 <usb_isr+0x46e>
		stat = USB0_STAT;
    b39a:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    b39e:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    b3a0:	0912      	lsrs	r2, r2, #4
    b3a2:	d197      	bne.n	b2d4 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    b3a4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; b5a0 <usb_isr+0x2dc>
    b3a8:	089b      	lsrs	r3, r3, #2
    b3aa:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    b3ae:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    b3b2:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    b3b4:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    b3b8:	2809      	cmp	r0, #9
    b3ba:	d07c      	beq.n	b4b6 <usb_isr+0x1f2>
    b3bc:	d80f      	bhi.n	b3de <usb_isr+0x11a>
    b3be:	3801      	subs	r0, #1
    b3c0:	2801      	cmp	r0, #1
    b3c2:	d808      	bhi.n	b3d6 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b3c4:	4a7e      	ldr	r2, [pc, #504]	; (b5c0 <usb_isr+0x2fc>)
    b3c6:	8815      	ldrh	r5, [r2, #0]
    b3c8:	f242 0021 	movw	r0, #8225	; 0x2021
    b3cc:	4285      	cmp	r5, r0
    b3ce:	f000 81fb 	beq.w	b7c8 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b3d2:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b3d6:	2301      	movs	r3, #1
    b3d8:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    b3dc:	e7b5      	b.n	b34a <usb_isr+0x86>
	switch (pid) {
    b3de:	280d      	cmp	r0, #13
    b3e0:	d1f9      	bne.n	b3d6 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    b3e2:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    b3e6:	4d77      	ldr	r5, [pc, #476]	; (b5c4 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b3e8:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    b3ec:	4e74      	ldr	r6, [pc, #464]	; (b5c0 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    b3ee:	4c76      	ldr	r4, [pc, #472]	; (b5c8 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    b3f0:	f8c9 2010 	str.w	r2, [r9, #16]
    b3f4:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    b3f6:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    b3fa:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    b3fe:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    b400:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    b402:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    b406:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    b40a:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    b40c:	f200 80ff 	bhi.w	b60e <usb_isr+0x34a>
    b410:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    b414:	f080 82cb 	bcs.w	b9ae <usb_isr+0x6ea>
    b418:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b41c:	f000 8226 	beq.w	b86c <usb_isr+0x5a8>
    b420:	f240 80de 	bls.w	b5e0 <usb_isr+0x31c>
    b424:	f240 3202 	movw	r2, #770	; 0x302
    b428:	4293      	cmp	r3, r2
    b42a:	d17b      	bne.n	b524 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    b42c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b430:	2f04      	cmp	r7, #4
    b432:	f200 8108 	bhi.w	b646 <usb_isr+0x382>
    b436:	0c02      	lsrs	r2, r0, #16
    b438:	f040 8105 	bne.w	b646 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    b43c:	4963      	ldr	r1, [pc, #396]	; (b5cc <usb_isr+0x308>)
    b43e:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    b442:	f043 0302 	orr.w	r3, r3, #2
    b446:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    b44a:	4613      	mov	r3, r2
		break;
    b44c:	e070      	b.n	b530 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b44e:	f017 0f08 	tst.w	r7, #8
    b452:	4b57      	ldr	r3, [pc, #348]	; (b5b0 <usb_isr+0x2ec>)
    b454:	bf18      	it	ne
    b456:	465b      	movne	r3, fp
    b458:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b45c:	e775      	b.n	b34a <usb_isr+0x86>
				usb_free(packet);
    b45e:	f000 fb63 	bl	bb28 <usb_free>
				packet = tx_first[endpoint];
    b462:	495b      	ldr	r1, [pc, #364]	; (b5d0 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    b464:	4a5b      	ldr	r2, [pc, #364]	; (b5d4 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    b466:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    b46a:	2b00      	cmp	r3, #0
    b46c:	f000 8157 	beq.w	b71e <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    b470:	6858      	ldr	r0, [r3, #4]
    b472:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    b476:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    b478:	f103 0008 	add.w	r0, r3, #8
    b47c:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    b47e:	2903      	cmp	r1, #3
    b480:	d805      	bhi.n	b48e <usb_isr+0x1ca>
    b482:	e8df f001 	tbb	[pc, r1]
    b486:	0f12      	.short	0x0f12
    b488:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    b48a:	2104      	movs	r1, #4
    b48c:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    b48e:	881a      	ldrh	r2, [r3, #0]
    b490:	f017 0f08 	tst.w	r7, #8
    b494:	bf14      	ite	ne
    b496:	23c8      	movne	r3, #200	; 0xc8
    b498:	2388      	moveq	r3, #136	; 0x88
    b49a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b49e:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b4a2:	e752      	b.n	b34a <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    b4a4:	2102      	movs	r1, #2
    b4a6:	5511      	strb	r1, [r2, r4]
						break;
    b4a8:	e7f1      	b.n	b48e <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    b4aa:	2103      	movs	r1, #3
    b4ac:	5511      	strb	r1, [r2, r4]
						break;
    b4ae:	e7ee      	b.n	b48e <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    b4b0:	2105      	movs	r1, #5
    b4b2:	5511      	strb	r1, [r2, r4]
						break;
    b4b4:	e7eb      	b.n	b48e <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    b4b6:	4d43      	ldr	r5, [pc, #268]	; (b5c4 <usb_isr+0x300>)
    b4b8:	682a      	ldr	r2, [r5, #0]
		if (data) {
    b4ba:	b33a      	cbz	r2, b50c <usb_isr+0x248>
			size = ep0_tx_len;
    b4bc:	4946      	ldr	r1, [pc, #280]	; (b5d8 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b4be:	4c42      	ldr	r4, [pc, #264]	; (b5c8 <usb_isr+0x304>)
			size = ep0_tx_len;
    b4c0:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b4c2:	4846      	ldr	r0, [pc, #280]	; (b5dc <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b4c4:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b4c8:	7806      	ldrb	r6, [r0, #0]
    b4ca:	2f40      	cmp	r7, #64	; 0x40
    b4cc:	463b      	mov	r3, r7
    b4ce:	bf28      	it	cs
    b4d0:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b4d2:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    b4d6:	f08e 0e01 	eor.w	lr, lr, #1
    b4da:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b4de:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b4e2:	f086 0601 	eor.w	r6, r6, #1
    b4e6:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b4e8:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    b4ec:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b4ee:	bf14      	ite	ne
    b4f0:	20c8      	movne	r0, #200	; 0xc8
    b4f2:	2088      	moveq	r0, #136	; 0x88
    b4f4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    b4f8:	441a      	add	r2, r3
			ep0_tx_len -= size;
    b4fa:	1afb      	subs	r3, r7, r3
    b4fc:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b4fe:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    b502:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b504:	2b00      	cmp	r3, #0
    b506:	f000 8136 	beq.w	b776 <usb_isr+0x4b2>
    b50a:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    b50c:	4b2c      	ldr	r3, [pc, #176]	; (b5c0 <usb_isr+0x2fc>)
    b50e:	881a      	ldrh	r2, [r3, #0]
    b510:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    b514:	f47f af5f 	bne.w	b3d6 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    b518:	789a      	ldrb	r2, [r3, #2]
    b51a:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    b51e:	2200      	movs	r2, #0
    b520:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    b522:	e758      	b.n	b3d6 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    b524:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    b528:	f040 808d 	bne.w	b646 <usb_isr+0x382>
	uint32_t datalen = 0;
    b52c:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    b52e:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    b530:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b534:	4829      	ldr	r0, [pc, #164]	; (b5dc <usb_isr+0x318>)
    b536:	4594      	cmp	ip, r2
    b538:	bf28      	it	cs
    b53a:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    b53c:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b53e:	7802      	ldrb	r2, [r0, #0]
    b540:	2f40      	cmp	r7, #64	; 0x40
    b542:	bf28      	it	cs
    b544:	2740      	movcs	r7, #64	; 0x40
    b546:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b54a:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b54c:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b550:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b554:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b558:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    b55c:	2600      	movs	r6, #0
	data += size;
    b55e:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    b560:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b562:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    b566:	f082 0601 	eor.w	r6, r2, #1
    b56a:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b56c:	f040 8111 	bne.w	b792 <usb_isr+0x4ce>
    b570:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    b574:	f04f 0501 	mov.w	r5, #1
    b578:	d909      	bls.n	b58e <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b57a:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b57e:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b580:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    b584:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b586:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b588:	2388      	movs	r3, #136	; 0x88
    b58a:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b58e:	2301      	movs	r3, #1
    b590:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b594:	e71f      	b.n	b3d6 <usb_isr+0x112>
    b596:	bf00      	nop
    b598:	40072000 	.word	0x40072000
    b59c:	004000c8 	.word	0x004000c8
    b5a0:	1fff8000 	.word	0x1fff8000
    b5a4:	1fffd290 	.word	0x1fffd290
    b5a8:	1fffd2a0 	.word	0x1fffd2a0
    b5ac:	1fffd2e0 	.word	0x1fffd2e0
    b5b0:	00400088 	.word	0x00400088
    b5b4:	1fffd2dc 	.word	0x1fffd2dc
    b5b8:	1fffd2dd 	.word	0x1fffd2dd
    b5bc:	1fffd308 	.word	0x1fffd308
    b5c0:	1fffd2b0 	.word	0x1fffd2b0
    b5c4:	1fffd284 	.word	0x1fffd284
    b5c8:	1fffd281 	.word	0x1fffd281
    b5cc:	400720c0 	.word	0x400720c0
    b5d0:	1fffd2b8 	.word	0x1fffd2b8
    b5d4:	1fffd2d8 	.word	0x1fffd2d8
    b5d8:	1fffd282 	.word	0x1fffd282
    b5dc:	1fffd280 	.word	0x1fffd280
	switch (setup.wRequestAndType) {
    b5e0:	2b80      	cmp	r3, #128	; 0x80
    b5e2:	f000 818b 	beq.w	b8fc <usb_isr+0x638>
    b5e6:	2b82      	cmp	r3, #130	; 0x82
    b5e8:	d12d      	bne.n	b646 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    b5ea:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    b5ee:	2f04      	cmp	r7, #4
    b5f0:	d829      	bhi.n	b646 <usb_isr+0x382>
		reply_buffer[0] = 0;
    b5f2:	4aa7      	ldr	r2, [pc, #668]	; (b890 <usb_isr+0x5cc>)
    b5f4:	2300      	movs	r3, #0
    b5f6:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    b5f8:	4ba6      	ldr	r3, [pc, #664]	; (b894 <usb_isr+0x5d0>)
    b5fa:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    b5fe:	079f      	lsls	r7, r3, #30
    b600:	f140 81fc 	bpl.w	b9fc <usb_isr+0x738>
    b604:	2301      	movs	r3, #1
    b606:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    b608:	4ba1      	ldr	r3, [pc, #644]	; (b890 <usb_isr+0x5cc>)
		datalen = 2;
    b60a:	2202      	movs	r2, #2
    b60c:	e790      	b.n	b530 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    b60e:	f242 0c21 	movw	ip, #8225	; 0x2021
    b612:	4563      	cmp	r3, ip
    b614:	d0bb      	beq.n	b58e <usb_isr+0x2ca>
    b616:	d91d      	bls.n	b654 <usb_isr+0x390>
    b618:	f242 2221 	movw	r2, #8737	; 0x2221
    b61c:	4293      	cmp	r3, r2
    b61e:	d10d      	bne.n	b63c <usb_isr+0x378>
		switch (setup.wIndex) {
    b620:	b2bf      	uxth	r7, r7
    b622:	2f00      	cmp	r7, #0
    b624:	d182      	bne.n	b52c <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    b626:	4b9c      	ldr	r3, [pc, #624]	; (b898 <usb_isr+0x5d4>)
    b628:	681a      	ldr	r2, [r3, #0]
    b62a:	4b9c      	ldr	r3, [pc, #624]	; (b89c <usb_isr+0x5d8>)
    b62c:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    b62e:	4b9c      	ldr	r3, [pc, #624]	; (b8a0 <usb_isr+0x5dc>)
    b630:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    b634:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    b636:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    b638:	4613      	mov	r3, r2
			break;
    b63a:	e779      	b.n	b530 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    b63c:	f242 3221 	movw	r2, #8993	; 0x2321
    b640:	4293      	cmp	r3, r2
    b642:	f43f af73 	beq.w	b52c <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b646:	230f      	movs	r3, #15
    b648:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b64c:	2301      	movs	r3, #1
    b64e:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b652:	e6c0      	b.n	b3d6 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    b654:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    b658:	f000 814a 	beq.w	b8f0 <usb_isr+0x62c>
    b65c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    b660:	d1f1      	bne.n	b646 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    b662:	4b90      	ldr	r3, [pc, #576]	; (b8a4 <usb_isr+0x5e0>)
    b664:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b668:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    b66a:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    b66c:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    b670:	061a      	lsls	r2, r3, #24
    b672:	d406      	bmi.n	b682 <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b674:	3501      	adds	r5, #1
    b676:	2d14      	cmp	r5, #20
    b678:	d00c      	beq.n	b694 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    b67a:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    b67e:	061a      	lsls	r2, r3, #24
    b680:	d5f8      	bpl.n	b674 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    b682:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b686:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    b688:	6858      	ldr	r0, [r3, #4]
    b68a:	3808      	subs	r0, #8
    b68c:	f000 fa4c 	bl	bb28 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    b690:	2d14      	cmp	r5, #20
    b692:	d1f2      	bne.n	b67a <usb_isr+0x3b6>
    b694:	4a84      	ldr	r2, [pc, #528]	; (b8a8 <usb_isr+0x5e4>)
    b696:	4b85      	ldr	r3, [pc, #532]	; (b8ac <usb_isr+0x5e8>)
    b698:	9202      	str	r2, [sp, #8]
    b69a:	4a85      	ldr	r2, [pc, #532]	; (b8b0 <usb_isr+0x5ec>)
    b69c:	9201      	str	r2, [sp, #4]
    b69e:	4e85      	ldr	r6, [pc, #532]	; (b8b4 <usb_isr+0x5f0>)
    b6a0:	4a85      	ldr	r2, [pc, #532]	; (b8b8 <usb_isr+0x5f4>)
    b6a2:	f8df 8218 	ldr.w	r8, [pc, #536]	; b8bc <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b6a6:	9403      	str	r4, [sp, #12]
    b6a8:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    b6aa:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b6ac:	461c      	mov	r4, r3
			p = rx_first[i];
    b6ae:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    b6b2:	b12f      	cbz	r7, b6c0 <usb_isr+0x3fc>
				n = p->next;
    b6b4:	4638      	mov	r0, r7
    b6b6:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    b6b8:	f000 fa36 	bl	bb28 <usb_free>
			while (p) {
    b6bc:	2f00      	cmp	r7, #0
    b6be:	d1f9      	bne.n	b6b4 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    b6c0:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    b6c2:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    b6c6:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    b6ca:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    b6ce:	9300      	str	r3, [sp, #0]
			while (p) {
    b6d0:	b12f      	cbz	r7, b6de <usb_isr+0x41a>
				n = p->next;
    b6d2:	4638      	mov	r0, r7
    b6d4:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    b6d6:	f000 fa27 	bl	bb28 <usb_free>
			while (p) {
    b6da:	2f00      	cmp	r7, #0
    b6dc:	d1f9      	bne.n	b6d2 <usb_isr+0x40e>
			tx_last[i] = NULL;
    b6de:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    b6e0:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    b6e4:	f843 5b04 	str.w	r5, [r3], #4
    b6e8:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    b6ea:	9b01      	ldr	r3, [sp, #4]
    b6ec:	f823 5b02 	strh.w	r5, [r3], #2
    b6f0:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    b6f2:	7823      	ldrb	r3, [r4, #0]
    b6f4:	3b02      	subs	r3, #2
    b6f6:	2b03      	cmp	r3, #3
    b6f8:	f200 8109 	bhi.w	b90e <usb_isr+0x64a>
    b6fc:	e8df f013 	tbh	[pc, r3, lsl #1]
    b700:	0104013f 	.word	0x0104013f
    b704:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    b708:	4a6d      	ldr	r2, [pc, #436]	; (b8c0 <usb_isr+0x5fc>)
						b->desc = 0;
    b70a:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    b70e:	7813      	ldrb	r3, [r2, #0]
    b710:	3301      	adds	r3, #1
    b712:	7013      	strb	r3, [r2, #0]
    b714:	e619      	b.n	b34a <usb_isr+0x86>
						rx_first[endpoint] = packet;
    b716:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    b71a:	4b67      	ldr	r3, [pc, #412]	; (b8b8 <usb_isr+0x5f4>)
    b71c:	e5fe      	b.n	b31c <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    b71e:	5d11      	ldrb	r1, [r2, r4]
    b720:	2902      	cmp	r1, #2
    b722:	d026      	beq.n	b772 <usb_isr+0x4ae>
    b724:	f67f ae11 	bls.w	b34a <usb_isr+0x86>
    b728:	2903      	cmp	r1, #3
    b72a:	d11d      	bne.n	b768 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b72c:	2301      	movs	r3, #1
    b72e:	5513      	strb	r3, [r2, r4]
						break;
    b730:	e60b      	b.n	b34a <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    b732:	07e0      	lsls	r0, r4, #31
    b734:	d46e      	bmi.n	b814 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    b736:	0621      	lsls	r1, r4, #24
    b738:	d421      	bmi.n	b77e <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    b73a:	07a2      	lsls	r2, r4, #30
    b73c:	d508      	bpl.n	b750 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    b73e:	4b61      	ldr	r3, [pc, #388]	; (b8c4 <usb_isr+0x600>)
    b740:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    b744:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    b746:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    b748:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    b74c:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    b750:	06e3      	lsls	r3, r4, #27
    b752:	d503      	bpl.n	b75c <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    b754:	4b5b      	ldr	r3, [pc, #364]	; (b8c4 <usb_isr+0x600>)
    b756:	2210      	movs	r2, #16
    b758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    b75c:	b005      	add	sp, #20
    b75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    b762:	f000 fb59 	bl	be18 <usb_serial_flush_callback>
    b766:	e611      	b.n	b38c <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    b768:	f017 0f08 	tst.w	r7, #8
    b76c:	bf14      	ite	ne
    b76e:	2303      	movne	r3, #3
    b770:	2302      	moveq	r3, #2
    b772:	5513      	strb	r3, [r2, r4]
						break;
    b774:	e5e9      	b.n	b34a <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b776:	2f3f      	cmp	r7, #63	; 0x3f
    b778:	bf98      	it	ls
    b77a:	2200      	movls	r2, #0
    b77c:	e6c5      	b.n	b50a <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b77e:	4b51      	ldr	r3, [pc, #324]	; (b8c4 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    b780:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b782:	210d      	movs	r1, #13
    b784:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    b788:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    b78c:	07a2      	lsls	r2, r4, #30
    b78e:	d5df      	bpl.n	b750 <usb_isr+0x48c>
    b790:	e7d5      	b.n	b73e <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b792:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b796:	7002      	strb	r2, [r0, #0]
    b798:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b79a:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    b79e:	463a      	mov	r2, r7
    b7a0:	bf28      	it	cs
    b7a2:	2240      	movcs	r2, #64	; 0x40
    b7a4:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7a6:	0410      	lsls	r0, r2, #16
	data += size;
    b7a8:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7aa:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    b7ae:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    b7b0:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7b2:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    b7b6:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b7b8:	d055      	beq.n	b866 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    b7ba:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    b7bc:	4b42      	ldr	r3, [pc, #264]	; (b8c8 <usb_isr+0x604>)
    b7be:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b7c0:	2301      	movs	r3, #1
    b7c2:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b7c6:	e606      	b.n	b3d6 <usb_isr+0x112>
			switch (setup.wIndex) {
    b7c8:	8892      	ldrh	r2, [r2, #4]
    b7ca:	b95a      	cbnz	r2, b7e4 <usb_isr+0x520>
    b7cc:	4a3f      	ldr	r2, [pc, #252]	; (b8cc <usb_isr+0x608>)
    b7ce:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    b7d0:	f814 1b01 	ldrb.w	r1, [r4], #1
    b7d4:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    b7d8:	42ac      	cmp	r4, r5
    b7da:	d1f9      	bne.n	b7d0 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    b7dc:	4a3c      	ldr	r2, [pc, #240]	; (b8d0 <usb_isr+0x60c>)
    b7de:	6812      	ldr	r2, [r2, #0]
    b7e0:	2a86      	cmp	r2, #134	; 0x86
    b7e2:	d03c      	beq.n	b85e <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7e4:	4c3b      	ldr	r4, [pc, #236]	; (b8d4 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7e6:	483c      	ldr	r0, [pc, #240]	; (b8d8 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7e8:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7ea:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b7ec:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    b7ee:	f085 0501 	eor.w	r5, r5, #1
    b7f2:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7f4:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    b7f8:	f082 0201 	eor.w	r2, r2, #1
    b7fc:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b7fe:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    b802:	f04f 0000 	mov.w	r0, #0
    b806:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b808:	bf14      	ite	ne
    b80a:	22c8      	movne	r2, #200	; 0xc8
    b80c:	2288      	moveq	r2, #136	; 0x88
    b80e:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    b812:	e5de      	b.n	b3d2 <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    b814:	4b2b      	ldr	r3, [pc, #172]	; (b8c4 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    b816:	4830      	ldr	r0, [pc, #192]	; (b8d8 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    b818:	4930      	ldr	r1, [pc, #192]	; (b8dc <usb_isr+0x618>)
    b81a:	4c31      	ldr	r4, [pc, #196]	; (b8e0 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    b81c:	2502      	movs	r5, #2
    b81e:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    b822:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    b824:	482f      	ldr	r0, [pc, #188]	; (b8e4 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    b826:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    b828:	4d2f      	ldr	r5, [pc, #188]	; (b8e8 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    b82a:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    b82c:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b82e:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    b830:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    b832:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    b834:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    b836:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    b838:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    b83c:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    b83e:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    b840:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    b844:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    b848:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    b84c:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    b850:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    b854:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    b858:	b005      	add	sp, #20
    b85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    b85e:	4a23      	ldr	r2, [pc, #140]	; (b8ec <usb_isr+0x628>)
    b860:	200f      	movs	r0, #15
    b862:	7010      	strb	r0, [r2, #0]
    b864:	e7be      	b.n	b7e4 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    b866:	2f3f      	cmp	r7, #63	; 0x3f
    b868:	d8a7      	bhi.n	b7ba <usb_isr+0x4f6>
    b86a:	e690      	b.n	b58e <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    b86c:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b870:	2f04      	cmp	r7, #4
    b872:	f63f aee8 	bhi.w	b646 <usb_isr+0x382>
    b876:	0c00      	lsrs	r0, r0, #16
    b878:	f47f aee5 	bne.w	b646 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    b87c:	4a05      	ldr	r2, [pc, #20]	; (b894 <usb_isr+0x5d0>)
    b87e:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    b882:	f023 0302 	bic.w	r3, r3, #2
    b886:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    b88a:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    b88c:	4613      	mov	r3, r2
		break;
    b88e:	e64f      	b.n	b530 <usb_isr+0x26c>
    b890:	1fffd288 	.word	0x1fffd288
    b894:	400720c0 	.word	0x400720c0
    b898:	1fffd0e4 	.word	0x1fffd0e4
    b89c:	1fffd304 	.word	0x1fffd304
    b8a0:	1fffd300 	.word	0x1fffd300
    b8a4:	1fffd2dc 	.word	0x1fffd2dc
    b8a8:	1fffd2c8 	.word	0x1fffd2c8
    b8ac:	1fffd2d8 	.word	0x1fffd2d8
    b8b0:	1fffd2e0 	.word	0x1fffd2e0
    b8b4:	1fffd290 	.word	0x1fffd290
    b8b8:	1fffd2a0 	.word	0x1fffd2a0
    b8bc:	1fffd2b8 	.word	0x1fffd2b8
    b8c0:	1fffd2e8 	.word	0x1fffd2e8
    b8c4:	40072000 	.word	0x40072000
    b8c8:	1fffd282 	.word	0x1fffd282
    b8cc:	1fffd2f7 	.word	0x1fffd2f7
    b8d0:	1fffd2f8 	.word	0x1fffd2f8
    b8d4:	1fffd281 	.word	0x1fffd281
    b8d8:	1fffd280 	.word	0x1fffd280
    b8dc:	1fff8000 	.word	0x1fff8000
    b8e0:	00400088 	.word	0x00400088
    b8e4:	1fffd200 	.word	0x1fffd200
    b8e8:	1fffd240 	.word	0x1fffd240
    b8ec:	1fffd2dd 	.word	0x1fffd2dd
		reply_buffer[0] = usb_configuration;
    b8f0:	4b48      	ldr	r3, [pc, #288]	; (ba14 <usb_isr+0x750>)
    b8f2:	4949      	ldr	r1, [pc, #292]	; (ba18 <usb_isr+0x754>)
    b8f4:	781b      	ldrb	r3, [r3, #0]
    b8f6:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    b8f8:	460b      	mov	r3, r1
		break;
    b8fa:	e619      	b.n	b530 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    b8fc:	4a46      	ldr	r2, [pc, #280]	; (ba18 <usb_isr+0x754>)
    b8fe:	2300      	movs	r3, #0
    b900:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    b902:	4b45      	ldr	r3, [pc, #276]	; (ba18 <usb_isr+0x754>)
		datalen = 2;
    b904:	2202      	movs	r2, #2
		break;
    b906:	e613      	b.n	b530 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    b908:	f04f 0301 	mov.w	r3, #1
    b90c:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    b90e:	4b43      	ldr	r3, [pc, #268]	; (ba1c <usb_isr+0x758>)
    b910:	42b3      	cmp	r3, r6
    b912:	f104 0401 	add.w	r4, r4, #1
    b916:	f47f aeca 	bne.w	b6ae <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    b91a:	4e41      	ldr	r6, [pc, #260]	; (ba20 <usb_isr+0x75c>)
    b91c:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    b91e:	f8df 8104 	ldr.w	r8, [pc, #260]	; ba24 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b922:	4f41      	ldr	r7, [pc, #260]	; (ba28 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    b924:	2300      	movs	r3, #0
    b926:	7033      	strb	r3, [r6, #0]
    b928:	2504      	movs	r5, #4
			epconf = *cfg++;
    b92a:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    b92e:	4a3f      	ldr	r2, [pc, #252]	; (ba2c <usb_isr+0x768>)
    b930:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    b932:	071b      	lsls	r3, r3, #28
    b934:	d425      	bmi.n	b982 <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    b936:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    b93a:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b93e:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    b940:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b942:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    b944:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    b948:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    b94c:	d1ed      	bne.n	b92a <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b94e:	4f38      	ldr	r7, [pc, #224]	; (ba30 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b950:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b952:	783a      	ldrb	r2, [r7, #0]
    b954:	f042 0002 	orr.w	r0, r2, #2
    b958:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    b95c:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b960:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b964:	2d00      	cmp	r5, #0
    b966:	d14d      	bne.n	ba04 <usb_isr+0x740>
    b968:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    b96a:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    b96e:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    b970:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b972:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b976:	2301      	movs	r3, #1
    b978:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b97c:	e52b      	b.n	b3d6 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    b97e:	7025      	strb	r5, [r4, #0]
				break;
    b980:	e7c5      	b.n	b90e <usb_isr+0x64a>
				p = usb_malloc();
    b982:	f000 f8b1 	bl	bae8 <usb_malloc>
				if (p) {
    b986:	2800      	cmp	r0, #0
    b988:	d032      	beq.n	b9f0 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    b98a:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    b98e:	3008      	adds	r0, #8
    b990:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b992:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    b996:	f000 f8a7 	bl	bae8 <usb_malloc>
				if (p) {
    b99a:	b308      	cbz	r0, b9e0 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    b99c:	f045 0301 	orr.w	r3, r5, #1
    b9a0:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    b9a4:	3008      	adds	r0, #8
    b9a6:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b9a8:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    b9ac:	e7c3      	b.n	b936 <usb_isr+0x672>
			if (list->addr == NULL) break;
    b9ae:	4a21      	ldr	r2, [pc, #132]	; (ba34 <usb_isr+0x770>)
    b9b0:	6853      	ldr	r3, [r2, #4]
    b9b2:	2b00      	cmp	r3, #0
    b9b4:	f43f ae47 	beq.w	b646 <usb_isr+0x382>
    b9b8:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b9ba:	b2bf      	uxth	r7, r7
    b9bc:	e004      	b.n	b9c8 <usb_isr+0x704>
			if (list->addr == NULL) break;
    b9be:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    b9c0:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    b9c2:	2b00      	cmp	r3, #0
    b9c4:	f43f ae3f 	beq.w	b646 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    b9c8:	8811      	ldrh	r1, [r2, #0]
    b9ca:	4281      	cmp	r1, r0
    b9cc:	d1f7      	bne.n	b9be <usb_isr+0x6fa>
    b9ce:	8851      	ldrh	r1, [r2, #2]
    b9d0:	42b9      	cmp	r1, r7
    b9d2:	d1f4      	bne.n	b9be <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    b9d4:	0a00      	lsrs	r0, r0, #8
    b9d6:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    b9d8:	bf0c      	ite	eq
    b9da:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    b9dc:	8912      	ldrhne	r2, [r2, #8]
    b9de:	e5a7      	b.n	b530 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    b9e0:	7833      	ldrb	r3, [r6, #0]
    b9e2:	3301      	adds	r3, #1
    b9e4:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    b9e6:	f045 0301 	orr.w	r3, r5, #1
    b9ea:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    b9ee:	e7a2      	b.n	b936 <usb_isr+0x672>
					usb_rx_memory_needed++;
    b9f0:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    b9f2:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    b9f6:	3301      	adds	r3, #1
    b9f8:	7033      	strb	r3, [r6, #0]
    b9fa:	e7cc      	b.n	b996 <usb_isr+0x6d2>
		data = reply_buffer;
    b9fc:	4b06      	ldr	r3, [pc, #24]	; (ba18 <usb_isr+0x754>)
		datalen = 2;
    b9fe:	2202      	movs	r2, #2
    ba00:	e596      	b.n	b530 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    ba02:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    ba04:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba06:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    ba08:	f082 0601 	eor.w	r6, r2, #1
    ba0c:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba0e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    ba12:	e5bc      	b.n	b58e <usb_isr+0x2ca>
    ba14:	1fffd2dc 	.word	0x1fffd2dc
    ba18:	1fffd288 	.word	0x1fffd288
    ba1c:	1fffd2a0 	.word	0x1fffd2a0
    ba20:	1fffd2e8 	.word	0x1fffd2e8
    ba24:	00015214 	.word	0x00015214
    ba28:	00400088 	.word	0x00400088
    ba2c:	400720c0 	.word	0x400720c0
    ba30:	1fffd280 	.word	0x1fffd280
    ba34:	000151c0 	.word	0x000151c0

0000ba38 <usb_init>:



void usb_init(void)
{
    ba38:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    ba3a:	f000 fab3 	bl	bfa4 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    ba3e:	2300      	movs	r3, #0
    ba40:	4a1a      	ldr	r2, [pc, #104]	; (baac <usb_init+0x74>)
		table[i].desc = 0;
    ba42:	4619      	mov	r1, r3
    ba44:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    ba48:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    ba4c:	3301      	adds	r3, #1
    ba4e:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    ba50:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    ba52:	d1f7      	bne.n	ba44 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ba54:	4c16      	ldr	r4, [pc, #88]	; (bab0 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    ba56:	4b17      	ldr	r3, [pc, #92]	; (bab4 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ba58:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ba5a:	4d17      	ldr	r5, [pc, #92]	; (bab8 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    ba5c:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    ba60:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    ba62:	f3c2 2407 	ubfx	r4, r2, #8, #8
    ba66:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    ba6a:	4c14      	ldr	r4, [pc, #80]	; (babc <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    ba6c:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    ba6e:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ba72:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ba76:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    ba78:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ba7c:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    ba80:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    ba84:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    ba88:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    ba8c:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    ba8e:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    ba92:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    ba94:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    ba98:	2370      	movs	r3, #112	; 0x70
    ba9a:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    ba9e:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    baa2:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    baa4:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    baa8:	7223      	strb	r3, [r4, #8]
}
    baaa:	bd70      	pop	{r4, r5, r6, pc}
    baac:	1fff8000 	.word	0x1fff8000
    bab0:	40048000 	.word	0x40048000
    bab4:	40072000 	.word	0x40072000
    bab8:	e000e400 	.word	0xe000e400
    babc:	40072100 	.word	0x40072100

0000bac0 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    bac0:	f000 b8ac 	b.w	bc1c <usb_serial_flush_input>

0000bac4 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    bac4:	f000 b87c 	b.w	bbc0 <usb_serial_peekchar>

0000bac8 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    bac8:	f000 b856 	b.w	bb78 <usb_serial_getchar>

0000bacc <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    bacc:	f000 b890 	b.w	bbf0 <usb_serial_available>

0000bad0 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    bad0:	f000 b976 	b.w	bdc0 <usb_serial_flush_output>

0000bad4 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bad4:	f000 b950 	b.w	bd78 <usb_serial_write_buffer_free>

0000bad8 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bad8:	4608      	mov	r0, r1
    bada:	4611      	mov	r1, r2
    badc:	f000 b8ba 	b.w	bc54 <usb_serial_write>

0000bae0 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bae0:	4608      	mov	r0, r1
    bae2:	f000 b93b 	b.w	bd5c <usb_serial_putchar>
    bae6:	bf00      	nop

0000bae8 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    bae8:	b672      	cpsid	i
	avail = usb_buffer_available;
    baea:	490d      	ldr	r1, [pc, #52]	; (bb20 <usb_malloc+0x38>)
    baec:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    baee:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    baf2:	280b      	cmp	r0, #11
    baf4:	dc10      	bgt.n	bb18 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    baf6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bafa:	40c2      	lsrs	r2, r0
    bafc:	ea23 0302 	bic.w	r3, r3, r2
    bb00:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bb02:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    bb04:	4a07      	ldr	r2, [pc, #28]	; (bb24 <usb_malloc+0x3c>)
    bb06:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    bb0a:	00c1      	lsls	r1, r0, #3
    bb0c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    bb10:	2300      	movs	r3, #0
    bb12:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    bb14:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    bb16:	4770      	bx	lr
		__enable_irq();
    bb18:	b662      	cpsie	i
		return NULL;
    bb1a:	2000      	movs	r0, #0
    bb1c:	4770      	bx	lr
    bb1e:	bf00      	nop
    bb20:	1fff8a14 	.word	0x1fff8a14
    bb24:	1fff83bc 	.word	0x1fff83bc

0000bb28 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bb28:	4b0e      	ldr	r3, [pc, #56]	; (bb64 <usb_free+0x3c>)
    bb2a:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    bb2c:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    bb30:	d210      	bcs.n	bb54 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    bb32:	4a0d      	ldr	r2, [pc, #52]	; (bb68 <usb_free+0x40>)
    bb34:	7812      	ldrb	r2, [r2, #0]
    bb36:	b972      	cbnz	r2, bb56 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    bb38:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bb3a:	4a0c      	ldr	r2, [pc, #48]	; (bb6c <usb_free+0x44>)
	usb_buffer_available |= mask;
    bb3c:	490c      	ldr	r1, [pc, #48]	; (bb70 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bb3e:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    bb42:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    bb44:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bb48:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    bb4a:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    bb4e:	4303      	orrs	r3, r0
    bb50:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bb52:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    bb54:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    bb56:	4a07      	ldr	r2, [pc, #28]	; (bb74 <usb_free+0x4c>)
    bb58:	7812      	ldrb	r2, [r2, #0]
    bb5a:	2a00      	cmp	r2, #0
    bb5c:	d0ec      	beq.n	bb38 <usb_free+0x10>
		usb_rx_memory(p);
    bb5e:	f7ff bb2d 	b.w	b1bc <usb_rx_memory>
    bb62:	bf00      	nop
    bb64:	1fff83bc 	.word	0x1fff83bc
    bb68:	1fffd2e8 	.word	0x1fffd2e8
    bb6c:	38e38e39 	.word	0x38e38e39
    bb70:	1fff8a14 	.word	0x1fff8a14
    bb74:	1fffd2dc 	.word	0x1fffd2dc

0000bb78 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    bb78:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    bb7a:	4c0f      	ldr	r4, [pc, #60]	; (bbb8 <usb_serial_getchar+0x40>)
    bb7c:	6820      	ldr	r0, [r4, #0]
    bb7e:	b178      	cbz	r0, bba0 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    bb80:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    bb82:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    bb84:	18c1      	adds	r1, r0, r3
    bb86:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    bb88:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    bb8a:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    bb8c:	d902      	bls.n	bb94 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    bb8e:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    bb90:	4628      	mov	r0, r5
    bb92:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    bb94:	f7ff ffc8 	bl	bb28 <usb_free>
		rx_packet = NULL;
    bb98:	2300      	movs	r3, #0
    bb9a:	6023      	str	r3, [r4, #0]
}
    bb9c:	4628      	mov	r0, r5
    bb9e:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    bba0:	4b06      	ldr	r3, [pc, #24]	; (bbbc <usb_serial_getchar+0x44>)
    bba2:	781b      	ldrb	r3, [r3, #0]
    bba4:	b12b      	cbz	r3, bbb2 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    bba6:	2003      	movs	r0, #3
    bba8:	f7ff fad0 	bl	b14c <usb_rx>
    bbac:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    bbae:	2800      	cmp	r0, #0
    bbb0:	d1e6      	bne.n	bb80 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    bbb2:	f04f 35ff 	mov.w	r5, #4294967295
    bbb6:	e7eb      	b.n	bb90 <usb_serial_getchar+0x18>
    bbb8:	1fffd2ec 	.word	0x1fffd2ec
    bbbc:	1fffd2dc 	.word	0x1fffd2dc

0000bbc0 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    bbc0:	b510      	push	{r4, lr}
	if (!rx_packet) {
    bbc2:	4c09      	ldr	r4, [pc, #36]	; (bbe8 <usb_serial_peekchar+0x28>)
    bbc4:	6820      	ldr	r0, [r4, #0]
    bbc6:	b118      	cbz	r0, bbd0 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    bbc8:	8843      	ldrh	r3, [r0, #2]
    bbca:	4418      	add	r0, r3
    bbcc:	7a00      	ldrb	r0, [r0, #8]
}
    bbce:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    bbd0:	4b06      	ldr	r3, [pc, #24]	; (bbec <usb_serial_peekchar+0x2c>)
    bbd2:	781b      	ldrb	r3, [r3, #0]
    bbd4:	b12b      	cbz	r3, bbe2 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    bbd6:	2003      	movs	r0, #3
    bbd8:	f7ff fab8 	bl	b14c <usb_rx>
    bbdc:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    bbde:	2800      	cmp	r0, #0
    bbe0:	d1f2      	bne.n	bbc8 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    bbe2:	f04f 30ff 	mov.w	r0, #4294967295
}
    bbe6:	bd10      	pop	{r4, pc}
    bbe8:	1fffd2ec 	.word	0x1fffd2ec
    bbec:	1fffd2dc 	.word	0x1fffd2dc

0000bbf0 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    bbf0:	4b08      	ldr	r3, [pc, #32]	; (bc14 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    bbf2:	4a09      	ldr	r2, [pc, #36]	; (bc18 <usb_serial_available+0x28>)
    bbf4:	681b      	ldr	r3, [r3, #0]
{
    bbf6:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    bbf8:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    bbfa:	b11b      	cbz	r3, bc04 <usb_serial_available+0x14>
    bbfc:	881a      	ldrh	r2, [r3, #0]
    bbfe:	885b      	ldrh	r3, [r3, #2]
    bc00:	1ad3      	subs	r3, r2, r3
    bc02:	441c      	add	r4, r3
	if (count == 0) yield();
    bc04:	b10c      	cbz	r4, bc0a <usb_serial_available+0x1a>
	return count;
}
    bc06:	4620      	mov	r0, r4
    bc08:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    bc0a:	f000 f929 	bl	be60 <yield>
}
    bc0e:	4620      	mov	r0, r4
    bc10:	bd10      	pop	{r4, pc}
    bc12:	bf00      	nop
    bc14:	1fffd2ec 	.word	0x1fffd2ec
    bc18:	1fffd2e0 	.word	0x1fffd2e0

0000bc1c <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    bc1c:	4b0b      	ldr	r3, [pc, #44]	; (bc4c <usb_serial_flush_input+0x30>)
    bc1e:	781b      	ldrb	r3, [r3, #0]
    bc20:	b19b      	cbz	r3, bc4a <usb_serial_flush_input+0x2e>
{
    bc22:	b510      	push	{r4, lr}
	if (rx_packet) {
    bc24:	4c0a      	ldr	r4, [pc, #40]	; (bc50 <usb_serial_flush_input+0x34>)
    bc26:	6820      	ldr	r0, [r4, #0]
    bc28:	b148      	cbz	r0, bc3e <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    bc2a:	f7ff ff7d 	bl	bb28 <usb_free>
		rx_packet = NULL;
    bc2e:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    bc30:	2003      	movs	r0, #3
		rx_packet = NULL;
    bc32:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    bc34:	f7ff fa8a 	bl	b14c <usb_rx>
		if (!rx) break;
    bc38:	b130      	cbz	r0, bc48 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    bc3a:	f7ff ff75 	bl	bb28 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    bc3e:	2003      	movs	r0, #3
    bc40:	f7ff fa84 	bl	b14c <usb_rx>
		if (!rx) break;
    bc44:	2800      	cmp	r0, #0
    bc46:	d1f8      	bne.n	bc3a <usb_serial_flush_input+0x1e>
	}
}
    bc48:	bd10      	pop	{r4, pc}
    bc4a:	4770      	bx	lr
    bc4c:	1fffd2dc 	.word	0x1fffd2dc
    bc50:	1fffd2ec 	.word	0x1fffd2ec

0000bc54 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    bc58:	f8df 90ec 	ldr.w	r9, [pc, #236]	; bd48 <usb_serial_write+0xf4>
{
    bc5c:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    bc5e:	2201      	movs	r2, #1
    bc60:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    bc64:	9101      	str	r1, [sp, #4]
    bc66:	b379      	cbz	r1, bcc8 <usb_serial_write+0x74>
    bc68:	4f38      	ldr	r7, [pc, #224]	; (bd4c <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    bc6a:	f8df 80e4 	ldr.w	r8, [pc, #228]	; bd50 <usb_serial_write+0xfc>
	while (size > 0) {
    bc6e:	9d01      	ldr	r5, [sp, #4]
    bc70:	4e38      	ldr	r6, [pc, #224]	; (bd54 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    bc72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; bd58 <usb_serial_write+0x104>
    bc76:	4683      	mov	fp, r0
		if (!tx_packet) {
    bc78:	6839      	ldr	r1, [r7, #0]
    bc7a:	b3a1      	cbz	r1, bce6 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    bc7c:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    bc80:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    bc84:	45ac      	cmp	ip, r5
    bc86:	bf28      	it	cs
    bc88:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    bc8a:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    bc8e:	2200      	movs	r2, #0
		tx_packet->index += len;
    bc90:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    bc92:	7032      	strb	r2, [r6, #0]
		size -= len;
    bc94:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    bc98:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    bc9a:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    bc9e:	f1bc 0f00 	cmp.w	ip, #0
    bca2:	d00a      	beq.n	bcba <usb_serial_write+0x66>
    bca4:	f10e 3eff 	add.w	lr, lr, #4294967295
    bca8:	4472      	add	r2, lr
    bcaa:	44dc      	add	ip, fp
    bcac:	f81b 4b01 	ldrb.w	r4, [fp], #1
    bcb0:	f802 4f01 	strb.w	r4, [r2, #1]!
    bcb4:	45dc      	cmp	ip, fp
    bcb6:	d1f9      	bne.n	bcac <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    bcb8:	884c      	ldrh	r4, [r1, #2]
    bcba:	2c3f      	cmp	r4, #63	; 0x3f
    bcbc:	d80b      	bhi.n	bcd6 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    bcbe:	2205      	movs	r2, #5
    bcc0:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    bcc4:	2d00      	cmp	r5, #0
    bcc6:	d1d7      	bne.n	bc78 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    bcc8:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    bcca:	2300      	movs	r3, #0
    bccc:	f889 3000 	strb.w	r3, [r9]
}
    bcd0:	b003      	add	sp, #12
    bcd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    bcd6:	2240      	movs	r2, #64	; 0x40
    bcd8:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    bcda:	2004      	movs	r0, #4
    bcdc:	f7ff faae 	bl	b23c <usb_tx>
			tx_packet = NULL;
    bce0:	2200      	movs	r2, #0
    bce2:	603a      	str	r2, [r7, #0]
    bce4:	e7eb      	b.n	bcbe <usb_serial_write+0x6a>
				if (!usb_configuration) {
    bce6:	f898 2000 	ldrb.w	r2, [r8]
    bcea:	b32a      	cbz	r2, bd38 <usb_serial_write+0xe4>
    bcec:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    bcf0:	e008      	b.n	bd04 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bcf2:	3c01      	subs	r4, #1
    bcf4:	d019      	beq.n	bd2a <usb_serial_write+0xd6>
    bcf6:	7832      	ldrb	r2, [r6, #0]
    bcf8:	b9ba      	cbnz	r2, bd2a <usb_serial_write+0xd6>
				yield();
    bcfa:	f000 f8b1 	bl	be60 <yield>
				if (!usb_configuration) {
    bcfe:	f898 2000 	ldrb.w	r2, [r8]
    bd02:	b1ca      	cbz	r2, bd38 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    bd04:	2004      	movs	r0, #4
    bd06:	f7ff fa43 	bl	b190 <usb_tx_packet_count>
    bd0a:	2807      	cmp	r0, #7
    bd0c:	d8f1      	bhi.n	bcf2 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    bd0e:	f04f 0301 	mov.w	r3, #1
    bd12:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    bd16:	f7ff fee7 	bl	bae8 <usb_malloc>
    bd1a:	4601      	mov	r1, r0
    bd1c:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    bd1e:	2800      	cmp	r0, #0
    bd20:	d1ac      	bne.n	bc7c <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bd22:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    bd24:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    bd28:	d1e5      	bne.n	bcf6 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    bd2a:	2301      	movs	r3, #1
					return -1;
    bd2c:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    bd30:	7033      	strb	r3, [r6, #0]
}
    bd32:	b003      	add	sp, #12
    bd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    bd38:	2300      	movs	r3, #0
					return -1;
    bd3a:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    bd3e:	f889 3000 	strb.w	r3, [r9]
}
    bd42:	b003      	add	sp, #12
    bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd48:	1fffd2f1 	.word	0x1fffd2f1
    bd4c:	1fffd2f4 	.word	0x1fffd2f4
    bd50:	1fffd2dc 	.word	0x1fffd2dc
    bd54:	1fffd2f0 	.word	0x1fffd2f0
    bd58:	1fffd308 	.word	0x1fffd308

0000bd5c <usb_serial_putchar>:
{
    bd5c:	b500      	push	{lr}
    bd5e:	b083      	sub	sp, #12
    bd60:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    bd62:	2101      	movs	r1, #1
    bd64:	f10d 0007 	add.w	r0, sp, #7
{
    bd68:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    bd6c:	f7ff ff72 	bl	bc54 <usb_serial_write>
}
    bd70:	b003      	add	sp, #12
    bd72:	f85d fb04 	ldr.w	pc, [sp], #4
    bd76:	bf00      	nop

0000bd78 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    bd78:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    bd7a:	4d0e      	ldr	r5, [pc, #56]	; (bdb4 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    bd7c:	4c0e      	ldr	r4, [pc, #56]	; (bdb8 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    bd7e:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    bd80:	2301      	movs	r3, #1
    bd82:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    bd84:	b128      	cbz	r0, bd92 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    bd86:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    bd88:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    bd8a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    bd8e:	7023      	strb	r3, [r4, #0]
	return len;
}
    bd90:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    bd92:	4b0a      	ldr	r3, [pc, #40]	; (bdbc <usb_serial_write_buffer_free+0x44>)
    bd94:	781b      	ldrb	r3, [r3, #0]
    bd96:	b913      	cbnz	r3, bd9e <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    bd98:	2000      	movs	r0, #0
    bd9a:	7020      	strb	r0, [r4, #0]
}
    bd9c:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    bd9e:	2004      	movs	r0, #4
    bda0:	f7ff f9f6 	bl	b190 <usb_tx_packet_count>
		if (!usb_configuration ||
    bda4:	2807      	cmp	r0, #7
    bda6:	d8f7      	bhi.n	bd98 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    bda8:	f7ff fe9e 	bl	bae8 <usb_malloc>
    bdac:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    bdae:	2800      	cmp	r0, #0
    bdb0:	d1e9      	bne.n	bd86 <usb_serial_write_buffer_free+0xe>
    bdb2:	e7f1      	b.n	bd98 <usb_serial_write_buffer_free+0x20>
    bdb4:	1fffd2f4 	.word	0x1fffd2f4
    bdb8:	1fffd2f1 	.word	0x1fffd2f1
    bdbc:	1fffd2dc 	.word	0x1fffd2dc

0000bdc0 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    bdc2:	4b11      	ldr	r3, [pc, #68]	; (be08 <usb_serial_flush_output+0x48>)
    bdc4:	781b      	ldrb	r3, [r3, #0]
    bdc6:	b18b      	cbz	r3, bdec <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    bdc8:	4e10      	ldr	r6, [pc, #64]	; (be0c <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    bdca:	4d11      	ldr	r5, [pc, #68]	; (be10 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    bdcc:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    bdce:	2701      	movs	r7, #1
    bdd0:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    bdd2:	b164      	cbz	r4, bdee <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    bdd4:	4b0f      	ldr	r3, [pc, #60]	; (be14 <usb_serial_flush_output+0x54>)
    bdd6:	2700      	movs	r7, #0
    bdd8:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    bdda:	8863      	ldrh	r3, [r4, #2]
    bddc:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    bdde:	4621      	mov	r1, r4
    bde0:	2004      	movs	r0, #4
    bde2:	f7ff fa2b 	bl	b23c <usb_tx>
		tx_packet = NULL;
    bde6:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    bde8:	2300      	movs	r3, #0
    bdea:	702b      	strb	r3, [r5, #0]
}
    bdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    bdee:	f7ff fe7b 	bl	bae8 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    bdf2:	4b08      	ldr	r3, [pc, #32]	; (be14 <usb_serial_flush_output+0x54>)
		if (tx) {
    bdf4:	4601      	mov	r1, r0
    bdf6:	b120      	cbz	r0, be02 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    bdf8:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    bdfa:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    bdfc:	f7ff fa1e 	bl	b23c <usb_tx>
    be00:	e7f2      	b.n	bde8 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    be02:	701f      	strb	r7, [r3, #0]
    be04:	e7f0      	b.n	bde8 <usb_serial_flush_output+0x28>
    be06:	bf00      	nop
    be08:	1fffd2dc 	.word	0x1fffd2dc
    be0c:	1fffd2f4 	.word	0x1fffd2f4
    be10:	1fffd2f1 	.word	0x1fffd2f1
    be14:	1fffd308 	.word	0x1fffd308

0000be18 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    be18:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    be1a:	4b0e      	ldr	r3, [pc, #56]	; (be54 <usb_serial_flush_callback+0x3c>)
    be1c:	781b      	ldrb	r3, [r3, #0]
    be1e:	b953      	cbnz	r3, be36 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    be20:	4c0d      	ldr	r4, [pc, #52]	; (be58 <usb_serial_flush_callback+0x40>)
    be22:	6821      	ldr	r1, [r4, #0]
    be24:	b141      	cbz	r1, be38 <usb_serial_flush_callback+0x20>
    be26:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    be2a:	884b      	ldrh	r3, [r1, #2]
    be2c:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    be2e:	2004      	movs	r0, #4
    be30:	f7ff fa04 	bl	b23c <usb_tx>
		tx_packet = NULL;
    be34:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    be36:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    be38:	f7ff fe56 	bl	bae8 <usb_malloc>
		if (tx) {
    be3c:	4601      	mov	r1, r0
    be3e:	b120      	cbz	r0, be4a <usb_serial_flush_callback+0x32>
}
    be40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    be44:	2004      	movs	r0, #4
    be46:	f7ff b9f9 	b.w	b23c <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    be4a:	4b04      	ldr	r3, [pc, #16]	; (be5c <usb_serial_flush_callback+0x44>)
    be4c:	2201      	movs	r2, #1
    be4e:	701a      	strb	r2, [r3, #0]
}
    be50:	bd38      	pop	{r3, r4, r5, pc}
    be52:	bf00      	nop
    be54:	1fffd2f1 	.word	0x1fffd2f1
    be58:	1fffd2f4 	.word	0x1fffd2f4
    be5c:	1fffd308 	.word	0x1fffd308

0000be60 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    be60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    be64:	4e32      	ldr	r6, [pc, #200]	; (bf30 <yield+0xd0>)
    be66:	7833      	ldrb	r3, [r6, #0]
    be68:	b163      	cbz	r3, be84 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    be6a:	4f32      	ldr	r7, [pc, #200]	; (bf34 <yield+0xd4>)
    be6c:	783a      	ldrb	r2, [r7, #0]
    be6e:	b94a      	cbnz	r2, be84 <yield+0x24>
	running = 1;
    be70:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    be72:	07d9      	lsls	r1, r3, #31
	running = 1;
    be74:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    be76:	d443      	bmi.n	bf00 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    be78:	079a      	lsls	r2, r3, #30
    be7a:	d426      	bmi.n	beca <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    be7c:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    be7e:	075b      	lsls	r3, r3, #29
	running = 0;
    be80:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    be82:	d401      	bmi.n	be88 <yield+0x28>
	
};
    be84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    be88:	4b2b      	ldr	r3, [pc, #172]	; (bf38 <yield+0xd8>)
    be8a:	681a      	ldr	r2, [r3, #0]
    be8c:	2a00      	cmp	r2, #0
    be8e:	d0f9      	beq.n	be84 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    be90:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    be94:	2a00      	cmp	r2, #0
    be96:	d1f5      	bne.n	be84 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    be98:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    be9c:	b672      	cpsid	i
		EventResponder *first = firstYield;
    be9e:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    bea0:	2800      	cmp	r0, #0
    bea2:	d03a      	beq.n	bf1a <yield+0xba>
		if (runningFromYield) {
    bea4:	4c25      	ldr	r4, [pc, #148]	; (bf3c <yield+0xdc>)
    bea6:	7821      	ldrb	r1, [r4, #0]
    bea8:	2900      	cmp	r1, #0
    beaa:	d136      	bne.n	bf1a <yield+0xba>
		firstYield = first->_next;
    beac:	6942      	ldr	r2, [r0, #20]
    beae:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    beb0:	2301      	movs	r3, #1
    beb2:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    beb4:	2a00      	cmp	r2, #0
    beb6:	d037      	beq.n	bf28 <yield+0xc8>
			firstYield->_prev = nullptr;
    beb8:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    beba:	b905      	cbnz	r5, bebe <yield+0x5e>
    bebc:	b662      	cpsie	i
		first->_triggered = false;
    bebe:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    bec0:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    bec2:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    bec4:	4798      	blx	r3
		runningFromYield = false;
    bec6:	7025      	strb	r5, [r4, #0]
    bec8:	e7dc      	b.n	be84 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    beca:	f8df 8074 	ldr.w	r8, [pc, #116]	; bf40 <yield+0xe0>
    bece:	f898 2000 	ldrb.w	r2, [r8]
    bed2:	2a00      	cmp	r2, #0
    bed4:	d0d2      	beq.n	be7c <yield+0x1c>
    bed6:	2500      	movs	r5, #0
    bed8:	f8df 9068 	ldr.w	r9, [pc, #104]	; bf44 <yield+0xe4>
    bedc:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    bede:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    bee2:	6823      	ldr	r3, [r4, #0]
    bee4:	4620      	mov	r0, r4
    bee6:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bee8:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    beea:	4798      	blx	r3
    beec:	b108      	cbz	r0, bef2 <yield+0x92>
    beee:	6923      	ldr	r3, [r4, #16]
    bef0:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bef2:	f898 2000 	ldrb.w	r2, [r8]
    bef6:	b2eb      	uxtb	r3, r5
    bef8:	429a      	cmp	r2, r3
    befa:	d8f0      	bhi.n	bede <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    befc:	7833      	ldrb	r3, [r6, #0]
    befe:	e7bd      	b.n	be7c <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    bf00:	f7ff fe76 	bl	bbf0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    bf04:	b968      	cbnz	r0, bf22 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    bf06:	4b10      	ldr	r3, [pc, #64]	; (bf48 <yield+0xe8>)
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	b90b      	cbnz	r3, bf10 <yield+0xb0>
    bf0c:	7833      	ldrb	r3, [r6, #0]
    bf0e:	e7b3      	b.n	be78 <yield+0x18>
    bf10:	7833      	ldrb	r3, [r6, #0]
    bf12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    bf16:	7033      	strb	r3, [r6, #0]
    bf18:	e7ae      	b.n	be78 <yield+0x18>
		if (doit) __enable_irq();
    bf1a:	2d00      	cmp	r5, #0
    bf1c:	d1b2      	bne.n	be84 <yield+0x24>
    bf1e:	b662      	cpsie	i
    bf20:	e7b0      	b.n	be84 <yield+0x24>
		if (Serial.available()) serialEvent();
    bf22:	f000 f83d 	bl	bfa0 <serialEvent()>
    bf26:	e7ee      	b.n	bf06 <yield+0xa6>
			lastYield = nullptr;
    bf28:	4b08      	ldr	r3, [pc, #32]	; (bf4c <yield+0xec>)
    bf2a:	601a      	str	r2, [r3, #0]
    bf2c:	e7c5      	b.n	beba <yield+0x5a>
    bf2e:	bf00      	nop
    bf30:	1fff8a18 	.word	0x1fff8a18
    bf34:	1fffd309 	.word	0x1fffd309
    bf38:	1fffd0cc 	.word	0x1fffd0cc
    bf3c:	1fffd0d8 	.word	0x1fffd0d8
    bf40:	1fffd318 	.word	0x1fffd318
    bf44:	1fffd30c 	.word	0x1fffd30c
    bf48:	00014f84 	.word	0x00014f84
    bf4c:	1fffd0dc 	.word	0x1fffd0dc

0000bf50 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    bf50:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bf52:	4e10      	ldr	r6, [pc, #64]	; (bf94 <HardwareSerial::addToSerialEventsList()+0x44>)
    bf54:	4d10      	ldr	r5, [pc, #64]	; (bf98 <HardwareSerial::addToSerialEventsList()+0x48>)
    bf56:	7834      	ldrb	r4, [r6, #0]
    bf58:	b1d4      	cbz	r4, bf90 <HardwareSerial::addToSerialEventsList()+0x40>
    bf5a:	1e62      	subs	r2, r4, #1
    bf5c:	b2d2      	uxtb	r2, r2
    bf5e:	1d29      	adds	r1, r5, #4
    bf60:	462b      	mov	r3, r5
    bf62:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    bf66:	e001      	b.n	bf6c <HardwareSerial::addToSerialEventsList()+0x1c>
    bf68:	428b      	cmp	r3, r1
    bf6a:	d005      	beq.n	bf78 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    bf6c:	f853 2b04 	ldr.w	r2, [r3], #4
    bf70:	4282      	cmp	r2, r0
    bf72:	d1f9      	bne.n	bf68 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    bf74:	bc70      	pop	{r4, r5, r6}
    bf76:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    bf78:	1c63      	adds	r3, r4, #1
    bf7a:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    bf7c:	4a07      	ldr	r2, [pc, #28]	; (bf9c <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    bf7e:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    bf80:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    bf82:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    bf86:	f043 0302 	orr.w	r3, r3, #2
    bf8a:	7013      	strb	r3, [r2, #0]
}
    bf8c:	bc70      	pop	{r4, r5, r6}
    bf8e:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    bf90:	2301      	movs	r3, #1
    bf92:	e7f3      	b.n	bf7c <HardwareSerial::addToSerialEventsList()+0x2c>
    bf94:	1fffd318 	.word	0x1fffd318
    bf98:	1fffd30c 	.word	0x1fffd30c
    bf9c:	1fff8a18 	.word	0x1fff8a18

0000bfa0 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    bfa0:	4770      	bx	lr
    bfa2:	bf00      	nop

0000bfa4 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    bfa4:	b510      	push	{r4, lr}
    bfa6:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    bfa8:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    bfaa:	4a17      	ldr	r2, [pc, #92]	; (c008 <usb_init_serialnumber+0x64>)
    bfac:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    bfae:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    bfb0:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    bfb2:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    bfb4:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    bfb6:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    bfb8:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    bfba:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    bfbc:	7813      	ldrb	r3, [r2, #0]
    bfbe:	061b      	lsls	r3, r3, #24
    bfc0:	d5fc      	bpl.n	bfbc <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    bfc2:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    bfc4:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    bfc6:	4b11      	ldr	r3, [pc, #68]	; (c00c <usb_init_serialnumber+0x68>)
    bfc8:	4c11      	ldr	r4, [pc, #68]	; (c010 <usb_init_serialnumber+0x6c>)
    bfca:	4298      	cmp	r0, r3
    bfcc:	bf38      	it	cc
    bfce:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    bfd2:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    bfd4:	bf38      	it	cc
    bfd6:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    bfd8:	220a      	movs	r2, #10
    bfda:	f7fd fd29 	bl	9a30 <ultoa>
	for (i=0; i<10; i++) {
    bfde:	a901      	add	r1, sp, #4
    bfe0:	4620      	mov	r0, r4
    bfe2:	2300      	movs	r3, #0
		char c = buf[i];
    bfe4:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    bfe8:	3301      	adds	r3, #1
		if (!c) break;
    bfea:	b13a      	cbz	r2, bffc <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    bfec:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    bfee:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    bff2:	d1f7      	bne.n	bfe4 <usb_init_serialnumber+0x40>
    bff4:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bff6:	7023      	strb	r3, [r4, #0]
}
    bff8:	b004      	add	sp, #16
    bffa:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    bffc:	005b      	lsls	r3, r3, #1
    bffe:	b2db      	uxtb	r3, r3
    c000:	7023      	strb	r3, [r4, #0]
}
    c002:	b004      	add	sp, #16
    c004:	bd10      	pop	{r4, pc}
    c006:	bf00      	nop
    c008:	40020000 	.word	0x40020000
    c00c:	00989680 	.word	0x00989680
    c010:	1fff8aa8 	.word	0x1fff8aa8

0000c014 <expf>:
    c014:	b538      	push	{r3, r4, r5, lr}
    c016:	4604      	mov	r4, r0
    c018:	f000 f82c 	bl	c074 <__ieee754_expf>
    c01c:	4605      	mov	r5, r0
    c01e:	4620      	mov	r0, r4
    c020:	f000 f820 	bl	c064 <finitef>
    c024:	b148      	cbz	r0, c03a <expf+0x26>
    c026:	490d      	ldr	r1, [pc, #52]	; (c05c <expf+0x48>)
    c028:	4620      	mov	r0, r4
    c02a:	f000 feaf 	bl	cd8c <__aeabi_fcmpgt>
    c02e:	b930      	cbnz	r0, c03e <expf+0x2a>
    c030:	490b      	ldr	r1, [pc, #44]	; (c060 <expf+0x4c>)
    c032:	4620      	mov	r0, r4
    c034:	f000 fe8c 	bl	cd50 <__aeabi_fcmplt>
    c038:	b948      	cbnz	r0, c04e <expf+0x3a>
    c03a:	4628      	mov	r0, r5
    c03c:	bd38      	pop	{r3, r4, r5, pc}
    c03e:	f001 fe5b 	bl	dcf8 <__errno>
    c042:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    c046:	2322      	movs	r3, #34	; 0x22
    c048:	6003      	str	r3, [r0, #0]
    c04a:	4628      	mov	r0, r5
    c04c:	bd38      	pop	{r3, r4, r5, pc}
    c04e:	f001 fe53 	bl	dcf8 <__errno>
    c052:	2322      	movs	r3, #34	; 0x22
    c054:	2500      	movs	r5, #0
    c056:	6003      	str	r3, [r0, #0]
    c058:	e7ef      	b.n	c03a <expf+0x26>
    c05a:	bf00      	nop
    c05c:	42b17217 	.word	0x42b17217
    c060:	c2cff1b5 	.word	0xc2cff1b5

0000c064 <finitef>:
    c064:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c068:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    c06c:	bfac      	ite	ge
    c06e:	2000      	movge	r0, #0
    c070:	2001      	movlt	r0, #1
    c072:	4770      	bx	lr

0000c074 <__ieee754_expf>:
    c074:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    c078:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    c07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c080:	4604      	mov	r4, r0
    c082:	d86c      	bhi.n	c15e <__ieee754_expf+0xea>
    c084:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    c088:	f000 80c6 	beq.w	c218 <__ieee754_expf+0x1a4>
    c08c:	497a      	ldr	r1, [pc, #488]	; (c278 <__ieee754_expf+0x204>)
    c08e:	4288      	cmp	r0, r1
    c090:	f300 80b4 	bgt.w	c1fc <__ieee754_expf+0x188>
    c094:	2800      	cmp	r0, #0
    c096:	f2c0 80b6 	blt.w	c206 <__ieee754_expf+0x192>
    c09a:	4b78      	ldr	r3, [pc, #480]	; (c27c <__ieee754_expf+0x208>)
    c09c:	429a      	cmp	r2, r3
    c09e:	d963      	bls.n	c168 <__ieee754_expf+0xf4>
    c0a0:	4b77      	ldr	r3, [pc, #476]	; (c280 <__ieee754_expf+0x20c>)
    c0a2:	429a      	cmp	r2, r3
    c0a4:	f200 80c5 	bhi.w	c232 <__ieee754_expf+0x1be>
    c0a8:	4b76      	ldr	r3, [pc, #472]	; (c284 <__ieee754_expf+0x210>)
    c0aa:	4620      	mov	r0, r4
    c0ac:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c0b0:	f000 fba6 	bl	c800 <__aeabi_fsub>
    c0b4:	4b74      	ldr	r3, [pc, #464]	; (c288 <__ieee754_expf+0x214>)
    c0b6:	f1c5 0601 	rsb	r6, r5, #1
    c0ba:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    c0be:	4680      	mov	r8, r0
    c0c0:	1b76      	subs	r6, r6, r5
    c0c2:	4649      	mov	r1, r9
    c0c4:	4640      	mov	r0, r8
    c0c6:	f000 fb9b 	bl	c800 <__aeabi_fsub>
    c0ca:	4601      	mov	r1, r0
    c0cc:	4605      	mov	r5, r0
    c0ce:	f000 fca1 	bl	ca14 <__aeabi_fmul>
    c0d2:	496e      	ldr	r1, [pc, #440]	; (c28c <__ieee754_expf+0x218>)
    c0d4:	4604      	mov	r4, r0
    c0d6:	f000 fc9d 	bl	ca14 <__aeabi_fmul>
    c0da:	496d      	ldr	r1, [pc, #436]	; (c290 <__ieee754_expf+0x21c>)
    c0dc:	f000 fb90 	bl	c800 <__aeabi_fsub>
    c0e0:	4621      	mov	r1, r4
    c0e2:	f000 fc97 	bl	ca14 <__aeabi_fmul>
    c0e6:	496b      	ldr	r1, [pc, #428]	; (c294 <__ieee754_expf+0x220>)
    c0e8:	f000 fb8c 	bl	c804 <__addsf3>
    c0ec:	4621      	mov	r1, r4
    c0ee:	f000 fc91 	bl	ca14 <__aeabi_fmul>
    c0f2:	4969      	ldr	r1, [pc, #420]	; (c298 <__ieee754_expf+0x224>)
    c0f4:	f000 fb84 	bl	c800 <__aeabi_fsub>
    c0f8:	4621      	mov	r1, r4
    c0fa:	f000 fc8b 	bl	ca14 <__aeabi_fmul>
    c0fe:	4967      	ldr	r1, [pc, #412]	; (c29c <__ieee754_expf+0x228>)
    c100:	f000 fb80 	bl	c804 <__addsf3>
    c104:	4621      	mov	r1, r4
    c106:	f000 fc85 	bl	ca14 <__aeabi_fmul>
    c10a:	4601      	mov	r1, r0
    c10c:	4628      	mov	r0, r5
    c10e:	f000 fb77 	bl	c800 <__aeabi_fsub>
    c112:	462c      	mov	r4, r5
    c114:	4607      	mov	r7, r0
    c116:	4682      	mov	sl, r0
    c118:	2e00      	cmp	r6, #0
    c11a:	d057      	beq.n	c1cc <__ieee754_expf+0x158>
    c11c:	4639      	mov	r1, r7
    c11e:	4628      	mov	r0, r5
    c120:	f000 fc78 	bl	ca14 <__aeabi_fmul>
    c124:	4639      	mov	r1, r7
    c126:	4604      	mov	r4, r0
    c128:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c12c:	f000 fb68 	bl	c800 <__aeabi_fsub>
    c130:	4601      	mov	r1, r0
    c132:	4620      	mov	r0, r4
    c134:	f000 fd22 	bl	cb7c <__aeabi_fdiv>
    c138:	4601      	mov	r1, r0
    c13a:	4648      	mov	r0, r9
    c13c:	f000 fb60 	bl	c800 <__aeabi_fsub>
    c140:	4641      	mov	r1, r8
    c142:	f000 fb5d 	bl	c800 <__aeabi_fsub>
    c146:	4601      	mov	r1, r0
    c148:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c14c:	f000 fb58 	bl	c800 <__aeabi_fsub>
    c150:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    c154:	db64      	blt.n	c220 <__ieee754_expf+0x1ac>
    c156:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c15e:	4601      	mov	r1, r0
    c160:	f000 fb50 	bl	c804 <__addsf3>
    c164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c168:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    c16c:	d209      	bcs.n	c182 <__ieee754_expf+0x10e>
    c16e:	494c      	ldr	r1, [pc, #304]	; (c2a0 <__ieee754_expf+0x22c>)
    c170:	4620      	mov	r0, r4
    c172:	f000 fb47 	bl	c804 <__addsf3>
    c176:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c17a:	f000 fe07 	bl	cd8c <__aeabi_fcmpgt>
    c17e:	2800      	cmp	r0, #0
    c180:	d174      	bne.n	c26c <__ieee754_expf+0x1f8>
    c182:	4621      	mov	r1, r4
    c184:	4620      	mov	r0, r4
    c186:	f000 fc45 	bl	ca14 <__aeabi_fmul>
    c18a:	4940      	ldr	r1, [pc, #256]	; (c28c <__ieee754_expf+0x218>)
    c18c:	4605      	mov	r5, r0
    c18e:	f000 fc41 	bl	ca14 <__aeabi_fmul>
    c192:	493f      	ldr	r1, [pc, #252]	; (c290 <__ieee754_expf+0x21c>)
    c194:	f000 fb34 	bl	c800 <__aeabi_fsub>
    c198:	4629      	mov	r1, r5
    c19a:	f000 fc3b 	bl	ca14 <__aeabi_fmul>
    c19e:	493d      	ldr	r1, [pc, #244]	; (c294 <__ieee754_expf+0x220>)
    c1a0:	f000 fb30 	bl	c804 <__addsf3>
    c1a4:	4629      	mov	r1, r5
    c1a6:	f000 fc35 	bl	ca14 <__aeabi_fmul>
    c1aa:	493b      	ldr	r1, [pc, #236]	; (c298 <__ieee754_expf+0x224>)
    c1ac:	f000 fb28 	bl	c800 <__aeabi_fsub>
    c1b0:	4629      	mov	r1, r5
    c1b2:	f000 fc2f 	bl	ca14 <__aeabi_fmul>
    c1b6:	4939      	ldr	r1, [pc, #228]	; (c29c <__ieee754_expf+0x228>)
    c1b8:	f000 fb24 	bl	c804 <__addsf3>
    c1bc:	4629      	mov	r1, r5
    c1be:	f000 fc29 	bl	ca14 <__aeabi_fmul>
    c1c2:	4601      	mov	r1, r0
    c1c4:	4620      	mov	r0, r4
    c1c6:	f000 fb1b 	bl	c800 <__aeabi_fsub>
    c1ca:	4682      	mov	sl, r0
    c1cc:	4651      	mov	r1, sl
    c1ce:	4620      	mov	r0, r4
    c1d0:	f000 fc20 	bl	ca14 <__aeabi_fmul>
    c1d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c1d8:	4605      	mov	r5, r0
    c1da:	4650      	mov	r0, sl
    c1dc:	f000 fb10 	bl	c800 <__aeabi_fsub>
    c1e0:	4601      	mov	r1, r0
    c1e2:	4628      	mov	r0, r5
    c1e4:	f000 fcca 	bl	cb7c <__aeabi_fdiv>
    c1e8:	4621      	mov	r1, r4
    c1ea:	f000 fb09 	bl	c800 <__aeabi_fsub>
    c1ee:	4601      	mov	r1, r0
    c1f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c1f4:	f000 fb04 	bl	c800 <__aeabi_fsub>
    c1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c1fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c200:	2000      	movs	r0, #0
    c202:	f000 b87b 	b.w	c2fc <__math_oflowf>
    c206:	4b27      	ldr	r3, [pc, #156]	; (c2a4 <__ieee754_expf+0x230>)
    c208:	429a      	cmp	r2, r3
    c20a:	f67f af46 	bls.w	c09a <__ieee754_expf+0x26>
    c20e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c212:	2000      	movs	r0, #0
    c214:	f000 b86e 	b.w	c2f4 <__math_uflowf>
    c218:	2d00      	cmp	r5, #0
    c21a:	d0a3      	beq.n	c164 <__ieee754_expf+0xf0>
    c21c:	2000      	movs	r0, #0
    c21e:	e7a1      	b.n	c164 <__ieee754_expf+0xf0>
    c220:	3664      	adds	r6, #100	; 0x64
    c222:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    c226:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c22a:	f000 fbf3 	bl	ca14 <__aeabi_fmul>
    c22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c232:	491d      	ldr	r1, [pc, #116]	; (c2a8 <__ieee754_expf+0x234>)
    c234:	4620      	mov	r0, r4
    c236:	f000 fbed 	bl	ca14 <__aeabi_fmul>
    c23a:	4b1c      	ldr	r3, [pc, #112]	; (c2ac <__ieee754_expf+0x238>)
    c23c:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c240:	f000 fae0 	bl	c804 <__addsf3>
    c244:	f000 fdac 	bl	cda0 <__aeabi_f2iz>
    c248:	4606      	mov	r6, r0
    c24a:	f000 fb8f 	bl	c96c <__aeabi_i2f>
    c24e:	4918      	ldr	r1, [pc, #96]	; (c2b0 <__ieee754_expf+0x23c>)
    c250:	4605      	mov	r5, r0
    c252:	f000 fbdf 	bl	ca14 <__aeabi_fmul>
    c256:	4601      	mov	r1, r0
    c258:	4620      	mov	r0, r4
    c25a:	f000 fad1 	bl	c800 <__aeabi_fsub>
    c25e:	4915      	ldr	r1, [pc, #84]	; (c2b4 <__ieee754_expf+0x240>)
    c260:	4680      	mov	r8, r0
    c262:	4628      	mov	r0, r5
    c264:	f000 fbd6 	bl	ca14 <__aeabi_fmul>
    c268:	4681      	mov	r9, r0
    c26a:	e72a      	b.n	c0c2 <__ieee754_expf+0x4e>
    c26c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c270:	4620      	mov	r0, r4
    c272:	f000 fac7 	bl	c804 <__addsf3>
    c276:	e775      	b.n	c164 <__ieee754_expf+0xf0>
    c278:	42b17217 	.word	0x42b17217
    c27c:	3eb17218 	.word	0x3eb17218
    c280:	3f851591 	.word	0x3f851591
    c284:	00015220 	.word	0x00015220
    c288:	00015228 	.word	0x00015228
    c28c:	3331bb4c 	.word	0x3331bb4c
    c290:	35ddea0e 	.word	0x35ddea0e
    c294:	388ab355 	.word	0x388ab355
    c298:	3b360b61 	.word	0x3b360b61
    c29c:	3e2aaaab 	.word	0x3e2aaaab
    c2a0:	7149f2ca 	.word	0x7149f2ca
    c2a4:	42cff1b5 	.word	0x42cff1b5
    c2a8:	3fb8aa3b 	.word	0x3fb8aa3b
    c2ac:	00015218 	.word	0x00015218
    c2b0:	3f317180 	.word	0x3f317180
    c2b4:	3717f7d1 	.word	0x3717f7d1

0000c2b8 <with_errnof>:
    c2b8:	b538      	push	{r3, r4, r5, lr}
    c2ba:	4605      	mov	r5, r0
    c2bc:	460c      	mov	r4, r1
    c2be:	f001 fd1b 	bl	dcf8 <__errno>
    c2c2:	4603      	mov	r3, r0
    c2c4:	4628      	mov	r0, r5
    c2c6:	601c      	str	r4, [r3, #0]
    c2c8:	bd38      	pop	{r3, r4, r5, pc}
    c2ca:	bf00      	nop

0000c2cc <xflowf>:
    c2cc:	b508      	push	{r3, lr}
    c2ce:	b140      	cbz	r0, c2e2 <xflowf+0x16>
    c2d0:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    c2d4:	f000 fb9e 	bl	ca14 <__aeabi_fmul>
    c2d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c2dc:	2122      	movs	r1, #34	; 0x22
    c2de:	f7ff bfeb 	b.w	c2b8 <with_errnof>
    c2e2:	4608      	mov	r0, r1
    c2e4:	f000 fb96 	bl	ca14 <__aeabi_fmul>
    c2e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c2ec:	2122      	movs	r1, #34	; 0x22
    c2ee:	f7ff bfe3 	b.w	c2b8 <with_errnof>
    c2f2:	bf00      	nop

0000c2f4 <__math_uflowf>:
    c2f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c2f8:	f7ff bfe8 	b.w	c2cc <xflowf>

0000c2fc <__math_oflowf>:
    c2fc:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    c300:	f7ff bfe4 	b.w	c2cc <xflowf>

0000c304 <__aeabi_drsub>:
    c304:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c308:	e002      	b.n	c310 <__adddf3>
    c30a:	bf00      	nop

0000c30c <__aeabi_dsub>:
    c30c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c310 <__adddf3>:
    c310:	b530      	push	{r4, r5, lr}
    c312:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c316:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c31a:	ea94 0f05 	teq	r4, r5
    c31e:	bf08      	it	eq
    c320:	ea90 0f02 	teqeq	r0, r2
    c324:	bf1f      	itttt	ne
    c326:	ea54 0c00 	orrsne.w	ip, r4, r0
    c32a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c32e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c332:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c336:	f000 80e2 	beq.w	c4fe <__adddf3+0x1ee>
    c33a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c33e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c342:	bfb8      	it	lt
    c344:	426d      	neglt	r5, r5
    c346:	dd0c      	ble.n	c362 <__adddf3+0x52>
    c348:	442c      	add	r4, r5
    c34a:	ea80 0202 	eor.w	r2, r0, r2
    c34e:	ea81 0303 	eor.w	r3, r1, r3
    c352:	ea82 0000 	eor.w	r0, r2, r0
    c356:	ea83 0101 	eor.w	r1, r3, r1
    c35a:	ea80 0202 	eor.w	r2, r0, r2
    c35e:	ea81 0303 	eor.w	r3, r1, r3
    c362:	2d36      	cmp	r5, #54	; 0x36
    c364:	bf88      	it	hi
    c366:	bd30      	pophi	{r4, r5, pc}
    c368:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c36c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c370:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c374:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c378:	d002      	beq.n	c380 <__adddf3+0x70>
    c37a:	4240      	negs	r0, r0
    c37c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c380:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c384:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c388:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c38c:	d002      	beq.n	c394 <__adddf3+0x84>
    c38e:	4252      	negs	r2, r2
    c390:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c394:	ea94 0f05 	teq	r4, r5
    c398:	f000 80a7 	beq.w	c4ea <__adddf3+0x1da>
    c39c:	f1a4 0401 	sub.w	r4, r4, #1
    c3a0:	f1d5 0e20 	rsbs	lr, r5, #32
    c3a4:	db0d      	blt.n	c3c2 <__adddf3+0xb2>
    c3a6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c3aa:	fa22 f205 	lsr.w	r2, r2, r5
    c3ae:	1880      	adds	r0, r0, r2
    c3b0:	f141 0100 	adc.w	r1, r1, #0
    c3b4:	fa03 f20e 	lsl.w	r2, r3, lr
    c3b8:	1880      	adds	r0, r0, r2
    c3ba:	fa43 f305 	asr.w	r3, r3, r5
    c3be:	4159      	adcs	r1, r3
    c3c0:	e00e      	b.n	c3e0 <__adddf3+0xd0>
    c3c2:	f1a5 0520 	sub.w	r5, r5, #32
    c3c6:	f10e 0e20 	add.w	lr, lr, #32
    c3ca:	2a01      	cmp	r2, #1
    c3cc:	fa03 fc0e 	lsl.w	ip, r3, lr
    c3d0:	bf28      	it	cs
    c3d2:	f04c 0c02 	orrcs.w	ip, ip, #2
    c3d6:	fa43 f305 	asr.w	r3, r3, r5
    c3da:	18c0      	adds	r0, r0, r3
    c3dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c3e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c3e4:	d507      	bpl.n	c3f6 <__adddf3+0xe6>
    c3e6:	f04f 0e00 	mov.w	lr, #0
    c3ea:	f1dc 0c00 	rsbs	ip, ip, #0
    c3ee:	eb7e 0000 	sbcs.w	r0, lr, r0
    c3f2:	eb6e 0101 	sbc.w	r1, lr, r1
    c3f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c3fa:	d31b      	bcc.n	c434 <__adddf3+0x124>
    c3fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c400:	d30c      	bcc.n	c41c <__adddf3+0x10c>
    c402:	0849      	lsrs	r1, r1, #1
    c404:	ea5f 0030 	movs.w	r0, r0, rrx
    c408:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c40c:	f104 0401 	add.w	r4, r4, #1
    c410:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c414:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c418:	f080 809a 	bcs.w	c550 <__adddf3+0x240>
    c41c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c420:	bf08      	it	eq
    c422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c426:	f150 0000 	adcs.w	r0, r0, #0
    c42a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c42e:	ea41 0105 	orr.w	r1, r1, r5
    c432:	bd30      	pop	{r4, r5, pc}
    c434:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c438:	4140      	adcs	r0, r0
    c43a:	eb41 0101 	adc.w	r1, r1, r1
    c43e:	3c01      	subs	r4, #1
    c440:	bf28      	it	cs
    c442:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c446:	d2e9      	bcs.n	c41c <__adddf3+0x10c>
    c448:	f091 0f00 	teq	r1, #0
    c44c:	bf04      	itt	eq
    c44e:	4601      	moveq	r1, r0
    c450:	2000      	moveq	r0, #0
    c452:	fab1 f381 	clz	r3, r1
    c456:	bf08      	it	eq
    c458:	3320      	addeq	r3, #32
    c45a:	f1a3 030b 	sub.w	r3, r3, #11
    c45e:	f1b3 0220 	subs.w	r2, r3, #32
    c462:	da0c      	bge.n	c47e <__adddf3+0x16e>
    c464:	320c      	adds	r2, #12
    c466:	dd08      	ble.n	c47a <__adddf3+0x16a>
    c468:	f102 0c14 	add.w	ip, r2, #20
    c46c:	f1c2 020c 	rsb	r2, r2, #12
    c470:	fa01 f00c 	lsl.w	r0, r1, ip
    c474:	fa21 f102 	lsr.w	r1, r1, r2
    c478:	e00c      	b.n	c494 <__adddf3+0x184>
    c47a:	f102 0214 	add.w	r2, r2, #20
    c47e:	bfd8      	it	le
    c480:	f1c2 0c20 	rsble	ip, r2, #32
    c484:	fa01 f102 	lsl.w	r1, r1, r2
    c488:	fa20 fc0c 	lsr.w	ip, r0, ip
    c48c:	bfdc      	itt	le
    c48e:	ea41 010c 	orrle.w	r1, r1, ip
    c492:	4090      	lslle	r0, r2
    c494:	1ae4      	subs	r4, r4, r3
    c496:	bfa2      	ittt	ge
    c498:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c49c:	4329      	orrge	r1, r5
    c49e:	bd30      	popge	{r4, r5, pc}
    c4a0:	ea6f 0404 	mvn.w	r4, r4
    c4a4:	3c1f      	subs	r4, #31
    c4a6:	da1c      	bge.n	c4e2 <__adddf3+0x1d2>
    c4a8:	340c      	adds	r4, #12
    c4aa:	dc0e      	bgt.n	c4ca <__adddf3+0x1ba>
    c4ac:	f104 0414 	add.w	r4, r4, #20
    c4b0:	f1c4 0220 	rsb	r2, r4, #32
    c4b4:	fa20 f004 	lsr.w	r0, r0, r4
    c4b8:	fa01 f302 	lsl.w	r3, r1, r2
    c4bc:	ea40 0003 	orr.w	r0, r0, r3
    c4c0:	fa21 f304 	lsr.w	r3, r1, r4
    c4c4:	ea45 0103 	orr.w	r1, r5, r3
    c4c8:	bd30      	pop	{r4, r5, pc}
    c4ca:	f1c4 040c 	rsb	r4, r4, #12
    c4ce:	f1c4 0220 	rsb	r2, r4, #32
    c4d2:	fa20 f002 	lsr.w	r0, r0, r2
    c4d6:	fa01 f304 	lsl.w	r3, r1, r4
    c4da:	ea40 0003 	orr.w	r0, r0, r3
    c4de:	4629      	mov	r1, r5
    c4e0:	bd30      	pop	{r4, r5, pc}
    c4e2:	fa21 f004 	lsr.w	r0, r1, r4
    c4e6:	4629      	mov	r1, r5
    c4e8:	bd30      	pop	{r4, r5, pc}
    c4ea:	f094 0f00 	teq	r4, #0
    c4ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c4f2:	bf06      	itte	eq
    c4f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c4f8:	3401      	addeq	r4, #1
    c4fa:	3d01      	subne	r5, #1
    c4fc:	e74e      	b.n	c39c <__adddf3+0x8c>
    c4fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c502:	bf18      	it	ne
    c504:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c508:	d029      	beq.n	c55e <__adddf3+0x24e>
    c50a:	ea94 0f05 	teq	r4, r5
    c50e:	bf08      	it	eq
    c510:	ea90 0f02 	teqeq	r0, r2
    c514:	d005      	beq.n	c522 <__adddf3+0x212>
    c516:	ea54 0c00 	orrs.w	ip, r4, r0
    c51a:	bf04      	itt	eq
    c51c:	4619      	moveq	r1, r3
    c51e:	4610      	moveq	r0, r2
    c520:	bd30      	pop	{r4, r5, pc}
    c522:	ea91 0f03 	teq	r1, r3
    c526:	bf1e      	ittt	ne
    c528:	2100      	movne	r1, #0
    c52a:	2000      	movne	r0, #0
    c52c:	bd30      	popne	{r4, r5, pc}
    c52e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c532:	d105      	bne.n	c540 <__adddf3+0x230>
    c534:	0040      	lsls	r0, r0, #1
    c536:	4149      	adcs	r1, r1
    c538:	bf28      	it	cs
    c53a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c53e:	bd30      	pop	{r4, r5, pc}
    c540:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c544:	bf3c      	itt	cc
    c546:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c54a:	bd30      	popcc	{r4, r5, pc}
    c54c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c550:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c554:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c558:	f04f 0000 	mov.w	r0, #0
    c55c:	bd30      	pop	{r4, r5, pc}
    c55e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c562:	bf1a      	itte	ne
    c564:	4619      	movne	r1, r3
    c566:	4610      	movne	r0, r2
    c568:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c56c:	bf1c      	itt	ne
    c56e:	460b      	movne	r3, r1
    c570:	4602      	movne	r2, r0
    c572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c576:	bf06      	itte	eq
    c578:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c57c:	ea91 0f03 	teqeq	r1, r3
    c580:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c584:	bd30      	pop	{r4, r5, pc}
    c586:	bf00      	nop

0000c588 <__aeabi_ui2d>:
    c588:	f090 0f00 	teq	r0, #0
    c58c:	bf04      	itt	eq
    c58e:	2100      	moveq	r1, #0
    c590:	4770      	bxeq	lr
    c592:	b530      	push	{r4, r5, lr}
    c594:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c598:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c59c:	f04f 0500 	mov.w	r5, #0
    c5a0:	f04f 0100 	mov.w	r1, #0
    c5a4:	e750      	b.n	c448 <__adddf3+0x138>
    c5a6:	bf00      	nop

0000c5a8 <__aeabi_i2d>:
    c5a8:	f090 0f00 	teq	r0, #0
    c5ac:	bf04      	itt	eq
    c5ae:	2100      	moveq	r1, #0
    c5b0:	4770      	bxeq	lr
    c5b2:	b530      	push	{r4, r5, lr}
    c5b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c5b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c5bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c5c0:	bf48      	it	mi
    c5c2:	4240      	negmi	r0, r0
    c5c4:	f04f 0100 	mov.w	r1, #0
    c5c8:	e73e      	b.n	c448 <__adddf3+0x138>
    c5ca:	bf00      	nop

0000c5cc <__aeabi_f2d>:
    c5cc:	0042      	lsls	r2, r0, #1
    c5ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c5d2:	ea4f 0131 	mov.w	r1, r1, rrx
    c5d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
    c5da:	bf1f      	itttt	ne
    c5dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    c5e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c5e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c5e8:	4770      	bxne	lr
    c5ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    c5ee:	bf08      	it	eq
    c5f0:	4770      	bxeq	lr
    c5f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    c5f6:	bf04      	itt	eq
    c5f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    c5fc:	4770      	bxeq	lr
    c5fe:	b530      	push	{r4, r5, lr}
    c600:	f44f 7460 	mov.w	r4, #896	; 0x380
    c604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c608:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c60c:	e71c      	b.n	c448 <__adddf3+0x138>
    c60e:	bf00      	nop

0000c610 <__aeabi_ul2d>:
    c610:	ea50 0201 	orrs.w	r2, r0, r1
    c614:	bf08      	it	eq
    c616:	4770      	bxeq	lr
    c618:	b530      	push	{r4, r5, lr}
    c61a:	f04f 0500 	mov.w	r5, #0
    c61e:	e00a      	b.n	c636 <__aeabi_l2d+0x16>

0000c620 <__aeabi_l2d>:
    c620:	ea50 0201 	orrs.w	r2, r0, r1
    c624:	bf08      	it	eq
    c626:	4770      	bxeq	lr
    c628:	b530      	push	{r4, r5, lr}
    c62a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c62e:	d502      	bpl.n	c636 <__aeabi_l2d+0x16>
    c630:	4240      	negs	r0, r0
    c632:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c636:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c63a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c63e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c642:	f43f aed8 	beq.w	c3f6 <__adddf3+0xe6>
    c646:	f04f 0203 	mov.w	r2, #3
    c64a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c64e:	bf18      	it	ne
    c650:	3203      	addne	r2, #3
    c652:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c656:	bf18      	it	ne
    c658:	3203      	addne	r2, #3
    c65a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c65e:	f1c2 0320 	rsb	r3, r2, #32
    c662:	fa00 fc03 	lsl.w	ip, r0, r3
    c666:	fa20 f002 	lsr.w	r0, r0, r2
    c66a:	fa01 fe03 	lsl.w	lr, r1, r3
    c66e:	ea40 000e 	orr.w	r0, r0, lr
    c672:	fa21 f102 	lsr.w	r1, r1, r2
    c676:	4414      	add	r4, r2
    c678:	e6bd      	b.n	c3f6 <__adddf3+0xe6>
    c67a:	bf00      	nop

0000c67c <__gedf2>:
    c67c:	f04f 3cff 	mov.w	ip, #4294967295
    c680:	e006      	b.n	c690 <__cmpdf2+0x4>
    c682:	bf00      	nop

0000c684 <__ledf2>:
    c684:	f04f 0c01 	mov.w	ip, #1
    c688:	e002      	b.n	c690 <__cmpdf2+0x4>
    c68a:	bf00      	nop

0000c68c <__cmpdf2>:
    c68c:	f04f 0c01 	mov.w	ip, #1
    c690:	f84d cd04 	str.w	ip, [sp, #-4]!
    c694:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c698:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c69c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c6a0:	bf18      	it	ne
    c6a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    c6a6:	d01b      	beq.n	c6e0 <__cmpdf2+0x54>
    c6a8:	b001      	add	sp, #4
    c6aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    c6ae:	bf0c      	ite	eq
    c6b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    c6b4:	ea91 0f03 	teqne	r1, r3
    c6b8:	bf02      	ittt	eq
    c6ba:	ea90 0f02 	teqeq	r0, r2
    c6be:	2000      	moveq	r0, #0
    c6c0:	4770      	bxeq	lr
    c6c2:	f110 0f00 	cmn.w	r0, #0
    c6c6:	ea91 0f03 	teq	r1, r3
    c6ca:	bf58      	it	pl
    c6cc:	4299      	cmppl	r1, r3
    c6ce:	bf08      	it	eq
    c6d0:	4290      	cmpeq	r0, r2
    c6d2:	bf2c      	ite	cs
    c6d4:	17d8      	asrcs	r0, r3, #31
    c6d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    c6da:	f040 0001 	orr.w	r0, r0, #1
    c6de:	4770      	bx	lr
    c6e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c6e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c6e8:	d102      	bne.n	c6f0 <__cmpdf2+0x64>
    c6ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c6ee:	d107      	bne.n	c700 <__cmpdf2+0x74>
    c6f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c6f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c6f8:	d1d6      	bne.n	c6a8 <__cmpdf2+0x1c>
    c6fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c6fe:	d0d3      	beq.n	c6a8 <__cmpdf2+0x1c>
    c700:	f85d 0b04 	ldr.w	r0, [sp], #4
    c704:	4770      	bx	lr
    c706:	bf00      	nop

0000c708 <__aeabi_cdrcmple>:
    c708:	4684      	mov	ip, r0
    c70a:	4610      	mov	r0, r2
    c70c:	4662      	mov	r2, ip
    c70e:	468c      	mov	ip, r1
    c710:	4619      	mov	r1, r3
    c712:	4663      	mov	r3, ip
    c714:	e000      	b.n	c718 <__aeabi_cdcmpeq>
    c716:	bf00      	nop

0000c718 <__aeabi_cdcmpeq>:
    c718:	b501      	push	{r0, lr}
    c71a:	f7ff ffb7 	bl	c68c <__cmpdf2>
    c71e:	2800      	cmp	r0, #0
    c720:	bf48      	it	mi
    c722:	f110 0f00 	cmnmi.w	r0, #0
    c726:	bd01      	pop	{r0, pc}

0000c728 <__aeabi_dcmpeq>:
    c728:	f84d ed08 	str.w	lr, [sp, #-8]!
    c72c:	f7ff fff4 	bl	c718 <__aeabi_cdcmpeq>
    c730:	bf0c      	ite	eq
    c732:	2001      	moveq	r0, #1
    c734:	2000      	movne	r0, #0
    c736:	f85d fb08 	ldr.w	pc, [sp], #8
    c73a:	bf00      	nop

0000c73c <__aeabi_dcmplt>:
    c73c:	f84d ed08 	str.w	lr, [sp, #-8]!
    c740:	f7ff ffea 	bl	c718 <__aeabi_cdcmpeq>
    c744:	bf34      	ite	cc
    c746:	2001      	movcc	r0, #1
    c748:	2000      	movcs	r0, #0
    c74a:	f85d fb08 	ldr.w	pc, [sp], #8
    c74e:	bf00      	nop

0000c750 <__aeabi_dcmple>:
    c750:	f84d ed08 	str.w	lr, [sp, #-8]!
    c754:	f7ff ffe0 	bl	c718 <__aeabi_cdcmpeq>
    c758:	bf94      	ite	ls
    c75a:	2001      	movls	r0, #1
    c75c:	2000      	movhi	r0, #0
    c75e:	f85d fb08 	ldr.w	pc, [sp], #8
    c762:	bf00      	nop

0000c764 <__aeabi_dcmpge>:
    c764:	f84d ed08 	str.w	lr, [sp, #-8]!
    c768:	f7ff ffce 	bl	c708 <__aeabi_cdrcmple>
    c76c:	bf94      	ite	ls
    c76e:	2001      	movls	r0, #1
    c770:	2000      	movhi	r0, #0
    c772:	f85d fb08 	ldr.w	pc, [sp], #8
    c776:	bf00      	nop

0000c778 <__aeabi_dcmpgt>:
    c778:	f84d ed08 	str.w	lr, [sp, #-8]!
    c77c:	f7ff ffc4 	bl	c708 <__aeabi_cdrcmple>
    c780:	bf34      	ite	cc
    c782:	2001      	movcc	r0, #1
    c784:	2000      	movcs	r0, #0
    c786:	f85d fb08 	ldr.w	pc, [sp], #8
    c78a:	bf00      	nop

0000c78c <__aeabi_dcmpun>:
    c78c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    c790:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c794:	d102      	bne.n	c79c <__aeabi_dcmpun+0x10>
    c796:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    c79a:	d10a      	bne.n	c7b2 <__aeabi_dcmpun+0x26>
    c79c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    c7a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    c7a4:	d102      	bne.n	c7ac <__aeabi_dcmpun+0x20>
    c7a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    c7aa:	d102      	bne.n	c7b2 <__aeabi_dcmpun+0x26>
    c7ac:	f04f 0000 	mov.w	r0, #0
    c7b0:	4770      	bx	lr
    c7b2:	f04f 0001 	mov.w	r0, #1
    c7b6:	4770      	bx	lr

0000c7b8 <__aeabi_d2uiz>:
    c7b8:	004a      	lsls	r2, r1, #1
    c7ba:	d211      	bcs.n	c7e0 <__aeabi_d2uiz+0x28>
    c7bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c7c0:	d211      	bcs.n	c7e6 <__aeabi_d2uiz+0x2e>
    c7c2:	d50d      	bpl.n	c7e0 <__aeabi_d2uiz+0x28>
    c7c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c7c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c7cc:	d40e      	bmi.n	c7ec <__aeabi_d2uiz+0x34>
    c7ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c7d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c7d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c7da:	fa23 f002 	lsr.w	r0, r3, r2
    c7de:	4770      	bx	lr
    c7e0:	f04f 0000 	mov.w	r0, #0
    c7e4:	4770      	bx	lr
    c7e6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c7ea:	d102      	bne.n	c7f2 <__aeabi_d2uiz+0x3a>
    c7ec:	f04f 30ff 	mov.w	r0, #4294967295
    c7f0:	4770      	bx	lr
    c7f2:	f04f 0000 	mov.w	r0, #0
    c7f6:	4770      	bx	lr

0000c7f8 <__aeabi_frsub>:
    c7f8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    c7fc:	e002      	b.n	c804 <__addsf3>
    c7fe:	bf00      	nop

0000c800 <__aeabi_fsub>:
    c800:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000c804 <__addsf3>:
    c804:	0042      	lsls	r2, r0, #1
    c806:	bf1f      	itttt	ne
    c808:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    c80c:	ea92 0f03 	teqne	r2, r3
    c810:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    c814:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c818:	d06a      	beq.n	c8f0 <__addsf3+0xec>
    c81a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    c81e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    c822:	bfc1      	itttt	gt
    c824:	18d2      	addgt	r2, r2, r3
    c826:	4041      	eorgt	r1, r0
    c828:	4048      	eorgt	r0, r1
    c82a:	4041      	eorgt	r1, r0
    c82c:	bfb8      	it	lt
    c82e:	425b      	neglt	r3, r3
    c830:	2b19      	cmp	r3, #25
    c832:	bf88      	it	hi
    c834:	4770      	bxhi	lr
    c836:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    c83a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c83e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c842:	bf18      	it	ne
    c844:	4240      	negne	r0, r0
    c846:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c84a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    c84e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    c852:	bf18      	it	ne
    c854:	4249      	negne	r1, r1
    c856:	ea92 0f03 	teq	r2, r3
    c85a:	d03f      	beq.n	c8dc <__addsf3+0xd8>
    c85c:	f1a2 0201 	sub.w	r2, r2, #1
    c860:	fa41 fc03 	asr.w	ip, r1, r3
    c864:	eb10 000c 	adds.w	r0, r0, ip
    c868:	f1c3 0320 	rsb	r3, r3, #32
    c86c:	fa01 f103 	lsl.w	r1, r1, r3
    c870:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    c874:	d502      	bpl.n	c87c <__addsf3+0x78>
    c876:	4249      	negs	r1, r1
    c878:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    c87c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    c880:	d313      	bcc.n	c8aa <__addsf3+0xa6>
    c882:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    c886:	d306      	bcc.n	c896 <__addsf3+0x92>
    c888:	0840      	lsrs	r0, r0, #1
    c88a:	ea4f 0131 	mov.w	r1, r1, rrx
    c88e:	f102 0201 	add.w	r2, r2, #1
    c892:	2afe      	cmp	r2, #254	; 0xfe
    c894:	d251      	bcs.n	c93a <__addsf3+0x136>
    c896:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    c89a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    c89e:	bf08      	it	eq
    c8a0:	f020 0001 	biceq.w	r0, r0, #1
    c8a4:	ea40 0003 	orr.w	r0, r0, r3
    c8a8:	4770      	bx	lr
    c8aa:	0049      	lsls	r1, r1, #1
    c8ac:	eb40 0000 	adc.w	r0, r0, r0
    c8b0:	3a01      	subs	r2, #1
    c8b2:	bf28      	it	cs
    c8b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    c8b8:	d2ed      	bcs.n	c896 <__addsf3+0x92>
    c8ba:	fab0 fc80 	clz	ip, r0
    c8be:	f1ac 0c08 	sub.w	ip, ip, #8
    c8c2:	ebb2 020c 	subs.w	r2, r2, ip
    c8c6:	fa00 f00c 	lsl.w	r0, r0, ip
    c8ca:	bfaa      	itet	ge
    c8cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    c8d0:	4252      	neglt	r2, r2
    c8d2:	4318      	orrge	r0, r3
    c8d4:	bfbc      	itt	lt
    c8d6:	40d0      	lsrlt	r0, r2
    c8d8:	4318      	orrlt	r0, r3
    c8da:	4770      	bx	lr
    c8dc:	f092 0f00 	teq	r2, #0
    c8e0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    c8e4:	bf06      	itte	eq
    c8e6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    c8ea:	3201      	addeq	r2, #1
    c8ec:	3b01      	subne	r3, #1
    c8ee:	e7b5      	b.n	c85c <__addsf3+0x58>
    c8f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    c8f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    c8f8:	bf18      	it	ne
    c8fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    c8fe:	d021      	beq.n	c944 <__addsf3+0x140>
    c900:	ea92 0f03 	teq	r2, r3
    c904:	d004      	beq.n	c910 <__addsf3+0x10c>
    c906:	f092 0f00 	teq	r2, #0
    c90a:	bf08      	it	eq
    c90c:	4608      	moveq	r0, r1
    c90e:	4770      	bx	lr
    c910:	ea90 0f01 	teq	r0, r1
    c914:	bf1c      	itt	ne
    c916:	2000      	movne	r0, #0
    c918:	4770      	bxne	lr
    c91a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    c91e:	d104      	bne.n	c92a <__addsf3+0x126>
    c920:	0040      	lsls	r0, r0, #1
    c922:	bf28      	it	cs
    c924:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    c928:	4770      	bx	lr
    c92a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    c92e:	bf3c      	itt	cc
    c930:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    c934:	4770      	bxcc	lr
    c936:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    c93a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    c93e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    c942:	4770      	bx	lr
    c944:	ea7f 6222 	mvns.w	r2, r2, asr #24
    c948:	bf16      	itet	ne
    c94a:	4608      	movne	r0, r1
    c94c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    c950:	4601      	movne	r1, r0
    c952:	0242      	lsls	r2, r0, #9
    c954:	bf06      	itte	eq
    c956:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    c95a:	ea90 0f01 	teqeq	r0, r1
    c95e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    c962:	4770      	bx	lr

0000c964 <__aeabi_ui2f>:
    c964:	f04f 0300 	mov.w	r3, #0
    c968:	e004      	b.n	c974 <__aeabi_i2f+0x8>
    c96a:	bf00      	nop

0000c96c <__aeabi_i2f>:
    c96c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    c970:	bf48      	it	mi
    c972:	4240      	negmi	r0, r0
    c974:	ea5f 0c00 	movs.w	ip, r0
    c978:	bf08      	it	eq
    c97a:	4770      	bxeq	lr
    c97c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    c980:	4601      	mov	r1, r0
    c982:	f04f 0000 	mov.w	r0, #0
    c986:	e01c      	b.n	c9c2 <__aeabi_l2f+0x2a>

0000c988 <__aeabi_ul2f>:
    c988:	ea50 0201 	orrs.w	r2, r0, r1
    c98c:	bf08      	it	eq
    c98e:	4770      	bxeq	lr
    c990:	f04f 0300 	mov.w	r3, #0
    c994:	e00a      	b.n	c9ac <__aeabi_l2f+0x14>
    c996:	bf00      	nop

0000c998 <__aeabi_l2f>:
    c998:	ea50 0201 	orrs.w	r2, r0, r1
    c99c:	bf08      	it	eq
    c99e:	4770      	bxeq	lr
    c9a0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    c9a4:	d502      	bpl.n	c9ac <__aeabi_l2f+0x14>
    c9a6:	4240      	negs	r0, r0
    c9a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c9ac:	ea5f 0c01 	movs.w	ip, r1
    c9b0:	bf02      	ittt	eq
    c9b2:	4684      	moveq	ip, r0
    c9b4:	4601      	moveq	r1, r0
    c9b6:	2000      	moveq	r0, #0
    c9b8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    c9bc:	bf08      	it	eq
    c9be:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    c9c2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    c9c6:	fabc f28c 	clz	r2, ip
    c9ca:	3a08      	subs	r2, #8
    c9cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    c9d0:	db10      	blt.n	c9f4 <__aeabi_l2f+0x5c>
    c9d2:	fa01 fc02 	lsl.w	ip, r1, r2
    c9d6:	4463      	add	r3, ip
    c9d8:	fa00 fc02 	lsl.w	ip, r0, r2
    c9dc:	f1c2 0220 	rsb	r2, r2, #32
    c9e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c9e4:	fa20 f202 	lsr.w	r2, r0, r2
    c9e8:	eb43 0002 	adc.w	r0, r3, r2
    c9ec:	bf08      	it	eq
    c9ee:	f020 0001 	biceq.w	r0, r0, #1
    c9f2:	4770      	bx	lr
    c9f4:	f102 0220 	add.w	r2, r2, #32
    c9f8:	fa01 fc02 	lsl.w	ip, r1, r2
    c9fc:	f1c2 0220 	rsb	r2, r2, #32
    ca00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    ca04:	fa21 f202 	lsr.w	r2, r1, r2
    ca08:	eb43 0002 	adc.w	r0, r3, r2
    ca0c:	bf08      	it	eq
    ca0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    ca12:	4770      	bx	lr

0000ca14 <__aeabi_fmul>:
    ca14:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ca18:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    ca1c:	bf1e      	ittt	ne
    ca1e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    ca22:	ea92 0f0c 	teqne	r2, ip
    ca26:	ea93 0f0c 	teqne	r3, ip
    ca2a:	d06f      	beq.n	cb0c <__aeabi_fmul+0xf8>
    ca2c:	441a      	add	r2, r3
    ca2e:	ea80 0c01 	eor.w	ip, r0, r1
    ca32:	0240      	lsls	r0, r0, #9
    ca34:	bf18      	it	ne
    ca36:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    ca3a:	d01e      	beq.n	ca7a <__aeabi_fmul+0x66>
    ca3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ca40:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    ca44:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    ca48:	fba0 3101 	umull	r3, r1, r0, r1
    ca4c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    ca50:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ca54:	bf3e      	ittt	cc
    ca56:	0049      	lslcc	r1, r1, #1
    ca58:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    ca5c:	005b      	lslcc	r3, r3, #1
    ca5e:	ea40 0001 	orr.w	r0, r0, r1
    ca62:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    ca66:	2afd      	cmp	r2, #253	; 0xfd
    ca68:	d81d      	bhi.n	caa6 <__aeabi_fmul+0x92>
    ca6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ca6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ca72:	bf08      	it	eq
    ca74:	f020 0001 	biceq.w	r0, r0, #1
    ca78:	4770      	bx	lr
    ca7a:	f090 0f00 	teq	r0, #0
    ca7e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ca82:	bf08      	it	eq
    ca84:	0249      	lsleq	r1, r1, #9
    ca86:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ca8a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    ca8e:	3a7f      	subs	r2, #127	; 0x7f
    ca90:	bfc2      	ittt	gt
    ca92:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    ca96:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    ca9a:	4770      	bxgt	lr
    ca9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    caa0:	f04f 0300 	mov.w	r3, #0
    caa4:	3a01      	subs	r2, #1
    caa6:	dc5d      	bgt.n	cb64 <__aeabi_fmul+0x150>
    caa8:	f112 0f19 	cmn.w	r2, #25
    caac:	bfdc      	itt	le
    caae:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    cab2:	4770      	bxle	lr
    cab4:	f1c2 0200 	rsb	r2, r2, #0
    cab8:	0041      	lsls	r1, r0, #1
    caba:	fa21 f102 	lsr.w	r1, r1, r2
    cabe:	f1c2 0220 	rsb	r2, r2, #32
    cac2:	fa00 fc02 	lsl.w	ip, r0, r2
    cac6:	ea5f 0031 	movs.w	r0, r1, rrx
    caca:	f140 0000 	adc.w	r0, r0, #0
    cace:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    cad2:	bf08      	it	eq
    cad4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cad8:	4770      	bx	lr
    cada:	f092 0f00 	teq	r2, #0
    cade:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    cae2:	bf02      	ittt	eq
    cae4:	0040      	lsleq	r0, r0, #1
    cae6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    caea:	3a01      	subeq	r2, #1
    caec:	d0f9      	beq.n	cae2 <__aeabi_fmul+0xce>
    caee:	ea40 000c 	orr.w	r0, r0, ip
    caf2:	f093 0f00 	teq	r3, #0
    caf6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cafa:	bf02      	ittt	eq
    cafc:	0049      	lsleq	r1, r1, #1
    cafe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    cb02:	3b01      	subeq	r3, #1
    cb04:	d0f9      	beq.n	cafa <__aeabi_fmul+0xe6>
    cb06:	ea41 010c 	orr.w	r1, r1, ip
    cb0a:	e78f      	b.n	ca2c <__aeabi_fmul+0x18>
    cb0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    cb10:	ea92 0f0c 	teq	r2, ip
    cb14:	bf18      	it	ne
    cb16:	ea93 0f0c 	teqne	r3, ip
    cb1a:	d00a      	beq.n	cb32 <__aeabi_fmul+0x11e>
    cb1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    cb20:	bf18      	it	ne
    cb22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cb26:	d1d8      	bne.n	cada <__aeabi_fmul+0xc6>
    cb28:	ea80 0001 	eor.w	r0, r0, r1
    cb2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cb30:	4770      	bx	lr
    cb32:	f090 0f00 	teq	r0, #0
    cb36:	bf17      	itett	ne
    cb38:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    cb3c:	4608      	moveq	r0, r1
    cb3e:	f091 0f00 	teqne	r1, #0
    cb42:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    cb46:	d014      	beq.n	cb72 <__aeabi_fmul+0x15e>
    cb48:	ea92 0f0c 	teq	r2, ip
    cb4c:	d101      	bne.n	cb52 <__aeabi_fmul+0x13e>
    cb4e:	0242      	lsls	r2, r0, #9
    cb50:	d10f      	bne.n	cb72 <__aeabi_fmul+0x15e>
    cb52:	ea93 0f0c 	teq	r3, ip
    cb56:	d103      	bne.n	cb60 <__aeabi_fmul+0x14c>
    cb58:	024b      	lsls	r3, r1, #9
    cb5a:	bf18      	it	ne
    cb5c:	4608      	movne	r0, r1
    cb5e:	d108      	bne.n	cb72 <__aeabi_fmul+0x15e>
    cb60:	ea80 0001 	eor.w	r0, r0, r1
    cb64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cb68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cb6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cb70:	4770      	bx	lr
    cb72:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cb76:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    cb7a:	4770      	bx	lr

0000cb7c <__aeabi_fdiv>:
    cb7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cb80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cb84:	bf1e      	ittt	ne
    cb86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cb8a:	ea92 0f0c 	teqne	r2, ip
    cb8e:	ea93 0f0c 	teqne	r3, ip
    cb92:	d069      	beq.n	cc68 <__aeabi_fdiv+0xec>
    cb94:	eba2 0203 	sub.w	r2, r2, r3
    cb98:	ea80 0c01 	eor.w	ip, r0, r1
    cb9c:	0249      	lsls	r1, r1, #9
    cb9e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    cba2:	d037      	beq.n	cc14 <__aeabi_fdiv+0x98>
    cba4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cba8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    cbac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    cbb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cbb4:	428b      	cmp	r3, r1
    cbb6:	bf38      	it	cc
    cbb8:	005b      	lslcc	r3, r3, #1
    cbba:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    cbbe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    cbc2:	428b      	cmp	r3, r1
    cbc4:	bf24      	itt	cs
    cbc6:	1a5b      	subcs	r3, r3, r1
    cbc8:	ea40 000c 	orrcs.w	r0, r0, ip
    cbcc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    cbd0:	bf24      	itt	cs
    cbd2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    cbd6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    cbda:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    cbde:	bf24      	itt	cs
    cbe0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    cbe4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cbe8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    cbec:	bf24      	itt	cs
    cbee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    cbf2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cbf6:	011b      	lsls	r3, r3, #4
    cbf8:	bf18      	it	ne
    cbfa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    cbfe:	d1e0      	bne.n	cbc2 <__aeabi_fdiv+0x46>
    cc00:	2afd      	cmp	r2, #253	; 0xfd
    cc02:	f63f af50 	bhi.w	caa6 <__aeabi_fmul+0x92>
    cc06:	428b      	cmp	r3, r1
    cc08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cc0c:	bf08      	it	eq
    cc0e:	f020 0001 	biceq.w	r0, r0, #1
    cc12:	4770      	bx	lr
    cc14:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    cc18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    cc1c:	327f      	adds	r2, #127	; 0x7f
    cc1e:	bfc2      	ittt	gt
    cc20:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    cc24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    cc28:	4770      	bxgt	lr
    cc2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cc2e:	f04f 0300 	mov.w	r3, #0
    cc32:	3a01      	subs	r2, #1
    cc34:	e737      	b.n	caa6 <__aeabi_fmul+0x92>
    cc36:	f092 0f00 	teq	r2, #0
    cc3a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    cc3e:	bf02      	ittt	eq
    cc40:	0040      	lsleq	r0, r0, #1
    cc42:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    cc46:	3a01      	subeq	r2, #1
    cc48:	d0f9      	beq.n	cc3e <__aeabi_fdiv+0xc2>
    cc4a:	ea40 000c 	orr.w	r0, r0, ip
    cc4e:	f093 0f00 	teq	r3, #0
    cc52:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cc56:	bf02      	ittt	eq
    cc58:	0049      	lsleq	r1, r1, #1
    cc5a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    cc5e:	3b01      	subeq	r3, #1
    cc60:	d0f9      	beq.n	cc56 <__aeabi_fdiv+0xda>
    cc62:	ea41 010c 	orr.w	r1, r1, ip
    cc66:	e795      	b.n	cb94 <__aeabi_fdiv+0x18>
    cc68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    cc6c:	ea92 0f0c 	teq	r2, ip
    cc70:	d108      	bne.n	cc84 <__aeabi_fdiv+0x108>
    cc72:	0242      	lsls	r2, r0, #9
    cc74:	f47f af7d 	bne.w	cb72 <__aeabi_fmul+0x15e>
    cc78:	ea93 0f0c 	teq	r3, ip
    cc7c:	f47f af70 	bne.w	cb60 <__aeabi_fmul+0x14c>
    cc80:	4608      	mov	r0, r1
    cc82:	e776      	b.n	cb72 <__aeabi_fmul+0x15e>
    cc84:	ea93 0f0c 	teq	r3, ip
    cc88:	d104      	bne.n	cc94 <__aeabi_fdiv+0x118>
    cc8a:	024b      	lsls	r3, r1, #9
    cc8c:	f43f af4c 	beq.w	cb28 <__aeabi_fmul+0x114>
    cc90:	4608      	mov	r0, r1
    cc92:	e76e      	b.n	cb72 <__aeabi_fmul+0x15e>
    cc94:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    cc98:	bf18      	it	ne
    cc9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cc9e:	d1ca      	bne.n	cc36 <__aeabi_fdiv+0xba>
    cca0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    cca4:	f47f af5c 	bne.w	cb60 <__aeabi_fmul+0x14c>
    cca8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    ccac:	f47f af3c 	bne.w	cb28 <__aeabi_fmul+0x114>
    ccb0:	e75f      	b.n	cb72 <__aeabi_fmul+0x15e>
    ccb2:	bf00      	nop

0000ccb4 <__gesf2>:
    ccb4:	f04f 3cff 	mov.w	ip, #4294967295
    ccb8:	e006      	b.n	ccc8 <__cmpsf2+0x4>
    ccba:	bf00      	nop

0000ccbc <__lesf2>:
    ccbc:	f04f 0c01 	mov.w	ip, #1
    ccc0:	e002      	b.n	ccc8 <__cmpsf2+0x4>
    ccc2:	bf00      	nop

0000ccc4 <__cmpsf2>:
    ccc4:	f04f 0c01 	mov.w	ip, #1
    ccc8:	f84d cd04 	str.w	ip, [sp, #-4]!
    cccc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    ccd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    ccd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ccd8:	bf18      	it	ne
    ccda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ccde:	d011      	beq.n	cd04 <__cmpsf2+0x40>
    cce0:	b001      	add	sp, #4
    cce2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    cce6:	bf18      	it	ne
    cce8:	ea90 0f01 	teqne	r0, r1
    ccec:	bf58      	it	pl
    ccee:	ebb2 0003 	subspl.w	r0, r2, r3
    ccf2:	bf88      	it	hi
    ccf4:	17c8      	asrhi	r0, r1, #31
    ccf6:	bf38      	it	cc
    ccf8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    ccfc:	bf18      	it	ne
    ccfe:	f040 0001 	orrne.w	r0, r0, #1
    cd02:	4770      	bx	lr
    cd04:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cd08:	d102      	bne.n	cd10 <__cmpsf2+0x4c>
    cd0a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    cd0e:	d105      	bne.n	cd1c <__cmpsf2+0x58>
    cd10:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    cd14:	d1e4      	bne.n	cce0 <__cmpsf2+0x1c>
    cd16:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    cd1a:	d0e1      	beq.n	cce0 <__cmpsf2+0x1c>
    cd1c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cd20:	4770      	bx	lr
    cd22:	bf00      	nop

0000cd24 <__aeabi_cfrcmple>:
    cd24:	4684      	mov	ip, r0
    cd26:	4608      	mov	r0, r1
    cd28:	4661      	mov	r1, ip
    cd2a:	e7ff      	b.n	cd2c <__aeabi_cfcmpeq>

0000cd2c <__aeabi_cfcmpeq>:
    cd2c:	b50f      	push	{r0, r1, r2, r3, lr}
    cd2e:	f7ff ffc9 	bl	ccc4 <__cmpsf2>
    cd32:	2800      	cmp	r0, #0
    cd34:	bf48      	it	mi
    cd36:	f110 0f00 	cmnmi.w	r0, #0
    cd3a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000cd3c <__aeabi_fcmpeq>:
    cd3c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd40:	f7ff fff4 	bl	cd2c <__aeabi_cfcmpeq>
    cd44:	bf0c      	ite	eq
    cd46:	2001      	moveq	r0, #1
    cd48:	2000      	movne	r0, #0
    cd4a:	f85d fb08 	ldr.w	pc, [sp], #8
    cd4e:	bf00      	nop

0000cd50 <__aeabi_fcmplt>:
    cd50:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd54:	f7ff ffea 	bl	cd2c <__aeabi_cfcmpeq>
    cd58:	bf34      	ite	cc
    cd5a:	2001      	movcc	r0, #1
    cd5c:	2000      	movcs	r0, #0
    cd5e:	f85d fb08 	ldr.w	pc, [sp], #8
    cd62:	bf00      	nop

0000cd64 <__aeabi_fcmple>:
    cd64:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd68:	f7ff ffe0 	bl	cd2c <__aeabi_cfcmpeq>
    cd6c:	bf94      	ite	ls
    cd6e:	2001      	movls	r0, #1
    cd70:	2000      	movhi	r0, #0
    cd72:	f85d fb08 	ldr.w	pc, [sp], #8
    cd76:	bf00      	nop

0000cd78 <__aeabi_fcmpge>:
    cd78:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd7c:	f7ff ffd2 	bl	cd24 <__aeabi_cfrcmple>
    cd80:	bf94      	ite	ls
    cd82:	2001      	movls	r0, #1
    cd84:	2000      	movhi	r0, #0
    cd86:	f85d fb08 	ldr.w	pc, [sp], #8
    cd8a:	bf00      	nop

0000cd8c <__aeabi_fcmpgt>:
    cd8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd90:	f7ff ffc8 	bl	cd24 <__aeabi_cfrcmple>
    cd94:	bf34      	ite	cc
    cd96:	2001      	movcc	r0, #1
    cd98:	2000      	movcs	r0, #0
    cd9a:	f85d fb08 	ldr.w	pc, [sp], #8
    cd9e:	bf00      	nop

0000cda0 <__aeabi_f2iz>:
    cda0:	ea4f 0240 	mov.w	r2, r0, lsl #1
    cda4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    cda8:	d30f      	bcc.n	cdca <__aeabi_f2iz+0x2a>
    cdaa:	f04f 039e 	mov.w	r3, #158	; 0x9e
    cdae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    cdb2:	d90d      	bls.n	cdd0 <__aeabi_f2iz+0x30>
    cdb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
    cdb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cdbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cdc0:	fa23 f002 	lsr.w	r0, r3, r2
    cdc4:	bf18      	it	ne
    cdc6:	4240      	negne	r0, r0
    cdc8:	4770      	bx	lr
    cdca:	f04f 0000 	mov.w	r0, #0
    cdce:	4770      	bx	lr
    cdd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    cdd4:	d101      	bne.n	cdda <__aeabi_f2iz+0x3a>
    cdd6:	0242      	lsls	r2, r0, #9
    cdd8:	d105      	bne.n	cde6 <__aeabi_f2iz+0x46>
    cdda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    cdde:	bf08      	it	eq
    cde0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    cde4:	4770      	bx	lr
    cde6:	f04f 0000 	mov.w	r0, #0
    cdea:	4770      	bx	lr

0000cdec <__aeabi_f2uiz>:
    cdec:	0042      	lsls	r2, r0, #1
    cdee:	d20e      	bcs.n	ce0e <__aeabi_f2uiz+0x22>
    cdf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    cdf4:	d30b      	bcc.n	ce0e <__aeabi_f2uiz+0x22>
    cdf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    cdfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    cdfe:	d409      	bmi.n	ce14 <__aeabi_f2uiz+0x28>
    ce00:	ea4f 2300 	mov.w	r3, r0, lsl #8
    ce04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    ce08:	fa23 f002 	lsr.w	r0, r3, r2
    ce0c:	4770      	bx	lr
    ce0e:	f04f 0000 	mov.w	r0, #0
    ce12:	4770      	bx	lr
    ce14:	f112 0f61 	cmn.w	r2, #97	; 0x61
    ce18:	d101      	bne.n	ce1e <__aeabi_f2uiz+0x32>
    ce1a:	0242      	lsls	r2, r0, #9
    ce1c:	d102      	bne.n	ce24 <__aeabi_f2uiz+0x38>
    ce1e:	f04f 30ff 	mov.w	r0, #4294967295
    ce22:	4770      	bx	lr
    ce24:	f04f 0000 	mov.w	r0, #0
    ce28:	4770      	bx	lr
    ce2a:	bf00      	nop

0000ce2c <malloc>:
    ce2c:	4b02      	ldr	r3, [pc, #8]	; (ce38 <malloc+0xc>)
    ce2e:	4601      	mov	r1, r0
    ce30:	6818      	ldr	r0, [r3, #0]
    ce32:	f000 b803 	b.w	ce3c <_malloc_r>
    ce36:	bf00      	nop
    ce38:	1fff9168 	.word	0x1fff9168

0000ce3c <_malloc_r>:
    ce3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ce40:	f101 060b 	add.w	r6, r1, #11
    ce44:	2e16      	cmp	r6, #22
    ce46:	b083      	sub	sp, #12
    ce48:	4604      	mov	r4, r0
    ce4a:	d824      	bhi.n	ce96 <_malloc_r+0x5a>
    ce4c:	2910      	cmp	r1, #16
    ce4e:	f200 80ba 	bhi.w	cfc6 <_malloc_r+0x18a>
    ce52:	f000 faa3 	bl	d39c <__malloc_lock>
    ce56:	2610      	movs	r6, #16
    ce58:	2218      	movs	r2, #24
    ce5a:	2002      	movs	r0, #2
    ce5c:	4fb5      	ldr	r7, [pc, #724]	; (d134 <_malloc_r+0x2f8>)
    ce5e:	443a      	add	r2, r7
    ce60:	f1a2 0108 	sub.w	r1, r2, #8
    ce64:	6853      	ldr	r3, [r2, #4]
    ce66:	428b      	cmp	r3, r1
    ce68:	f000 80ba 	beq.w	cfe0 <_malloc_r+0x1a4>
    ce6c:	685a      	ldr	r2, [r3, #4]
    ce6e:	68d9      	ldr	r1, [r3, #12]
    ce70:	f022 0203 	bic.w	r2, r2, #3
    ce74:	441a      	add	r2, r3
    ce76:	689d      	ldr	r5, [r3, #8]
    ce78:	60e9      	str	r1, [r5, #12]
    ce7a:	608d      	str	r5, [r1, #8]
    ce7c:	6851      	ldr	r1, [r2, #4]
    ce7e:	f041 0101 	orr.w	r1, r1, #1
    ce82:	4620      	mov	r0, r4
    ce84:	6051      	str	r1, [r2, #4]
    ce86:	f103 0508 	add.w	r5, r3, #8
    ce8a:	f000 fa8d 	bl	d3a8 <__malloc_unlock>
    ce8e:	4628      	mov	r0, r5
    ce90:	b003      	add	sp, #12
    ce92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ce96:	f036 0607 	bics.w	r6, r6, #7
    ce9a:	f100 8094 	bmi.w	cfc6 <_malloc_r+0x18a>
    ce9e:	42b1      	cmp	r1, r6
    cea0:	f200 8091 	bhi.w	cfc6 <_malloc_r+0x18a>
    cea4:	f000 fa7a 	bl	d39c <__malloc_lock>
    cea8:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    ceac:	f0c0 819a 	bcc.w	d1e4 <_malloc_r+0x3a8>
    ceb0:	0a73      	lsrs	r3, r6, #9
    ceb2:	f000 808f 	beq.w	cfd4 <_malloc_r+0x198>
    ceb6:	2b04      	cmp	r3, #4
    ceb8:	f200 816f 	bhi.w	d19a <_malloc_r+0x35e>
    cebc:	09b3      	lsrs	r3, r6, #6
    cebe:	f103 0039 	add.w	r0, r3, #57	; 0x39
    cec2:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    cec6:	00c3      	lsls	r3, r0, #3
    cec8:	4f9a      	ldr	r7, [pc, #616]	; (d134 <_malloc_r+0x2f8>)
    ceca:	443b      	add	r3, r7
    cecc:	f1a3 0508 	sub.w	r5, r3, #8
    ced0:	685b      	ldr	r3, [r3, #4]
    ced2:	429d      	cmp	r5, r3
    ced4:	d106      	bne.n	cee4 <_malloc_r+0xa8>
    ced6:	e00c      	b.n	cef2 <_malloc_r+0xb6>
    ced8:	2900      	cmp	r1, #0
    ceda:	f280 8127 	bge.w	d12c <_malloc_r+0x2f0>
    cede:	68db      	ldr	r3, [r3, #12]
    cee0:	429d      	cmp	r5, r3
    cee2:	d006      	beq.n	cef2 <_malloc_r+0xb6>
    cee4:	685a      	ldr	r2, [r3, #4]
    cee6:	f022 0203 	bic.w	r2, r2, #3
    ceea:	1b91      	subs	r1, r2, r6
    ceec:	290f      	cmp	r1, #15
    ceee:	ddf3      	ble.n	ced8 <_malloc_r+0x9c>
    cef0:	4660      	mov	r0, ip
    cef2:	693d      	ldr	r5, [r7, #16]
    cef4:	f8df c240 	ldr.w	ip, [pc, #576]	; d138 <_malloc_r+0x2fc>
    cef8:	4565      	cmp	r5, ip
    cefa:	d07c      	beq.n	cff6 <_malloc_r+0x1ba>
    cefc:	686a      	ldr	r2, [r5, #4]
    cefe:	f022 0203 	bic.w	r2, r2, #3
    cf02:	1b93      	subs	r3, r2, r6
    cf04:	2b0f      	cmp	r3, #15
    cf06:	f300 817b 	bgt.w	d200 <_malloc_r+0x3c4>
    cf0a:	2b00      	cmp	r3, #0
    cf0c:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    cf10:	f280 816c 	bge.w	d1ec <_malloc_r+0x3b0>
    cf14:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    cf18:	f080 811a 	bcs.w	d150 <_malloc_r+0x314>
    cf1c:	08d3      	lsrs	r3, r2, #3
    cf1e:	6879      	ldr	r1, [r7, #4]
    cf20:	3301      	adds	r3, #1
    cf22:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    cf26:	2201      	movs	r2, #1
    cf28:	fa02 f20e 	lsl.w	r2, r2, lr
    cf2c:	430a      	orrs	r2, r1
    cf2e:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    cf32:	f8c5 e008 	str.w	lr, [r5, #8]
    cf36:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    cf3a:	3908      	subs	r1, #8
    cf3c:	60e9      	str	r1, [r5, #12]
    cf3e:	607a      	str	r2, [r7, #4]
    cf40:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    cf44:	f8ce 500c 	str.w	r5, [lr, #12]
    cf48:	1083      	asrs	r3, r0, #2
    cf4a:	2101      	movs	r1, #1
    cf4c:	4099      	lsls	r1, r3
    cf4e:	4291      	cmp	r1, r2
    cf50:	d857      	bhi.n	d002 <_malloc_r+0x1c6>
    cf52:	4211      	tst	r1, r2
    cf54:	d106      	bne.n	cf64 <_malloc_r+0x128>
    cf56:	f020 0003 	bic.w	r0, r0, #3
    cf5a:	0049      	lsls	r1, r1, #1
    cf5c:	4211      	tst	r1, r2
    cf5e:	f100 0004 	add.w	r0, r0, #4
    cf62:	d0fa      	beq.n	cf5a <_malloc_r+0x11e>
    cf64:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    cf68:	464d      	mov	r5, r9
    cf6a:	4686      	mov	lr, r0
    cf6c:	f8d5 800c 	ldr.w	r8, [r5, #12]
    cf70:	4545      	cmp	r5, r8
    cf72:	d108      	bne.n	cf86 <_malloc_r+0x14a>
    cf74:	e11d      	b.n	d1b2 <_malloc_r+0x376>
    cf76:	2b00      	cmp	r3, #0
    cf78:	f280 8124 	bge.w	d1c4 <_malloc_r+0x388>
    cf7c:	f8d8 800c 	ldr.w	r8, [r8, #12]
    cf80:	4545      	cmp	r5, r8
    cf82:	f000 8116 	beq.w	d1b2 <_malloc_r+0x376>
    cf86:	f8d8 2004 	ldr.w	r2, [r8, #4]
    cf8a:	f022 0203 	bic.w	r2, r2, #3
    cf8e:	1b93      	subs	r3, r2, r6
    cf90:	2b0f      	cmp	r3, #15
    cf92:	ddf0      	ble.n	cf76 <_malloc_r+0x13a>
    cf94:	4620      	mov	r0, r4
    cf96:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    cf9a:	eb08 0106 	add.w	r1, r8, r6
    cf9e:	f046 0601 	orr.w	r6, r6, #1
    cfa2:	f8c8 6004 	str.w	r6, [r8, #4]
    cfa6:	60ec      	str	r4, [r5, #12]
    cfa8:	60a5      	str	r5, [r4, #8]
    cfaa:	f043 0401 	orr.w	r4, r3, #1
    cfae:	e9c7 1104 	strd	r1, r1, [r7, #16]
    cfb2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    cfb6:	604c      	str	r4, [r1, #4]
    cfb8:	f848 3002 	str.w	r3, [r8, r2]
    cfbc:	f000 f9f4 	bl	d3a8 <__malloc_unlock>
    cfc0:	f108 0508 	add.w	r5, r8, #8
    cfc4:	e002      	b.n	cfcc <_malloc_r+0x190>
    cfc6:	230c      	movs	r3, #12
    cfc8:	6023      	str	r3, [r4, #0]
    cfca:	2500      	movs	r5, #0
    cfcc:	4628      	mov	r0, r5
    cfce:	b003      	add	sp, #12
    cfd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cfd4:	f44f 7300 	mov.w	r3, #512	; 0x200
    cfd8:	2040      	movs	r0, #64	; 0x40
    cfda:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    cfde:	e773      	b.n	cec8 <_malloc_r+0x8c>
    cfe0:	68d3      	ldr	r3, [r2, #12]
    cfe2:	429a      	cmp	r2, r3
    cfe4:	bf08      	it	eq
    cfe6:	3002      	addeq	r0, #2
    cfe8:	f47f af40 	bne.w	ce6c <_malloc_r+0x30>
    cfec:	693d      	ldr	r5, [r7, #16]
    cfee:	f8df c148 	ldr.w	ip, [pc, #328]	; d138 <_malloc_r+0x2fc>
    cff2:	4565      	cmp	r5, ip
    cff4:	d182      	bne.n	cefc <_malloc_r+0xc0>
    cff6:	687a      	ldr	r2, [r7, #4]
    cff8:	1083      	asrs	r3, r0, #2
    cffa:	2101      	movs	r1, #1
    cffc:	4099      	lsls	r1, r3
    cffe:	4291      	cmp	r1, r2
    d000:	d9a7      	bls.n	cf52 <_malloc_r+0x116>
    d002:	68bd      	ldr	r5, [r7, #8]
    d004:	686b      	ldr	r3, [r5, #4]
    d006:	f023 0903 	bic.w	r9, r3, #3
    d00a:	454e      	cmp	r6, r9
    d00c:	d803      	bhi.n	d016 <_malloc_r+0x1da>
    d00e:	eba9 0306 	sub.w	r3, r9, r6
    d012:	2b0f      	cmp	r3, #15
    d014:	dc7a      	bgt.n	d10c <_malloc_r+0x2d0>
    d016:	f8df b124 	ldr.w	fp, [pc, #292]	; d13c <_malloc_r+0x300>
    d01a:	4b49      	ldr	r3, [pc, #292]	; (d140 <_malloc_r+0x304>)
    d01c:	f8db 2000 	ldr.w	r2, [fp]
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	3201      	adds	r2, #1
    d024:	4433      	add	r3, r6
    d026:	eb05 0a09 	add.w	sl, r5, r9
    d02a:	f000 8133 	beq.w	d294 <_malloc_r+0x458>
    d02e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d032:	330f      	adds	r3, #15
    d034:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d038:	f028 080f 	bic.w	r8, r8, #15
    d03c:	4641      	mov	r1, r8
    d03e:	4620      	mov	r0, r4
    d040:	f000 fe32 	bl	dca8 <_sbrk_r>
    d044:	1c41      	adds	r1, r0, #1
    d046:	4602      	mov	r2, r0
    d048:	f000 80f3 	beq.w	d232 <_malloc_r+0x3f6>
    d04c:	4582      	cmp	sl, r0
    d04e:	f200 80ee 	bhi.w	d22e <_malloc_r+0x3f2>
    d052:	4b3c      	ldr	r3, [pc, #240]	; (d144 <_malloc_r+0x308>)
    d054:	6819      	ldr	r1, [r3, #0]
    d056:	4441      	add	r1, r8
    d058:	6019      	str	r1, [r3, #0]
    d05a:	4608      	mov	r0, r1
    d05c:	f000 814e 	beq.w	d2fc <_malloc_r+0x4c0>
    d060:	f8db 1000 	ldr.w	r1, [fp]
    d064:	9301      	str	r3, [sp, #4]
    d066:	3101      	adds	r1, #1
    d068:	bf1b      	ittet	ne
    d06a:	eba2 010a 	subne.w	r1, r2, sl
    d06e:	1809      	addne	r1, r1, r0
    d070:	f8cb 2000 	streq.w	r2, [fp]
    d074:	6019      	strne	r1, [r3, #0]
    d076:	f012 0b07 	ands.w	fp, r2, #7
    d07a:	f000 8117 	beq.w	d2ac <_malloc_r+0x470>
    d07e:	f1cb 0108 	rsb	r1, fp, #8
    d082:	440a      	add	r2, r1
    d084:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d088:	4490      	add	r8, r2
    d08a:	3108      	adds	r1, #8
    d08c:	eba1 0108 	sub.w	r1, r1, r8
    d090:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d094:	4651      	mov	r1, sl
    d096:	4620      	mov	r0, r4
    d098:	9200      	str	r2, [sp, #0]
    d09a:	f000 fe05 	bl	dca8 <_sbrk_r>
    d09e:	1c42      	adds	r2, r0, #1
    d0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
    d0a4:	f000 814f 	beq.w	d346 <_malloc_r+0x50a>
    d0a8:	1a80      	subs	r0, r0, r2
    d0aa:	eb00 080a 	add.w	r8, r0, sl
    d0ae:	6819      	ldr	r1, [r3, #0]
    d0b0:	60ba      	str	r2, [r7, #8]
    d0b2:	f048 0001 	orr.w	r0, r8, #1
    d0b6:	4451      	add	r1, sl
    d0b8:	42bd      	cmp	r5, r7
    d0ba:	6050      	str	r0, [r2, #4]
    d0bc:	6019      	str	r1, [r3, #0]
    d0be:	f000 8129 	beq.w	d314 <_malloc_r+0x4d8>
    d0c2:	f1b9 0f0f 	cmp.w	r9, #15
    d0c6:	f240 8127 	bls.w	d318 <_malloc_r+0x4dc>
    d0ca:	6868      	ldr	r0, [r5, #4]
    d0cc:	f1a9 0c0c 	sub.w	ip, r9, #12
    d0d0:	f02c 0c07 	bic.w	ip, ip, #7
    d0d4:	f000 0001 	and.w	r0, r0, #1
    d0d8:	ea40 000c 	orr.w	r0, r0, ip
    d0dc:	6068      	str	r0, [r5, #4]
    d0de:	f04f 0e05 	mov.w	lr, #5
    d0e2:	eb05 000c 	add.w	r0, r5, ip
    d0e6:	f1bc 0f0f 	cmp.w	ip, #15
    d0ea:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d0ee:	f200 8132 	bhi.w	d356 <_malloc_r+0x51a>
    d0f2:	6850      	ldr	r0, [r2, #4]
    d0f4:	4615      	mov	r5, r2
    d0f6:	4b14      	ldr	r3, [pc, #80]	; (d148 <_malloc_r+0x30c>)
    d0f8:	681a      	ldr	r2, [r3, #0]
    d0fa:	428a      	cmp	r2, r1
    d0fc:	bf38      	it	cc
    d0fe:	6019      	strcc	r1, [r3, #0]
    d100:	4b12      	ldr	r3, [pc, #72]	; (d14c <_malloc_r+0x310>)
    d102:	681a      	ldr	r2, [r3, #0]
    d104:	428a      	cmp	r2, r1
    d106:	bf38      	it	cc
    d108:	6019      	strcc	r1, [r3, #0]
    d10a:	e094      	b.n	d236 <_malloc_r+0x3fa>
    d10c:	19aa      	adds	r2, r5, r6
    d10e:	f043 0301 	orr.w	r3, r3, #1
    d112:	f046 0601 	orr.w	r6, r6, #1
    d116:	606e      	str	r6, [r5, #4]
    d118:	4620      	mov	r0, r4
    d11a:	60ba      	str	r2, [r7, #8]
    d11c:	6053      	str	r3, [r2, #4]
    d11e:	f000 f943 	bl	d3a8 <__malloc_unlock>
    d122:	3508      	adds	r5, #8
    d124:	4628      	mov	r0, r5
    d126:	b003      	add	sp, #12
    d128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d12c:	68d9      	ldr	r1, [r3, #12]
    d12e:	441a      	add	r2, r3
    d130:	e6a1      	b.n	ce76 <_malloc_r+0x3a>
    d132:	bf00      	nop
    d134:	1fff8ac0 	.word	0x1fff8ac0
    d138:	1fff8ac8 	.word	0x1fff8ac8
    d13c:	1fff8ec8 	.word	0x1fff8ec8
    d140:	1fffd34c 	.word	0x1fffd34c
    d144:	1fffd31c 	.word	0x1fffd31c
    d148:	1fffd344 	.word	0x1fffd344
    d14c:	1fffd348 	.word	0x1fffd348
    d150:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d154:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d158:	d363      	bcc.n	d222 <_malloc_r+0x3e6>
    d15a:	2b14      	cmp	r3, #20
    d15c:	f200 80b7 	bhi.w	d2ce <_malloc_r+0x492>
    d160:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d164:	00c9      	lsls	r1, r1, #3
    d166:	335b      	adds	r3, #91	; 0x5b
    d168:	eb07 0e01 	add.w	lr, r7, r1
    d16c:	5879      	ldr	r1, [r7, r1]
    d16e:	f1ae 0e08 	sub.w	lr, lr, #8
    d172:	458e      	cmp	lr, r1
    d174:	f000 8091 	beq.w	d29a <_malloc_r+0x45e>
    d178:	684b      	ldr	r3, [r1, #4]
    d17a:	f023 0303 	bic.w	r3, r3, #3
    d17e:	4293      	cmp	r3, r2
    d180:	d902      	bls.n	d188 <_malloc_r+0x34c>
    d182:	6889      	ldr	r1, [r1, #8]
    d184:	458e      	cmp	lr, r1
    d186:	d1f7      	bne.n	d178 <_malloc_r+0x33c>
    d188:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d18c:	687a      	ldr	r2, [r7, #4]
    d18e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d192:	f8ce 5008 	str.w	r5, [lr, #8]
    d196:	60cd      	str	r5, [r1, #12]
    d198:	e6d6      	b.n	cf48 <_malloc_r+0x10c>
    d19a:	2b14      	cmp	r3, #20
    d19c:	d959      	bls.n	d252 <_malloc_r+0x416>
    d19e:	2b54      	cmp	r3, #84	; 0x54
    d1a0:	f200 809d 	bhi.w	d2de <_malloc_r+0x4a2>
    d1a4:	0b33      	lsrs	r3, r6, #12
    d1a6:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d1aa:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d1ae:	00c3      	lsls	r3, r0, #3
    d1b0:	e68a      	b.n	cec8 <_malloc_r+0x8c>
    d1b2:	f10e 0e01 	add.w	lr, lr, #1
    d1b6:	f01e 0f03 	tst.w	lr, #3
    d1ba:	f105 0508 	add.w	r5, r5, #8
    d1be:	f47f aed5 	bne.w	cf6c <_malloc_r+0x130>
    d1c2:	e051      	b.n	d268 <_malloc_r+0x42c>
    d1c4:	4442      	add	r2, r8
    d1c6:	4645      	mov	r5, r8
    d1c8:	6853      	ldr	r3, [r2, #4]
    d1ca:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d1ce:	f043 0301 	orr.w	r3, r3, #1
    d1d2:	6053      	str	r3, [r2, #4]
    d1d4:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d1d8:	4620      	mov	r0, r4
    d1da:	60d9      	str	r1, [r3, #12]
    d1dc:	608b      	str	r3, [r1, #8]
    d1de:	f000 f8e3 	bl	d3a8 <__malloc_unlock>
    d1e2:	e6f3      	b.n	cfcc <_malloc_r+0x190>
    d1e4:	08f0      	lsrs	r0, r6, #3
    d1e6:	f106 0208 	add.w	r2, r6, #8
    d1ea:	e637      	b.n	ce5c <_malloc_r+0x20>
    d1ec:	442a      	add	r2, r5
    d1ee:	4620      	mov	r0, r4
    d1f0:	6853      	ldr	r3, [r2, #4]
    d1f2:	f043 0301 	orr.w	r3, r3, #1
    d1f6:	6053      	str	r3, [r2, #4]
    d1f8:	3508      	adds	r5, #8
    d1fa:	f000 f8d5 	bl	d3a8 <__malloc_unlock>
    d1fe:	e6e5      	b.n	cfcc <_malloc_r+0x190>
    d200:	19a9      	adds	r1, r5, r6
    d202:	4620      	mov	r0, r4
    d204:	f046 0601 	orr.w	r6, r6, #1
    d208:	f043 0401 	orr.w	r4, r3, #1
    d20c:	606e      	str	r6, [r5, #4]
    d20e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d212:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d216:	604c      	str	r4, [r1, #4]
    d218:	50ab      	str	r3, [r5, r2]
    d21a:	f000 f8c5 	bl	d3a8 <__malloc_unlock>
    d21e:	3508      	adds	r5, #8
    d220:	e6d4      	b.n	cfcc <_malloc_r+0x190>
    d222:	0993      	lsrs	r3, r2, #6
    d224:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d228:	00c9      	lsls	r1, r1, #3
    d22a:	3338      	adds	r3, #56	; 0x38
    d22c:	e79c      	b.n	d168 <_malloc_r+0x32c>
    d22e:	42bd      	cmp	r5, r7
    d230:	d05f      	beq.n	d2f2 <_malloc_r+0x4b6>
    d232:	68bd      	ldr	r5, [r7, #8]
    d234:	6868      	ldr	r0, [r5, #4]
    d236:	f020 0803 	bic.w	r8, r0, #3
    d23a:	4546      	cmp	r6, r8
    d23c:	eba8 0306 	sub.w	r3, r8, r6
    d240:	d802      	bhi.n	d248 <_malloc_r+0x40c>
    d242:	2b0f      	cmp	r3, #15
    d244:	f73f af62 	bgt.w	d10c <_malloc_r+0x2d0>
    d248:	4620      	mov	r0, r4
    d24a:	f000 f8ad 	bl	d3a8 <__malloc_unlock>
    d24e:	2500      	movs	r5, #0
    d250:	e6bc      	b.n	cfcc <_malloc_r+0x190>
    d252:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d256:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d25a:	00c3      	lsls	r3, r0, #3
    d25c:	e634      	b.n	cec8 <_malloc_r+0x8c>
    d25e:	f859 3908 	ldr.w	r3, [r9], #-8
    d262:	454b      	cmp	r3, r9
    d264:	f040 8096 	bne.w	d394 <_malloc_r+0x558>
    d268:	f010 0f03 	tst.w	r0, #3
    d26c:	f100 30ff 	add.w	r0, r0, #4294967295
    d270:	d1f5      	bne.n	d25e <_malloc_r+0x422>
    d272:	687b      	ldr	r3, [r7, #4]
    d274:	ea23 0301 	bic.w	r3, r3, r1
    d278:	607b      	str	r3, [r7, #4]
    d27a:	0049      	lsls	r1, r1, #1
    d27c:	4299      	cmp	r1, r3
    d27e:	f63f aec0 	bhi.w	d002 <_malloc_r+0x1c6>
    d282:	b919      	cbnz	r1, d28c <_malloc_r+0x450>
    d284:	e6bd      	b.n	d002 <_malloc_r+0x1c6>
    d286:	0049      	lsls	r1, r1, #1
    d288:	f10e 0e04 	add.w	lr, lr, #4
    d28c:	4219      	tst	r1, r3
    d28e:	d0fa      	beq.n	d286 <_malloc_r+0x44a>
    d290:	4670      	mov	r0, lr
    d292:	e667      	b.n	cf64 <_malloc_r+0x128>
    d294:	f103 0810 	add.w	r8, r3, #16
    d298:	e6d0      	b.n	d03c <_malloc_r+0x200>
    d29a:	109a      	asrs	r2, r3, #2
    d29c:	f04f 0801 	mov.w	r8, #1
    d2a0:	687b      	ldr	r3, [r7, #4]
    d2a2:	fa08 f202 	lsl.w	r2, r8, r2
    d2a6:	431a      	orrs	r2, r3
    d2a8:	607a      	str	r2, [r7, #4]
    d2aa:	e770      	b.n	d18e <_malloc_r+0x352>
    d2ac:	eb02 0108 	add.w	r1, r2, r8
    d2b0:	4249      	negs	r1, r1
    d2b2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d2b6:	4651      	mov	r1, sl
    d2b8:	4620      	mov	r0, r4
    d2ba:	9200      	str	r2, [sp, #0]
    d2bc:	f000 fcf4 	bl	dca8 <_sbrk_r>
    d2c0:	1c43      	adds	r3, r0, #1
    d2c2:	e9dd 2300 	ldrd	r2, r3, [sp]
    d2c6:	f47f aeef 	bne.w	d0a8 <_malloc_r+0x26c>
    d2ca:	46da      	mov	sl, fp
    d2cc:	e6ef      	b.n	d0ae <_malloc_r+0x272>
    d2ce:	2b54      	cmp	r3, #84	; 0x54
    d2d0:	d825      	bhi.n	d31e <_malloc_r+0x4e2>
    d2d2:	0b13      	lsrs	r3, r2, #12
    d2d4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d2d8:	00c9      	lsls	r1, r1, #3
    d2da:	336e      	adds	r3, #110	; 0x6e
    d2dc:	e744      	b.n	d168 <_malloc_r+0x32c>
    d2de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d2e2:	d825      	bhi.n	d330 <_malloc_r+0x4f4>
    d2e4:	0bf3      	lsrs	r3, r6, #15
    d2e6:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d2ea:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d2ee:	00c3      	lsls	r3, r0, #3
    d2f0:	e5ea      	b.n	cec8 <_malloc_r+0x8c>
    d2f2:	4b29      	ldr	r3, [pc, #164]	; (d398 <_malloc_r+0x55c>)
    d2f4:	6818      	ldr	r0, [r3, #0]
    d2f6:	4440      	add	r0, r8
    d2f8:	6018      	str	r0, [r3, #0]
    d2fa:	e6b1      	b.n	d060 <_malloc_r+0x224>
    d2fc:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d300:	f1bc 0f00 	cmp.w	ip, #0
    d304:	f47f aeac 	bne.w	d060 <_malloc_r+0x224>
    d308:	68bd      	ldr	r5, [r7, #8]
    d30a:	44c8      	add	r8, r9
    d30c:	f048 0001 	orr.w	r0, r8, #1
    d310:	6068      	str	r0, [r5, #4]
    d312:	e6f0      	b.n	d0f6 <_malloc_r+0x2ba>
    d314:	4615      	mov	r5, r2
    d316:	e6ee      	b.n	d0f6 <_malloc_r+0x2ba>
    d318:	2301      	movs	r3, #1
    d31a:	6053      	str	r3, [r2, #4]
    d31c:	e794      	b.n	d248 <_malloc_r+0x40c>
    d31e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d322:	d823      	bhi.n	d36c <_malloc_r+0x530>
    d324:	0bd3      	lsrs	r3, r2, #15
    d326:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d32a:	00c9      	lsls	r1, r1, #3
    d32c:	3377      	adds	r3, #119	; 0x77
    d32e:	e71b      	b.n	d168 <_malloc_r+0x32c>
    d330:	f240 5254 	movw	r2, #1364	; 0x554
    d334:	4293      	cmp	r3, r2
    d336:	d823      	bhi.n	d380 <_malloc_r+0x544>
    d338:	0cb3      	lsrs	r3, r6, #18
    d33a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d33e:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d342:	00c3      	lsls	r3, r0, #3
    d344:	e5c0      	b.n	cec8 <_malloc_r+0x8c>
    d346:	f1ab 0b08 	sub.w	fp, fp, #8
    d34a:	44d8      	add	r8, fp
    d34c:	eba8 0802 	sub.w	r8, r8, r2
    d350:	f04f 0a00 	mov.w	sl, #0
    d354:	e6ab      	b.n	d0ae <_malloc_r+0x272>
    d356:	f105 0108 	add.w	r1, r5, #8
    d35a:	4620      	mov	r0, r4
    d35c:	9300      	str	r3, [sp, #0]
    d35e:	f000 fddd 	bl	df1c <_free_r>
    d362:	68bd      	ldr	r5, [r7, #8]
    d364:	9b00      	ldr	r3, [sp, #0]
    d366:	6868      	ldr	r0, [r5, #4]
    d368:	6819      	ldr	r1, [r3, #0]
    d36a:	e6c4      	b.n	d0f6 <_malloc_r+0x2ba>
    d36c:	f240 5154 	movw	r1, #1364	; 0x554
    d370:	428b      	cmp	r3, r1
    d372:	d80b      	bhi.n	d38c <_malloc_r+0x550>
    d374:	0c93      	lsrs	r3, r2, #18
    d376:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d37a:	00c9      	lsls	r1, r1, #3
    d37c:	337c      	adds	r3, #124	; 0x7c
    d37e:	e6f3      	b.n	d168 <_malloc_r+0x32c>
    d380:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d384:	207f      	movs	r0, #127	; 0x7f
    d386:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d38a:	e59d      	b.n	cec8 <_malloc_r+0x8c>
    d38c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d390:	237e      	movs	r3, #126	; 0x7e
    d392:	e6e9      	b.n	d168 <_malloc_r+0x32c>
    d394:	687b      	ldr	r3, [r7, #4]
    d396:	e770      	b.n	d27a <_malloc_r+0x43e>
    d398:	1fffd31c 	.word	0x1fffd31c

0000d39c <__malloc_lock>:
    d39c:	4801      	ldr	r0, [pc, #4]	; (d3a4 <__malloc_lock+0x8>)
    d39e:	f000 bcd9 	b.w	dd54 <__retarget_lock_acquire_recursive>
    d3a2:	bf00      	nop
    d3a4:	1fffd494 	.word	0x1fffd494

0000d3a8 <__malloc_unlock>:
    d3a8:	4801      	ldr	r0, [pc, #4]	; (d3b0 <__malloc_unlock+0x8>)
    d3aa:	f000 bcd5 	b.w	dd58 <__retarget_lock_release_recursive>
    d3ae:	bf00      	nop
    d3b0:	1fffd494 	.word	0x1fffd494

0000d3b4 <_realloc_r>:
    d3b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3b8:	4617      	mov	r7, r2
    d3ba:	2900      	cmp	r1, #0
    d3bc:	f000 8098 	beq.w	d4f0 <_realloc_r+0x13c>
    d3c0:	460c      	mov	r4, r1
    d3c2:	f107 050b 	add.w	r5, r7, #11
    d3c6:	4680      	mov	r8, r0
    d3c8:	f7ff ffe8 	bl	d39c <__malloc_lock>
    d3cc:	2d16      	cmp	r5, #22
    d3ce:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d3d2:	d85b      	bhi.n	d48c <_realloc_r+0xd8>
    d3d4:	2510      	movs	r5, #16
    d3d6:	462a      	mov	r2, r5
    d3d8:	42af      	cmp	r7, r5
    d3da:	d85c      	bhi.n	d496 <_realloc_r+0xe2>
    d3dc:	f021 0603 	bic.w	r6, r1, #3
    d3e0:	4296      	cmp	r6, r2
    d3e2:	f1a4 0908 	sub.w	r9, r4, #8
    d3e6:	da62      	bge.n	d4ae <_realloc_r+0xfa>
    d3e8:	4bbc      	ldr	r3, [pc, #752]	; (d6dc <_realloc_r+0x328>)
    d3ea:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d3ee:	eb09 0006 	add.w	r0, r9, r6
    d3f2:	4584      	cmp	ip, r0
    d3f4:	f000 8097 	beq.w	d526 <_realloc_r+0x172>
    d3f8:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d3fc:	f02c 0301 	bic.w	r3, ip, #1
    d400:	4403      	add	r3, r0
    d402:	685b      	ldr	r3, [r3, #4]
    d404:	07db      	lsls	r3, r3, #31
    d406:	d468      	bmi.n	d4da <_realloc_r+0x126>
    d408:	f02c 0c03 	bic.w	ip, ip, #3
    d40c:	eb06 030c 	add.w	r3, r6, ip
    d410:	4293      	cmp	r3, r2
    d412:	da47      	bge.n	d4a4 <_realloc_r+0xf0>
    d414:	07cb      	lsls	r3, r1, #31
    d416:	d410      	bmi.n	d43a <_realloc_r+0x86>
    d418:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d41c:	eba9 0a03 	sub.w	sl, r9, r3
    d420:	f8da 3004 	ldr.w	r3, [sl, #4]
    d424:	f023 0103 	bic.w	r1, r3, #3
    d428:	448c      	add	ip, r1
    d42a:	44b4      	add	ip, r6
    d42c:	4594      	cmp	ip, r2
    d42e:	f280 8111 	bge.w	d654 <_realloc_r+0x2a0>
    d432:	1873      	adds	r3, r6, r1
    d434:	4293      	cmp	r3, r2
    d436:	f280 80e8 	bge.w	d60a <_realloc_r+0x256>
    d43a:	4639      	mov	r1, r7
    d43c:	4640      	mov	r0, r8
    d43e:	f7ff fcfd 	bl	ce3c <_malloc_r>
    d442:	4607      	mov	r7, r0
    d444:	b1e0      	cbz	r0, d480 <_realloc_r+0xcc>
    d446:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d44a:	f023 0301 	bic.w	r3, r3, #1
    d44e:	444b      	add	r3, r9
    d450:	f1a0 0208 	sub.w	r2, r0, #8
    d454:	4293      	cmp	r3, r2
    d456:	f000 80d2 	beq.w	d5fe <_realloc_r+0x24a>
    d45a:	1f32      	subs	r2, r6, #4
    d45c:	2a24      	cmp	r2, #36	; 0x24
    d45e:	f200 80f5 	bhi.w	d64c <_realloc_r+0x298>
    d462:	2a13      	cmp	r2, #19
    d464:	f200 80ac 	bhi.w	d5c0 <_realloc_r+0x20c>
    d468:	4603      	mov	r3, r0
    d46a:	4622      	mov	r2, r4
    d46c:	6811      	ldr	r1, [r2, #0]
    d46e:	6019      	str	r1, [r3, #0]
    d470:	6851      	ldr	r1, [r2, #4]
    d472:	6059      	str	r1, [r3, #4]
    d474:	6892      	ldr	r2, [r2, #8]
    d476:	609a      	str	r2, [r3, #8]
    d478:	4621      	mov	r1, r4
    d47a:	4640      	mov	r0, r8
    d47c:	f000 fd4e 	bl	df1c <_free_r>
    d480:	4640      	mov	r0, r8
    d482:	f7ff ff91 	bl	d3a8 <__malloc_unlock>
    d486:	4638      	mov	r0, r7
    d488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d48c:	f025 0507 	bic.w	r5, r5, #7
    d490:	2d00      	cmp	r5, #0
    d492:	462a      	mov	r2, r5
    d494:	daa0      	bge.n	d3d8 <_realloc_r+0x24>
    d496:	230c      	movs	r3, #12
    d498:	f8c8 3000 	str.w	r3, [r8]
    d49c:	2700      	movs	r7, #0
    d49e:	4638      	mov	r0, r7
    d4a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4a4:	461e      	mov	r6, r3
    d4a6:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    d4aa:	60d3      	str	r3, [r2, #12]
    d4ac:	609a      	str	r2, [r3, #8]
    d4ae:	1b73      	subs	r3, r6, r5
    d4b0:	2b0f      	cmp	r3, #15
    d4b2:	d822      	bhi.n	d4fa <_realloc_r+0x146>
    d4b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d4b8:	f003 0301 	and.w	r3, r3, #1
    d4bc:	4333      	orrs	r3, r6
    d4be:	444e      	add	r6, r9
    d4c0:	f8c9 3004 	str.w	r3, [r9, #4]
    d4c4:	6873      	ldr	r3, [r6, #4]
    d4c6:	f043 0301 	orr.w	r3, r3, #1
    d4ca:	6073      	str	r3, [r6, #4]
    d4cc:	4640      	mov	r0, r8
    d4ce:	4627      	mov	r7, r4
    d4d0:	f7ff ff6a 	bl	d3a8 <__malloc_unlock>
    d4d4:	4638      	mov	r0, r7
    d4d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d4da:	07c9      	lsls	r1, r1, #31
    d4dc:	d4ad      	bmi.n	d43a <_realloc_r+0x86>
    d4de:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d4e2:	eba9 0a03 	sub.w	sl, r9, r3
    d4e6:	f8da 1004 	ldr.w	r1, [sl, #4]
    d4ea:	f021 0103 	bic.w	r1, r1, #3
    d4ee:	e7a0      	b.n	d432 <_realloc_r+0x7e>
    d4f0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d4f4:	4611      	mov	r1, r2
    d4f6:	f7ff bca1 	b.w	ce3c <_malloc_r>
    d4fa:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d4fe:	eb09 0105 	add.w	r1, r9, r5
    d502:	f002 0201 	and.w	r2, r2, #1
    d506:	444e      	add	r6, r9
    d508:	f043 0301 	orr.w	r3, r3, #1
    d50c:	432a      	orrs	r2, r5
    d50e:	f8c9 2004 	str.w	r2, [r9, #4]
    d512:	604b      	str	r3, [r1, #4]
    d514:	6873      	ldr	r3, [r6, #4]
    d516:	f043 0301 	orr.w	r3, r3, #1
    d51a:	3108      	adds	r1, #8
    d51c:	6073      	str	r3, [r6, #4]
    d51e:	4640      	mov	r0, r8
    d520:	f000 fcfc 	bl	df1c <_free_r>
    d524:	e7d2      	b.n	d4cc <_realloc_r+0x118>
    d526:	f8dc 0004 	ldr.w	r0, [ip, #4]
    d52a:	f020 0b03 	bic.w	fp, r0, #3
    d52e:	eb06 0c0b 	add.w	ip, r6, fp
    d532:	f105 0010 	add.w	r0, r5, #16
    d536:	4584      	cmp	ip, r0
    d538:	da4d      	bge.n	d5d6 <_realloc_r+0x222>
    d53a:	07c9      	lsls	r1, r1, #31
    d53c:	f53f af7d 	bmi.w	d43a <_realloc_r+0x86>
    d540:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d544:	eba9 0a01 	sub.w	sl, r9, r1
    d548:	f8da 1004 	ldr.w	r1, [sl, #4]
    d54c:	f021 0103 	bic.w	r1, r1, #3
    d550:	448b      	add	fp, r1
    d552:	44b3      	add	fp, r6
    d554:	4558      	cmp	r0, fp
    d556:	f73f af6c 	bgt.w	d432 <_realloc_r+0x7e>
    d55a:	4657      	mov	r7, sl
    d55c:	f8da 100c 	ldr.w	r1, [sl, #12]
    d560:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d564:	1f32      	subs	r2, r6, #4
    d566:	2a24      	cmp	r2, #36	; 0x24
    d568:	60c1      	str	r1, [r0, #12]
    d56a:	6088      	str	r0, [r1, #8]
    d56c:	f200 80db 	bhi.w	d726 <_realloc_r+0x372>
    d570:	2a13      	cmp	r2, #19
    d572:	f240 80d6 	bls.w	d722 <_realloc_r+0x36e>
    d576:	6821      	ldr	r1, [r4, #0]
    d578:	f8ca 1008 	str.w	r1, [sl, #8]
    d57c:	6861      	ldr	r1, [r4, #4]
    d57e:	f8ca 100c 	str.w	r1, [sl, #12]
    d582:	2a1b      	cmp	r2, #27
    d584:	f200 80df 	bhi.w	d746 <_realloc_r+0x392>
    d588:	3408      	adds	r4, #8
    d58a:	f10a 0210 	add.w	r2, sl, #16
    d58e:	6821      	ldr	r1, [r4, #0]
    d590:	6011      	str	r1, [r2, #0]
    d592:	6861      	ldr	r1, [r4, #4]
    d594:	6051      	str	r1, [r2, #4]
    d596:	68a1      	ldr	r1, [r4, #8]
    d598:	6091      	str	r1, [r2, #8]
    d59a:	eb0a 0105 	add.w	r1, sl, r5
    d59e:	ebab 0205 	sub.w	r2, fp, r5
    d5a2:	f042 0201 	orr.w	r2, r2, #1
    d5a6:	6099      	str	r1, [r3, #8]
    d5a8:	604a      	str	r2, [r1, #4]
    d5aa:	f8da 3004 	ldr.w	r3, [sl, #4]
    d5ae:	f003 0301 	and.w	r3, r3, #1
    d5b2:	432b      	orrs	r3, r5
    d5b4:	4640      	mov	r0, r8
    d5b6:	f8ca 3004 	str.w	r3, [sl, #4]
    d5ba:	f7ff fef5 	bl	d3a8 <__malloc_unlock>
    d5be:	e76e      	b.n	d49e <_realloc_r+0xea>
    d5c0:	6823      	ldr	r3, [r4, #0]
    d5c2:	6003      	str	r3, [r0, #0]
    d5c4:	6863      	ldr	r3, [r4, #4]
    d5c6:	6043      	str	r3, [r0, #4]
    d5c8:	2a1b      	cmp	r2, #27
    d5ca:	d868      	bhi.n	d69e <_realloc_r+0x2ea>
    d5cc:	f104 0208 	add.w	r2, r4, #8
    d5d0:	f100 0308 	add.w	r3, r0, #8
    d5d4:	e74a      	b.n	d46c <_realloc_r+0xb8>
    d5d6:	eb09 0205 	add.w	r2, r9, r5
    d5da:	609a      	str	r2, [r3, #8]
    d5dc:	ebac 0305 	sub.w	r3, ip, r5
    d5e0:	f043 0301 	orr.w	r3, r3, #1
    d5e4:	6053      	str	r3, [r2, #4]
    d5e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d5ea:	f003 0301 	and.w	r3, r3, #1
    d5ee:	432b      	orrs	r3, r5
    d5f0:	4640      	mov	r0, r8
    d5f2:	f844 3c04 	str.w	r3, [r4, #-4]
    d5f6:	f7ff fed7 	bl	d3a8 <__malloc_unlock>
    d5fa:	4627      	mov	r7, r4
    d5fc:	e74f      	b.n	d49e <_realloc_r+0xea>
    d5fe:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d602:	f023 0303 	bic.w	r3, r3, #3
    d606:	441e      	add	r6, r3
    d608:	e751      	b.n	d4ae <_realloc_r+0xfa>
    d60a:	4657      	mov	r7, sl
    d60c:	f8da 100c 	ldr.w	r1, [sl, #12]
    d610:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d614:	1f32      	subs	r2, r6, #4
    d616:	2a24      	cmp	r2, #36	; 0x24
    d618:	60c1      	str	r1, [r0, #12]
    d61a:	6088      	str	r0, [r1, #8]
    d61c:	d84c      	bhi.n	d6b8 <_realloc_r+0x304>
    d61e:	2a13      	cmp	r2, #19
    d620:	d948      	bls.n	d6b4 <_realloc_r+0x300>
    d622:	6821      	ldr	r1, [r4, #0]
    d624:	f8ca 1008 	str.w	r1, [sl, #8]
    d628:	6861      	ldr	r1, [r4, #4]
    d62a:	f8ca 100c 	str.w	r1, [sl, #12]
    d62e:	2a1b      	cmp	r2, #27
    d630:	d856      	bhi.n	d6e0 <_realloc_r+0x32c>
    d632:	3408      	adds	r4, #8
    d634:	f10a 0210 	add.w	r2, sl, #16
    d638:	461e      	mov	r6, r3
    d63a:	6823      	ldr	r3, [r4, #0]
    d63c:	6013      	str	r3, [r2, #0]
    d63e:	6863      	ldr	r3, [r4, #4]
    d640:	6053      	str	r3, [r2, #4]
    d642:	68a3      	ldr	r3, [r4, #8]
    d644:	6093      	str	r3, [r2, #8]
    d646:	46d1      	mov	r9, sl
    d648:	463c      	mov	r4, r7
    d64a:	e730      	b.n	d4ae <_realloc_r+0xfa>
    d64c:	4621      	mov	r1, r4
    d64e:	f000 f9e7 	bl	da20 <memmove>
    d652:	e711      	b.n	d478 <_realloc_r+0xc4>
    d654:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    d658:	4657      	mov	r7, sl
    d65a:	60cb      	str	r3, [r1, #12]
    d65c:	6099      	str	r1, [r3, #8]
    d65e:	f857 1f08 	ldr.w	r1, [r7, #8]!
    d662:	f8da 300c 	ldr.w	r3, [sl, #12]
    d666:	60cb      	str	r3, [r1, #12]
    d668:	1f32      	subs	r2, r6, #4
    d66a:	2a24      	cmp	r2, #36	; 0x24
    d66c:	6099      	str	r1, [r3, #8]
    d66e:	d82d      	bhi.n	d6cc <_realloc_r+0x318>
    d670:	2a13      	cmp	r2, #19
    d672:	d929      	bls.n	d6c8 <_realloc_r+0x314>
    d674:	6823      	ldr	r3, [r4, #0]
    d676:	f8ca 3008 	str.w	r3, [sl, #8]
    d67a:	6863      	ldr	r3, [r4, #4]
    d67c:	f8ca 300c 	str.w	r3, [sl, #12]
    d680:	2a1b      	cmp	r2, #27
    d682:	d842      	bhi.n	d70a <_realloc_r+0x356>
    d684:	3408      	adds	r4, #8
    d686:	f10a 0310 	add.w	r3, sl, #16
    d68a:	6822      	ldr	r2, [r4, #0]
    d68c:	601a      	str	r2, [r3, #0]
    d68e:	6862      	ldr	r2, [r4, #4]
    d690:	605a      	str	r2, [r3, #4]
    d692:	68a2      	ldr	r2, [r4, #8]
    d694:	609a      	str	r2, [r3, #8]
    d696:	4666      	mov	r6, ip
    d698:	46d1      	mov	r9, sl
    d69a:	463c      	mov	r4, r7
    d69c:	e707      	b.n	d4ae <_realloc_r+0xfa>
    d69e:	68a3      	ldr	r3, [r4, #8]
    d6a0:	6083      	str	r3, [r0, #8]
    d6a2:	68e3      	ldr	r3, [r4, #12]
    d6a4:	60c3      	str	r3, [r0, #12]
    d6a6:	2a24      	cmp	r2, #36	; 0x24
    d6a8:	d026      	beq.n	d6f8 <_realloc_r+0x344>
    d6aa:	f104 0210 	add.w	r2, r4, #16
    d6ae:	f100 0310 	add.w	r3, r0, #16
    d6b2:	e6db      	b.n	d46c <_realloc_r+0xb8>
    d6b4:	463a      	mov	r2, r7
    d6b6:	e7bf      	b.n	d638 <_realloc_r+0x284>
    d6b8:	4621      	mov	r1, r4
    d6ba:	4638      	mov	r0, r7
    d6bc:	461e      	mov	r6, r3
    d6be:	46d1      	mov	r9, sl
    d6c0:	f000 f9ae 	bl	da20 <memmove>
    d6c4:	463c      	mov	r4, r7
    d6c6:	e6f2      	b.n	d4ae <_realloc_r+0xfa>
    d6c8:	463b      	mov	r3, r7
    d6ca:	e7de      	b.n	d68a <_realloc_r+0x2d6>
    d6cc:	4621      	mov	r1, r4
    d6ce:	4638      	mov	r0, r7
    d6d0:	4666      	mov	r6, ip
    d6d2:	46d1      	mov	r9, sl
    d6d4:	f000 f9a4 	bl	da20 <memmove>
    d6d8:	463c      	mov	r4, r7
    d6da:	e6e8      	b.n	d4ae <_realloc_r+0xfa>
    d6dc:	1fff8ac0 	.word	0x1fff8ac0
    d6e0:	68a1      	ldr	r1, [r4, #8]
    d6e2:	f8ca 1010 	str.w	r1, [sl, #16]
    d6e6:	68e1      	ldr	r1, [r4, #12]
    d6e8:	f8ca 1014 	str.w	r1, [sl, #20]
    d6ec:	2a24      	cmp	r2, #36	; 0x24
    d6ee:	d020      	beq.n	d732 <_realloc_r+0x37e>
    d6f0:	3410      	adds	r4, #16
    d6f2:	f10a 0218 	add.w	r2, sl, #24
    d6f6:	e79f      	b.n	d638 <_realloc_r+0x284>
    d6f8:	6923      	ldr	r3, [r4, #16]
    d6fa:	6103      	str	r3, [r0, #16]
    d6fc:	6961      	ldr	r1, [r4, #20]
    d6fe:	6141      	str	r1, [r0, #20]
    d700:	f104 0218 	add.w	r2, r4, #24
    d704:	f100 0318 	add.w	r3, r0, #24
    d708:	e6b0      	b.n	d46c <_realloc_r+0xb8>
    d70a:	68a3      	ldr	r3, [r4, #8]
    d70c:	f8ca 3010 	str.w	r3, [sl, #16]
    d710:	68e3      	ldr	r3, [r4, #12]
    d712:	f8ca 3014 	str.w	r3, [sl, #20]
    d716:	2a24      	cmp	r2, #36	; 0x24
    d718:	d021      	beq.n	d75e <_realloc_r+0x3aa>
    d71a:	3410      	adds	r4, #16
    d71c:	f10a 0318 	add.w	r3, sl, #24
    d720:	e7b3      	b.n	d68a <_realloc_r+0x2d6>
    d722:	463a      	mov	r2, r7
    d724:	e733      	b.n	d58e <_realloc_r+0x1da>
    d726:	4621      	mov	r1, r4
    d728:	4638      	mov	r0, r7
    d72a:	f000 f979 	bl	da20 <memmove>
    d72e:	4b16      	ldr	r3, [pc, #88]	; (d788 <_realloc_r+0x3d4>)
    d730:	e733      	b.n	d59a <_realloc_r+0x1e6>
    d732:	6922      	ldr	r2, [r4, #16]
    d734:	f8ca 2018 	str.w	r2, [sl, #24]
    d738:	6962      	ldr	r2, [r4, #20]
    d73a:	f8ca 201c 	str.w	r2, [sl, #28]
    d73e:	3418      	adds	r4, #24
    d740:	f10a 0220 	add.w	r2, sl, #32
    d744:	e778      	b.n	d638 <_realloc_r+0x284>
    d746:	68a1      	ldr	r1, [r4, #8]
    d748:	f8ca 1010 	str.w	r1, [sl, #16]
    d74c:	68e1      	ldr	r1, [r4, #12]
    d74e:	f8ca 1014 	str.w	r1, [sl, #20]
    d752:	2a24      	cmp	r2, #36	; 0x24
    d754:	d00d      	beq.n	d772 <_realloc_r+0x3be>
    d756:	3410      	adds	r4, #16
    d758:	f10a 0218 	add.w	r2, sl, #24
    d75c:	e717      	b.n	d58e <_realloc_r+0x1da>
    d75e:	6923      	ldr	r3, [r4, #16]
    d760:	f8ca 3018 	str.w	r3, [sl, #24]
    d764:	6963      	ldr	r3, [r4, #20]
    d766:	f8ca 301c 	str.w	r3, [sl, #28]
    d76a:	3418      	adds	r4, #24
    d76c:	f10a 0320 	add.w	r3, sl, #32
    d770:	e78b      	b.n	d68a <_realloc_r+0x2d6>
    d772:	6922      	ldr	r2, [r4, #16]
    d774:	f8ca 2018 	str.w	r2, [sl, #24]
    d778:	6962      	ldr	r2, [r4, #20]
    d77a:	f8ca 201c 	str.w	r2, [sl, #28]
    d77e:	3418      	adds	r4, #24
    d780:	f10a 0220 	add.w	r2, sl, #32
    d784:	e703      	b.n	d58e <_realloc_r+0x1da>
    d786:	bf00      	nop
    d788:	1fff8ac0 	.word	0x1fff8ac0

0000d78c <stdio_exit_handler>:
    d78c:	4a02      	ldr	r2, [pc, #8]	; (d798 <stdio_exit_handler+0xc>)
    d78e:	4903      	ldr	r1, [pc, #12]	; (d79c <stdio_exit_handler+0x10>)
    d790:	4803      	ldr	r0, [pc, #12]	; (d7a0 <stdio_exit_handler+0x14>)
    d792:	f000 b8bb 	b.w	d90c <_fwalk_sglue>
    d796:	bf00      	nop
    d798:	1fff8ed0 	.word	0x1fff8ed0
    d79c:	00010471 	.word	0x00010471
    d7a0:	1fff9048 	.word	0x1fff9048

0000d7a4 <cleanup_stdio>:
    d7a4:	4b0c      	ldr	r3, [pc, #48]	; (d7d8 <cleanup_stdio+0x34>)
    d7a6:	6841      	ldr	r1, [r0, #4]
    d7a8:	4299      	cmp	r1, r3
    d7aa:	b510      	push	{r4, lr}
    d7ac:	4604      	mov	r4, r0
    d7ae:	d001      	beq.n	d7b4 <cleanup_stdio+0x10>
    d7b0:	f002 fe5e 	bl	10470 <_fclose_r>
    d7b4:	68a1      	ldr	r1, [r4, #8]
    d7b6:	4b09      	ldr	r3, [pc, #36]	; (d7dc <cleanup_stdio+0x38>)
    d7b8:	4299      	cmp	r1, r3
    d7ba:	d002      	beq.n	d7c2 <cleanup_stdio+0x1e>
    d7bc:	4620      	mov	r0, r4
    d7be:	f002 fe57 	bl	10470 <_fclose_r>
    d7c2:	68e1      	ldr	r1, [r4, #12]
    d7c4:	4b06      	ldr	r3, [pc, #24]	; (d7e0 <cleanup_stdio+0x3c>)
    d7c6:	4299      	cmp	r1, r3
    d7c8:	d004      	beq.n	d7d4 <cleanup_stdio+0x30>
    d7ca:	4620      	mov	r0, r4
    d7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d7d0:	f002 be4e 	b.w	10470 <_fclose_r>
    d7d4:	bd10      	pop	{r4, pc}
    d7d6:	bf00      	nop
    d7d8:	1fffd350 	.word	0x1fffd350
    d7dc:	1fffd3b8 	.word	0x1fffd3b8
    d7e0:	1fffd420 	.word	0x1fffd420

0000d7e4 <global_stdio_init.part.0>:
    d7e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d7e8:	4c2a      	ldr	r4, [pc, #168]	; (d894 <global_stdio_init.part.0+0xb0>)
    d7ea:	4b2b      	ldr	r3, [pc, #172]	; (d898 <global_stdio_init.part.0+0xb4>)
    d7ec:	482b      	ldr	r0, [pc, #172]	; (d89c <global_stdio_init.part.0+0xb8>)
    d7ee:	f8df 90b0 	ldr.w	r9, [pc, #176]	; d8a0 <global_stdio_init.part.0+0xbc>
    d7f2:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d8a4 <global_stdio_init.part.0+0xc0>
    d7f6:	4f2c      	ldr	r7, [pc, #176]	; (d8a8 <global_stdio_init.part.0+0xc4>)
    d7f8:	6018      	str	r0, [r3, #0]
    d7fa:	2500      	movs	r5, #0
    d7fc:	2304      	movs	r3, #4
    d7fe:	2208      	movs	r2, #8
    d800:	4629      	mov	r1, r5
    d802:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    d806:	4e29      	ldr	r6, [pc, #164]	; (d8ac <global_stdio_init.part.0+0xc8>)
    d808:	6665      	str	r5, [r4, #100]	; 0x64
    d80a:	e9c4 5302 	strd	r5, r3, [r4, #8]
    d80e:	e9c4 5500 	strd	r5, r5, [r4]
    d812:	e9c4 5504 	strd	r5, r5, [r4, #16]
    d816:	61a5      	str	r5, [r4, #24]
    d818:	f000 f97e 	bl	db18 <memset>
    d81c:	4b24      	ldr	r3, [pc, #144]	; (d8b0 <global_stdio_init.part.0+0xcc>)
    d81e:	6763      	str	r3, [r4, #116]	; 0x74
    d820:	2208      	movs	r2, #8
    d822:	4629      	mov	r1, r5
    d824:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    d828:	e9c4 4907 	strd	r4, r9, [r4, #28]
    d82c:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    d830:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    d834:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    d838:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    d83c:	6725      	str	r5, [r4, #112]	; 0x70
    d83e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    d842:	62e6      	str	r6, [r4, #44]	; 0x2c
    d844:	f000 f968 	bl	db18 <memset>
    d848:	4b1a      	ldr	r3, [pc, #104]	; (d8b4 <global_stdio_init.part.0+0xd0>)
    d84a:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    d84e:	4629      	mov	r1, r5
    d850:	f104 0368 	add.w	r3, r4, #104	; 0x68
    d854:	2208      	movs	r2, #8
    d856:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    d85a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    d85e:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    d862:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    d866:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    d86a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    d86e:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    d872:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    d876:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    d87a:	f000 f94d 	bl	db18 <memset>
    d87e:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    d882:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    d886:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    d88a:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    d88e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d892:	bf00      	nop
    d894:	1fffd350 	.word	0x1fffd350
    d898:	1fffd488 	.word	0x1fffd488
    d89c:	0000d78d 	.word	0x0000d78d
    d8a0:	0000d995 	.word	0x0000d995
    d8a4:	0000d9b9 	.word	0x0000d9b9
    d8a8:	0000d9f9 	.word	0x0000d9f9
    d8ac:	0000da19 	.word	0x0000da19
    d8b0:	00010009 	.word	0x00010009
    d8b4:	00020012 	.word	0x00020012

0000d8b8 <__sinit>:
    d8b8:	b510      	push	{r4, lr}
    d8ba:	4604      	mov	r4, r0
    d8bc:	480a      	ldr	r0, [pc, #40]	; (d8e8 <__sinit+0x30>)
    d8be:	f000 fa49 	bl	dd54 <__retarget_lock_acquire_recursive>
    d8c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d8c4:	b923      	cbnz	r3, d8d0 <__sinit+0x18>
    d8c6:	4b09      	ldr	r3, [pc, #36]	; (d8ec <__sinit+0x34>)
    d8c8:	4a09      	ldr	r2, [pc, #36]	; (d8f0 <__sinit+0x38>)
    d8ca:	681b      	ldr	r3, [r3, #0]
    d8cc:	6362      	str	r2, [r4, #52]	; 0x34
    d8ce:	b123      	cbz	r3, d8da <__sinit+0x22>
    d8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8d4:	4804      	ldr	r0, [pc, #16]	; (d8e8 <__sinit+0x30>)
    d8d6:	f000 ba3f 	b.w	dd58 <__retarget_lock_release_recursive>
    d8da:	f7ff ff83 	bl	d7e4 <global_stdio_init.part.0>
    d8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d8e2:	4801      	ldr	r0, [pc, #4]	; (d8e8 <__sinit+0x30>)
    d8e4:	f000 ba38 	b.w	dd58 <__retarget_lock_release_recursive>
    d8e8:	1fffd498 	.word	0x1fffd498
    d8ec:	1fffd488 	.word	0x1fffd488
    d8f0:	0000d7a5 	.word	0x0000d7a5

0000d8f4 <__sfp_lock_acquire>:
    d8f4:	4801      	ldr	r0, [pc, #4]	; (d8fc <__sfp_lock_acquire+0x8>)
    d8f6:	f000 ba2d 	b.w	dd54 <__retarget_lock_acquire_recursive>
    d8fa:	bf00      	nop
    d8fc:	1fffd498 	.word	0x1fffd498

0000d900 <__sfp_lock_release>:
    d900:	4801      	ldr	r0, [pc, #4]	; (d908 <__sfp_lock_release+0x8>)
    d902:	f000 ba29 	b.w	dd58 <__retarget_lock_release_recursive>
    d906:	bf00      	nop
    d908:	1fffd498 	.word	0x1fffd498

0000d90c <_fwalk_sglue>:
    d90c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d910:	4680      	mov	r8, r0
    d912:	460f      	mov	r7, r1
    d914:	4616      	mov	r6, r2
    d916:	f04f 0900 	mov.w	r9, #0
    d91a:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    d91e:	3d01      	subs	r5, #1
    d920:	d411      	bmi.n	d946 <_fwalk_sglue+0x3a>
    d922:	89a3      	ldrh	r3, [r4, #12]
    d924:	2b01      	cmp	r3, #1
    d926:	f105 35ff 	add.w	r5, r5, #4294967295
    d92a:	d908      	bls.n	d93e <_fwalk_sglue+0x32>
    d92c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    d930:	3301      	adds	r3, #1
    d932:	4621      	mov	r1, r4
    d934:	d003      	beq.n	d93e <_fwalk_sglue+0x32>
    d936:	4640      	mov	r0, r8
    d938:	47b8      	blx	r7
    d93a:	ea49 0900 	orr.w	r9, r9, r0
    d93e:	1c6b      	adds	r3, r5, #1
    d940:	f104 0468 	add.w	r4, r4, #104	; 0x68
    d944:	d1ed      	bne.n	d922 <_fwalk_sglue+0x16>
    d946:	6836      	ldr	r6, [r6, #0]
    d948:	2e00      	cmp	r6, #0
    d94a:	d1e6      	bne.n	d91a <_fwalk_sglue+0xe>
    d94c:	4648      	mov	r0, r9
    d94e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d952:	bf00      	nop

0000d954 <sprintf>:
    d954:	b40e      	push	{r1, r2, r3}
    d956:	b510      	push	{r4, lr}
    d958:	b09d      	sub	sp, #116	; 0x74
    d95a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    d95e:	ab1f      	add	r3, sp, #124	; 0x7c
    d960:	e9cd 0106 	strd	r0, r1, [sp, #24]
    d964:	9104      	str	r1, [sp, #16]
    d966:	4909      	ldr	r1, [pc, #36]	; (d98c <sprintf+0x38>)
    d968:	f853 2b04 	ldr.w	r2, [r3], #4
    d96c:	9002      	str	r0, [sp, #8]
    d96e:	4c08      	ldr	r4, [pc, #32]	; (d990 <sprintf+0x3c>)
    d970:	6808      	ldr	r0, [r1, #0]
    d972:	9301      	str	r3, [sp, #4]
    d974:	a902      	add	r1, sp, #8
    d976:	9405      	str	r4, [sp, #20]
    d978:	f000 ffa8 	bl	e8cc <_svfprintf_r>
    d97c:	9b02      	ldr	r3, [sp, #8]
    d97e:	2200      	movs	r2, #0
    d980:	701a      	strb	r2, [r3, #0]
    d982:	b01d      	add	sp, #116	; 0x74
    d984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d988:	b003      	add	sp, #12
    d98a:	4770      	bx	lr
    d98c:	1fff9168 	.word	0x1fff9168
    d990:	ffff0208 	.word	0xffff0208

0000d994 <__sread>:
    d994:	b510      	push	{r4, lr}
    d996:	460c      	mov	r4, r1
    d998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    d99c:	f000 f96e 	bl	dc7c <_read_r>
    d9a0:	2800      	cmp	r0, #0
    d9a2:	db03      	blt.n	d9ac <__sread+0x18>
    d9a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d9a6:	4403      	add	r3, r0
    d9a8:	6523      	str	r3, [r4, #80]	; 0x50
    d9aa:	bd10      	pop	{r4, pc}
    d9ac:	89a3      	ldrh	r3, [r4, #12]
    d9ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    d9b2:	81a3      	strh	r3, [r4, #12]
    d9b4:	bd10      	pop	{r4, pc}
    d9b6:	bf00      	nop

0000d9b8 <__swrite>:
    d9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d9bc:	460c      	mov	r4, r1
    d9be:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    d9c2:	461f      	mov	r7, r3
    d9c4:	05cb      	lsls	r3, r1, #23
    d9c6:	4605      	mov	r5, r0
    d9c8:	4616      	mov	r6, r2
    d9ca:	d40b      	bmi.n	d9e4 <__swrite+0x2c>
    d9cc:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    d9d0:	81a1      	strh	r1, [r4, #12]
    d9d2:	463b      	mov	r3, r7
    d9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d9d8:	4632      	mov	r2, r6
    d9da:	4628      	mov	r0, r5
    d9dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    d9e0:	f000 b974 	b.w	dccc <_write_r>
    d9e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    d9e8:	2302      	movs	r3, #2
    d9ea:	2200      	movs	r2, #0
    d9ec:	f000 f930 	bl	dc50 <_lseek_r>
    d9f0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    d9f4:	e7ea      	b.n	d9cc <__swrite+0x14>
    d9f6:	bf00      	nop

0000d9f8 <__sseek>:
    d9f8:	b510      	push	{r4, lr}
    d9fa:	460c      	mov	r4, r1
    d9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    da00:	f000 f926 	bl	dc50 <_lseek_r>
    da04:	89a3      	ldrh	r3, [r4, #12]
    da06:	1c42      	adds	r2, r0, #1
    da08:	bf0e      	itee	eq
    da0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    da0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    da12:	6520      	strne	r0, [r4, #80]	; 0x50
    da14:	81a3      	strh	r3, [r4, #12]
    da16:	bd10      	pop	{r4, pc}

0000da18 <__sclose>:
    da18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    da1c:	f000 b906 	b.w	dc2c <_close_r>

0000da20 <memmove>:
    da20:	4288      	cmp	r0, r1
    da22:	d90d      	bls.n	da40 <memmove+0x20>
    da24:	188b      	adds	r3, r1, r2
    da26:	4283      	cmp	r3, r0
    da28:	d90a      	bls.n	da40 <memmove+0x20>
    da2a:	eb00 0c02 	add.w	ip, r0, r2
    da2e:	b1ba      	cbz	r2, da60 <memmove+0x40>
    da30:	4662      	mov	r2, ip
    da32:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    da36:	f802 cd01 	strb.w	ip, [r2, #-1]!
    da3a:	4299      	cmp	r1, r3
    da3c:	d1f9      	bne.n	da32 <memmove+0x12>
    da3e:	4770      	bx	lr
    da40:	2a0f      	cmp	r2, #15
    da42:	d80e      	bhi.n	da62 <memmove+0x42>
    da44:	4603      	mov	r3, r0
    da46:	f102 3cff 	add.w	ip, r2, #4294967295
    da4a:	b14a      	cbz	r2, da60 <memmove+0x40>
    da4c:	f10c 0c01 	add.w	ip, ip, #1
    da50:	3b01      	subs	r3, #1
    da52:	448c      	add	ip, r1
    da54:	f811 2b01 	ldrb.w	r2, [r1], #1
    da58:	f803 2f01 	strb.w	r2, [r3, #1]!
    da5c:	4561      	cmp	r1, ip
    da5e:	d1f9      	bne.n	da54 <memmove+0x34>
    da60:	4770      	bx	lr
    da62:	ea40 0301 	orr.w	r3, r0, r1
    da66:	079b      	lsls	r3, r3, #30
    da68:	d150      	bne.n	db0c <memmove+0xec>
    da6a:	f1a2 0310 	sub.w	r3, r2, #16
    da6e:	b570      	push	{r4, r5, r6, lr}
    da70:	f101 0c20 	add.w	ip, r1, #32
    da74:	f023 050f 	bic.w	r5, r3, #15
    da78:	f101 0e10 	add.w	lr, r1, #16
    da7c:	f100 0410 	add.w	r4, r0, #16
    da80:	44ac      	add	ip, r5
    da82:	091b      	lsrs	r3, r3, #4
    da84:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    da88:	f844 5c10 	str.w	r5, [r4, #-16]
    da8c:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    da90:	f844 5c0c 	str.w	r5, [r4, #-12]
    da94:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    da98:	f844 5c08 	str.w	r5, [r4, #-8]
    da9c:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    daa0:	f844 5c04 	str.w	r5, [r4, #-4]
    daa4:	f10e 0e10 	add.w	lr, lr, #16
    daa8:	45e6      	cmp	lr, ip
    daaa:	f104 0410 	add.w	r4, r4, #16
    daae:	d1e9      	bne.n	da84 <memmove+0x64>
    dab0:	3301      	adds	r3, #1
    dab2:	f012 0f0c 	tst.w	r2, #12
    dab6:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    daba:	f002 040f 	and.w	r4, r2, #15
    dabe:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    dac2:	d027      	beq.n	db14 <memmove+0xf4>
    dac4:	3c04      	subs	r4, #4
    dac6:	f024 0603 	bic.w	r6, r4, #3
    daca:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    dace:	441e      	add	r6, r3
    dad0:	1f1c      	subs	r4, r3, #4
    dad2:	468e      	mov	lr, r1
    dad4:	f85e 5b04 	ldr.w	r5, [lr], #4
    dad8:	f844 5f04 	str.w	r5, [r4, #4]!
    dadc:	42b4      	cmp	r4, r6
    dade:	d1f9      	bne.n	dad4 <memmove+0xb4>
    dae0:	f10c 0401 	add.w	r4, ip, #1
    dae4:	f002 0203 	and.w	r2, r2, #3
    dae8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    daec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    daf0:	f102 3cff 	add.w	ip, r2, #4294967295
    daf4:	b14a      	cbz	r2, db0a <memmove+0xea>
    daf6:	f10c 0c01 	add.w	ip, ip, #1
    dafa:	3b01      	subs	r3, #1
    dafc:	448c      	add	ip, r1
    dafe:	f811 2b01 	ldrb.w	r2, [r1], #1
    db02:	f803 2f01 	strb.w	r2, [r3, #1]!
    db06:	4561      	cmp	r1, ip
    db08:	d1f9      	bne.n	dafe <memmove+0xde>
    db0a:	bd70      	pop	{r4, r5, r6, pc}
    db0c:	f102 3cff 	add.w	ip, r2, #4294967295
    db10:	4603      	mov	r3, r0
    db12:	e79b      	b.n	da4c <memmove+0x2c>
    db14:	4622      	mov	r2, r4
    db16:	e7eb      	b.n	daf0 <memmove+0xd0>

0000db18 <memset>:
    db18:	0783      	lsls	r3, r0, #30
    db1a:	b530      	push	{r4, r5, lr}
    db1c:	d048      	beq.n	dbb0 <memset+0x98>
    db1e:	1e54      	subs	r4, r2, #1
    db20:	2a00      	cmp	r2, #0
    db22:	d03f      	beq.n	dba4 <memset+0x8c>
    db24:	b2ca      	uxtb	r2, r1
    db26:	4603      	mov	r3, r0
    db28:	e001      	b.n	db2e <memset+0x16>
    db2a:	3c01      	subs	r4, #1
    db2c:	d33a      	bcc.n	dba4 <memset+0x8c>
    db2e:	f803 2b01 	strb.w	r2, [r3], #1
    db32:	079d      	lsls	r5, r3, #30
    db34:	d1f9      	bne.n	db2a <memset+0x12>
    db36:	2c03      	cmp	r4, #3
    db38:	d92d      	bls.n	db96 <memset+0x7e>
    db3a:	b2cd      	uxtb	r5, r1
    db3c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    db40:	2c0f      	cmp	r4, #15
    db42:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    db46:	d936      	bls.n	dbb6 <memset+0x9e>
    db48:	f1a4 0210 	sub.w	r2, r4, #16
    db4c:	f022 0c0f 	bic.w	ip, r2, #15
    db50:	f103 0e20 	add.w	lr, r3, #32
    db54:	44e6      	add	lr, ip
    db56:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    db5a:	f103 0210 	add.w	r2, r3, #16
    db5e:	e942 5504 	strd	r5, r5, [r2, #-16]
    db62:	e942 5502 	strd	r5, r5, [r2, #-8]
    db66:	3210      	adds	r2, #16
    db68:	4572      	cmp	r2, lr
    db6a:	d1f8      	bne.n	db5e <memset+0x46>
    db6c:	f10c 0201 	add.w	r2, ip, #1
    db70:	f014 0f0c 	tst.w	r4, #12
    db74:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    db78:	f004 0c0f 	and.w	ip, r4, #15
    db7c:	d013      	beq.n	dba6 <memset+0x8e>
    db7e:	f1ac 0304 	sub.w	r3, ip, #4
    db82:	f023 0303 	bic.w	r3, r3, #3
    db86:	3304      	adds	r3, #4
    db88:	4413      	add	r3, r2
    db8a:	f842 5b04 	str.w	r5, [r2], #4
    db8e:	4293      	cmp	r3, r2
    db90:	d1fb      	bne.n	db8a <memset+0x72>
    db92:	f00c 0403 	and.w	r4, ip, #3
    db96:	b12c      	cbz	r4, dba4 <memset+0x8c>
    db98:	b2c9      	uxtb	r1, r1
    db9a:	441c      	add	r4, r3
    db9c:	f803 1b01 	strb.w	r1, [r3], #1
    dba0:	429c      	cmp	r4, r3
    dba2:	d1fb      	bne.n	db9c <memset+0x84>
    dba4:	bd30      	pop	{r4, r5, pc}
    dba6:	4664      	mov	r4, ip
    dba8:	4613      	mov	r3, r2
    dbaa:	2c00      	cmp	r4, #0
    dbac:	d1f4      	bne.n	db98 <memset+0x80>
    dbae:	e7f9      	b.n	dba4 <memset+0x8c>
    dbb0:	4603      	mov	r3, r0
    dbb2:	4614      	mov	r4, r2
    dbb4:	e7bf      	b.n	db36 <memset+0x1e>
    dbb6:	461a      	mov	r2, r3
    dbb8:	46a4      	mov	ip, r4
    dbba:	e7e0      	b.n	db7e <memset+0x66>

0000dbbc <strncpy>:
    dbbc:	ea40 0301 	orr.w	r3, r0, r1
    dbc0:	079b      	lsls	r3, r3, #30
    dbc2:	b530      	push	{r4, r5, lr}
    dbc4:	d101      	bne.n	dbca <strncpy+0xe>
    dbc6:	2a03      	cmp	r2, #3
    dbc8:	d80f      	bhi.n	dbea <strncpy+0x2e>
    dbca:	4684      	mov	ip, r0
    dbcc:	f101 3eff 	add.w	lr, r1, #4294967295
    dbd0:	e007      	b.n	dbe2 <strncpy+0x26>
    dbd2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    dbd6:	f803 1b01 	strb.w	r1, [r3], #1
    dbda:	1e54      	subs	r4, r2, #1
    dbdc:	b1c1      	cbz	r1, dc10 <strncpy+0x54>
    dbde:	469c      	mov	ip, r3
    dbe0:	4622      	mov	r2, r4
    dbe2:	4663      	mov	r3, ip
    dbe4:	2a00      	cmp	r2, #0
    dbe6:	d1f4      	bne.n	dbd2 <strncpy+0x16>
    dbe8:	bd30      	pop	{r4, r5, pc}
    dbea:	460b      	mov	r3, r1
    dbec:	4684      	mov	ip, r0
    dbee:	4619      	mov	r1, r3
    dbf0:	f853 5b04 	ldr.w	r5, [r3], #4
    dbf4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    dbf8:	ea24 0405 	bic.w	r4, r4, r5
    dbfc:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    dc00:	d1e4      	bne.n	dbcc <strncpy+0x10>
    dc02:	3a04      	subs	r2, #4
    dc04:	2a03      	cmp	r2, #3
    dc06:	f84c 5b04 	str.w	r5, [ip], #4
    dc0a:	4619      	mov	r1, r3
    dc0c:	d8ef      	bhi.n	dbee <strncpy+0x32>
    dc0e:	e7dd      	b.n	dbcc <strncpy+0x10>
    dc10:	4494      	add	ip, r2
    dc12:	2c00      	cmp	r4, #0
    dc14:	d0e8      	beq.n	dbe8 <strncpy+0x2c>
    dc16:	f803 1b01 	strb.w	r1, [r3], #1
    dc1a:	4563      	cmp	r3, ip
    dc1c:	d1fb      	bne.n	dc16 <strncpy+0x5a>
    dc1e:	bd30      	pop	{r4, r5, pc}

0000dc20 <__locale_mb_cur_max>:
    dc20:	4b01      	ldr	r3, [pc, #4]	; (dc28 <__locale_mb_cur_max+0x8>)
    dc22:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    dc26:	4770      	bx	lr
    dc28:	1fff8edc 	.word	0x1fff8edc

0000dc2c <_close_r>:
    dc2c:	b538      	push	{r3, r4, r5, lr}
    dc2e:	4d07      	ldr	r5, [pc, #28]	; (dc4c <_close_r+0x20>)
    dc30:	2200      	movs	r2, #0
    dc32:	4604      	mov	r4, r0
    dc34:	4608      	mov	r0, r1
    dc36:	602a      	str	r2, [r5, #0]
    dc38:	f7fb fec2 	bl	99c0 <_close>
    dc3c:	1c43      	adds	r3, r0, #1
    dc3e:	d000      	beq.n	dc42 <_close_r+0x16>
    dc40:	bd38      	pop	{r3, r4, r5, pc}
    dc42:	682b      	ldr	r3, [r5, #0]
    dc44:	2b00      	cmp	r3, #0
    dc46:	d0fb      	beq.n	dc40 <_close_r+0x14>
    dc48:	6023      	str	r3, [r4, #0]
    dc4a:	bd38      	pop	{r3, r4, r5, pc}
    dc4c:	1fffd48c 	.word	0x1fffd48c

0000dc50 <_lseek_r>:
    dc50:	b538      	push	{r3, r4, r5, lr}
    dc52:	460c      	mov	r4, r1
    dc54:	4d08      	ldr	r5, [pc, #32]	; (dc78 <_lseek_r+0x28>)
    dc56:	4684      	mov	ip, r0
    dc58:	4611      	mov	r1, r2
    dc5a:	4620      	mov	r0, r4
    dc5c:	461a      	mov	r2, r3
    dc5e:	2300      	movs	r3, #0
    dc60:	602b      	str	r3, [r5, #0]
    dc62:	4664      	mov	r4, ip
    dc64:	f7fb feb8 	bl	99d8 <_lseek>
    dc68:	1c43      	adds	r3, r0, #1
    dc6a:	d000      	beq.n	dc6e <_lseek_r+0x1e>
    dc6c:	bd38      	pop	{r3, r4, r5, pc}
    dc6e:	682b      	ldr	r3, [r5, #0]
    dc70:	2b00      	cmp	r3, #0
    dc72:	d0fb      	beq.n	dc6c <_lseek_r+0x1c>
    dc74:	6023      	str	r3, [r4, #0]
    dc76:	bd38      	pop	{r3, r4, r5, pc}
    dc78:	1fffd48c 	.word	0x1fffd48c

0000dc7c <_read_r>:
    dc7c:	b538      	push	{r3, r4, r5, lr}
    dc7e:	460c      	mov	r4, r1
    dc80:	4d08      	ldr	r5, [pc, #32]	; (dca4 <_read_r+0x28>)
    dc82:	4684      	mov	ip, r0
    dc84:	4611      	mov	r1, r2
    dc86:	4620      	mov	r0, r4
    dc88:	461a      	mov	r2, r3
    dc8a:	2300      	movs	r3, #0
    dc8c:	602b      	str	r3, [r5, #0]
    dc8e:	4664      	mov	r4, ip
    dc90:	f7fb fe94 	bl	99bc <_read>
    dc94:	1c43      	adds	r3, r0, #1
    dc96:	d000      	beq.n	dc9a <_read_r+0x1e>
    dc98:	bd38      	pop	{r3, r4, r5, pc}
    dc9a:	682b      	ldr	r3, [r5, #0]
    dc9c:	2b00      	cmp	r3, #0
    dc9e:	d0fb      	beq.n	dc98 <_read_r+0x1c>
    dca0:	6023      	str	r3, [r4, #0]
    dca2:	bd38      	pop	{r3, r4, r5, pc}
    dca4:	1fffd48c 	.word	0x1fffd48c

0000dca8 <_sbrk_r>:
    dca8:	b538      	push	{r3, r4, r5, lr}
    dcaa:	4d07      	ldr	r5, [pc, #28]	; (dcc8 <_sbrk_r+0x20>)
    dcac:	2200      	movs	r2, #0
    dcae:	4604      	mov	r4, r0
    dcb0:	4608      	mov	r0, r1
    dcb2:	602a      	str	r2, [r5, #0]
    dcb4:	f7fb fe6c 	bl	9990 <_sbrk>
    dcb8:	1c43      	adds	r3, r0, #1
    dcba:	d000      	beq.n	dcbe <_sbrk_r+0x16>
    dcbc:	bd38      	pop	{r3, r4, r5, pc}
    dcbe:	682b      	ldr	r3, [r5, #0]
    dcc0:	2b00      	cmp	r3, #0
    dcc2:	d0fb      	beq.n	dcbc <_sbrk_r+0x14>
    dcc4:	6023      	str	r3, [r4, #0]
    dcc6:	bd38      	pop	{r3, r4, r5, pc}
    dcc8:	1fffd48c 	.word	0x1fffd48c

0000dccc <_write_r>:
    dccc:	b538      	push	{r3, r4, r5, lr}
    dcce:	460c      	mov	r4, r1
    dcd0:	4d08      	ldr	r5, [pc, #32]	; (dcf4 <_write_r+0x28>)
    dcd2:	4684      	mov	ip, r0
    dcd4:	4611      	mov	r1, r2
    dcd6:	4620      	mov	r0, r4
    dcd8:	461a      	mov	r2, r3
    dcda:	2300      	movs	r3, #0
    dcdc:	602b      	str	r3, [r5, #0]
    dcde:	4664      	mov	r4, ip
    dce0:	f7fb fa82 	bl	91e8 <_write>
    dce4:	1c43      	adds	r3, r0, #1
    dce6:	d000      	beq.n	dcea <_write_r+0x1e>
    dce8:	bd38      	pop	{r3, r4, r5, pc}
    dcea:	682b      	ldr	r3, [r5, #0]
    dcec:	2b00      	cmp	r3, #0
    dcee:	d0fb      	beq.n	dce8 <_write_r+0x1c>
    dcf0:	6023      	str	r3, [r4, #0]
    dcf2:	bd38      	pop	{r3, r4, r5, pc}
    dcf4:	1fffd48c 	.word	0x1fffd48c

0000dcf8 <__errno>:
    dcf8:	4b01      	ldr	r3, [pc, #4]	; (dd00 <__errno+0x8>)
    dcfa:	6818      	ldr	r0, [r3, #0]
    dcfc:	4770      	bx	lr
    dcfe:	bf00      	nop
    dd00:	1fff9168 	.word	0x1fff9168

0000dd04 <__libc_init_array>:
    dd04:	b570      	push	{r4, r5, r6, lr}
    dd06:	4e0d      	ldr	r6, [pc, #52]	; (dd3c <__libc_init_array+0x38>)
    dd08:	4d0d      	ldr	r5, [pc, #52]	; (dd40 <__libc_init_array+0x3c>)
    dd0a:	1b76      	subs	r6, r6, r5
    dd0c:	10b6      	asrs	r6, r6, #2
    dd0e:	d006      	beq.n	dd1e <__libc_init_array+0x1a>
    dd10:	2400      	movs	r4, #0
    dd12:	f855 3b04 	ldr.w	r3, [r5], #4
    dd16:	3401      	adds	r4, #1
    dd18:	4798      	blx	r3
    dd1a:	42a6      	cmp	r6, r4
    dd1c:	d1f9      	bne.n	dd12 <__libc_init_array+0xe>
    dd1e:	4e09      	ldr	r6, [pc, #36]	; (dd44 <__libc_init_array+0x40>)
    dd20:	4d09      	ldr	r5, [pc, #36]	; (dd48 <__libc_init_array+0x44>)
    dd22:	1b76      	subs	r6, r6, r5
    dd24:	f007 fc70 	bl	15608 <_init>
    dd28:	10b6      	asrs	r6, r6, #2
    dd2a:	d006      	beq.n	dd3a <__libc_init_array+0x36>
    dd2c:	2400      	movs	r4, #0
    dd2e:	f855 3b04 	ldr.w	r3, [r5], #4
    dd32:	3401      	adds	r4, #1
    dd34:	4798      	blx	r3
    dd36:	42a6      	cmp	r6, r4
    dd38:	d1f9      	bne.n	dd2e <__libc_init_array+0x2a>
    dd3a:	bd70      	pop	{r4, r5, r6, pc}
    dd3c:	00015614 	.word	0x00015614
    dd40:	00015614 	.word	0x00015614
    dd44:	00015628 	.word	0x00015628
    dd48:	00015614 	.word	0x00015614

0000dd4c <__retarget_lock_init_recursive>:
    dd4c:	4770      	bx	lr
    dd4e:	bf00      	nop

0000dd50 <__retarget_lock_close_recursive>:
    dd50:	4770      	bx	lr
    dd52:	bf00      	nop

0000dd54 <__retarget_lock_acquire_recursive>:
    dd54:	4770      	bx	lr
    dd56:	bf00      	nop

0000dd58 <__retarget_lock_release_recursive>:
    dd58:	4770      	bx	lr
    dd5a:	bf00      	nop
    dd5c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd60:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd64:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd68:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd6c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd70:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd74:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd78:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    dd7c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000dd80 <strlen>:
    dd80:	f890 f000 	pld	[r0]
    dd84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    dd88:	f020 0107 	bic.w	r1, r0, #7
    dd8c:	f06f 0c00 	mvn.w	ip, #0
    dd90:	f010 0407 	ands.w	r4, r0, #7
    dd94:	f891 f020 	pld	[r1, #32]
    dd98:	f040 8049 	bne.w	de2e <strlen+0xae>
    dd9c:	f04f 0400 	mov.w	r4, #0
    dda0:	f06f 0007 	mvn.w	r0, #7
    dda4:	e9d1 2300 	ldrd	r2, r3, [r1]
    dda8:	f891 f040 	pld	[r1, #64]	; 0x40
    ddac:	f100 0008 	add.w	r0, r0, #8
    ddb0:	fa82 f24c 	uadd8	r2, r2, ip
    ddb4:	faa4 f28c 	sel	r2, r4, ip
    ddb8:	fa83 f34c 	uadd8	r3, r3, ip
    ddbc:	faa2 f38c 	sel	r3, r2, ip
    ddc0:	bb4b      	cbnz	r3, de16 <strlen+0x96>
    ddc2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    ddc6:	fa82 f24c 	uadd8	r2, r2, ip
    ddca:	f100 0008 	add.w	r0, r0, #8
    ddce:	faa4 f28c 	sel	r2, r4, ip
    ddd2:	fa83 f34c 	uadd8	r3, r3, ip
    ddd6:	faa2 f38c 	sel	r3, r2, ip
    ddda:	b9e3      	cbnz	r3, de16 <strlen+0x96>
    dddc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    dde0:	fa82 f24c 	uadd8	r2, r2, ip
    dde4:	f100 0008 	add.w	r0, r0, #8
    dde8:	faa4 f28c 	sel	r2, r4, ip
    ddec:	fa83 f34c 	uadd8	r3, r3, ip
    ddf0:	faa2 f38c 	sel	r3, r2, ip
    ddf4:	b97b      	cbnz	r3, de16 <strlen+0x96>
    ddf6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    ddfa:	f101 0120 	add.w	r1, r1, #32
    ddfe:	fa82 f24c 	uadd8	r2, r2, ip
    de02:	f100 0008 	add.w	r0, r0, #8
    de06:	faa4 f28c 	sel	r2, r4, ip
    de0a:	fa83 f34c 	uadd8	r3, r3, ip
    de0e:	faa2 f38c 	sel	r3, r2, ip
    de12:	2b00      	cmp	r3, #0
    de14:	d0c6      	beq.n	dda4 <strlen+0x24>
    de16:	2a00      	cmp	r2, #0
    de18:	bf04      	itt	eq
    de1a:	3004      	addeq	r0, #4
    de1c:	461a      	moveq	r2, r3
    de1e:	ba12      	rev	r2, r2
    de20:	fab2 f282 	clz	r2, r2
    de24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    de28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    de2c:	4770      	bx	lr
    de2e:	e9d1 2300 	ldrd	r2, r3, [r1]
    de32:	f004 0503 	and.w	r5, r4, #3
    de36:	f1c4 0000 	rsb	r0, r4, #0
    de3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    de3e:	f014 0f04 	tst.w	r4, #4
    de42:	f891 f040 	pld	[r1, #64]	; 0x40
    de46:	fa0c f505 	lsl.w	r5, ip, r5
    de4a:	ea62 0205 	orn	r2, r2, r5
    de4e:	bf1c      	itt	ne
    de50:	ea63 0305 	ornne	r3, r3, r5
    de54:	4662      	movne	r2, ip
    de56:	f04f 0400 	mov.w	r4, #0
    de5a:	e7a9      	b.n	ddb0 <strlen+0x30>

0000de5c <register_fini>:
    de5c:	4b02      	ldr	r3, [pc, #8]	; (de68 <register_fini+0xc>)
    de5e:	b113      	cbz	r3, de66 <register_fini+0xa>
    de60:	4802      	ldr	r0, [pc, #8]	; (de6c <register_fini+0x10>)
    de62:	f000 b805 	b.w	de70 <atexit>
    de66:	4770      	bx	lr
    de68:	00000000 	.word	0x00000000
    de6c:	000106b5 	.word	0x000106b5

0000de70 <atexit>:
    de70:	2300      	movs	r3, #0
    de72:	4601      	mov	r1, r0
    de74:	461a      	mov	r2, r3
    de76:	4618      	mov	r0, r3
    de78:	f002 bcba 	b.w	107f0 <__register_exitproc>

0000de7c <_malloc_trim_r>:
    de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de7e:	4f24      	ldr	r7, [pc, #144]	; (df10 <_malloc_trim_r+0x94>)
    de80:	460c      	mov	r4, r1
    de82:	4606      	mov	r6, r0
    de84:	f7ff fa8a 	bl	d39c <__malloc_lock>
    de88:	68bb      	ldr	r3, [r7, #8]
    de8a:	685d      	ldr	r5, [r3, #4]
    de8c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    de90:	310f      	adds	r1, #15
    de92:	f025 0503 	bic.w	r5, r5, #3
    de96:	194b      	adds	r3, r1, r5
    de98:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    de9c:	f023 030f 	bic.w	r3, r3, #15
    dea0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    dea4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    dea8:	db07      	blt.n	deba <_malloc_trim_r+0x3e>
    deaa:	2100      	movs	r1, #0
    deac:	4630      	mov	r0, r6
    deae:	f7ff fefb 	bl	dca8 <_sbrk_r>
    deb2:	68bb      	ldr	r3, [r7, #8]
    deb4:	442b      	add	r3, r5
    deb6:	4298      	cmp	r0, r3
    deb8:	d004      	beq.n	dec4 <_malloc_trim_r+0x48>
    deba:	4630      	mov	r0, r6
    debc:	f7ff fa74 	bl	d3a8 <__malloc_unlock>
    dec0:	2000      	movs	r0, #0
    dec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dec4:	4261      	negs	r1, r4
    dec6:	4630      	mov	r0, r6
    dec8:	f7ff feee 	bl	dca8 <_sbrk_r>
    decc:	3001      	adds	r0, #1
    dece:	d00d      	beq.n	deec <_malloc_trim_r+0x70>
    ded0:	4a10      	ldr	r2, [pc, #64]	; (df14 <_malloc_trim_r+0x98>)
    ded2:	68bb      	ldr	r3, [r7, #8]
    ded4:	1b2d      	subs	r5, r5, r4
    ded6:	f045 0501 	orr.w	r5, r5, #1
    deda:	605d      	str	r5, [r3, #4]
    dedc:	6813      	ldr	r3, [r2, #0]
    dede:	4630      	mov	r0, r6
    dee0:	1b1b      	subs	r3, r3, r4
    dee2:	6013      	str	r3, [r2, #0]
    dee4:	f7ff fa60 	bl	d3a8 <__malloc_unlock>
    dee8:	2001      	movs	r0, #1
    deea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    deec:	2100      	movs	r1, #0
    deee:	4630      	mov	r0, r6
    def0:	f7ff feda 	bl	dca8 <_sbrk_r>
    def4:	68ba      	ldr	r2, [r7, #8]
    def6:	1a83      	subs	r3, r0, r2
    def8:	2b0f      	cmp	r3, #15
    defa:	ddde      	ble.n	deba <_malloc_trim_r+0x3e>
    defc:	f043 0301 	orr.w	r3, r3, #1
    df00:	6053      	str	r3, [r2, #4]
    df02:	4b05      	ldr	r3, [pc, #20]	; (df18 <_malloc_trim_r+0x9c>)
    df04:	4903      	ldr	r1, [pc, #12]	; (df14 <_malloc_trim_r+0x98>)
    df06:	681b      	ldr	r3, [r3, #0]
    df08:	1ac0      	subs	r0, r0, r3
    df0a:	6008      	str	r0, [r1, #0]
    df0c:	e7d5      	b.n	deba <_malloc_trim_r+0x3e>
    df0e:	bf00      	nop
    df10:	1fff8ac0 	.word	0x1fff8ac0
    df14:	1fffd31c 	.word	0x1fffd31c
    df18:	1fff8ec8 	.word	0x1fff8ec8

0000df1c <_free_r>:
    df1c:	2900      	cmp	r1, #0
    df1e:	d061      	beq.n	dfe4 <_free_r+0xc8>
    df20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df22:	460c      	mov	r4, r1
    df24:	4606      	mov	r6, r0
    df26:	f7ff fa39 	bl	d39c <__malloc_lock>
    df2a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    df2e:	4f7b      	ldr	r7, [pc, #492]	; (e11c <_free_r+0x200>)
    df30:	f1a4 0508 	sub.w	r5, r4, #8
    df34:	f022 0101 	bic.w	r1, r2, #1
    df38:	eb05 0c01 	add.w	ip, r5, r1
    df3c:	68b8      	ldr	r0, [r7, #8]
    df3e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    df42:	4560      	cmp	r0, ip
    df44:	f023 0303 	bic.w	r3, r3, #3
    df48:	f000 808b 	beq.w	e062 <_free_r+0x146>
    df4c:	07d2      	lsls	r2, r2, #31
    df4e:	f8cc 3004 	str.w	r3, [ip, #4]
    df52:	d432      	bmi.n	dfba <_free_r+0x9e>
    df54:	f854 2c08 	ldr.w	r2, [r4, #-8]
    df58:	1aad      	subs	r5, r5, r2
    df5a:	4411      	add	r1, r2
    df5c:	68aa      	ldr	r2, [r5, #8]
    df5e:	f107 0008 	add.w	r0, r7, #8
    df62:	4282      	cmp	r2, r0
    df64:	d06a      	beq.n	e03c <_free_r+0x120>
    df66:	eb0c 0403 	add.w	r4, ip, r3
    df6a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    df6e:	68ec      	ldr	r4, [r5, #12]
    df70:	60d4      	str	r4, [r2, #12]
    df72:	f01e 0f01 	tst.w	lr, #1
    df76:	60a2      	str	r2, [r4, #8]
    df78:	f000 8097 	beq.w	e0aa <_free_r+0x18e>
    df7c:	f041 0301 	orr.w	r3, r1, #1
    df80:	606b      	str	r3, [r5, #4]
    df82:	f8cc 1000 	str.w	r1, [ip]
    df86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    df8a:	d235      	bcs.n	dff8 <_free_r+0xdc>
    df8c:	6878      	ldr	r0, [r7, #4]
    df8e:	08cb      	lsrs	r3, r1, #3
    df90:	2201      	movs	r2, #1
    df92:	0949      	lsrs	r1, r1, #5
    df94:	3301      	adds	r3, #1
    df96:	408a      	lsls	r2, r1
    df98:	4302      	orrs	r2, r0
    df9a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    df9e:	607a      	str	r2, [r7, #4]
    dfa0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    dfa4:	3a08      	subs	r2, #8
    dfa6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    dfaa:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    dfae:	60cd      	str	r5, [r1, #12]
    dfb0:	4630      	mov	r0, r6
    dfb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    dfb6:	f7ff b9f7 	b.w	d3a8 <__malloc_unlock>
    dfba:	eb0c 0203 	add.w	r2, ip, r3
    dfbe:	6852      	ldr	r2, [r2, #4]
    dfc0:	07d0      	lsls	r0, r2, #31
    dfc2:	d410      	bmi.n	dfe6 <_free_r+0xca>
    dfc4:	4419      	add	r1, r3
    dfc6:	f107 0008 	add.w	r0, r7, #8
    dfca:	f8dc 3008 	ldr.w	r3, [ip, #8]
    dfce:	4283      	cmp	r3, r0
    dfd0:	d073      	beq.n	e0ba <_free_r+0x19e>
    dfd2:	f8dc 200c 	ldr.w	r2, [ip, #12]
    dfd6:	60da      	str	r2, [r3, #12]
    dfd8:	6093      	str	r3, [r2, #8]
    dfda:	f041 0301 	orr.w	r3, r1, #1
    dfde:	606b      	str	r3, [r5, #4]
    dfe0:	5069      	str	r1, [r5, r1]
    dfe2:	e7d0      	b.n	df86 <_free_r+0x6a>
    dfe4:	4770      	bx	lr
    dfe6:	f041 0301 	orr.w	r3, r1, #1
    dfea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    dfee:	f844 3c04 	str.w	r3, [r4, #-4]
    dff2:	f8cc 1000 	str.w	r1, [ip]
    dff6:	d3c9      	bcc.n	df8c <_free_r+0x70>
    dff8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    dffc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e000:	d248      	bcs.n	e094 <_free_r+0x178>
    e002:	098b      	lsrs	r3, r1, #6
    e004:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e008:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e00c:	00c3      	lsls	r3, r0, #3
    e00e:	18f8      	adds	r0, r7, r3
    e010:	58fb      	ldr	r3, [r7, r3]
    e012:	3808      	subs	r0, #8
    e014:	4298      	cmp	r0, r3
    e016:	d059      	beq.n	e0cc <_free_r+0x1b0>
    e018:	685a      	ldr	r2, [r3, #4]
    e01a:	f022 0203 	bic.w	r2, r2, #3
    e01e:	428a      	cmp	r2, r1
    e020:	d902      	bls.n	e028 <_free_r+0x10c>
    e022:	689b      	ldr	r3, [r3, #8]
    e024:	4298      	cmp	r0, r3
    e026:	d1f7      	bne.n	e018 <_free_r+0xfc>
    e028:	68d8      	ldr	r0, [r3, #12]
    e02a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e02e:	6085      	str	r5, [r0, #8]
    e030:	60dd      	str	r5, [r3, #12]
    e032:	4630      	mov	r0, r6
    e034:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e038:	f7ff b9b6 	b.w	d3a8 <__malloc_unlock>
    e03c:	eb0c 0203 	add.w	r2, ip, r3
    e040:	6852      	ldr	r2, [r2, #4]
    e042:	07d2      	lsls	r2, r2, #31
    e044:	d463      	bmi.n	e10e <_free_r+0x1f2>
    e046:	440b      	add	r3, r1
    e048:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e04c:	60ca      	str	r2, [r1, #12]
    e04e:	6091      	str	r1, [r2, #8]
    e050:	f043 0201 	orr.w	r2, r3, #1
    e054:	606a      	str	r2, [r5, #4]
    e056:	4630      	mov	r0, r6
    e058:	50eb      	str	r3, [r5, r3]
    e05a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e05e:	f7ff b9a3 	b.w	d3a8 <__malloc_unlock>
    e062:	440b      	add	r3, r1
    e064:	07d1      	lsls	r1, r2, #31
    e066:	d407      	bmi.n	e078 <_free_r+0x15c>
    e068:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e06c:	1aad      	subs	r5, r5, r2
    e06e:	4413      	add	r3, r2
    e070:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e074:	60ca      	str	r2, [r1, #12]
    e076:	6091      	str	r1, [r2, #8]
    e078:	f043 0201 	orr.w	r2, r3, #1
    e07c:	606a      	str	r2, [r5, #4]
    e07e:	4a28      	ldr	r2, [pc, #160]	; (e120 <_free_r+0x204>)
    e080:	60bd      	str	r5, [r7, #8]
    e082:	6812      	ldr	r2, [r2, #0]
    e084:	429a      	cmp	r2, r3
    e086:	d893      	bhi.n	dfb0 <_free_r+0x94>
    e088:	4b26      	ldr	r3, [pc, #152]	; (e124 <_free_r+0x208>)
    e08a:	4630      	mov	r0, r6
    e08c:	6819      	ldr	r1, [r3, #0]
    e08e:	f7ff fef5 	bl	de7c <_malloc_trim_r>
    e092:	e78d      	b.n	dfb0 <_free_r+0x94>
    e094:	2b14      	cmp	r3, #20
    e096:	d90a      	bls.n	e0ae <_free_r+0x192>
    e098:	2b54      	cmp	r3, #84	; 0x54
    e09a:	d81f      	bhi.n	e0dc <_free_r+0x1c0>
    e09c:	0b0b      	lsrs	r3, r1, #12
    e09e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e0a2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e0a6:	00c3      	lsls	r3, r0, #3
    e0a8:	e7b1      	b.n	e00e <_free_r+0xf2>
    e0aa:	4419      	add	r1, r3
    e0ac:	e78d      	b.n	dfca <_free_r+0xae>
    e0ae:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e0b2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e0b6:	00c3      	lsls	r3, r0, #3
    e0b8:	e7a9      	b.n	e00e <_free_r+0xf2>
    e0ba:	f041 0301 	orr.w	r3, r1, #1
    e0be:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e0c2:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e0c6:	606b      	str	r3, [r5, #4]
    e0c8:	5069      	str	r1, [r5, r1]
    e0ca:	e771      	b.n	dfb0 <_free_r+0x94>
    e0cc:	6879      	ldr	r1, [r7, #4]
    e0ce:	1092      	asrs	r2, r2, #2
    e0d0:	2401      	movs	r4, #1
    e0d2:	fa04 f202 	lsl.w	r2, r4, r2
    e0d6:	430a      	orrs	r2, r1
    e0d8:	607a      	str	r2, [r7, #4]
    e0da:	e7a6      	b.n	e02a <_free_r+0x10e>
    e0dc:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e0e0:	d806      	bhi.n	e0f0 <_free_r+0x1d4>
    e0e2:	0bcb      	lsrs	r3, r1, #15
    e0e4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e0e8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e0ec:	00c3      	lsls	r3, r0, #3
    e0ee:	e78e      	b.n	e00e <_free_r+0xf2>
    e0f0:	f240 5254 	movw	r2, #1364	; 0x554
    e0f4:	4293      	cmp	r3, r2
    e0f6:	d806      	bhi.n	e106 <_free_r+0x1ea>
    e0f8:	0c8b      	lsrs	r3, r1, #18
    e0fa:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e0fe:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e102:	00c3      	lsls	r3, r0, #3
    e104:	e783      	b.n	e00e <_free_r+0xf2>
    e106:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e10a:	227e      	movs	r2, #126	; 0x7e
    e10c:	e77f      	b.n	e00e <_free_r+0xf2>
    e10e:	f041 0301 	orr.w	r3, r1, #1
    e112:	606b      	str	r3, [r5, #4]
    e114:	f8cc 1000 	str.w	r1, [ip]
    e118:	e74a      	b.n	dfb0 <_free_r+0x94>
    e11a:	bf00      	nop
    e11c:	1fff8ac0 	.word	0x1fff8ac0
    e120:	1fff8ecc 	.word	0x1fff8ecc
    e124:	1fffd34c 	.word	0x1fffd34c

0000e128 <__ascii_mbtowc>:
    e128:	b082      	sub	sp, #8
    e12a:	b149      	cbz	r1, e140 <__ascii_mbtowc+0x18>
    e12c:	b15a      	cbz	r2, e146 <__ascii_mbtowc+0x1e>
    e12e:	b16b      	cbz	r3, e14c <__ascii_mbtowc+0x24>
    e130:	7813      	ldrb	r3, [r2, #0]
    e132:	600b      	str	r3, [r1, #0]
    e134:	7812      	ldrb	r2, [r2, #0]
    e136:	1e10      	subs	r0, r2, #0
    e138:	bf18      	it	ne
    e13a:	2001      	movne	r0, #1
    e13c:	b002      	add	sp, #8
    e13e:	4770      	bx	lr
    e140:	a901      	add	r1, sp, #4
    e142:	2a00      	cmp	r2, #0
    e144:	d1f3      	bne.n	e12e <__ascii_mbtowc+0x6>
    e146:	4610      	mov	r0, r2
    e148:	b002      	add	sp, #8
    e14a:	4770      	bx	lr
    e14c:	f06f 0001 	mvn.w	r0, #1
    e150:	e7f4      	b.n	e13c <__ascii_mbtowc+0x14>
    e152:	bf00      	nop

0000e154 <_Balloc>:
    e154:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e156:	b570      	push	{r4, r5, r6, lr}
    e158:	4605      	mov	r5, r0
    e15a:	460c      	mov	r4, r1
    e15c:	b14b      	cbz	r3, e172 <_Balloc+0x1e>
    e15e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e162:	b180      	cbz	r0, e186 <_Balloc+0x32>
    e164:	6802      	ldr	r2, [r0, #0]
    e166:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e16a:	2300      	movs	r3, #0
    e16c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e170:	bd70      	pop	{r4, r5, r6, pc}
    e172:	2221      	movs	r2, #33	; 0x21
    e174:	2104      	movs	r1, #4
    e176:	f002 fb9f 	bl	108b8 <_calloc_r>
    e17a:	4603      	mov	r3, r0
    e17c:	6468      	str	r0, [r5, #68]	; 0x44
    e17e:	2800      	cmp	r0, #0
    e180:	d1ed      	bne.n	e15e <_Balloc+0xa>
    e182:	2000      	movs	r0, #0
    e184:	bd70      	pop	{r4, r5, r6, pc}
    e186:	2101      	movs	r1, #1
    e188:	fa01 f604 	lsl.w	r6, r1, r4
    e18c:	1d72      	adds	r2, r6, #5
    e18e:	0092      	lsls	r2, r2, #2
    e190:	4628      	mov	r0, r5
    e192:	f002 fb91 	bl	108b8 <_calloc_r>
    e196:	2800      	cmp	r0, #0
    e198:	d0f3      	beq.n	e182 <_Balloc+0x2e>
    e19a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e19e:	e7e4      	b.n	e16a <_Balloc+0x16>

0000e1a0 <_Bfree>:
    e1a0:	b131      	cbz	r1, e1b0 <_Bfree+0x10>
    e1a2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e1a4:	684a      	ldr	r2, [r1, #4]
    e1a6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e1aa:	6008      	str	r0, [r1, #0]
    e1ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e1b0:	4770      	bx	lr
    e1b2:	bf00      	nop

0000e1b4 <__multadd>:
    e1b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e1b8:	690d      	ldr	r5, [r1, #16]
    e1ba:	4607      	mov	r7, r0
    e1bc:	460e      	mov	r6, r1
    e1be:	461c      	mov	r4, r3
    e1c0:	f101 0e14 	add.w	lr, r1, #20
    e1c4:	2000      	movs	r0, #0
    e1c6:	f8de 1000 	ldr.w	r1, [lr]
    e1ca:	b28b      	uxth	r3, r1
    e1cc:	fb02 4303 	mla	r3, r2, r3, r4
    e1d0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e1d4:	0c09      	lsrs	r1, r1, #16
    e1d6:	fb02 cc01 	mla	ip, r2, r1, ip
    e1da:	3001      	adds	r0, #1
    e1dc:	b29b      	uxth	r3, r3
    e1de:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    e1e2:	4285      	cmp	r5, r0
    e1e4:	f84e 3b04 	str.w	r3, [lr], #4
    e1e8:	ea4f 441c 	mov.w	r4, ip, lsr #16
    e1ec:	dceb      	bgt.n	e1c6 <__multadd+0x12>
    e1ee:	b13c      	cbz	r4, e200 <__multadd+0x4c>
    e1f0:	68b3      	ldr	r3, [r6, #8]
    e1f2:	42ab      	cmp	r3, r5
    e1f4:	dd07      	ble.n	e206 <__multadd+0x52>
    e1f6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e1fa:	3501      	adds	r5, #1
    e1fc:	615c      	str	r4, [r3, #20]
    e1fe:	6135      	str	r5, [r6, #16]
    e200:	4630      	mov	r0, r6
    e202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e206:	6871      	ldr	r1, [r6, #4]
    e208:	4638      	mov	r0, r7
    e20a:	3101      	adds	r1, #1
    e20c:	f7ff ffa2 	bl	e154 <_Balloc>
    e210:	4680      	mov	r8, r0
    e212:	b1a8      	cbz	r0, e240 <__multadd+0x8c>
    e214:	6932      	ldr	r2, [r6, #16]
    e216:	3202      	adds	r2, #2
    e218:	f106 010c 	add.w	r1, r6, #12
    e21c:	0092      	lsls	r2, r2, #2
    e21e:	300c      	adds	r0, #12
    e220:	f7fb fab4 	bl	978c <memcpy>
    e224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e226:	6872      	ldr	r2, [r6, #4]
    e228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e22c:	6031      	str	r1, [r6, #0]
    e22e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e232:	4646      	mov	r6, r8
    e234:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e238:	3501      	adds	r5, #1
    e23a:	615c      	str	r4, [r3, #20]
    e23c:	6135      	str	r5, [r6, #16]
    e23e:	e7df      	b.n	e200 <__multadd+0x4c>
    e240:	4b02      	ldr	r3, [pc, #8]	; (e24c <__multadd+0x98>)
    e242:	4803      	ldr	r0, [pc, #12]	; (e250 <__multadd+0x9c>)
    e244:	4642      	mov	r2, r8
    e246:	21ba      	movs	r1, #186	; 0xba
    e248:	f002 fb16 	bl	10878 <__assert_func>
    e24c:	00015378 	.word	0x00015378
    e250:	0001538c 	.word	0x0001538c

0000e254 <__hi0bits>:
    e254:	0c02      	lsrs	r2, r0, #16
    e256:	0412      	lsls	r2, r2, #16
    e258:	4603      	mov	r3, r0
    e25a:	b9ca      	cbnz	r2, e290 <__hi0bits+0x3c>
    e25c:	0403      	lsls	r3, r0, #16
    e25e:	2010      	movs	r0, #16
    e260:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    e264:	bf04      	itt	eq
    e266:	021b      	lsleq	r3, r3, #8
    e268:	3008      	addeq	r0, #8
    e26a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    e26e:	bf04      	itt	eq
    e270:	011b      	lsleq	r3, r3, #4
    e272:	3004      	addeq	r0, #4
    e274:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    e278:	bf04      	itt	eq
    e27a:	009b      	lsleq	r3, r3, #2
    e27c:	3002      	addeq	r0, #2
    e27e:	2b00      	cmp	r3, #0
    e280:	db05      	blt.n	e28e <__hi0bits+0x3a>
    e282:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    e286:	f100 0001 	add.w	r0, r0, #1
    e28a:	bf08      	it	eq
    e28c:	2020      	moveq	r0, #32
    e28e:	4770      	bx	lr
    e290:	2000      	movs	r0, #0
    e292:	e7e5      	b.n	e260 <__hi0bits+0xc>

0000e294 <__lo0bits>:
    e294:	6803      	ldr	r3, [r0, #0]
    e296:	f013 0207 	ands.w	r2, r3, #7
    e29a:	4601      	mov	r1, r0
    e29c:	d007      	beq.n	e2ae <__lo0bits+0x1a>
    e29e:	07da      	lsls	r2, r3, #31
    e2a0:	d41f      	bmi.n	e2e2 <__lo0bits+0x4e>
    e2a2:	0798      	lsls	r0, r3, #30
    e2a4:	d521      	bpl.n	e2ea <__lo0bits+0x56>
    e2a6:	085b      	lsrs	r3, r3, #1
    e2a8:	600b      	str	r3, [r1, #0]
    e2aa:	2001      	movs	r0, #1
    e2ac:	4770      	bx	lr
    e2ae:	b298      	uxth	r0, r3
    e2b0:	b1a0      	cbz	r0, e2dc <__lo0bits+0x48>
    e2b2:	4610      	mov	r0, r2
    e2b4:	b2da      	uxtb	r2, r3
    e2b6:	b90a      	cbnz	r2, e2bc <__lo0bits+0x28>
    e2b8:	3008      	adds	r0, #8
    e2ba:	0a1b      	lsrs	r3, r3, #8
    e2bc:	071a      	lsls	r2, r3, #28
    e2be:	bf04      	itt	eq
    e2c0:	091b      	lsreq	r3, r3, #4
    e2c2:	3004      	addeq	r0, #4
    e2c4:	079a      	lsls	r2, r3, #30
    e2c6:	bf04      	itt	eq
    e2c8:	089b      	lsreq	r3, r3, #2
    e2ca:	3002      	addeq	r0, #2
    e2cc:	07da      	lsls	r2, r3, #31
    e2ce:	d403      	bmi.n	e2d8 <__lo0bits+0x44>
    e2d0:	085b      	lsrs	r3, r3, #1
    e2d2:	f100 0001 	add.w	r0, r0, #1
    e2d6:	d006      	beq.n	e2e6 <__lo0bits+0x52>
    e2d8:	600b      	str	r3, [r1, #0]
    e2da:	4770      	bx	lr
    e2dc:	0c1b      	lsrs	r3, r3, #16
    e2de:	2010      	movs	r0, #16
    e2e0:	e7e8      	b.n	e2b4 <__lo0bits+0x20>
    e2e2:	2000      	movs	r0, #0
    e2e4:	4770      	bx	lr
    e2e6:	2020      	movs	r0, #32
    e2e8:	4770      	bx	lr
    e2ea:	089b      	lsrs	r3, r3, #2
    e2ec:	600b      	str	r3, [r1, #0]
    e2ee:	2002      	movs	r0, #2
    e2f0:	4770      	bx	lr
    e2f2:	bf00      	nop

0000e2f4 <__i2b>:
    e2f4:	b538      	push	{r3, r4, r5, lr}
    e2f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e2f8:	4604      	mov	r4, r0
    e2fa:	460d      	mov	r5, r1
    e2fc:	b14b      	cbz	r3, e312 <__i2b+0x1e>
    e2fe:	6858      	ldr	r0, [r3, #4]
    e300:	b1b0      	cbz	r0, e330 <__i2b+0x3c>
    e302:	6802      	ldr	r2, [r0, #0]
    e304:	605a      	str	r2, [r3, #4]
    e306:	2200      	movs	r2, #0
    e308:	2301      	movs	r3, #1
    e30a:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e30e:	60c2      	str	r2, [r0, #12]
    e310:	bd38      	pop	{r3, r4, r5, pc}
    e312:	2221      	movs	r2, #33	; 0x21
    e314:	2104      	movs	r1, #4
    e316:	f002 facf 	bl	108b8 <_calloc_r>
    e31a:	4603      	mov	r3, r0
    e31c:	6460      	str	r0, [r4, #68]	; 0x44
    e31e:	2800      	cmp	r0, #0
    e320:	d1ed      	bne.n	e2fe <__i2b+0xa>
    e322:	4b09      	ldr	r3, [pc, #36]	; (e348 <__i2b+0x54>)
    e324:	4809      	ldr	r0, [pc, #36]	; (e34c <__i2b+0x58>)
    e326:	2200      	movs	r2, #0
    e328:	f240 1145 	movw	r1, #325	; 0x145
    e32c:	f002 faa4 	bl	10878 <__assert_func>
    e330:	221c      	movs	r2, #28
    e332:	2101      	movs	r1, #1
    e334:	4620      	mov	r0, r4
    e336:	f002 fabf 	bl	108b8 <_calloc_r>
    e33a:	2800      	cmp	r0, #0
    e33c:	d0f1      	beq.n	e322 <__i2b+0x2e>
    e33e:	2201      	movs	r2, #1
    e340:	2302      	movs	r3, #2
    e342:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e346:	e7de      	b.n	e306 <__i2b+0x12>
    e348:	00015378 	.word	0x00015378
    e34c:	0001538c 	.word	0x0001538c

0000e350 <__multiply>:
    e350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e354:	690e      	ldr	r6, [r1, #16]
    e356:	6915      	ldr	r5, [r2, #16]
    e358:	42ae      	cmp	r6, r5
    e35a:	b085      	sub	sp, #20
    e35c:	4688      	mov	r8, r1
    e35e:	4614      	mov	r4, r2
    e360:	db05      	blt.n	e36e <__multiply+0x1e>
    e362:	462a      	mov	r2, r5
    e364:	4623      	mov	r3, r4
    e366:	4635      	mov	r5, r6
    e368:	460c      	mov	r4, r1
    e36a:	4616      	mov	r6, r2
    e36c:	4698      	mov	r8, r3
    e36e:	68a3      	ldr	r3, [r4, #8]
    e370:	6861      	ldr	r1, [r4, #4]
    e372:	19af      	adds	r7, r5, r6
    e374:	42bb      	cmp	r3, r7
    e376:	bfb8      	it	lt
    e378:	3101      	addlt	r1, #1
    e37a:	f7ff feeb 	bl	e154 <_Balloc>
    e37e:	9001      	str	r0, [sp, #4]
    e380:	2800      	cmp	r0, #0
    e382:	f000 8087 	beq.w	e494 <__multiply+0x144>
    e386:	9b01      	ldr	r3, [sp, #4]
    e388:	f103 0914 	add.w	r9, r3, #20
    e38c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e390:	45d1      	cmp	r9, sl
    e392:	d205      	bcs.n	e3a0 <__multiply+0x50>
    e394:	464b      	mov	r3, r9
    e396:	2200      	movs	r2, #0
    e398:	f843 2b04 	str.w	r2, [r3], #4
    e39c:	459a      	cmp	sl, r3
    e39e:	d8fb      	bhi.n	e398 <__multiply+0x48>
    e3a0:	f108 0814 	add.w	r8, r8, #20
    e3a4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e3a8:	f104 0314 	add.w	r3, r4, #20
    e3ac:	45d8      	cmp	r8, fp
    e3ae:	461a      	mov	r2, r3
    e3b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e3b4:	d25f      	bcs.n	e476 <__multiply+0x126>
    e3b6:	1b2b      	subs	r3, r5, r4
    e3b8:	3b15      	subs	r3, #21
    e3ba:	f023 0303 	bic.w	r3, r3, #3
    e3be:	3304      	adds	r3, #4
    e3c0:	3415      	adds	r4, #21
    e3c2:	42a5      	cmp	r5, r4
    e3c4:	bf38      	it	cc
    e3c6:	2304      	movcc	r3, #4
    e3c8:	e9cd a702 	strd	sl, r7, [sp, #8]
    e3cc:	46ac      	mov	ip, r5
    e3ce:	461f      	mov	r7, r3
    e3d0:	4692      	mov	sl, r2
    e3d2:	e005      	b.n	e3e0 <__multiply+0x90>
    e3d4:	0c09      	lsrs	r1, r1, #16
    e3d6:	d129      	bne.n	e42c <__multiply+0xdc>
    e3d8:	45c3      	cmp	fp, r8
    e3da:	f109 0904 	add.w	r9, r9, #4
    e3de:	d948      	bls.n	e472 <__multiply+0x122>
    e3e0:	f858 1b04 	ldr.w	r1, [r8], #4
    e3e4:	b28d      	uxth	r5, r1
    e3e6:	2d00      	cmp	r5, #0
    e3e8:	d0f4      	beq.n	e3d4 <__multiply+0x84>
    e3ea:	4656      	mov	r6, sl
    e3ec:	464c      	mov	r4, r9
    e3ee:	2300      	movs	r3, #0
    e3f0:	f856 1b04 	ldr.w	r1, [r6], #4
    e3f4:	6822      	ldr	r2, [r4, #0]
    e3f6:	fa1f fe81 	uxth.w	lr, r1
    e3fa:	b290      	uxth	r0, r2
    e3fc:	0c09      	lsrs	r1, r1, #16
    e3fe:	fb05 000e 	mla	r0, r5, lr, r0
    e402:	0c12      	lsrs	r2, r2, #16
    e404:	4403      	add	r3, r0
    e406:	fb05 2201 	mla	r2, r5, r1, r2
    e40a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e40e:	b29b      	uxth	r3, r3
    e410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e414:	45b4      	cmp	ip, r6
    e416:	f844 3b04 	str.w	r3, [r4], #4
    e41a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e41e:	d8e7      	bhi.n	e3f0 <__multiply+0xa0>
    e420:	f849 3007 	str.w	r3, [r9, r7]
    e424:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e428:	0c09      	lsrs	r1, r1, #16
    e42a:	d0d5      	beq.n	e3d8 <__multiply+0x88>
    e42c:	f8d9 3000 	ldr.w	r3, [r9]
    e430:	4650      	mov	r0, sl
    e432:	461a      	mov	r2, r3
    e434:	464c      	mov	r4, r9
    e436:	2600      	movs	r6, #0
    e438:	8805      	ldrh	r5, [r0, #0]
    e43a:	0c12      	lsrs	r2, r2, #16
    e43c:	fb01 2205 	mla	r2, r1, r5, r2
    e440:	4416      	add	r6, r2
    e442:	b29b      	uxth	r3, r3
    e444:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e448:	f844 3b04 	str.w	r3, [r4], #4
    e44c:	f850 5b04 	ldr.w	r5, [r0], #4
    e450:	6822      	ldr	r2, [r4, #0]
    e452:	0c2d      	lsrs	r5, r5, #16
    e454:	b293      	uxth	r3, r2
    e456:	fb01 3305 	mla	r3, r1, r5, r3
    e45a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e45e:	4584      	cmp	ip, r0
    e460:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e464:	d8e8      	bhi.n	e438 <__multiply+0xe8>
    e466:	45c3      	cmp	fp, r8
    e468:	f849 3007 	str.w	r3, [r9, r7]
    e46c:	f109 0904 	add.w	r9, r9, #4
    e470:	d8b6      	bhi.n	e3e0 <__multiply+0x90>
    e472:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e476:	2f00      	cmp	r7, #0
    e478:	dc02      	bgt.n	e480 <__multiply+0x130>
    e47a:	e005      	b.n	e488 <__multiply+0x138>
    e47c:	3f01      	subs	r7, #1
    e47e:	d003      	beq.n	e488 <__multiply+0x138>
    e480:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e484:	2b00      	cmp	r3, #0
    e486:	d0f9      	beq.n	e47c <__multiply+0x12c>
    e488:	9b01      	ldr	r3, [sp, #4]
    e48a:	4618      	mov	r0, r3
    e48c:	611f      	str	r7, [r3, #16]
    e48e:	b005      	add	sp, #20
    e490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e494:	4b03      	ldr	r3, [pc, #12]	; (e4a4 <__multiply+0x154>)
    e496:	4804      	ldr	r0, [pc, #16]	; (e4a8 <__multiply+0x158>)
    e498:	9a01      	ldr	r2, [sp, #4]
    e49a:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e49e:	f002 f9eb 	bl	10878 <__assert_func>
    e4a2:	bf00      	nop
    e4a4:	00015378 	.word	0x00015378
    e4a8:	0001538c 	.word	0x0001538c

0000e4ac <__pow5mult>:
    e4ac:	f012 0303 	ands.w	r3, r2, #3
    e4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4b4:	4614      	mov	r4, r2
    e4b6:	4606      	mov	r6, r0
    e4b8:	d132      	bne.n	e520 <__pow5mult+0x74>
    e4ba:	460d      	mov	r5, r1
    e4bc:	10a4      	asrs	r4, r4, #2
    e4be:	d020      	beq.n	e502 <__pow5mult+0x56>
    e4c0:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    e4c4:	f1b8 0f00 	cmp.w	r8, #0
    e4c8:	d033      	beq.n	e532 <__pow5mult+0x86>
    e4ca:	07e3      	lsls	r3, r4, #31
    e4cc:	f04f 0700 	mov.w	r7, #0
    e4d0:	d407      	bmi.n	e4e2 <__pow5mult+0x36>
    e4d2:	1064      	asrs	r4, r4, #1
    e4d4:	d015      	beq.n	e502 <__pow5mult+0x56>
    e4d6:	f8d8 0000 	ldr.w	r0, [r8]
    e4da:	b1a8      	cbz	r0, e508 <__pow5mult+0x5c>
    e4dc:	4680      	mov	r8, r0
    e4de:	07e3      	lsls	r3, r4, #31
    e4e0:	d5f7      	bpl.n	e4d2 <__pow5mult+0x26>
    e4e2:	4642      	mov	r2, r8
    e4e4:	4629      	mov	r1, r5
    e4e6:	4630      	mov	r0, r6
    e4e8:	f7ff ff32 	bl	e350 <__multiply>
    e4ec:	b1b5      	cbz	r5, e51c <__pow5mult+0x70>
    e4ee:	6869      	ldr	r1, [r5, #4]
    e4f0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e4f2:	1064      	asrs	r4, r4, #1
    e4f4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    e4f8:	602a      	str	r2, [r5, #0]
    e4fa:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    e4fe:	4605      	mov	r5, r0
    e500:	d1e9      	bne.n	e4d6 <__pow5mult+0x2a>
    e502:	4628      	mov	r0, r5
    e504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e508:	4642      	mov	r2, r8
    e50a:	4641      	mov	r1, r8
    e50c:	4630      	mov	r0, r6
    e50e:	f7ff ff1f 	bl	e350 <__multiply>
    e512:	f8c8 0000 	str.w	r0, [r8]
    e516:	6007      	str	r7, [r0, #0]
    e518:	4680      	mov	r8, r0
    e51a:	e7e0      	b.n	e4de <__pow5mult+0x32>
    e51c:	4605      	mov	r5, r0
    e51e:	e7d8      	b.n	e4d2 <__pow5mult+0x26>
    e520:	3b01      	subs	r3, #1
    e522:	4a0f      	ldr	r2, [pc, #60]	; (e560 <__pow5mult+0xb4>)
    e524:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e528:	2300      	movs	r3, #0
    e52a:	f7ff fe43 	bl	e1b4 <__multadd>
    e52e:	4605      	mov	r5, r0
    e530:	e7c4      	b.n	e4bc <__pow5mult+0x10>
    e532:	2101      	movs	r1, #1
    e534:	4630      	mov	r0, r6
    e536:	f7ff fe0d 	bl	e154 <_Balloc>
    e53a:	4680      	mov	r8, r0
    e53c:	b140      	cbz	r0, e550 <__pow5mult+0xa4>
    e53e:	2301      	movs	r3, #1
    e540:	f240 2271 	movw	r2, #625	; 0x271
    e544:	e9c0 3204 	strd	r3, r2, [r0, #16]
    e548:	2300      	movs	r3, #0
    e54a:	6430      	str	r0, [r6, #64]	; 0x40
    e54c:	6003      	str	r3, [r0, #0]
    e54e:	e7bc      	b.n	e4ca <__pow5mult+0x1e>
    e550:	4b04      	ldr	r3, [pc, #16]	; (e564 <__pow5mult+0xb8>)
    e552:	4805      	ldr	r0, [pc, #20]	; (e568 <__pow5mult+0xbc>)
    e554:	4642      	mov	r2, r8
    e556:	f240 1145 	movw	r1, #325	; 0x145
    e55a:	f002 f98d 	bl	10878 <__assert_func>
    e55e:	bf00      	nop
    e560:	000154d8 	.word	0x000154d8
    e564:	00015378 	.word	0x00015378
    e568:	0001538c 	.word	0x0001538c

0000e56c <__lshift>:
    e56c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e570:	460c      	mov	r4, r1
    e572:	4690      	mov	r8, r2
    e574:	6926      	ldr	r6, [r4, #16]
    e576:	68a3      	ldr	r3, [r4, #8]
    e578:	6849      	ldr	r1, [r1, #4]
    e57a:	eb06 1662 	add.w	r6, r6, r2, asr #5
    e57e:	1c75      	adds	r5, r6, #1
    e580:	429d      	cmp	r5, r3
    e582:	4607      	mov	r7, r0
    e584:	ea4f 1962 	mov.w	r9, r2, asr #5
    e588:	dd04      	ble.n	e594 <__lshift+0x28>
    e58a:	005b      	lsls	r3, r3, #1
    e58c:	429d      	cmp	r5, r3
    e58e:	f101 0101 	add.w	r1, r1, #1
    e592:	dcfa      	bgt.n	e58a <__lshift+0x1e>
    e594:	4638      	mov	r0, r7
    e596:	f7ff fddd 	bl	e154 <_Balloc>
    e59a:	4684      	mov	ip, r0
    e59c:	2800      	cmp	r0, #0
    e59e:	d051      	beq.n	e644 <__lshift+0xd8>
    e5a0:	f1b9 0f00 	cmp.w	r9, #0
    e5a4:	f100 0014 	add.w	r0, r0, #20
    e5a8:	dd0e      	ble.n	e5c8 <__lshift+0x5c>
    e5aa:	f109 0205 	add.w	r2, r9, #5
    e5ae:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    e5b2:	4603      	mov	r3, r0
    e5b4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    e5b8:	2100      	movs	r1, #0
    e5ba:	f843 1b04 	str.w	r1, [r3], #4
    e5be:	4293      	cmp	r3, r2
    e5c0:	d1fb      	bne.n	e5ba <__lshift+0x4e>
    e5c2:	f1ae 0314 	sub.w	r3, lr, #20
    e5c6:	4418      	add	r0, r3
    e5c8:	6921      	ldr	r1, [r4, #16]
    e5ca:	f104 0314 	add.w	r3, r4, #20
    e5ce:	f018 081f 	ands.w	r8, r8, #31
    e5d2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    e5d6:	d02d      	beq.n	e634 <__lshift+0xc8>
    e5d8:	f1c8 0920 	rsb	r9, r8, #32
    e5dc:	4686      	mov	lr, r0
    e5de:	f04f 0a00 	mov.w	sl, #0
    e5e2:	681a      	ldr	r2, [r3, #0]
    e5e4:	fa02 f208 	lsl.w	r2, r2, r8
    e5e8:	ea42 020a 	orr.w	r2, r2, sl
    e5ec:	f84e 2b04 	str.w	r2, [lr], #4
    e5f0:	f853 2b04 	ldr.w	r2, [r3], #4
    e5f4:	4299      	cmp	r1, r3
    e5f6:	fa22 fa09 	lsr.w	sl, r2, r9
    e5fa:	d8f2      	bhi.n	e5e2 <__lshift+0x76>
    e5fc:	1b0b      	subs	r3, r1, r4
    e5fe:	3b15      	subs	r3, #21
    e600:	f023 0303 	bic.w	r3, r3, #3
    e604:	3304      	adds	r3, #4
    e606:	f104 0215 	add.w	r2, r4, #21
    e60a:	4291      	cmp	r1, r2
    e60c:	bf38      	it	cc
    e60e:	2304      	movcc	r3, #4
    e610:	f1ba 0f00 	cmp.w	sl, #0
    e614:	bf18      	it	ne
    e616:	462e      	movne	r6, r5
    e618:	f840 a003 	str.w	sl, [r0, r3]
    e61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e61e:	6862      	ldr	r2, [r4, #4]
    e620:	f8cc 6010 	str.w	r6, [ip, #16]
    e624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e628:	6021      	str	r1, [r4, #0]
    e62a:	4660      	mov	r0, ip
    e62c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    e630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e634:	3804      	subs	r0, #4
    e636:	f853 2b04 	ldr.w	r2, [r3], #4
    e63a:	f840 2f04 	str.w	r2, [r0, #4]!
    e63e:	4299      	cmp	r1, r3
    e640:	d8f9      	bhi.n	e636 <__lshift+0xca>
    e642:	e7eb      	b.n	e61c <__lshift+0xb0>
    e644:	4b03      	ldr	r3, [pc, #12]	; (e654 <__lshift+0xe8>)
    e646:	4804      	ldr	r0, [pc, #16]	; (e658 <__lshift+0xec>)
    e648:	4662      	mov	r2, ip
    e64a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    e64e:	f002 f913 	bl	10878 <__assert_func>
    e652:	bf00      	nop
    e654:	00015378 	.word	0x00015378
    e658:	0001538c 	.word	0x0001538c

0000e65c <__mcmp>:
    e65c:	690b      	ldr	r3, [r1, #16]
    e65e:	4684      	mov	ip, r0
    e660:	6900      	ldr	r0, [r0, #16]
    e662:	1ac0      	subs	r0, r0, r3
    e664:	d115      	bne.n	e692 <__mcmp+0x36>
    e666:	f10c 0c14 	add.w	ip, ip, #20
    e66a:	3114      	adds	r1, #20
    e66c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    e670:	b410      	push	{r4}
    e672:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    e676:	e001      	b.n	e67c <__mcmp+0x20>
    e678:	4594      	cmp	ip, r2
    e67a:	d208      	bcs.n	e68e <__mcmp+0x32>
    e67c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e680:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e684:	428c      	cmp	r4, r1
    e686:	d0f7      	beq.n	e678 <__mcmp+0x1c>
    e688:	d204      	bcs.n	e694 <__mcmp+0x38>
    e68a:	f04f 30ff 	mov.w	r0, #4294967295
    e68e:	bc10      	pop	{r4}
    e690:	4770      	bx	lr
    e692:	4770      	bx	lr
    e694:	2001      	movs	r0, #1
    e696:	bc10      	pop	{r4}
    e698:	4770      	bx	lr
    e69a:	bf00      	nop

0000e69c <__mdiff>:
    e69c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e6a0:	690f      	ldr	r7, [r1, #16]
    e6a2:	6913      	ldr	r3, [r2, #16]
    e6a4:	1aff      	subs	r7, r7, r3
    e6a6:	2f00      	cmp	r7, #0
    e6a8:	460e      	mov	r6, r1
    e6aa:	4690      	mov	r8, r2
    e6ac:	d17f      	bne.n	e7ae <__mdiff+0x112>
    e6ae:	f101 0514 	add.w	r5, r1, #20
    e6b2:	3214      	adds	r2, #20
    e6b4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e6b8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    e6bc:	e001      	b.n	e6c2 <__mdiff+0x26>
    e6be:	429d      	cmp	r5, r3
    e6c0:	d278      	bcs.n	e7b4 <__mdiff+0x118>
    e6c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    e6c6:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    e6ca:	42a1      	cmp	r1, r4
    e6cc:	d0f7      	beq.n	e6be <__mdiff+0x22>
    e6ce:	d369      	bcc.n	e7a4 <__mdiff+0x108>
    e6d0:	6871      	ldr	r1, [r6, #4]
    e6d2:	f7ff fd3f 	bl	e154 <_Balloc>
    e6d6:	4681      	mov	r9, r0
    e6d8:	2800      	cmp	r0, #0
    e6da:	d077      	beq.n	e7cc <__mdiff+0x130>
    e6dc:	6935      	ldr	r5, [r6, #16]
    e6de:	f8d8 2010 	ldr.w	r2, [r8, #16]
    e6e2:	60c7      	str	r7, [r0, #12]
    e6e4:	f108 0e14 	add.w	lr, r8, #20
    e6e8:	f106 0014 	add.w	r0, r6, #20
    e6ec:	f109 0a14 	add.w	sl, r9, #20
    e6f0:	f106 0110 	add.w	r1, r6, #16
    e6f4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    e6f8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    e6fc:	4656      	mov	r6, sl
    e6fe:	f04f 0c00 	mov.w	ip, #0
    e702:	f85e 4b04 	ldr.w	r4, [lr], #4
    e706:	f851 bf04 	ldr.w	fp, [r1, #4]!
    e70a:	b2a3      	uxth	r3, r4
    e70c:	fa1c fc8b 	uxtah	ip, ip, fp
    e710:	ebac 0303 	sub.w	r3, ip, r3
    e714:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    e718:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    e71c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    e720:	b29b      	uxth	r3, r3
    e722:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    e726:	4572      	cmp	r2, lr
    e728:	f846 3b04 	str.w	r3, [r6], #4
    e72c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    e730:	d8e7      	bhi.n	e702 <__mdiff+0x66>
    e732:	eba2 0108 	sub.w	r1, r2, r8
    e736:	3915      	subs	r1, #21
    e738:	f108 0815 	add.w	r8, r8, #21
    e73c:	4542      	cmp	r2, r8
    e73e:	f021 0403 	bic.w	r4, r1, #3
    e742:	f104 0404 	add.w	r4, r4, #4
    e746:	bf38      	it	cc
    e748:	2404      	movcc	r4, #4
    e74a:	4420      	add	r0, r4
    e74c:	f021 0203 	bic.w	r2, r1, #3
    e750:	bf38      	it	cc
    e752:	2200      	movcc	r2, #0
    e754:	4287      	cmp	r7, r0
    e756:	4452      	add	r2, sl
    e758:	4454      	add	r4, sl
    e75a:	d918      	bls.n	e78e <__mdiff+0xf2>
    e75c:	4626      	mov	r6, r4
    e75e:	4601      	mov	r1, r0
    e760:	f851 3b04 	ldr.w	r3, [r1], #4
    e764:	fa1c fc83 	uxtah	ip, ip, r3
    e768:	ea4f 422c 	mov.w	r2, ip, asr #16
    e76c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e770:	fa1f fc8c 	uxth.w	ip, ip
    e774:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    e778:	428f      	cmp	r7, r1
    e77a:	f846 3b04 	str.w	r3, [r6], #4
    e77e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    e782:	d8ed      	bhi.n	e760 <__mdiff+0xc4>
    e784:	3f01      	subs	r7, #1
    e786:	1a3f      	subs	r7, r7, r0
    e788:	f027 0703 	bic.w	r7, r7, #3
    e78c:	19e2      	adds	r2, r4, r7
    e78e:	b923      	cbnz	r3, e79a <__mdiff+0xfe>
    e790:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    e794:	3d01      	subs	r5, #1
    e796:	2b00      	cmp	r3, #0
    e798:	d0fa      	beq.n	e790 <__mdiff+0xf4>
    e79a:	f8c9 5010 	str.w	r5, [r9, #16]
    e79e:	4648      	mov	r0, r9
    e7a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7a4:	4633      	mov	r3, r6
    e7a6:	2701      	movs	r7, #1
    e7a8:	4646      	mov	r6, r8
    e7aa:	4698      	mov	r8, r3
    e7ac:	e790      	b.n	e6d0 <__mdiff+0x34>
    e7ae:	dbf9      	blt.n	e7a4 <__mdiff+0x108>
    e7b0:	2700      	movs	r7, #0
    e7b2:	e78d      	b.n	e6d0 <__mdiff+0x34>
    e7b4:	2100      	movs	r1, #0
    e7b6:	f7ff fccd 	bl	e154 <_Balloc>
    e7ba:	4681      	mov	r9, r0
    e7bc:	b168      	cbz	r0, e7da <__mdiff+0x13e>
    e7be:	2201      	movs	r2, #1
    e7c0:	2300      	movs	r3, #0
    e7c2:	e9c9 2304 	strd	r2, r3, [r9, #16]
    e7c6:	4648      	mov	r0, r9
    e7c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e7cc:	4b06      	ldr	r3, [pc, #24]	; (e7e8 <__mdiff+0x14c>)
    e7ce:	4807      	ldr	r0, [pc, #28]	; (e7ec <__mdiff+0x150>)
    e7d0:	464a      	mov	r2, r9
    e7d2:	f240 2145 	movw	r1, #581	; 0x245
    e7d6:	f002 f84f 	bl	10878 <__assert_func>
    e7da:	4b03      	ldr	r3, [pc, #12]	; (e7e8 <__mdiff+0x14c>)
    e7dc:	4803      	ldr	r0, [pc, #12]	; (e7ec <__mdiff+0x150>)
    e7de:	464a      	mov	r2, r9
    e7e0:	f240 2137 	movw	r1, #567	; 0x237
    e7e4:	f002 f848 	bl	10878 <__assert_func>
    e7e8:	00015378 	.word	0x00015378
    e7ec:	0001538c 	.word	0x0001538c

0000e7f0 <__d2b>:
    e7f0:	b570      	push	{r4, r5, r6, lr}
    e7f2:	2101      	movs	r1, #1
    e7f4:	b082      	sub	sp, #8
    e7f6:	4616      	mov	r6, r2
    e7f8:	461d      	mov	r5, r3
    e7fa:	f7ff fcab 	bl	e154 <_Balloc>
    e7fe:	4604      	mov	r4, r0
    e800:	2800      	cmp	r0, #0
    e802:	d04a      	beq.n	e89a <__d2b+0xaa>
    e804:	462b      	mov	r3, r5
    e806:	f3c5 550a 	ubfx	r5, r5, #20, #11
    e80a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    e80e:	b10d      	cbz	r5, e814 <__d2b+0x24>
    e810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e814:	2e00      	cmp	r6, #0
    e816:	9301      	str	r3, [sp, #4]
    e818:	d114      	bne.n	e844 <__d2b+0x54>
    e81a:	a801      	add	r0, sp, #4
    e81c:	f7ff fd3a 	bl	e294 <__lo0bits>
    e820:	9b01      	ldr	r3, [sp, #4]
    e822:	6163      	str	r3, [r4, #20]
    e824:	2101      	movs	r1, #1
    e826:	3020      	adds	r0, #32
    e828:	6121      	str	r1, [r4, #16]
    e82a:	b315      	cbz	r5, e872 <__d2b+0x82>
    e82c:	9b06      	ldr	r3, [sp, #24]
    e82e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    e832:	4405      	add	r5, r0
    e834:	601d      	str	r5, [r3, #0]
    e836:	9b07      	ldr	r3, [sp, #28]
    e838:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    e83c:	6018      	str	r0, [r3, #0]
    e83e:	4620      	mov	r0, r4
    e840:	b002      	add	sp, #8
    e842:	bd70      	pop	{r4, r5, r6, pc}
    e844:	4668      	mov	r0, sp
    e846:	9600      	str	r6, [sp, #0]
    e848:	f7ff fd24 	bl	e294 <__lo0bits>
    e84c:	b308      	cbz	r0, e892 <__d2b+0xa2>
    e84e:	9b01      	ldr	r3, [sp, #4]
    e850:	9900      	ldr	r1, [sp, #0]
    e852:	f1c0 0220 	rsb	r2, r0, #32
    e856:	fa03 f202 	lsl.w	r2, r3, r2
    e85a:	430a      	orrs	r2, r1
    e85c:	40c3      	lsrs	r3, r0
    e85e:	9301      	str	r3, [sp, #4]
    e860:	6162      	str	r2, [r4, #20]
    e862:	2b00      	cmp	r3, #0
    e864:	bf14      	ite	ne
    e866:	2102      	movne	r1, #2
    e868:	2101      	moveq	r1, #1
    e86a:	61a3      	str	r3, [r4, #24]
    e86c:	6121      	str	r1, [r4, #16]
    e86e:	2d00      	cmp	r5, #0
    e870:	d1dc      	bne.n	e82c <__d2b+0x3c>
    e872:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    e876:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    e87a:	6910      	ldr	r0, [r2, #16]
    e87c:	9a06      	ldr	r2, [sp, #24]
    e87e:	6013      	str	r3, [r2, #0]
    e880:	f7ff fce8 	bl	e254 <__hi0bits>
    e884:	9b07      	ldr	r3, [sp, #28]
    e886:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    e88a:	6018      	str	r0, [r3, #0]
    e88c:	4620      	mov	r0, r4
    e88e:	b002      	add	sp, #8
    e890:	bd70      	pop	{r4, r5, r6, pc}
    e892:	e9dd 2300 	ldrd	r2, r3, [sp]
    e896:	6162      	str	r2, [r4, #20]
    e898:	e7e3      	b.n	e862 <__d2b+0x72>
    e89a:	4b03      	ldr	r3, [pc, #12]	; (e8a8 <__d2b+0xb8>)
    e89c:	4803      	ldr	r0, [pc, #12]	; (e8ac <__d2b+0xbc>)
    e89e:	4622      	mov	r2, r4
    e8a0:	f240 310f 	movw	r1, #783	; 0x30f
    e8a4:	f001 ffe8 	bl	10878 <__assert_func>
    e8a8:	00015378 	.word	0x00015378
    e8ac:	0001538c 	.word	0x0001538c

0000e8b0 <__ascii_wctomb>:
    e8b0:	b149      	cbz	r1, e8c6 <__ascii_wctomb+0x16>
    e8b2:	2aff      	cmp	r2, #255	; 0xff
    e8b4:	d802      	bhi.n	e8bc <__ascii_wctomb+0xc>
    e8b6:	700a      	strb	r2, [r1, #0]
    e8b8:	2001      	movs	r0, #1
    e8ba:	4770      	bx	lr
    e8bc:	238a      	movs	r3, #138	; 0x8a
    e8be:	6003      	str	r3, [r0, #0]
    e8c0:	f04f 30ff 	mov.w	r0, #4294967295
    e8c4:	4770      	bx	lr
    e8c6:	4608      	mov	r0, r1
    e8c8:	4770      	bx	lr
    e8ca:	bf00      	nop

0000e8cc <_svfprintf_r>:
    e8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8d0:	b0d9      	sub	sp, #356	; 0x164
    e8d2:	460c      	mov	r4, r1
    e8d4:	910c      	str	r1, [sp, #48]	; 0x30
    e8d6:	4690      	mov	r8, r2
    e8d8:	930e      	str	r3, [sp, #56]	; 0x38
    e8da:	4682      	mov	sl, r0
    e8dc:	f001 fee6 	bl	106ac <_localeconv_r>
    e8e0:	6803      	ldr	r3, [r0, #0]
    e8e2:	9319      	str	r3, [sp, #100]	; 0x64
    e8e4:	4618      	mov	r0, r3
    e8e6:	f7ff fa4b 	bl	dd80 <strlen>
    e8ea:	2208      	movs	r2, #8
    e8ec:	9017      	str	r0, [sp, #92]	; 0x5c
    e8ee:	2100      	movs	r1, #0
    e8f0:	a828      	add	r0, sp, #160	; 0xa0
    e8f2:	f7ff f911 	bl	db18 <memset>
    e8f6:	89a3      	ldrh	r3, [r4, #12]
    e8f8:	061f      	lsls	r7, r3, #24
    e8fa:	d503      	bpl.n	e904 <_svfprintf_r+0x38>
    e8fc:	6923      	ldr	r3, [r4, #16]
    e8fe:	2b00      	cmp	r3, #0
    e900:	f000 873f 	beq.w	f782 <_svfprintf_r+0xeb6>
    e904:	2300      	movs	r3, #0
    e906:	aa2f      	add	r2, sp, #188	; 0xbc
    e908:	2400      	movs	r4, #0
    e90a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    e90e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    e912:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    e916:	9313      	str	r3, [sp, #76]	; 0x4c
    e918:	9318      	str	r3, [sp, #96]	; 0x60
    e91a:	9309      	str	r3, [sp, #36]	; 0x24
    e91c:	2300      	movs	r3, #0
    e91e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    e922:	922c      	str	r2, [sp, #176]	; 0xb0
    e924:	4691      	mov	r9, r2
    e926:	4644      	mov	r4, r8
    e928:	46a0      	mov	r8, r4
    e92a:	4b78      	ldr	r3, [pc, #480]	; (eb0c <_svfprintf_r+0x240>)
    e92c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    e930:	f7ff f976 	bl	dc20 <__locale_mb_cur_max>
    e934:	4603      	mov	r3, r0
    e936:	a828      	add	r0, sp, #160	; 0xa0
    e938:	9000      	str	r0, [sp, #0]
    e93a:	4642      	mov	r2, r8
    e93c:	a924      	add	r1, sp, #144	; 0x90
    e93e:	4650      	mov	r0, sl
    e940:	47a8      	blx	r5
    e942:	2800      	cmp	r0, #0
    e944:	f000 80b0 	beq.w	eaa8 <_svfprintf_r+0x1dc>
    e948:	f2c0 80a6 	blt.w	ea98 <_svfprintf_r+0x1cc>
    e94c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    e94e:	2a25      	cmp	r2, #37	; 0x25
    e950:	4603      	mov	r3, r0
    e952:	d001      	beq.n	e958 <_svfprintf_r+0x8c>
    e954:	4498      	add	r8, r3
    e956:	e7e8      	b.n	e92a <_svfprintf_r+0x5e>
    e958:	ebb8 0704 	subs.w	r7, r8, r4
    e95c:	4606      	mov	r6, r0
    e95e:	f040 80a7 	bne.w	eab0 <_svfprintf_r+0x1e4>
    e962:	2300      	movs	r3, #0
    e964:	f04f 32ff 	mov.w	r2, #4294967295
    e968:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    e96c:	469b      	mov	fp, r3
    e96e:	930b      	str	r3, [sp, #44]	; 0x2c
    e970:	f108 0801 	add.w	r8, r8, #1
    e974:	f898 3000 	ldrb.w	r3, [r8]
    e978:	9208      	str	r2, [sp, #32]
    e97a:	252b      	movs	r5, #43	; 0x2b
    e97c:	2620      	movs	r6, #32
    e97e:	f108 0801 	add.w	r8, r8, #1
    e982:	f1a3 0220 	sub.w	r2, r3, #32
    e986:	2a5a      	cmp	r2, #90	; 0x5a
    e988:	f200 80c2 	bhi.w	eb10 <_svfprintf_r+0x244>
    e98c:	e8df f012 	tbh	[pc, r2, lsl #1]
    e990:	00c002e6 	.word	0x00c002e6
    e994:	02e100c0 	.word	0x02e100c0
    e998:	00c000c0 	.word	0x00c000c0
    e99c:	006a00c0 	.word	0x006a00c0
    e9a0:	00c000c0 	.word	0x00c000c0
    e9a4:	02840208 	.word	0x02840208
    e9a8:	021300c0 	.word	0x021300c0
    e9ac:	00c002c7 	.word	0x00c002c7
    e9b0:	005b02c2 	.word	0x005b02c2
    e9b4:	005b005b 	.word	0x005b005b
    e9b8:	005b005b 	.word	0x005b005b
    e9bc:	005b005b 	.word	0x005b005b
    e9c0:	005b005b 	.word	0x005b005b
    e9c4:	00c000c0 	.word	0x00c000c0
    e9c8:	00c000c0 	.word	0x00c000c0
    e9cc:	00c000c0 	.word	0x00c000c0
    e9d0:	014300c0 	.word	0x014300c0
    e9d4:	018900c0 	.word	0x018900c0
    e9d8:	0143021d 	.word	0x0143021d
    e9dc:	01430143 	.word	0x01430143
    e9e0:	00c000c0 	.word	0x00c000c0
    e9e4:	00c000c0 	.word	0x00c000c0
    e9e8:	00c00218 	.word	0x00c00218
    e9ec:	029600c0 	.word	0x029600c0
    e9f0:	00c000c0 	.word	0x00c000c0
    e9f4:	01b100c0 	.word	0x01b100c0
    e9f8:	02a900c0 	.word	0x02a900c0
    e9fc:	00c000c0 	.word	0x00c000c0
    ea00:	00c006dd 	.word	0x00c006dd
    ea04:	00c000c0 	.word	0x00c000c0
    ea08:	00c000c0 	.word	0x00c000c0
    ea0c:	00c000c0 	.word	0x00c000c0
    ea10:	014300c0 	.word	0x014300c0
    ea14:	018900c0 	.word	0x018900c0
    ea18:	014301e2 	.word	0x014301e2
    ea1c:	01430143 	.word	0x01430143
    ea20:	01e20277 	.word	0x01e20277
    ea24:	00c0007f 	.word	0x00c0007f
    ea28:	00c00289 	.word	0x00c00289
    ea2c:	06da025f 	.word	0x06da025f
    ea30:	007f0232 	.word	0x007f0232
    ea34:	01b100c0 	.word	0x01b100c0
    ea38:	06b4007c 	.word	0x06b4007c
    ea3c:	00c000c0 	.word	0x00c000c0
    ea40:	00c006b8 	.word	0x00c006b8
    ea44:	007c      	.short	0x007c
    ea46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ea4a:	2100      	movs	r1, #0
    ea4c:	f818 3b01 	ldrb.w	r3, [r8], #1
    ea50:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ea54:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ea58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ea5c:	2a09      	cmp	r2, #9
    ea5e:	d9f5      	bls.n	ea4c <_svfprintf_r+0x180>
    ea60:	910b      	str	r1, [sp, #44]	; 0x2c
    ea62:	e78e      	b.n	e982 <_svfprintf_r+0xb6>
    ea64:	4650      	mov	r0, sl
    ea66:	f001 fe21 	bl	106ac <_localeconv_r>
    ea6a:	6843      	ldr	r3, [r0, #4]
    ea6c:	931c      	str	r3, [sp, #112]	; 0x70
    ea6e:	4618      	mov	r0, r3
    ea70:	f7ff f986 	bl	dd80 <strlen>
    ea74:	901d      	str	r0, [sp, #116]	; 0x74
    ea76:	4607      	mov	r7, r0
    ea78:	4650      	mov	r0, sl
    ea7a:	f001 fe17 	bl	106ac <_localeconv_r>
    ea7e:	6883      	ldr	r3, [r0, #8]
    ea80:	931a      	str	r3, [sp, #104]	; 0x68
    ea82:	2f00      	cmp	r7, #0
    ea84:	f040 85b1 	bne.w	f5ea <_svfprintf_r+0xd1e>
    ea88:	f898 3000 	ldrb.w	r3, [r8]
    ea8c:	e777      	b.n	e97e <_svfprintf_r+0xb2>
    ea8e:	f898 3000 	ldrb.w	r3, [r8]
    ea92:	f04b 0b20 	orr.w	fp, fp, #32
    ea96:	e772      	b.n	e97e <_svfprintf_r+0xb2>
    ea98:	2208      	movs	r2, #8
    ea9a:	2100      	movs	r1, #0
    ea9c:	a828      	add	r0, sp, #160	; 0xa0
    ea9e:	f7ff f83b 	bl	db18 <memset>
    eaa2:	2301      	movs	r3, #1
    eaa4:	4498      	add	r8, r3
    eaa6:	e740      	b.n	e92a <_svfprintf_r+0x5e>
    eaa8:	ebb8 0704 	subs.w	r7, r8, r4
    eaac:	4606      	mov	r6, r0
    eaae:	d011      	beq.n	ead4 <_svfprintf_r+0x208>
    eab0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    eab2:	443b      	add	r3, r7
    eab4:	932e      	str	r3, [sp, #184]	; 0xb8
    eab6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eab8:	3301      	adds	r3, #1
    eaba:	2b07      	cmp	r3, #7
    eabc:	e9c9 4700 	strd	r4, r7, [r9]
    eac0:	932d      	str	r3, [sp, #180]	; 0xb4
    eac2:	dc19      	bgt.n	eaf8 <_svfprintf_r+0x22c>
    eac4:	f109 0908 	add.w	r9, r9, #8
    eac8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eaca:	443b      	add	r3, r7
    eacc:	9309      	str	r3, [sp, #36]	; 0x24
    eace:	2e00      	cmp	r6, #0
    ead0:	f47f af47 	bne.w	e962 <_svfprintf_r+0x96>
    ead4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    ead6:	2b00      	cmp	r3, #0
    ead8:	f041 8201 	bne.w	fede <_svfprintf_r+0x1612>
    eadc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    eade:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    eae2:	f013 0f40 	tst.w	r3, #64	; 0x40
    eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    eae8:	bf18      	it	ne
    eaea:	f04f 33ff 	movne.w	r3, #4294967295
    eaee:	9309      	str	r3, [sp, #36]	; 0x24
    eaf0:	9809      	ldr	r0, [sp, #36]	; 0x24
    eaf2:	b059      	add	sp, #356	; 0x164
    eaf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaf8:	990c      	ldr	r1, [sp, #48]	; 0x30
    eafa:	aa2c      	add	r2, sp, #176	; 0xb0
    eafc:	4650      	mov	r0, sl
    eafe:	f002 ff4f 	bl	119a0 <__ssprint_r>
    eb02:	2800      	cmp	r0, #0
    eb04:	d1ea      	bne.n	eadc <_svfprintf_r+0x210>
    eb06:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    eb0a:	e7dd      	b.n	eac8 <_svfprintf_r+0x1fc>
    eb0c:	1fff8edc 	.word	0x1fff8edc
    eb10:	9310      	str	r3, [sp, #64]	; 0x40
    eb12:	2b00      	cmp	r3, #0
    eb14:	d0de      	beq.n	ead4 <_svfprintf_r+0x208>
    eb16:	2200      	movs	r2, #0
    eb18:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    eb1c:	2301      	movs	r3, #1
    eb1e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    eb22:	9307      	str	r3, [sp, #28]
    eb24:	920d      	str	r2, [sp, #52]	; 0x34
    eb26:	930a      	str	r3, [sp, #40]	; 0x28
    eb28:	9208      	str	r2, [sp, #32]
    eb2a:	9212      	str	r2, [sp, #72]	; 0x48
    eb2c:	9216      	str	r2, [sp, #88]	; 0x58
    eb2e:	9211      	str	r2, [sp, #68]	; 0x44
    eb30:	ac3f      	add	r4, sp, #252	; 0xfc
    eb32:	f01b 0302 	ands.w	r3, fp, #2
    eb36:	d002      	beq.n	eb3e <_svfprintf_r+0x272>
    eb38:	9907      	ldr	r1, [sp, #28]
    eb3a:	3102      	adds	r1, #2
    eb3c:	9107      	str	r1, [sp, #28]
    eb3e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    eb42:	910f      	str	r1, [sp, #60]	; 0x3c
    eb44:	d105      	bne.n	eb52 <_svfprintf_r+0x286>
    eb46:	990b      	ldr	r1, [sp, #44]	; 0x2c
    eb48:	9807      	ldr	r0, [sp, #28]
    eb4a:	1a0f      	subs	r7, r1, r0
    eb4c:	2f00      	cmp	r7, #0
    eb4e:	f300 8382 	bgt.w	f256 <_svfprintf_r+0x98a>
    eb52:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    eb54:	b182      	cbz	r2, eb78 <_svfprintf_r+0x2ac>
    eb56:	2201      	movs	r2, #1
    eb58:	f8c9 2004 	str.w	r2, [r9, #4]
    eb5c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    eb5e:	3201      	adds	r2, #1
    eb60:	3601      	adds	r6, #1
    eb62:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    eb66:	2a07      	cmp	r2, #7
    eb68:	962e      	str	r6, [sp, #184]	; 0xb8
    eb6a:	922d      	str	r2, [sp, #180]	; 0xb4
    eb6c:	f8c9 1000 	str.w	r1, [r9]
    eb70:	f300 83bd 	bgt.w	f2ee <_svfprintf_r+0xa22>
    eb74:	f109 0908 	add.w	r9, r9, #8
    eb78:	b183      	cbz	r3, eb9c <_svfprintf_r+0x2d0>
    eb7a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eb7c:	aa22      	add	r2, sp, #136	; 0x88
    eb7e:	3301      	adds	r3, #1
    eb80:	3602      	adds	r6, #2
    eb82:	f8c9 2000 	str.w	r2, [r9]
    eb86:	2b07      	cmp	r3, #7
    eb88:	f04f 0202 	mov.w	r2, #2
    eb8c:	962e      	str	r6, [sp, #184]	; 0xb8
    eb8e:	932d      	str	r3, [sp, #180]	; 0xb4
    eb90:	f8c9 2004 	str.w	r2, [r9, #4]
    eb94:	f300 83c0 	bgt.w	f318 <_svfprintf_r+0xa4c>
    eb98:	f109 0908 	add.w	r9, r9, #8
    eb9c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eb9e:	2b80      	cmp	r3, #128	; 0x80
    eba0:	f000 8281 	beq.w	f0a6 <_svfprintf_r+0x7da>
    eba4:	9b08      	ldr	r3, [sp, #32]
    eba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    eba8:	1a9f      	subs	r7, r3, r2
    ebaa:	2f00      	cmp	r7, #0
    ebac:	f300 82bc 	bgt.w	f128 <_svfprintf_r+0x85c>
    ebb0:	f41b 7f80 	tst.w	fp, #256	; 0x100
    ebb4:	f040 821e 	bne.w	eff4 <_svfprintf_r+0x728>
    ebb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ebba:	f8c9 3004 	str.w	r3, [r9, #4]
    ebbe:	441e      	add	r6, r3
    ebc0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ebc2:	f8c9 4000 	str.w	r4, [r9]
    ebc6:	3301      	adds	r3, #1
    ebc8:	2b07      	cmp	r3, #7
    ebca:	962e      	str	r6, [sp, #184]	; 0xb8
    ebcc:	932d      	str	r3, [sp, #180]	; 0xb4
    ebce:	f300 8337 	bgt.w	f240 <_svfprintf_r+0x974>
    ebd2:	f109 0908 	add.w	r9, r9, #8
    ebd6:	f01b 0f04 	tst.w	fp, #4
    ebda:	d005      	beq.n	ebe8 <_svfprintf_r+0x31c>
    ebdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ebde:	9a07      	ldr	r2, [sp, #28]
    ebe0:	1a9c      	subs	r4, r3, r2
    ebe2:	2c00      	cmp	r4, #0
    ebe4:	f300 83a4 	bgt.w	f330 <_svfprintf_r+0xa64>
    ebe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ebea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    ebec:	9907      	ldr	r1, [sp, #28]
    ebee:	428a      	cmp	r2, r1
    ebf0:	bfac      	ite	ge
    ebf2:	189b      	addge	r3, r3, r2
    ebf4:	185b      	addlt	r3, r3, r1
    ebf6:	9309      	str	r3, [sp, #36]	; 0x24
    ebf8:	2e00      	cmp	r6, #0
    ebfa:	f040 82ca 	bne.w	f192 <_svfprintf_r+0x8c6>
    ebfe:	2300      	movs	r3, #0
    ec00:	932d      	str	r3, [sp, #180]	; 0xb4
    ec02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ec04:	b11b      	cbz	r3, ec0e <_svfprintf_r+0x342>
    ec06:	990d      	ldr	r1, [sp, #52]	; 0x34
    ec08:	4650      	mov	r0, sl
    ec0a:	f7ff f987 	bl	df1c <_free_r>
    ec0e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ec12:	4644      	mov	r4, r8
    ec14:	e688      	b.n	e928 <_svfprintf_r+0x5c>
    ec16:	9310      	str	r3, [sp, #64]	; 0x40
    ec18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ec1a:	3307      	adds	r3, #7
    ec1c:	f023 0107 	bic.w	r1, r3, #7
    ec20:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    ec24:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    ec28:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    ec2c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    ec30:	910e      	str	r1, [sp, #56]	; 0x38
    ec32:	4616      	mov	r6, r2
    ec34:	4610      	mov	r0, r2
    ec36:	4bb3      	ldr	r3, [pc, #716]	; (ef04 <_svfprintf_r+0x638>)
    ec38:	4629      	mov	r1, r5
    ec3a:	f04f 32ff 	mov.w	r2, #4294967295
    ec3e:	f7fd fda5 	bl	c78c <__aeabi_dcmpun>
    ec42:	2800      	cmp	r0, #0
    ec44:	f040 84fc 	bne.w	f640 <_svfprintf_r+0xd74>
    ec48:	4bae      	ldr	r3, [pc, #696]	; (ef04 <_svfprintf_r+0x638>)
    ec4a:	4630      	mov	r0, r6
    ec4c:	4629      	mov	r1, r5
    ec4e:	f04f 32ff 	mov.w	r2, #4294967295
    ec52:	f7fd fd7d 	bl	c750 <__aeabi_dcmple>
    ec56:	2800      	cmp	r0, #0
    ec58:	f040 84f2 	bne.w	f640 <_svfprintf_r+0xd74>
    ec5c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    ec60:	2200      	movs	r2, #0
    ec62:	2300      	movs	r3, #0
    ec64:	f7fd fd6a 	bl	c73c <__aeabi_dcmplt>
    ec68:	2800      	cmp	r0, #0
    ec6a:	f041 8038 	bne.w	fcde <_svfprintf_r+0x1412>
    ec6e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ec72:	4ca5      	ldr	r4, [pc, #660]	; (ef08 <_svfprintf_r+0x63c>)
    ec74:	4ba5      	ldr	r3, [pc, #660]	; (ef0c <_svfprintf_r+0x640>)
    ec76:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    ec7a:	9910      	ldr	r1, [sp, #64]	; 0x40
    ec7c:	2947      	cmp	r1, #71	; 0x47
    ec7e:	bfc8      	it	gt
    ec80:	461c      	movgt	r4, r3
    ec82:	2300      	movs	r3, #0
    ec84:	2103      	movs	r1, #3
    ec86:	930d      	str	r3, [sp, #52]	; 0x34
    ec88:	9107      	str	r1, [sp, #28]
    ec8a:	910a      	str	r1, [sp, #40]	; 0x28
    ec8c:	9308      	str	r3, [sp, #32]
    ec8e:	9312      	str	r3, [sp, #72]	; 0x48
    ec90:	9316      	str	r3, [sp, #88]	; 0x58
    ec92:	9311      	str	r3, [sp, #68]	; 0x44
    ec94:	2a00      	cmp	r2, #0
    ec96:	f43f af4c 	beq.w	eb32 <_svfprintf_r+0x266>
    ec9a:	9b07      	ldr	r3, [sp, #28]
    ec9c:	3301      	adds	r3, #1
    ec9e:	9307      	str	r3, [sp, #28]
    eca0:	e747      	b.n	eb32 <_svfprintf_r+0x266>
    eca2:	2b43      	cmp	r3, #67	; 0x43
    eca4:	9310      	str	r3, [sp, #64]	; 0x40
    eca6:	d003      	beq.n	ecb0 <_svfprintf_r+0x3e4>
    eca8:	f01b 0f10 	tst.w	fp, #16
    ecac:	f000 8551 	beq.w	f752 <_svfprintf_r+0xe86>
    ecb0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    ecb2:	2208      	movs	r2, #8
    ecb4:	2100      	movs	r1, #0
    ecb6:	a82a      	add	r0, sp, #168	; 0xa8
    ecb8:	ac3f      	add	r4, sp, #252	; 0xfc
    ecba:	f7fe ff2d 	bl	db18 <memset>
    ecbe:	ab2a      	add	r3, sp, #168	; 0xa8
    ecc0:	f856 2b04 	ldr.w	r2, [r6], #4
    ecc4:	4621      	mov	r1, r4
    ecc6:	4650      	mov	r0, sl
    ecc8:	f002 fe22 	bl	11910 <_wcrtomb_r>
    eccc:	4603      	mov	r3, r0
    ecce:	3301      	adds	r3, #1
    ecd0:	900a      	str	r0, [sp, #40]	; 0x28
    ecd2:	f001 82c3 	beq.w	1025c <_svfprintf_r+0x1990>
    ecd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ecd8:	960e      	str	r6, [sp, #56]	; 0x38
    ecda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ecde:	9307      	str	r3, [sp, #28]
    ece0:	2200      	movs	r2, #0
    ece2:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    ece6:	920d      	str	r2, [sp, #52]	; 0x34
    ece8:	9208      	str	r2, [sp, #32]
    ecea:	9212      	str	r2, [sp, #72]	; 0x48
    ecec:	9216      	str	r2, [sp, #88]	; 0x58
    ecee:	9211      	str	r2, [sp, #68]	; 0x44
    ecf0:	e71f      	b.n	eb32 <_svfprintf_r+0x266>
    ecf2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ecf4:	9310      	str	r3, [sp, #64]	; 0x40
    ecf6:	f857 4b04 	ldr.w	r4, [r7], #4
    ecfa:	2300      	movs	r3, #0
    ecfc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    ed00:	2c00      	cmp	r4, #0
    ed02:	f000 854d 	beq.w	f7a0 <_svfprintf_r+0xed4>
    ed06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ed08:	2b53      	cmp	r3, #83	; 0x53
    ed0a:	f000 86d4 	beq.w	fab6 <_svfprintf_r+0x11ea>
    ed0e:	f01b 0310 	ands.w	r3, fp, #16
    ed12:	9311      	str	r3, [sp, #68]	; 0x44
    ed14:	f040 86cf 	bne.w	fab6 <_svfprintf_r+0x11ea>
    ed18:	9b08      	ldr	r3, [sp, #32]
    ed1a:	1c5d      	adds	r5, r3, #1
    ed1c:	f001 80cc 	beq.w	feb8 <_svfprintf_r+0x15ec>
    ed20:	9911      	ldr	r1, [sp, #68]	; 0x44
    ed22:	461a      	mov	r2, r3
    ed24:	4620      	mov	r0, r4
    ed26:	f001 fcdb 	bl	106e0 <memchr>
    ed2a:	900d      	str	r0, [sp, #52]	; 0x34
    ed2c:	2800      	cmp	r0, #0
    ed2e:	f001 8351 	beq.w	103d4 <_svfprintf_r+0x1b08>
    ed32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ed34:	9911      	ldr	r1, [sp, #68]	; 0x44
    ed36:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ed3a:	970e      	str	r7, [sp, #56]	; 0x38
    ed3c:	1b1b      	subs	r3, r3, r4
    ed3e:	930a      	str	r3, [sp, #40]	; 0x28
    ed40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ed44:	9307      	str	r3, [sp, #28]
    ed46:	2373      	movs	r3, #115	; 0x73
    ed48:	9108      	str	r1, [sp, #32]
    ed4a:	9112      	str	r1, [sp, #72]	; 0x48
    ed4c:	9116      	str	r1, [sp, #88]	; 0x58
    ed4e:	910d      	str	r1, [sp, #52]	; 0x34
    ed50:	9310      	str	r3, [sp, #64]	; 0x40
    ed52:	e79f      	b.n	ec94 <_svfprintf_r+0x3c8>
    ed54:	f01b 0f20 	tst.w	fp, #32
    ed58:	9310      	str	r3, [sp, #64]	; 0x40
    ed5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ed5c:	d03c      	beq.n	edd8 <_svfprintf_r+0x50c>
    ed5e:	3307      	adds	r3, #7
    ed60:	f023 0307 	bic.w	r3, r3, #7
    ed64:	461a      	mov	r2, r3
    ed66:	4611      	mov	r1, r2
    ed68:	685b      	ldr	r3, [r3, #4]
    ed6a:	f851 2b08 	ldr.w	r2, [r1], #8
    ed6e:	910e      	str	r1, [sp, #56]	; 0x38
    ed70:	4619      	mov	r1, r3
    ed72:	2b00      	cmp	r3, #0
    ed74:	f2c0 8401 	blt.w	f57a <_svfprintf_r+0xcae>
    ed78:	9b08      	ldr	r3, [sp, #32]
    ed7a:	3301      	adds	r3, #1
    ed7c:	f000 82a8 	beq.w	f2d0 <_svfprintf_r+0xa04>
    ed80:	ea52 0301 	orrs.w	r3, r2, r1
    ed84:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    ed88:	f040 82a3 	bne.w	f2d2 <_svfprintf_r+0xa06>
    ed8c:	9b08      	ldr	r3, [sp, #32]
    ed8e:	2b00      	cmp	r3, #0
    ed90:	f040 82a4 	bne.w	f2dc <_svfprintf_r+0xa10>
    ed94:	46ab      	mov	fp, r5
    ed96:	2300      	movs	r3, #0
    ed98:	9308      	str	r3, [sp, #32]
    ed9a:	930a      	str	r3, [sp, #40]	; 0x28
    ed9c:	ac58      	add	r4, sp, #352	; 0x160
    ed9e:	e0ff      	b.n	efa0 <_svfprintf_r+0x6d4>
    eda0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eda2:	f853 2b04 	ldr.w	r2, [r3], #4
    eda6:	920b      	str	r2, [sp, #44]	; 0x2c
    eda8:	2a00      	cmp	r2, #0
    edaa:	f280 840c 	bge.w	f5c6 <_svfprintf_r+0xcfa>
    edae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    edb0:	930e      	str	r3, [sp, #56]	; 0x38
    edb2:	4252      	negs	r2, r2
    edb4:	920b      	str	r2, [sp, #44]	; 0x2c
    edb6:	f898 3000 	ldrb.w	r3, [r8]
    edba:	f04b 0b04 	orr.w	fp, fp, #4
    edbe:	e5de      	b.n	e97e <_svfprintf_r+0xb2>
    edc0:	f898 3000 	ldrb.w	r3, [r8]
    edc4:	f04b 0b08 	orr.w	fp, fp, #8
    edc8:	e5d9      	b.n	e97e <_svfprintf_r+0xb2>
    edca:	f04b 0b10 	orr.w	fp, fp, #16
    edce:	f01b 0f20 	tst.w	fp, #32
    edd2:	9310      	str	r3, [sp, #64]	; 0x40
    edd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    edd6:	d1c2      	bne.n	ed5e <_svfprintf_r+0x492>
    edd8:	f01b 0f10 	tst.w	fp, #16
    eddc:	f040 83fe 	bne.w	f5dc <_svfprintf_r+0xd10>
    ede0:	f01b 0f40 	tst.w	fp, #64	; 0x40
    ede4:	f000 83f6 	beq.w	f5d4 <_svfprintf_r+0xd08>
    ede8:	f933 2b04 	ldrsh.w	r2, [r3], #4
    edec:	930e      	str	r3, [sp, #56]	; 0x38
    edee:	17d1      	asrs	r1, r2, #31
    edf0:	460b      	mov	r3, r1
    edf2:	e7be      	b.n	ed72 <_svfprintf_r+0x4a6>
    edf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    edf6:	f853 2b04 	ldr.w	r2, [r3], #4
    edfa:	930e      	str	r3, [sp, #56]	; 0x38
    edfc:	f647 0330 	movw	r3, #30768	; 0x7830
    ee00:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    ee04:	2078      	movs	r0, #120	; 0x78
    ee06:	4b42      	ldr	r3, [pc, #264]	; (ef10 <_svfprintf_r+0x644>)
    ee08:	9318      	str	r3, [sp, #96]	; 0x60
    ee0a:	f04b 0502 	orr.w	r5, fp, #2
    ee0e:	2100      	movs	r1, #0
    ee10:	2302      	movs	r3, #2
    ee12:	9010      	str	r0, [sp, #64]	; 0x40
    ee14:	2000      	movs	r0, #0
    ee16:	9c08      	ldr	r4, [sp, #32]
    ee18:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    ee1c:	1c60      	adds	r0, r4, #1
    ee1e:	f000 80a8 	beq.w	ef72 <_svfprintf_r+0x6a6>
    ee22:	ea52 0001 	orrs.w	r0, r2, r1
    ee26:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    ee2a:	f040 80a1 	bne.w	ef70 <_svfprintf_r+0x6a4>
    ee2e:	2c00      	cmp	r4, #0
    ee30:	f040 8695 	bne.w	fb5e <_svfprintf_r+0x1292>
    ee34:	2b00      	cmp	r3, #0
    ee36:	d1ae      	bne.n	ed96 <_svfprintf_r+0x4ca>
    ee38:	f015 0301 	ands.w	r3, r5, #1
    ee3c:	930a      	str	r3, [sp, #40]	; 0x28
    ee3e:	f000 83c7 	beq.w	f5d0 <_svfprintf_r+0xd04>
    ee42:	2330      	movs	r3, #48	; 0x30
    ee44:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    ee48:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    ee4c:	e0a8      	b.n	efa0 <_svfprintf_r+0x6d4>
    ee4e:	f01b 0f20 	tst.w	fp, #32
    ee52:	f040 83e5 	bne.w	f620 <_svfprintf_r+0xd54>
    ee56:	f01b 0f10 	tst.w	fp, #16
    ee5a:	f040 8686 	bne.w	fb6a <_svfprintf_r+0x129e>
    ee5e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    ee62:	f040 877f 	bne.w	fd64 <_svfprintf_r+0x1498>
    ee66:	f41b 7f00 	tst.w	fp, #512	; 0x200
    ee6a:	f000 867e 	beq.w	fb6a <_svfprintf_r+0x129e>
    ee6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee70:	9909      	ldr	r1, [sp, #36]	; 0x24
    ee72:	f853 2b04 	ldr.w	r2, [r3], #4
    ee76:	930e      	str	r3, [sp, #56]	; 0x38
    ee78:	7011      	strb	r1, [r2, #0]
    ee7a:	4644      	mov	r4, r8
    ee7c:	e554      	b.n	e928 <_svfprintf_r+0x5c>
    ee7e:	f898 3000 	ldrb.w	r3, [r8]
    ee82:	2b68      	cmp	r3, #104	; 0x68
    ee84:	bf03      	ittte	eq
    ee86:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    ee8a:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    ee8e:	f108 0801 	addeq.w	r8, r8, #1
    ee92:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    ee96:	e572      	b.n	e97e <_svfprintf_r+0xb2>
    ee98:	f898 3000 	ldrb.w	r3, [r8]
    ee9c:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    eea0:	e56d      	b.n	e97e <_svfprintf_r+0xb2>
    eea2:	f898 3000 	ldrb.w	r3, [r8]
    eea6:	2b6c      	cmp	r3, #108	; 0x6c
    eea8:	bf03      	ittte	eq
    eeaa:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    eeae:	f04b 0b20 	orreq.w	fp, fp, #32
    eeb2:	f108 0801 	addeq.w	r8, r8, #1
    eeb6:	f04b 0b10 	orrne.w	fp, fp, #16
    eeba:	e560      	b.n	e97e <_svfprintf_r+0xb2>
    eebc:	9310      	str	r3, [sp, #64]	; 0x40
    eebe:	f04b 0b10 	orr.w	fp, fp, #16
    eec2:	f01b 0120 	ands.w	r1, fp, #32
    eec6:	f000 834a 	beq.w	f55e <_svfprintf_r+0xc92>
    eeca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eecc:	3307      	adds	r3, #7
    eece:	f023 0307 	bic.w	r3, r3, #7
    eed2:	6859      	ldr	r1, [r3, #4]
    eed4:	f853 2b08 	ldr.w	r2, [r3], #8
    eed8:	930e      	str	r3, [sp, #56]	; 0x38
    eeda:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    eede:	2300      	movs	r3, #0
    eee0:	e798      	b.n	ee14 <_svfprintf_r+0x548>
    eee2:	9310      	str	r3, [sp, #64]	; 0x40
    eee4:	f04b 0510 	orr.w	r5, fp, #16
    eee8:	f015 0120 	ands.w	r1, r5, #32
    eeec:	f000 8328 	beq.w	f540 <_svfprintf_r+0xc74>
    eef0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eef2:	3307      	adds	r3, #7
    eef4:	f023 0307 	bic.w	r3, r3, #7
    eef8:	6859      	ldr	r1, [r3, #4]
    eefa:	f853 2b08 	ldr.w	r2, [r3], #8
    eefe:	930e      	str	r3, [sp, #56]	; 0x38
    ef00:	2301      	movs	r3, #1
    ef02:	e787      	b.n	ee14 <_svfprintf_r+0x548>
    ef04:	7fefffff 	.word	0x7fefffff
    ef08:	000154e4 	.word	0x000154e4
    ef0c:	0001505c 	.word	0x0001505c
    ef10:	000154ec 	.word	0x000154ec
    ef14:	f898 3000 	ldrb.w	r3, [r8]
    ef18:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    ef1c:	e52f      	b.n	e97e <_svfprintf_r+0xb2>
    ef1e:	4641      	mov	r1, r8
    ef20:	f811 3b01 	ldrb.w	r3, [r1], #1
    ef24:	2b2a      	cmp	r3, #42	; 0x2a
    ef26:	f001 827f 	beq.w	10428 <_svfprintf_r+0x1b5c>
    ef2a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ef2e:	2a09      	cmp	r2, #9
    ef30:	4688      	mov	r8, r1
    ef32:	bf98      	it	ls
    ef34:	2100      	movls	r1, #0
    ef36:	f201 8176 	bhi.w	10226 <_svfprintf_r+0x195a>
    ef3a:	f818 3b01 	ldrb.w	r3, [r8], #1
    ef3e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ef42:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ef46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ef4a:	2a09      	cmp	r2, #9
    ef4c:	d9f5      	bls.n	ef3a <_svfprintf_r+0x66e>
    ef4e:	9108      	str	r1, [sp, #32]
    ef50:	e517      	b.n	e982 <_svfprintf_r+0xb6>
    ef52:	f898 3000 	ldrb.w	r3, [r8]
    ef56:	f04b 0b01 	orr.w	fp, fp, #1
    ef5a:	e510      	b.n	e97e <_svfprintf_r+0xb2>
    ef5c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    ef60:	2b00      	cmp	r3, #0
    ef62:	f47f ad91 	bne.w	ea88 <_svfprintf_r+0x1bc>
    ef66:	f898 3000 	ldrb.w	r3, [r8]
    ef6a:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    ef6e:	e506      	b.n	e97e <_svfprintf_r+0xb2>
    ef70:	465d      	mov	r5, fp
    ef72:	2b01      	cmp	r3, #1
    ef74:	f000 81ad 	beq.w	f2d2 <_svfprintf_r+0xa06>
    ef78:	2b02      	cmp	r3, #2
    ef7a:	ac58      	add	r4, sp, #352	; 0x160
    ef7c:	d11f      	bne.n	efbe <_svfprintf_r+0x6f2>
    ef7e:	9818      	ldr	r0, [sp, #96]	; 0x60
    ef80:	f002 030f 	and.w	r3, r2, #15
    ef84:	0912      	lsrs	r2, r2, #4
    ef86:	5cc3      	ldrb	r3, [r0, r3]
    ef88:	f804 3d01 	strb.w	r3, [r4, #-1]!
    ef8c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    ef90:	0909      	lsrs	r1, r1, #4
    ef92:	ea52 0301 	orrs.w	r3, r2, r1
    ef96:	d1f3      	bne.n	ef80 <_svfprintf_r+0x6b4>
    ef98:	ab58      	add	r3, sp, #352	; 0x160
    ef9a:	1b1b      	subs	r3, r3, r4
    ef9c:	46ab      	mov	fp, r5
    ef9e:	930a      	str	r3, [sp, #40]	; 0x28
    efa0:	990a      	ldr	r1, [sp, #40]	; 0x28
    efa2:	9808      	ldr	r0, [sp, #32]
    efa4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    efa8:	4281      	cmp	r1, r0
    efaa:	f04f 0300 	mov.w	r3, #0
    efae:	bfb8      	it	lt
    efb0:	4601      	movlt	r1, r0
    efb2:	930d      	str	r3, [sp, #52]	; 0x34
    efb4:	9107      	str	r1, [sp, #28]
    efb6:	9312      	str	r3, [sp, #72]	; 0x48
    efb8:	9316      	str	r3, [sp, #88]	; 0x58
    efba:	9311      	str	r3, [sp, #68]	; 0x44
    efbc:	e66a      	b.n	ec94 <_svfprintf_r+0x3c8>
    efbe:	f002 0307 	and.w	r3, r2, #7
    efc2:	08d2      	lsrs	r2, r2, #3
    efc4:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    efc8:	08c9      	lsrs	r1, r1, #3
    efca:	3330      	adds	r3, #48	; 0x30
    efcc:	ea52 0601 	orrs.w	r6, r2, r1
    efd0:	4620      	mov	r0, r4
    efd2:	f804 3d01 	strb.w	r3, [r4, #-1]!
    efd6:	d1f2      	bne.n	efbe <_svfprintf_r+0x6f2>
    efd8:	07e9      	lsls	r1, r5, #31
    efda:	d5dd      	bpl.n	ef98 <_svfprintf_r+0x6cc>
    efdc:	2b30      	cmp	r3, #48	; 0x30
    efde:	d0db      	beq.n	ef98 <_svfprintf_r+0x6cc>
    efe0:	2330      	movs	r3, #48	; 0x30
    efe2:	3802      	subs	r0, #2
    efe4:	f804 3c01 	strb.w	r3, [r4, #-1]
    efe8:	ab58      	add	r3, sp, #352	; 0x160
    efea:	1a1b      	subs	r3, r3, r0
    efec:	46ab      	mov	fp, r5
    efee:	930a      	str	r3, [sp, #40]	; 0x28
    eff0:	4604      	mov	r4, r0
    eff2:	e7d5      	b.n	efa0 <_svfprintf_r+0x6d4>
    eff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    eff6:	2b65      	cmp	r3, #101	; 0x65
    eff8:	f340 80dc 	ble.w	f1b4 <_svfprintf_r+0x8e8>
    effc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f000:	2200      	movs	r2, #0
    f002:	2300      	movs	r3, #0
    f004:	f7fd fb90 	bl	c728 <__aeabi_dcmpeq>
    f008:	2800      	cmp	r0, #0
    f00a:	f000 81c8 	beq.w	f39e <_svfprintf_r+0xad2>
    f00e:	2301      	movs	r3, #1
    f010:	f8c9 3004 	str.w	r3, [r9, #4]
    f014:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f016:	4abd      	ldr	r2, [pc, #756]	; (f30c <_svfprintf_r+0xa40>)
    f018:	f8c9 2000 	str.w	r2, [r9]
    f01c:	3301      	adds	r3, #1
    f01e:	3601      	adds	r6, #1
    f020:	2b07      	cmp	r3, #7
    f022:	962e      	str	r6, [sp, #184]	; 0xb8
    f024:	932d      	str	r3, [sp, #180]	; 0xb4
    f026:	f300 8539 	bgt.w	fa9c <_svfprintf_r+0x11d0>
    f02a:	f109 0908 	add.w	r9, r9, #8
    f02e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f030:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f032:	4293      	cmp	r3, r2
    f034:	f280 82c2 	bge.w	f5bc <_svfprintf_r+0xcf0>
    f038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f03a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f03c:	441e      	add	r6, r3
    f03e:	e9c9 2300 	strd	r2, r3, [r9]
    f042:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f044:	962e      	str	r6, [sp, #184]	; 0xb8
    f046:	3301      	adds	r3, #1
    f048:	2b07      	cmp	r3, #7
    f04a:	932d      	str	r3, [sp, #180]	; 0xb4
    f04c:	f300 838d 	bgt.w	f76a <_svfprintf_r+0xe9e>
    f050:	f109 0908 	add.w	r9, r9, #8
    f054:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f056:	1e5c      	subs	r4, r3, #1
    f058:	2c00      	cmp	r4, #0
    f05a:	f77f adbc 	ble.w	ebd6 <_svfprintf_r+0x30a>
    f05e:	2c10      	cmp	r4, #16
    f060:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f062:	4dab      	ldr	r5, [pc, #684]	; (f310 <_svfprintf_r+0xa44>)
    f064:	f340 8555 	ble.w	fb12 <_svfprintf_r+0x1246>
    f068:	4632      	mov	r2, r6
    f06a:	2710      	movs	r7, #16
    f06c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f06e:	e005      	b.n	f07c <_svfprintf_r+0x7b0>
    f070:	f109 0908 	add.w	r9, r9, #8
    f074:	3c10      	subs	r4, #16
    f076:	2c10      	cmp	r4, #16
    f078:	f340 854a 	ble.w	fb10 <_svfprintf_r+0x1244>
    f07c:	3301      	adds	r3, #1
    f07e:	3210      	adds	r2, #16
    f080:	2b07      	cmp	r3, #7
    f082:	e9c9 5700 	strd	r5, r7, [r9]
    f086:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f08a:	ddf1      	ble.n	f070 <_svfprintf_r+0x7a4>
    f08c:	aa2c      	add	r2, sp, #176	; 0xb0
    f08e:	4631      	mov	r1, r6
    f090:	4650      	mov	r0, sl
    f092:	f002 fc85 	bl	119a0 <__ssprint_r>
    f096:	2800      	cmp	r0, #0
    f098:	f040 8083 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f09c:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f0a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f0a4:	e7e6      	b.n	f074 <_svfprintf_r+0x7a8>
    f0a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f0a8:	9a07      	ldr	r2, [sp, #28]
    f0aa:	1a9f      	subs	r7, r3, r2
    f0ac:	2f00      	cmp	r7, #0
    f0ae:	f77f ad79 	ble.w	eba4 <_svfprintf_r+0x2d8>
    f0b2:	2f10      	cmp	r7, #16
    f0b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f0b6:	4d96      	ldr	r5, [pc, #600]	; (f310 <_svfprintf_r+0xa44>)
    f0b8:	dd23      	ble.n	f102 <_svfprintf_r+0x836>
    f0ba:	4632      	mov	r2, r6
    f0bc:	4626      	mov	r6, r4
    f0be:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f0c0:	e004      	b.n	f0cc <_svfprintf_r+0x800>
    f0c2:	3f10      	subs	r7, #16
    f0c4:	2f10      	cmp	r7, #16
    f0c6:	f109 0908 	add.w	r9, r9, #8
    f0ca:	dd18      	ble.n	f0fe <_svfprintf_r+0x832>
    f0cc:	3301      	adds	r3, #1
    f0ce:	3210      	adds	r2, #16
    f0d0:	2110      	movs	r1, #16
    f0d2:	2b07      	cmp	r3, #7
    f0d4:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f0d8:	f8c9 5000 	str.w	r5, [r9]
    f0dc:	f8c9 1004 	str.w	r1, [r9, #4]
    f0e0:	ddef      	ble.n	f0c2 <_svfprintf_r+0x7f6>
    f0e2:	aa2c      	add	r2, sp, #176	; 0xb0
    f0e4:	4621      	mov	r1, r4
    f0e6:	4650      	mov	r0, sl
    f0e8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f0ec:	f002 fc58 	bl	119a0 <__ssprint_r>
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d156      	bne.n	f1a2 <_svfprintf_r+0x8d6>
    f0f4:	3f10      	subs	r7, #16
    f0f6:	2f10      	cmp	r7, #16
    f0f8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f0fc:	dce6      	bgt.n	f0cc <_svfprintf_r+0x800>
    f0fe:	4634      	mov	r4, r6
    f100:	4616      	mov	r6, r2
    f102:	3301      	adds	r3, #1
    f104:	443e      	add	r6, r7
    f106:	2b07      	cmp	r3, #7
    f108:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f10c:	f8c9 5000 	str.w	r5, [r9]
    f110:	f8c9 7004 	str.w	r7, [r9, #4]
    f114:	f300 8516 	bgt.w	fb44 <_svfprintf_r+0x1278>
    f118:	9b08      	ldr	r3, [sp, #32]
    f11a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f11c:	1a9f      	subs	r7, r3, r2
    f11e:	2f00      	cmp	r7, #0
    f120:	f109 0908 	add.w	r9, r9, #8
    f124:	f77f ad44 	ble.w	ebb0 <_svfprintf_r+0x2e4>
    f128:	2f10      	cmp	r7, #16
    f12a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f12c:	4d78      	ldr	r5, [pc, #480]	; (f310 <_svfprintf_r+0xa44>)
    f12e:	dd22      	ble.n	f176 <_svfprintf_r+0x8aa>
    f130:	4632      	mov	r2, r6
    f132:	4626      	mov	r6, r4
    f134:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f136:	e004      	b.n	f142 <_svfprintf_r+0x876>
    f138:	3f10      	subs	r7, #16
    f13a:	2f10      	cmp	r7, #16
    f13c:	f109 0908 	add.w	r9, r9, #8
    f140:	dd17      	ble.n	f172 <_svfprintf_r+0x8a6>
    f142:	3301      	adds	r3, #1
    f144:	3210      	adds	r2, #16
    f146:	2110      	movs	r1, #16
    f148:	2b07      	cmp	r3, #7
    f14a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f14e:	f8c9 5000 	str.w	r5, [r9]
    f152:	f8c9 1004 	str.w	r1, [r9, #4]
    f156:	ddef      	ble.n	f138 <_svfprintf_r+0x86c>
    f158:	aa2c      	add	r2, sp, #176	; 0xb0
    f15a:	4621      	mov	r1, r4
    f15c:	4650      	mov	r0, sl
    f15e:	f002 fc1f 	bl	119a0 <__ssprint_r>
    f162:	b9f0      	cbnz	r0, f1a2 <_svfprintf_r+0x8d6>
    f164:	3f10      	subs	r7, #16
    f166:	2f10      	cmp	r7, #16
    f168:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f16c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f170:	dce7      	bgt.n	f142 <_svfprintf_r+0x876>
    f172:	4634      	mov	r4, r6
    f174:	4616      	mov	r6, r2
    f176:	3301      	adds	r3, #1
    f178:	443e      	add	r6, r7
    f17a:	2b07      	cmp	r3, #7
    f17c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f180:	f8c9 5000 	str.w	r5, [r9]
    f184:	f8c9 7004 	str.w	r7, [r9, #4]
    f188:	f300 81cd 	bgt.w	f526 <_svfprintf_r+0xc5a>
    f18c:	f109 0908 	add.w	r9, r9, #8
    f190:	e50e      	b.n	ebb0 <_svfprintf_r+0x2e4>
    f192:	990c      	ldr	r1, [sp, #48]	; 0x30
    f194:	aa2c      	add	r2, sp, #176	; 0xb0
    f196:	4650      	mov	r0, sl
    f198:	f002 fc02 	bl	119a0 <__ssprint_r>
    f19c:	2800      	cmp	r0, #0
    f19e:	f43f ad2e 	beq.w	ebfe <_svfprintf_r+0x332>
    f1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1a4:	2b00      	cmp	r3, #0
    f1a6:	f43f ac99 	beq.w	eadc <_svfprintf_r+0x210>
    f1aa:	990d      	ldr	r1, [sp, #52]	; 0x34
    f1ac:	4650      	mov	r0, sl
    f1ae:	f7fe feb5 	bl	df1c <_free_r>
    f1b2:	e493      	b.n	eadc <_svfprintf_r+0x210>
    f1b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f1b6:	2b01      	cmp	r3, #1
    f1b8:	f340 816e 	ble.w	f498 <_svfprintf_r+0xbcc>
    f1bc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f1be:	f8c9 4000 	str.w	r4, [r9]
    f1c2:	2301      	movs	r3, #1
    f1c4:	441f      	add	r7, r3
    f1c6:	3601      	adds	r6, #1
    f1c8:	2f07      	cmp	r7, #7
    f1ca:	f8c9 3004 	str.w	r3, [r9, #4]
    f1ce:	962e      	str	r6, [sp, #184]	; 0xb8
    f1d0:	972d      	str	r7, [sp, #180]	; 0xb4
    f1d2:	f300 81d9 	bgt.w	f588 <_svfprintf_r+0xcbc>
    f1d6:	f109 0908 	add.w	r9, r9, #8
    f1da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f1dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f1de:	3701      	adds	r7, #1
    f1e0:	441e      	add	r6, r3
    f1e2:	2f07      	cmp	r7, #7
    f1e4:	e9c9 2300 	strd	r2, r3, [r9]
    f1e8:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f1ec:	f300 81d9 	bgt.w	f5a2 <_svfprintf_r+0xcd6>
    f1f0:	f109 0908 	add.w	r9, r9, #8
    f1f4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f1f8:	2200      	movs	r2, #0
    f1fa:	2300      	movs	r3, #0
    f1fc:	f7fd fa94 	bl	c728 <__aeabi_dcmpeq>
    f200:	2800      	cmp	r0, #0
    f202:	f040 8167 	bne.w	f4d4 <_svfprintf_r+0xc08>
    f206:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f208:	3701      	adds	r7, #1
    f20a:	3b01      	subs	r3, #1
    f20c:	3401      	adds	r4, #1
    f20e:	441e      	add	r6, r3
    f210:	2f07      	cmp	r7, #7
    f212:	f8c9 4000 	str.w	r4, [r9]
    f216:	972d      	str	r7, [sp, #180]	; 0xb4
    f218:	f8c9 3004 	str.w	r3, [r9, #4]
    f21c:	962e      	str	r6, [sp, #184]	; 0xb8
    f21e:	f300 814c 	bgt.w	f4ba <_svfprintf_r+0xbee>
    f222:	f109 0908 	add.w	r9, r9, #8
    f226:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f228:	f8c9 3004 	str.w	r3, [r9, #4]
    f22c:	3701      	adds	r7, #1
    f22e:	441e      	add	r6, r3
    f230:	2f07      	cmp	r7, #7
    f232:	ab26      	add	r3, sp, #152	; 0x98
    f234:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f238:	f8c9 3000 	str.w	r3, [r9]
    f23c:	f77f acc9 	ble.w	ebd2 <_svfprintf_r+0x306>
    f240:	990c      	ldr	r1, [sp, #48]	; 0x30
    f242:	aa2c      	add	r2, sp, #176	; 0xb0
    f244:	4650      	mov	r0, sl
    f246:	f002 fbab 	bl	119a0 <__ssprint_r>
    f24a:	2800      	cmp	r0, #0
    f24c:	d1a9      	bne.n	f1a2 <_svfprintf_r+0x8d6>
    f24e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f250:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f254:	e4bf      	b.n	ebd6 <_svfprintf_r+0x30a>
    f256:	2f10      	cmp	r7, #16
    f258:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f25c:	4d2d      	ldr	r5, [pc, #180]	; (f314 <_svfprintf_r+0xa48>)
    f25e:	dd27      	ble.n	f2b0 <_svfprintf_r+0x9e4>
    f260:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    f264:	2610      	movs	r6, #16
    f266:	46d0      	mov	r8, sl
    f268:	46a2      	mov	sl, r4
    f26a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f26c:	e004      	b.n	f278 <_svfprintf_r+0x9ac>
    f26e:	3f10      	subs	r7, #16
    f270:	2f10      	cmp	r7, #16
    f272:	f109 0908 	add.w	r9, r9, #8
    f276:	dd16      	ble.n	f2a6 <_svfprintf_r+0x9da>
    f278:	3201      	adds	r2, #1
    f27a:	3110      	adds	r1, #16
    f27c:	2a07      	cmp	r2, #7
    f27e:	e9c9 5600 	strd	r5, r6, [r9]
    f282:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    f286:	ddf2      	ble.n	f26e <_svfprintf_r+0x9a2>
    f288:	aa2c      	add	r2, sp, #176	; 0xb0
    f28a:	4621      	mov	r1, r4
    f28c:	4640      	mov	r0, r8
    f28e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f292:	f002 fb85 	bl	119a0 <__ssprint_r>
    f296:	2800      	cmp	r0, #0
    f298:	f040 83f2 	bne.w	fa80 <_svfprintf_r+0x11b4>
    f29c:	3f10      	subs	r7, #16
    f29e:	2f10      	cmp	r7, #16
    f2a0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f2a4:	dce8      	bgt.n	f278 <_svfprintf_r+0x9ac>
    f2a6:	4654      	mov	r4, sl
    f2a8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f2aa:	46c2      	mov	sl, r8
    f2ac:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    f2b0:	f8c9 5000 	str.w	r5, [r9]
    f2b4:	3201      	adds	r2, #1
    f2b6:	187e      	adds	r6, r7, r1
    f2b8:	2a07      	cmp	r2, #7
    f2ba:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    f2be:	f8c9 7004 	str.w	r7, [r9, #4]
    f2c2:	f300 83cc 	bgt.w	fa5e <_svfprintf_r+0x1192>
    f2c6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f2ca:	f109 0908 	add.w	r9, r9, #8
    f2ce:	e441      	b.n	eb54 <_svfprintf_r+0x288>
    f2d0:	465d      	mov	r5, fp
    f2d2:	2a0a      	cmp	r2, #10
    f2d4:	f171 0300 	sbcs.w	r3, r1, #0
    f2d8:	f080 8329 	bcs.w	f92e <_svfprintf_r+0x1062>
    f2dc:	3230      	adds	r2, #48	; 0x30
    f2de:	2301      	movs	r3, #1
    f2e0:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    f2e4:	46ab      	mov	fp, r5
    f2e6:	930a      	str	r3, [sp, #40]	; 0x28
    f2e8:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f2ec:	e658      	b.n	efa0 <_svfprintf_r+0x6d4>
    f2ee:	990c      	ldr	r1, [sp, #48]	; 0x30
    f2f0:	931e      	str	r3, [sp, #120]	; 0x78
    f2f2:	aa2c      	add	r2, sp, #176	; 0xb0
    f2f4:	4650      	mov	r0, sl
    f2f6:	f002 fb53 	bl	119a0 <__ssprint_r>
    f2fa:	2800      	cmp	r0, #0
    f2fc:	f47f af51 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f300:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f302:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f304:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f308:	e436      	b.n	eb78 <_svfprintf_r+0x2ac>
    f30a:	bf00      	nop
    f30c:	00013d34 	.word	0x00013d34
    f310:	0001552c 	.word	0x0001552c
    f314:	0001551c 	.word	0x0001551c
    f318:	990c      	ldr	r1, [sp, #48]	; 0x30
    f31a:	aa2c      	add	r2, sp, #176	; 0xb0
    f31c:	4650      	mov	r0, sl
    f31e:	f002 fb3f 	bl	119a0 <__ssprint_r>
    f322:	2800      	cmp	r0, #0
    f324:	f47f af3d 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f328:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f32a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f32e:	e435      	b.n	eb9c <_svfprintf_r+0x2d0>
    f330:	2c10      	cmp	r4, #16
    f332:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f334:	4db8      	ldr	r5, [pc, #736]	; (f618 <_svfprintf_r+0xd4c>)
    f336:	dd1f      	ble.n	f378 <_svfprintf_r+0xaac>
    f338:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f33c:	2710      	movs	r7, #16
    f33e:	e004      	b.n	f34a <_svfprintf_r+0xa7e>
    f340:	3c10      	subs	r4, #16
    f342:	2c10      	cmp	r4, #16
    f344:	f109 0908 	add.w	r9, r9, #8
    f348:	dd16      	ble.n	f378 <_svfprintf_r+0xaac>
    f34a:	3301      	adds	r3, #1
    f34c:	3610      	adds	r6, #16
    f34e:	2b07      	cmp	r3, #7
    f350:	e9c9 5700 	strd	r5, r7, [r9]
    f354:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f358:	ddf2      	ble.n	f340 <_svfprintf_r+0xa74>
    f35a:	aa2c      	add	r2, sp, #176	; 0xb0
    f35c:	4659      	mov	r1, fp
    f35e:	4650      	mov	r0, sl
    f360:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f364:	f002 fb1c 	bl	119a0 <__ssprint_r>
    f368:	2800      	cmp	r0, #0
    f36a:	f47f af1a 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f36e:	3c10      	subs	r4, #16
    f370:	2c10      	cmp	r4, #16
    f372:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    f376:	dce8      	bgt.n	f34a <_svfprintf_r+0xa7e>
    f378:	3301      	adds	r3, #1
    f37a:	4426      	add	r6, r4
    f37c:	2b07      	cmp	r3, #7
    f37e:	e9c9 5400 	strd	r5, r4, [r9]
    f382:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f386:	f77f ac2f 	ble.w	ebe8 <_svfprintf_r+0x31c>
    f38a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f38c:	aa2c      	add	r2, sp, #176	; 0xb0
    f38e:	4650      	mov	r0, sl
    f390:	f002 fb06 	bl	119a0 <__ssprint_r>
    f394:	2800      	cmp	r0, #0
    f396:	f47f af04 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f39a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f39c:	e424      	b.n	ebe8 <_svfprintf_r+0x31c>
    f39e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f3a0:	2900      	cmp	r1, #0
    f3a2:	f340 8327 	ble.w	f9f4 <_svfprintf_r+0x1128>
    f3a6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f3a8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f3aa:	429d      	cmp	r5, r3
    f3ac:	bfa8      	it	ge
    f3ae:	461d      	movge	r5, r3
    f3b0:	2d00      	cmp	r5, #0
    f3b2:	dd0b      	ble.n	f3cc <_svfprintf_r+0xb00>
    f3b4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f3b6:	3301      	adds	r3, #1
    f3b8:	442e      	add	r6, r5
    f3ba:	2b07      	cmp	r3, #7
    f3bc:	e9c9 4500 	strd	r4, r5, [r9]
    f3c0:	962e      	str	r6, [sp, #184]	; 0xb8
    f3c2:	932d      	str	r3, [sp, #180]	; 0xb4
    f3c4:	f300 86dd 	bgt.w	10182 <_svfprintf_r+0x18b6>
    f3c8:	f109 0908 	add.w	r9, r9, #8
    f3cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f3ce:	2d00      	cmp	r5, #0
    f3d0:	bfa8      	it	ge
    f3d2:	1b7f      	subge	r7, r7, r5
    f3d4:	2f00      	cmp	r7, #0
    f3d6:	f300 81f4 	bgt.w	f7c2 <_svfprintf_r+0xef6>
    f3da:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f3dc:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f3e0:	4423      	add	r3, r4
    f3e2:	930a      	str	r3, [sp, #40]	; 0x28
    f3e4:	f040 8214 	bne.w	f810 <_svfprintf_r+0xf44>
    f3e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f3ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f3ec:	4293      	cmp	r3, r2
    f3ee:	db03      	blt.n	f3f8 <_svfprintf_r+0xb2c>
    f3f0:	f01b 0f01 	tst.w	fp, #1
    f3f4:	f000 84a5 	beq.w	fd42 <_svfprintf_r+0x1476>
    f3f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f3fa:	9919      	ldr	r1, [sp, #100]	; 0x64
    f3fc:	4416      	add	r6, r2
    f3fe:	e9c9 1200 	strd	r1, r2, [r9]
    f402:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f404:	962e      	str	r6, [sp, #184]	; 0xb8
    f406:	3201      	adds	r2, #1
    f408:	2a07      	cmp	r2, #7
    f40a:	922d      	str	r2, [sp, #180]	; 0xb4
    f40c:	f300 86c6 	bgt.w	1019c <_svfprintf_r+0x18d0>
    f410:	f109 0908 	add.w	r9, r9, #8
    f414:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f416:	18a5      	adds	r5, r4, r2
    f418:	1ad4      	subs	r4, r2, r3
    f41a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f41c:	1aed      	subs	r5, r5, r3
    f41e:	42a5      	cmp	r5, r4
    f420:	bfa8      	it	ge
    f422:	4625      	movge	r5, r4
    f424:	2d00      	cmp	r5, #0
    f426:	dd0d      	ble.n	f444 <_svfprintf_r+0xb78>
    f428:	f8c9 3000 	str.w	r3, [r9]
    f42c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f42e:	f8c9 5004 	str.w	r5, [r9, #4]
    f432:	3301      	adds	r3, #1
    f434:	442e      	add	r6, r5
    f436:	2b07      	cmp	r3, #7
    f438:	962e      	str	r6, [sp, #184]	; 0xb8
    f43a:	932d      	str	r3, [sp, #180]	; 0xb4
    f43c:	f300 86be 	bgt.w	101bc <_svfprintf_r+0x18f0>
    f440:	f109 0908 	add.w	r9, r9, #8
    f444:	2d00      	cmp	r5, #0
    f446:	bfa8      	it	ge
    f448:	1b64      	subge	r4, r4, r5
    f44a:	2c00      	cmp	r4, #0
    f44c:	f77f abc3 	ble.w	ebd6 <_svfprintf_r+0x30a>
    f450:	2c10      	cmp	r4, #16
    f452:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f454:	4d71      	ldr	r5, [pc, #452]	; (f61c <_svfprintf_r+0xd50>)
    f456:	f340 835c 	ble.w	fb12 <_svfprintf_r+0x1246>
    f45a:	4632      	mov	r2, r6
    f45c:	2710      	movs	r7, #16
    f45e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f460:	e005      	b.n	f46e <_svfprintf_r+0xba2>
    f462:	f109 0908 	add.w	r9, r9, #8
    f466:	3c10      	subs	r4, #16
    f468:	2c10      	cmp	r4, #16
    f46a:	f340 8351 	ble.w	fb10 <_svfprintf_r+0x1244>
    f46e:	3301      	adds	r3, #1
    f470:	3210      	adds	r2, #16
    f472:	2b07      	cmp	r3, #7
    f474:	e9c9 5700 	strd	r5, r7, [r9]
    f478:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f47c:	ddf1      	ble.n	f462 <_svfprintf_r+0xb96>
    f47e:	aa2c      	add	r2, sp, #176	; 0xb0
    f480:	4631      	mov	r1, r6
    f482:	4650      	mov	r0, sl
    f484:	f002 fa8c 	bl	119a0 <__ssprint_r>
    f488:	2800      	cmp	r0, #0
    f48a:	f47f ae8a 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f48e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f492:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f496:	e7e6      	b.n	f466 <_svfprintf_r+0xb9a>
    f498:	f01b 0f01 	tst.w	fp, #1
    f49c:	f47f ae8e 	bne.w	f1bc <_svfprintf_r+0x8f0>
    f4a0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f4a2:	f8c9 4000 	str.w	r4, [r9]
    f4a6:	2301      	movs	r3, #1
    f4a8:	441f      	add	r7, r3
    f4aa:	3601      	adds	r6, #1
    f4ac:	2f07      	cmp	r7, #7
    f4ae:	f8c9 3004 	str.w	r3, [r9, #4]
    f4b2:	962e      	str	r6, [sp, #184]	; 0xb8
    f4b4:	972d      	str	r7, [sp, #180]	; 0xb4
    f4b6:	f77f aeb4 	ble.w	f222 <_svfprintf_r+0x956>
    f4ba:	990c      	ldr	r1, [sp, #48]	; 0x30
    f4bc:	aa2c      	add	r2, sp, #176	; 0xb0
    f4be:	4650      	mov	r0, sl
    f4c0:	f002 fa6e 	bl	119a0 <__ssprint_r>
    f4c4:	2800      	cmp	r0, #0
    f4c6:	f47f ae6c 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f4ca:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f4ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f4d2:	e6a8      	b.n	f226 <_svfprintf_r+0x95a>
    f4d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f4d6:	1e5c      	subs	r4, r3, #1
    f4d8:	2c00      	cmp	r4, #0
    f4da:	f77f aea4 	ble.w	f226 <_svfprintf_r+0x95a>
    f4de:	2c10      	cmp	r4, #16
    f4e0:	4d4e      	ldr	r5, [pc, #312]	; (f61c <_svfprintf_r+0xd50>)
    f4e2:	f340 834c 	ble.w	fb7e <_svfprintf_r+0x12b2>
    f4e6:	4632      	mov	r2, r6
    f4e8:	2310      	movs	r3, #16
    f4ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f4ec:	e005      	b.n	f4fa <_svfprintf_r+0xc2e>
    f4ee:	f109 0908 	add.w	r9, r9, #8
    f4f2:	3c10      	subs	r4, #16
    f4f4:	2c10      	cmp	r4, #16
    f4f6:	f340 8341 	ble.w	fb7c <_svfprintf_r+0x12b0>
    f4fa:	3701      	adds	r7, #1
    f4fc:	3210      	adds	r2, #16
    f4fe:	2f07      	cmp	r7, #7
    f500:	e9c9 5300 	strd	r5, r3, [r9]
    f504:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    f508:	ddf1      	ble.n	f4ee <_svfprintf_r+0xc22>
    f50a:	aa2c      	add	r2, sp, #176	; 0xb0
    f50c:	4631      	mov	r1, r6
    f50e:	4650      	mov	r0, sl
    f510:	f002 fa46 	bl	119a0 <__ssprint_r>
    f514:	2800      	cmp	r0, #0
    f516:	f47f ae44 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f51a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    f51e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f522:	2310      	movs	r3, #16
    f524:	e7e5      	b.n	f4f2 <_svfprintf_r+0xc26>
    f526:	990c      	ldr	r1, [sp, #48]	; 0x30
    f528:	aa2c      	add	r2, sp, #176	; 0xb0
    f52a:	4650      	mov	r0, sl
    f52c:	f002 fa38 	bl	119a0 <__ssprint_r>
    f530:	2800      	cmp	r0, #0
    f532:	f47f ae36 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f536:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f538:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f53c:	f7ff bb38 	b.w	ebb0 <_svfprintf_r+0x2e4>
    f540:	f015 0310 	ands.w	r3, r5, #16
    f544:	d160      	bne.n	f608 <_svfprintf_r+0xd3c>
    f546:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    f54a:	f000 8373 	beq.w	fc34 <_svfprintf_r+0x1368>
    f54e:	980e      	ldr	r0, [sp, #56]	; 0x38
    f550:	f850 2b04 	ldr.w	r2, [r0], #4
    f554:	900e      	str	r0, [sp, #56]	; 0x38
    f556:	4619      	mov	r1, r3
    f558:	b292      	uxth	r2, r2
    f55a:	2301      	movs	r3, #1
    f55c:	e45a      	b.n	ee14 <_svfprintf_r+0x548>
    f55e:	f01b 0310 	ands.w	r3, fp, #16
    f562:	d168      	bne.n	f636 <_svfprintf_r+0xd6a>
    f564:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    f568:	f000 8356 	beq.w	fc18 <_svfprintf_r+0x134c>
    f56c:	980e      	ldr	r0, [sp, #56]	; 0x38
    f56e:	f850 2b04 	ldr.w	r2, [r0], #4
    f572:	900e      	str	r0, [sp, #56]	; 0x38
    f574:	4619      	mov	r1, r3
    f576:	b292      	uxth	r2, r2
    f578:	e4af      	b.n	eeda <_svfprintf_r+0x60e>
    f57a:	4252      	negs	r2, r2
    f57c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f580:	465d      	mov	r5, fp
    f582:	202d      	movs	r0, #45	; 0x2d
    f584:	2301      	movs	r3, #1
    f586:	e446      	b.n	ee16 <_svfprintf_r+0x54a>
    f588:	990c      	ldr	r1, [sp, #48]	; 0x30
    f58a:	aa2c      	add	r2, sp, #176	; 0xb0
    f58c:	4650      	mov	r0, sl
    f58e:	f002 fa07 	bl	119a0 <__ssprint_r>
    f592:	2800      	cmp	r0, #0
    f594:	f47f ae05 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f598:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f59c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5a0:	e61b      	b.n	f1da <_svfprintf_r+0x90e>
    f5a2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5a4:	aa2c      	add	r2, sp, #176	; 0xb0
    f5a6:	4650      	mov	r0, sl
    f5a8:	f002 f9fa 	bl	119a0 <__ssprint_r>
    f5ac:	2800      	cmp	r0, #0
    f5ae:	f47f adf8 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f5b2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f5b6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5ba:	e61b      	b.n	f1f4 <_svfprintf_r+0x928>
    f5bc:	f01b 0f01 	tst.w	fp, #1
    f5c0:	f43f ab09 	beq.w	ebd6 <_svfprintf_r+0x30a>
    f5c4:	e538      	b.n	f038 <_svfprintf_r+0x76c>
    f5c6:	930e      	str	r3, [sp, #56]	; 0x38
    f5c8:	f898 3000 	ldrb.w	r3, [r8]
    f5cc:	f7ff b9d7 	b.w	e97e <_svfprintf_r+0xb2>
    f5d0:	ac58      	add	r4, sp, #352	; 0x160
    f5d2:	e4e5      	b.n	efa0 <_svfprintf_r+0x6d4>
    f5d4:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f5d8:	f040 83bd 	bne.w	fd56 <_svfprintf_r+0x148a>
    f5dc:	f853 2b04 	ldr.w	r2, [r3], #4
    f5e0:	930e      	str	r3, [sp, #56]	; 0x38
    f5e2:	17d1      	asrs	r1, r2, #31
    f5e4:	460b      	mov	r3, r1
    f5e6:	f7ff bbc4 	b.w	ed72 <_svfprintf_r+0x4a6>
    f5ea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f5ec:	2b00      	cmp	r3, #0
    f5ee:	f43f aa4b 	beq.w	ea88 <_svfprintf_r+0x1bc>
    f5f2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    f5f4:	781b      	ldrb	r3, [r3, #0]
    f5f6:	2b00      	cmp	r3, #0
    f5f8:	f43f aa46 	beq.w	ea88 <_svfprintf_r+0x1bc>
    f5fc:	f898 3000 	ldrb.w	r3, [r8]
    f600:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    f604:	f7ff b9bb 	b.w	e97e <_svfprintf_r+0xb2>
    f608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f60a:	f853 2b04 	ldr.w	r2, [r3], #4
    f60e:	930e      	str	r3, [sp, #56]	; 0x38
    f610:	2301      	movs	r3, #1
    f612:	f7ff bbff 	b.w	ee14 <_svfprintf_r+0x548>
    f616:	bf00      	nop
    f618:	0001551c 	.word	0x0001551c
    f61c:	0001552c 	.word	0x0001552c
    f620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f622:	9809      	ldr	r0, [sp, #36]	; 0x24
    f624:	f853 1b04 	ldr.w	r1, [r3], #4
    f628:	930e      	str	r3, [sp, #56]	; 0x38
    f62a:	17c2      	asrs	r2, r0, #31
    f62c:	e9c1 0200 	strd	r0, r2, [r1]
    f630:	4644      	mov	r4, r8
    f632:	f7ff b979 	b.w	e928 <_svfprintf_r+0x5c>
    f636:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f638:	f853 2b04 	ldr.w	r2, [r3], #4
    f63c:	930e      	str	r3, [sp, #56]	; 0x38
    f63e:	e44c      	b.n	eeda <_svfprintf_r+0x60e>
    f640:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f644:	4602      	mov	r2, r0
    f646:	460b      	mov	r3, r1
    f648:	f7fd f8a0 	bl	c78c <__aeabi_dcmpun>
    f64c:	2800      	cmp	r0, #0
    f64e:	f040 8675 	bne.w	1033c <_svfprintf_r+0x1a70>
    f652:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f654:	2b61      	cmp	r3, #97	; 0x61
    f656:	f000 855b 	beq.w	10110 <_svfprintf_r+0x1844>
    f65a:	2b41      	cmp	r3, #65	; 0x41
    f65c:	f000 85ac 	beq.w	101b8 <_svfprintf_r+0x18ec>
    f660:	9b08      	ldr	r3, [sp, #32]
    f662:	3301      	adds	r3, #1
    f664:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f666:	f023 0320 	bic.w	r3, r3, #32
    f66a:	9307      	str	r3, [sp, #28]
    f66c:	f000 8463 	beq.w	ff36 <_svfprintf_r+0x166a>
    f670:	2b47      	cmp	r3, #71	; 0x47
    f672:	d104      	bne.n	f67e <_svfprintf_r+0xdb2>
    f674:	9b08      	ldr	r3, [sp, #32]
    f676:	2b00      	cmp	r3, #0
    f678:	bf08      	it	eq
    f67a:	2301      	moveq	r3, #1
    f67c:	9308      	str	r3, [sp, #32]
    f67e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f682:	460a      	mov	r2, r1
    f684:	2a00      	cmp	r2, #0
    f686:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    f68a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    f68e:	f2c0 85e1 	blt.w	10254 <_svfprintf_r+0x1988>
    f692:	469b      	mov	fp, r3
    f694:	2300      	movs	r3, #0
    f696:	4616      	mov	r6, r2
    f698:	931e      	str	r3, [sp, #120]	; 0x78
    f69a:	4607      	mov	r7, r0
    f69c:	930d      	str	r3, [sp, #52]	; 0x34
    f69e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f6a0:	3b41      	subs	r3, #65	; 0x41
    f6a2:	2b25      	cmp	r3, #37	; 0x25
    f6a4:	f200 8367 	bhi.w	fd76 <_svfprintf_r+0x14aa>
    f6a8:	e8df f013 	tbh	[pc, r3, lsl #1]
    f6ac:	03650452 	.word	0x03650452
    f6b0:	03650365 	.word	0x03650365
    f6b4:	044e0449 	.word	0x044e0449
    f6b8:	03650365 	.word	0x03650365
    f6bc:	03650365 	.word	0x03650365
    f6c0:	03650365 	.word	0x03650365
    f6c4:	03650365 	.word	0x03650365
    f6c8:	03650365 	.word	0x03650365
    f6cc:	03650365 	.word	0x03650365
    f6d0:	03650365 	.word	0x03650365
    f6d4:	03650365 	.word	0x03650365
    f6d8:	03650365 	.word	0x03650365
    f6dc:	03650365 	.word	0x03650365
    f6e0:	03650365 	.word	0x03650365
    f6e4:	03650365 	.word	0x03650365
    f6e8:	03650365 	.word	0x03650365
    f6ec:	03650365 	.word	0x03650365
    f6f0:	03650365 	.word	0x03650365
    f6f4:	044e0449 	.word	0x044e0449
    f6f8:	9310      	str	r3, [sp, #64]	; 0x40
    f6fa:	465d      	mov	r5, fp
    f6fc:	f7ff bbf4 	b.w	eee8 <_svfprintf_r+0x61c>
    f700:	9310      	str	r3, [sp, #64]	; 0x40
    f702:	4bb7      	ldr	r3, [pc, #732]	; (f9e0 <_svfprintf_r+0x1114>)
    f704:	9318      	str	r3, [sp, #96]	; 0x60
    f706:	f01b 0120 	ands.w	r1, fp, #32
    f70a:	f000 80fc 	beq.w	f906 <_svfprintf_r+0x103a>
    f70e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f710:	3307      	adds	r3, #7
    f712:	f023 0307 	bic.w	r3, r3, #7
    f716:	6859      	ldr	r1, [r3, #4]
    f718:	f853 2b08 	ldr.w	r2, [r3], #8
    f71c:	930e      	str	r3, [sp, #56]	; 0x38
    f71e:	f01b 0f01 	tst.w	fp, #1
    f722:	d00a      	beq.n	f73a <_svfprintf_r+0xe6e>
    f724:	ea52 0301 	orrs.w	r3, r2, r1
    f728:	d007      	beq.n	f73a <_svfprintf_r+0xe6e>
    f72a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f72c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    f730:	2330      	movs	r3, #48	; 0x30
    f732:	f04b 0b02 	orr.w	fp, fp, #2
    f736:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    f73a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f73e:	2302      	movs	r3, #2
    f740:	f7ff bb68 	b.w	ee14 <_svfprintf_r+0x548>
    f744:	9310      	str	r3, [sp, #64]	; 0x40
    f746:	f7ff bbbc 	b.w	eec2 <_svfprintf_r+0x5f6>
    f74a:	9310      	str	r3, [sp, #64]	; 0x40
    f74c:	4ba5      	ldr	r3, [pc, #660]	; (f9e4 <_svfprintf_r+0x1118>)
    f74e:	9318      	str	r3, [sp, #96]	; 0x60
    f750:	e7d9      	b.n	f706 <_svfprintf_r+0xe3a>
    f752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f754:	2101      	movs	r1, #1
    f756:	f853 2b04 	ldr.w	r2, [r3], #4
    f75a:	9107      	str	r1, [sp, #28]
    f75c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    f760:	930e      	str	r3, [sp, #56]	; 0x38
    f762:	910a      	str	r1, [sp, #40]	; 0x28
    f764:	ac3f      	add	r4, sp, #252	; 0xfc
    f766:	f7ff babb 	b.w	ece0 <_svfprintf_r+0x414>
    f76a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f76c:	aa2c      	add	r2, sp, #176	; 0xb0
    f76e:	4650      	mov	r0, sl
    f770:	f002 f916 	bl	119a0 <__ssprint_r>
    f774:	2800      	cmp	r0, #0
    f776:	f47f ad14 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f77a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f77c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f780:	e468      	b.n	f054 <_svfprintf_r+0x788>
    f782:	2140      	movs	r1, #64	; 0x40
    f784:	4650      	mov	r0, sl
    f786:	f7fd fb59 	bl	ce3c <_malloc_r>
    f78a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f78c:	6018      	str	r0, [r3, #0]
    f78e:	6118      	str	r0, [r3, #16]
    f790:	2800      	cmp	r0, #0
    f792:	f000 8660 	beq.w	10456 <_svfprintf_r+0x1b8a>
    f796:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f798:	2340      	movs	r3, #64	; 0x40
    f79a:	6153      	str	r3, [r2, #20]
    f79c:	f7ff b8b2 	b.w	e904 <_svfprintf_r+0x38>
    f7a0:	9b08      	ldr	r3, [sp, #32]
    f7a2:	940d      	str	r4, [sp, #52]	; 0x34
    f7a4:	2b06      	cmp	r3, #6
    f7a6:	4621      	mov	r1, r4
    f7a8:	bf28      	it	cs
    f7aa:	2306      	movcs	r3, #6
    f7ac:	9408      	str	r4, [sp, #32]
    f7ae:	4622      	mov	r2, r4
    f7b0:	9307      	str	r3, [sp, #28]
    f7b2:	4c8d      	ldr	r4, [pc, #564]	; (f9e8 <_svfprintf_r+0x111c>)
    f7b4:	970e      	str	r7, [sp, #56]	; 0x38
    f7b6:	930a      	str	r3, [sp, #40]	; 0x28
    f7b8:	9112      	str	r1, [sp, #72]	; 0x48
    f7ba:	9116      	str	r1, [sp, #88]	; 0x58
    f7bc:	9111      	str	r1, [sp, #68]	; 0x44
    f7be:	f7ff ba69 	b.w	ec94 <_svfprintf_r+0x3c8>
    f7c2:	2f10      	cmp	r7, #16
    f7c4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f7c6:	4d89      	ldr	r5, [pc, #548]	; (f9ec <_svfprintf_r+0x1120>)
    f7c8:	f340 8245 	ble.w	fc56 <_svfprintf_r+0x138a>
    f7cc:	4632      	mov	r2, r6
    f7ce:	4626      	mov	r6, r4
    f7d0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f7d2:	e005      	b.n	f7e0 <_svfprintf_r+0xf14>
    f7d4:	f109 0908 	add.w	r9, r9, #8
    f7d8:	3f10      	subs	r7, #16
    f7da:	2f10      	cmp	r7, #16
    f7dc:	f340 8239 	ble.w	fc52 <_svfprintf_r+0x1386>
    f7e0:	3301      	adds	r3, #1
    f7e2:	3210      	adds	r2, #16
    f7e4:	2110      	movs	r1, #16
    f7e6:	2b07      	cmp	r3, #7
    f7e8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f7ec:	f8c9 5000 	str.w	r5, [r9]
    f7f0:	f8c9 1004 	str.w	r1, [r9, #4]
    f7f4:	ddee      	ble.n	f7d4 <_svfprintf_r+0xf08>
    f7f6:	aa2c      	add	r2, sp, #176	; 0xb0
    f7f8:	4621      	mov	r1, r4
    f7fa:	4650      	mov	r0, sl
    f7fc:	f002 f8d0 	bl	119a0 <__ssprint_r>
    f800:	2800      	cmp	r0, #0
    f802:	f47f acce 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f806:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f80a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f80e:	e7e3      	b.n	f7d8 <_svfprintf_r+0xf0c>
    f810:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f812:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f814:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    f818:	464a      	mov	r2, r9
    f81a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    f81e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    f822:	18e3      	adds	r3, r4, r3
    f824:	9308      	str	r3, [sp, #32]
    f826:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    f828:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    f82c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    f830:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f832:	9410      	str	r4, [sp, #64]	; 0x40
    f834:	4631      	mov	r1, r6
    f836:	f1b9 0f00 	cmp.w	r9, #0
    f83a:	d02e      	beq.n	f89a <_svfprintf_r+0xfce>
    f83c:	bb83      	cbnz	r3, f8a0 <_svfprintf_r+0xfd4>
    f83e:	3f01      	subs	r7, #1
    f840:	f109 39ff 	add.w	r9, r9, #4294967295
    f844:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    f846:	e9c2 3b00 	strd	r3, fp, [r2]
    f84a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f84c:	3301      	adds	r3, #1
    f84e:	4459      	add	r1, fp
    f850:	2b07      	cmp	r3, #7
    f852:	912e      	str	r1, [sp, #184]	; 0xb8
    f854:	932d      	str	r3, [sp, #180]	; 0xb4
    f856:	dc5f      	bgt.n	f918 <_svfprintf_r+0x104c>
    f858:	3208      	adds	r2, #8
    f85a:	9b08      	ldr	r3, [sp, #32]
    f85c:	7838      	ldrb	r0, [r7, #0]
    f85e:	1b5b      	subs	r3, r3, r5
    f860:	4283      	cmp	r3, r0
    f862:	bfa8      	it	ge
    f864:	4603      	movge	r3, r0
    f866:	2b00      	cmp	r3, #0
    f868:	461e      	mov	r6, r3
    f86a:	dd0b      	ble.n	f884 <_svfprintf_r+0xfb8>
    f86c:	982d      	ldr	r0, [sp, #180]	; 0xb4
    f86e:	3001      	adds	r0, #1
    f870:	4419      	add	r1, r3
    f872:	2807      	cmp	r0, #7
    f874:	e9c2 5300 	strd	r5, r3, [r2]
    f878:	912e      	str	r1, [sp, #184]	; 0xb8
    f87a:	902d      	str	r0, [sp, #180]	; 0xb4
    f87c:	f300 8156 	bgt.w	fb2c <_svfprintf_r+0x1260>
    f880:	7838      	ldrb	r0, [r7, #0]
    f882:	3208      	adds	r2, #8
    f884:	2e00      	cmp	r6, #0
    f886:	bfac      	ite	ge
    f888:	1b84      	subge	r4, r0, r6
    f88a:	4604      	movlt	r4, r0
    f88c:	2c00      	cmp	r4, #0
    f88e:	dc0b      	bgt.n	f8a8 <_svfprintf_r+0xfdc>
    f890:	4405      	add	r5, r0
    f892:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f894:	f1b9 0f00 	cmp.w	r9, #0
    f898:	d1d0      	bne.n	f83c <_svfprintf_r+0xf70>
    f89a:	2b00      	cmp	r3, #0
    f89c:	f000 83d4 	beq.w	10048 <_svfprintf_r+0x177c>
    f8a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f8a2:	3b01      	subs	r3, #1
    f8a4:	9312      	str	r3, [sp, #72]	; 0x48
    f8a6:	e7cd      	b.n	f844 <_svfprintf_r+0xf78>
    f8a8:	2c10      	cmp	r4, #16
    f8aa:	982d      	ldr	r0, [sp, #180]	; 0xb4
    f8ac:	dd1d      	ble.n	f8ea <_svfprintf_r+0x101e>
    f8ae:	2610      	movs	r6, #16
    f8b0:	e004      	b.n	f8bc <_svfprintf_r+0xff0>
    f8b2:	3c10      	subs	r4, #16
    f8b4:	2c10      	cmp	r4, #16
    f8b6:	f102 0208 	add.w	r2, r2, #8
    f8ba:	dd16      	ble.n	f8ea <_svfprintf_r+0x101e>
    f8bc:	3001      	adds	r0, #1
    f8be:	4b4b      	ldr	r3, [pc, #300]	; (f9ec <_svfprintf_r+0x1120>)
    f8c0:	3110      	adds	r1, #16
    f8c2:	2807      	cmp	r0, #7
    f8c4:	e9c2 3600 	strd	r3, r6, [r2]
    f8c8:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    f8cc:	ddf1      	ble.n	f8b2 <_svfprintf_r+0xfe6>
    f8ce:	aa2c      	add	r2, sp, #176	; 0xb0
    f8d0:	4641      	mov	r1, r8
    f8d2:	4650      	mov	r0, sl
    f8d4:	f002 f864 	bl	119a0 <__ssprint_r>
    f8d8:	2800      	cmp	r0, #0
    f8da:	f47f ac62 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f8de:	3c10      	subs	r4, #16
    f8e0:	2c10      	cmp	r4, #16
    f8e2:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    f8e6:	aa2f      	add	r2, sp, #188	; 0xbc
    f8e8:	dce8      	bgt.n	f8bc <_svfprintf_r+0xff0>
    f8ea:	3001      	adds	r0, #1
    f8ec:	4b3f      	ldr	r3, [pc, #252]	; (f9ec <_svfprintf_r+0x1120>)
    f8ee:	6054      	str	r4, [r2, #4]
    f8f0:	4421      	add	r1, r4
    f8f2:	2807      	cmp	r0, #7
    f8f4:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    f8f8:	6013      	str	r3, [r2, #0]
    f8fa:	f300 83fb 	bgt.w	100f4 <_svfprintf_r+0x1828>
    f8fe:	7838      	ldrb	r0, [r7, #0]
    f900:	3208      	adds	r2, #8
    f902:	4405      	add	r5, r0
    f904:	e7c5      	b.n	f892 <_svfprintf_r+0xfc6>
    f906:	f01b 0310 	ands.w	r3, fp, #16
    f90a:	f000 80bc 	beq.w	fa86 <_svfprintf_r+0x11ba>
    f90e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f910:	f853 2b04 	ldr.w	r2, [r3], #4
    f914:	930e      	str	r3, [sp, #56]	; 0x38
    f916:	e702      	b.n	f71e <_svfprintf_r+0xe52>
    f918:	aa2c      	add	r2, sp, #176	; 0xb0
    f91a:	4641      	mov	r1, r8
    f91c:	4650      	mov	r0, sl
    f91e:	f002 f83f 	bl	119a0 <__ssprint_r>
    f922:	2800      	cmp	r0, #0
    f924:	f47f ac3d 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    f928:	992e      	ldr	r1, [sp, #184]	; 0xb8
    f92a:	aa2f      	add	r2, sp, #188	; 0xbc
    f92c:	e795      	b.n	f85a <_svfprintf_r+0xf8e>
    f92e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    f932:	4b2f      	ldr	r3, [pc, #188]	; (f9f0 <_svfprintf_r+0x1124>)
    f934:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    f938:	f8cd 801c 	str.w	r8, [sp, #28]
    f93c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    f940:	f04f 0c00 	mov.w	ip, #0
    f944:	ac58      	add	r4, sp, #352	; 0x160
    f946:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    f94a:	950a      	str	r5, [sp, #40]	; 0x28
    f94c:	e005      	b.n	f95a <_svfprintf_r+0x108e>
    f94e:	2a0a      	cmp	r2, #10
    f950:	f171 0100 	sbcs.w	r1, r1, #0
    f954:	d334      	bcc.n	f9c0 <_svfprintf_r+0x10f4>
    f956:	4642      	mov	r2, r8
    f958:	4631      	mov	r1, r6
    f95a:	1850      	adds	r0, r2, r1
    f95c:	f140 0000 	adc.w	r0, r0, #0
    f960:	fba3 5600 	umull	r5, r6, r3, r0
    f964:	f026 0503 	bic.w	r5, r6, #3
    f968:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    f96c:	1b40      	subs	r0, r0, r5
    f96e:	1a15      	subs	r5, r2, r0
    f970:	f161 0e00 	sbc.w	lr, r1, #0
    f974:	fb0b f605 	mul.w	r6, fp, r5
    f978:	fb03 660e 	mla	r6, r3, lr, r6
    f97c:	fba5 8503 	umull	r8, r5, r5, r3
    f980:	442e      	add	r6, r5
    f982:	f008 0e01 	and.w	lr, r8, #1
    f986:	2505      	movs	r5, #5
    f988:	fbae 5e05 	umull	r5, lr, lr, r5
    f98c:	182d      	adds	r5, r5, r0
    f98e:	ea4f 0858 	mov.w	r8, r8, lsr #1
    f992:	3530      	adds	r5, #48	; 0x30
    f994:	f804 5c01 	strb.w	r5, [r4, #-1]
    f998:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    f99c:	f10c 0c01 	add.w	ip, ip, #1
    f9a0:	3c01      	subs	r4, #1
    f9a2:	0876      	lsrs	r6, r6, #1
    f9a4:	2f00      	cmp	r7, #0
    f9a6:	d0d2      	beq.n	f94e <_svfprintf_r+0x1082>
    f9a8:	f899 0000 	ldrb.w	r0, [r9]
    f9ac:	4584      	cmp	ip, r0
    f9ae:	d1ce      	bne.n	f94e <_svfprintf_r+0x1082>
    f9b0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    f9b4:	d0cb      	beq.n	f94e <_svfprintf_r+0x1082>
    f9b6:	2a0a      	cmp	r2, #10
    f9b8:	f171 0100 	sbcs.w	r1, r1, #0
    f9bc:	f080 8198 	bcs.w	fcf0 <_svfprintf_r+0x1424>
    f9c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    f9c2:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    f9c6:	ab58      	add	r3, sp, #352	; 0x160
    f9c8:	1b1b      	subs	r3, r3, r4
    f9ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
    f9ce:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    f9d2:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    f9d6:	46ab      	mov	fp, r5
    f9d8:	930a      	str	r3, [sp, #40]	; 0x28
    f9da:	f7ff bae1 	b.w	efa0 <_svfprintf_r+0x6d4>
    f9de:	bf00      	nop
    f9e0:	000154ec 	.word	0x000154ec
    f9e4:	00015500 	.word	0x00015500
    f9e8:	00015514 	.word	0x00015514
    f9ec:	0001552c 	.word	0x0001552c
    f9f0:	cccccccd 	.word	0xcccccccd
    f9f4:	2301      	movs	r3, #1
    f9f6:	f8c9 3004 	str.w	r3, [r9, #4]
    f9fa:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f9fc:	4aba      	ldr	r2, [pc, #744]	; (fce8 <_svfprintf_r+0x141c>)
    f9fe:	f8c9 2000 	str.w	r2, [r9]
    fa02:	3301      	adds	r3, #1
    fa04:	3601      	adds	r6, #1
    fa06:	2b07      	cmp	r3, #7
    fa08:	962e      	str	r6, [sp, #184]	; 0xb8
    fa0a:	932d      	str	r3, [sp, #180]	; 0xb4
    fa0c:	f300 818c 	bgt.w	fd28 <_svfprintf_r+0x145c>
    fa10:	f109 0908 	add.w	r9, r9, #8
    fa14:	2900      	cmp	r1, #0
    fa16:	f040 80be 	bne.w	fb96 <_svfprintf_r+0x12ca>
    fa1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fa1c:	f00b 0301 	and.w	r3, fp, #1
    fa20:	4313      	orrs	r3, r2
    fa22:	f43f a8d8 	beq.w	ebd6 <_svfprintf_r+0x30a>
    fa26:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fa28:	9919      	ldr	r1, [sp, #100]	; 0x64
    fa2a:	199a      	adds	r2, r3, r6
    fa2c:	e9c9 1300 	strd	r1, r3, [r9]
    fa30:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fa32:	922e      	str	r2, [sp, #184]	; 0xb8
    fa34:	3301      	adds	r3, #1
    fa36:	2b07      	cmp	r3, #7
    fa38:	932d      	str	r3, [sp, #180]	; 0xb4
    fa3a:	f300 826e 	bgt.w	ff1a <_svfprintf_r+0x164e>
    fa3e:	f109 0908 	add.w	r9, r9, #8
    fa42:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fa44:	f8c9 4000 	str.w	r4, [r9]
    fa48:	3301      	adds	r3, #1
    fa4a:	188e      	adds	r6, r1, r2
    fa4c:	2b07      	cmp	r3, #7
    fa4e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fa52:	f8c9 1004 	str.w	r1, [r9, #4]
    fa56:	f77f a8bc 	ble.w	ebd2 <_svfprintf_r+0x306>
    fa5a:	f7ff bbf1 	b.w	f240 <_svfprintf_r+0x974>
    fa5e:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa60:	931e      	str	r3, [sp, #120]	; 0x78
    fa62:	aa2c      	add	r2, sp, #176	; 0xb0
    fa64:	4650      	mov	r0, sl
    fa66:	f001 ff9b 	bl	119a0 <__ssprint_r>
    fa6a:	2800      	cmp	r0, #0
    fa6c:	f47f ab99 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    fa70:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fa74:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fa76:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fa78:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa7c:	f7ff b86a 	b.w	eb54 <_svfprintf_r+0x288>
    fa80:	46c2      	mov	sl, r8
    fa82:	f7ff bb8e 	b.w	f1a2 <_svfprintf_r+0x8d6>
    fa86:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    fa8a:	f000 80b8 	beq.w	fbfe <_svfprintf_r+0x1332>
    fa8e:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa90:	f850 2b04 	ldr.w	r2, [r0], #4
    fa94:	900e      	str	r0, [sp, #56]	; 0x38
    fa96:	4619      	mov	r1, r3
    fa98:	b292      	uxth	r2, r2
    fa9a:	e640      	b.n	f71e <_svfprintf_r+0xe52>
    fa9c:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa9e:	aa2c      	add	r2, sp, #176	; 0xb0
    faa0:	4650      	mov	r0, sl
    faa2:	f001 ff7d 	bl	119a0 <__ssprint_r>
    faa6:	2800      	cmp	r0, #0
    faa8:	f47f ab7b 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    faac:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    faae:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fab2:	f7ff babc 	b.w	f02e <_svfprintf_r+0x762>
    fab6:	ae2a      	add	r6, sp, #168	; 0xa8
    fab8:	2208      	movs	r2, #8
    faba:	2100      	movs	r1, #0
    fabc:	4630      	mov	r0, r6
    fabe:	9425      	str	r4, [sp, #148]	; 0x94
    fac0:	f7fe f82a 	bl	db18 <memset>
    fac4:	9b08      	ldr	r3, [sp, #32]
    fac6:	1c5a      	adds	r2, r3, #1
    fac8:	f000 80d4 	beq.w	fc74 <_svfprintf_r+0x13a8>
    facc:	2500      	movs	r5, #0
    face:	f8cd 801c 	str.w	r8, [sp, #28]
    fad2:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    fad6:	46a8      	mov	r8, r5
    fad8:	469b      	mov	fp, r3
    fada:	e00c      	b.n	faf6 <_svfprintf_r+0x122a>
    fadc:	a93f      	add	r1, sp, #252	; 0xfc
    fade:	4650      	mov	r0, sl
    fae0:	f001 ff16 	bl	11910 <_wcrtomb_r>
    fae4:	1c43      	adds	r3, r0, #1
    fae6:	4440      	add	r0, r8
    fae8:	f000 83b8 	beq.w	1025c <_svfprintf_r+0x1990>
    faec:	4558      	cmp	r0, fp
    faee:	dc08      	bgt.n	fb02 <_svfprintf_r+0x1236>
    faf0:	f000 8435 	beq.w	1035e <_svfprintf_r+0x1a92>
    faf4:	4680      	mov	r8, r0
    faf6:	9a25      	ldr	r2, [sp, #148]	; 0x94
    faf8:	5952      	ldr	r2, [r2, r5]
    fafa:	4633      	mov	r3, r6
    fafc:	3504      	adds	r5, #4
    fafe:	2a00      	cmp	r2, #0
    fb00:	d1ec      	bne.n	fadc <_svfprintf_r+0x1210>
    fb02:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    fb06:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    fb0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fb0e:	e0be      	b.n	fc8e <_svfprintf_r+0x13c2>
    fb10:	4616      	mov	r6, r2
    fb12:	3301      	adds	r3, #1
    fb14:	4426      	add	r6, r4
    fb16:	2b07      	cmp	r3, #7
    fb18:	f8c9 5000 	str.w	r5, [r9]
    fb1c:	f8c9 4004 	str.w	r4, [r9, #4]
    fb20:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fb24:	f77f a855 	ble.w	ebd2 <_svfprintf_r+0x306>
    fb28:	f7ff bb8a 	b.w	f240 <_svfprintf_r+0x974>
    fb2c:	aa2c      	add	r2, sp, #176	; 0xb0
    fb2e:	4641      	mov	r1, r8
    fb30:	4650      	mov	r0, sl
    fb32:	f001 ff35 	bl	119a0 <__ssprint_r>
    fb36:	2800      	cmp	r0, #0
    fb38:	f47f ab33 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    fb3c:	7838      	ldrb	r0, [r7, #0]
    fb3e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    fb40:	aa2f      	add	r2, sp, #188	; 0xbc
    fb42:	e69f      	b.n	f884 <_svfprintf_r+0xfb8>
    fb44:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb46:	aa2c      	add	r2, sp, #176	; 0xb0
    fb48:	4650      	mov	r0, sl
    fb4a:	f001 ff29 	bl	119a0 <__ssprint_r>
    fb4e:	2800      	cmp	r0, #0
    fb50:	f47f ab27 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    fb54:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fb56:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fb5a:	f7ff b823 	b.w	eba4 <_svfprintf_r+0x2d8>
    fb5e:	2b01      	cmp	r3, #1
    fb60:	465d      	mov	r5, fp
    fb62:	f47f aa09 	bne.w	ef78 <_svfprintf_r+0x6ac>
    fb66:	f7ff bbb9 	b.w	f2dc <_svfprintf_r+0xa10>
    fb6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb6c:	9909      	ldr	r1, [sp, #36]	; 0x24
    fb6e:	f853 2b04 	ldr.w	r2, [r3], #4
    fb72:	4644      	mov	r4, r8
    fb74:	6011      	str	r1, [r2, #0]
    fb76:	930e      	str	r3, [sp, #56]	; 0x38
    fb78:	f7fe bed6 	b.w	e928 <_svfprintf_r+0x5c>
    fb7c:	4616      	mov	r6, r2
    fb7e:	3701      	adds	r7, #1
    fb80:	4426      	add	r6, r4
    fb82:	2f07      	cmp	r7, #7
    fb84:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    fb88:	f8c9 5000 	str.w	r5, [r9]
    fb8c:	f8c9 4004 	str.w	r4, [r9, #4]
    fb90:	f77f ab47 	ble.w	f222 <_svfprintf_r+0x956>
    fb94:	e491      	b.n	f4ba <_svfprintf_r+0xbee>
    fb96:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fb98:	9819      	ldr	r0, [sp, #100]	; 0x64
    fb9a:	199a      	adds	r2, r3, r6
    fb9c:	e9c9 0300 	strd	r0, r3, [r9]
    fba0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fba2:	922e      	str	r2, [sp, #184]	; 0xb8
    fba4:	3301      	adds	r3, #1
    fba6:	2b07      	cmp	r3, #7
    fba8:	932d      	str	r3, [sp, #180]	; 0xb4
    fbaa:	f300 81b6 	bgt.w	ff1a <_svfprintf_r+0x164e>
    fbae:	f109 0908 	add.w	r9, r9, #8
    fbb2:	2900      	cmp	r1, #0
    fbb4:	f6bf af45 	bge.w	fa42 <_svfprintf_r+0x1176>
    fbb8:	424f      	negs	r7, r1
    fbba:	3110      	adds	r1, #16
    fbbc:	4d4b      	ldr	r5, [pc, #300]	; (fcec <_svfprintf_r+0x1420>)
    fbbe:	f280 8388 	bge.w	102d2 <_svfprintf_r+0x1a06>
    fbc2:	4649      	mov	r1, r9
    fbc4:	2610      	movs	r6, #16
    fbc6:	46a1      	mov	r9, r4
    fbc8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fbca:	e004      	b.n	fbd6 <_svfprintf_r+0x130a>
    fbcc:	3108      	adds	r1, #8
    fbce:	3f10      	subs	r7, #16
    fbd0:	2f10      	cmp	r7, #16
    fbd2:	f340 837c 	ble.w	102ce <_svfprintf_r+0x1a02>
    fbd6:	3301      	adds	r3, #1
    fbd8:	3210      	adds	r2, #16
    fbda:	2b07      	cmp	r3, #7
    fbdc:	e9c1 5600 	strd	r5, r6, [r1]
    fbe0:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fbe4:	ddf2      	ble.n	fbcc <_svfprintf_r+0x1300>
    fbe6:	aa2c      	add	r2, sp, #176	; 0xb0
    fbe8:	4621      	mov	r1, r4
    fbea:	4650      	mov	r0, sl
    fbec:	f001 fed8 	bl	119a0 <__ssprint_r>
    fbf0:	2800      	cmp	r0, #0
    fbf2:	f47f aad6 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    fbf6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fbfa:	a92f      	add	r1, sp, #188	; 0xbc
    fbfc:	e7e7      	b.n	fbce <_svfprintf_r+0x1302>
    fbfe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc00:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    fc04:	bf1a      	itte	ne
    fc06:	4611      	movne	r1, r2
    fc08:	f853 2b04 	ldrne.w	r2, [r3], #4
    fc0c:	f853 2b04 	ldreq.w	r2, [r3], #4
    fc10:	930e      	str	r3, [sp, #56]	; 0x38
    fc12:	bf18      	it	ne
    fc14:	b2d2      	uxtbne	r2, r2
    fc16:	e582      	b.n	f71e <_svfprintf_r+0xe52>
    fc18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc1a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
    fc1e:	bf1a      	itte	ne
    fc20:	4611      	movne	r1, r2
    fc22:	f853 2b04 	ldrne.w	r2, [r3], #4
    fc26:	f853 2b04 	ldreq.w	r2, [r3], #4
    fc2a:	930e      	str	r3, [sp, #56]	; 0x38
    fc2c:	bf18      	it	ne
    fc2e:	b2d2      	uxtbne	r2, r2
    fc30:	f7ff b953 	b.w	eeda <_svfprintf_r+0x60e>
    fc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc36:	f415 7100 	ands.w	r1, r5, #512	; 0x200
    fc3a:	bf1a      	itte	ne
    fc3c:	4611      	movne	r1, r2
    fc3e:	f853 2b04 	ldrne.w	r2, [r3], #4
    fc42:	f853 2b04 	ldreq.w	r2, [r3], #4
    fc46:	930e      	str	r3, [sp, #56]	; 0x38
    fc48:	bf18      	it	ne
    fc4a:	b2d2      	uxtbne	r2, r2
    fc4c:	2301      	movs	r3, #1
    fc4e:	f7ff b8e1 	b.w	ee14 <_svfprintf_r+0x548>
    fc52:	4634      	mov	r4, r6
    fc54:	4616      	mov	r6, r2
    fc56:	3301      	adds	r3, #1
    fc58:	443e      	add	r6, r7
    fc5a:	2b07      	cmp	r3, #7
    fc5c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fc60:	f8c9 5000 	str.w	r5, [r9]
    fc64:	f8c9 7004 	str.w	r7, [r9, #4]
    fc68:	f300 814a 	bgt.w	ff00 <_svfprintf_r+0x1634>
    fc6c:	f109 0908 	add.w	r9, r9, #8
    fc70:	f7ff bbb3 	b.w	f3da <_svfprintf_r+0xb0e>
    fc74:	2300      	movs	r3, #0
    fc76:	4619      	mov	r1, r3
    fc78:	9600      	str	r6, [sp, #0]
    fc7a:	aa25      	add	r2, sp, #148	; 0x94
    fc7c:	4650      	mov	r0, sl
    fc7e:	f001 fe6d 	bl	1195c <_wcsrtombs_r>
    fc82:	4603      	mov	r3, r0
    fc84:	3301      	adds	r3, #1
    fc86:	900a      	str	r0, [sp, #40]	; 0x28
    fc88:	f000 82e8 	beq.w	1025c <_svfprintf_r+0x1990>
    fc8c:	9425      	str	r4, [sp, #148]	; 0x94
    fc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fc90:	2b00      	cmp	r3, #0
    fc92:	d03d      	beq.n	fd10 <_svfprintf_r+0x1444>
    fc94:	2b63      	cmp	r3, #99	; 0x63
    fc96:	f300 8129 	bgt.w	feec <_svfprintf_r+0x1620>
    fc9a:	2300      	movs	r3, #0
    fc9c:	930d      	str	r3, [sp, #52]	; 0x34
    fc9e:	ac3f      	add	r4, sp, #252	; 0xfc
    fca0:	2208      	movs	r2, #8
    fca2:	2100      	movs	r1, #0
    fca4:	4630      	mov	r0, r6
    fca6:	f7fd ff37 	bl	db18 <memset>
    fcaa:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fcac:	9600      	str	r6, [sp, #0]
    fcae:	462b      	mov	r3, r5
    fcb0:	aa25      	add	r2, sp, #148	; 0x94
    fcb2:	4621      	mov	r1, r4
    fcb4:	4650      	mov	r0, sl
    fcb6:	f001 fe51 	bl	1195c <_wcsrtombs_r>
    fcba:	4285      	cmp	r5, r0
    fcbc:	f040 83c4 	bne.w	10448 <_svfprintf_r+0x1b7c>
    fcc0:	990a      	ldr	r1, [sp, #40]	; 0x28
    fcc2:	970e      	str	r7, [sp, #56]	; 0x38
    fcc4:	2300      	movs	r3, #0
    fcc6:	5463      	strb	r3, [r4, r1]
    fcc8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    fccc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fcd0:	9308      	str	r3, [sp, #32]
    fcd2:	9107      	str	r1, [sp, #28]
    fcd4:	9312      	str	r3, [sp, #72]	; 0x48
    fcd6:	9316      	str	r3, [sp, #88]	; 0x58
    fcd8:	9311      	str	r3, [sp, #68]	; 0x44
    fcda:	f7fe bfdb 	b.w	ec94 <_svfprintf_r+0x3c8>
    fcde:	222d      	movs	r2, #45	; 0x2d
    fce0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    fce4:	f7fe bfc5 	b.w	ec72 <_svfprintf_r+0x3a6>
    fce8:	00013d34 	.word	0x00013d34
    fcec:	0001552c 	.word	0x0001552c
    fcf0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fcf2:	991c      	ldr	r1, [sp, #112]	; 0x70
    fcf4:	1ae4      	subs	r4, r4, r3
    fcf6:	461a      	mov	r2, r3
    fcf8:	4620      	mov	r0, r4
    fcfa:	f7fd ff5f 	bl	dbbc <strncpy>
    fcfe:	f899 2001 	ldrb.w	r2, [r9, #1]
    fd02:	4ba5      	ldr	r3, [pc, #660]	; (ff98 <_svfprintf_r+0x16cc>)
    fd04:	b10a      	cbz	r2, fd0a <_svfprintf_r+0x143e>
    fd06:	f109 0901 	add.w	r9, r9, #1
    fd0a:	f04f 0c00 	mov.w	ip, #0
    fd0e:	e622      	b.n	f956 <_svfprintf_r+0x108a>
    fd10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fd12:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fd16:	970e      	str	r7, [sp, #56]	; 0x38
    fd18:	e9cd 3307 	strd	r3, r3, [sp, #28]
    fd1c:	9312      	str	r3, [sp, #72]	; 0x48
    fd1e:	9316      	str	r3, [sp, #88]	; 0x58
    fd20:	9311      	str	r3, [sp, #68]	; 0x44
    fd22:	930d      	str	r3, [sp, #52]	; 0x34
    fd24:	f7fe bfb6 	b.w	ec94 <_svfprintf_r+0x3c8>
    fd28:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd2a:	aa2c      	add	r2, sp, #176	; 0xb0
    fd2c:	4650      	mov	r0, sl
    fd2e:	f001 fe37 	bl	119a0 <__ssprint_r>
    fd32:	2800      	cmp	r0, #0
    fd34:	f47f aa35 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    fd38:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fd3a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fd3c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fd40:	e668      	b.n	fa14 <_svfprintf_r+0x1148>
    fd42:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fd44:	990a      	ldr	r1, [sp, #40]	; 0x28
    fd46:	18a5      	adds	r5, r4, r2
    fd48:	1a6d      	subs	r5, r5, r1
    fd4a:	1ad4      	subs	r4, r2, r3
    fd4c:	42a5      	cmp	r5, r4
    fd4e:	bfa8      	it	ge
    fd50:	4625      	movge	r5, r4
    fd52:	f7ff bb77 	b.w	f444 <_svfprintf_r+0xb78>
    fd56:	f913 2b04 	ldrsb.w	r2, [r3], #4
    fd5a:	930e      	str	r3, [sp, #56]	; 0x38
    fd5c:	17d1      	asrs	r1, r2, #31
    fd5e:	460b      	mov	r3, r1
    fd60:	f7ff b807 	b.w	ed72 <_svfprintf_r+0x4a6>
    fd64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd66:	9909      	ldr	r1, [sp, #36]	; 0x24
    fd68:	f853 2b04 	ldr.w	r2, [r3], #4
    fd6c:	930e      	str	r3, [sp, #56]	; 0x38
    fd6e:	8011      	strh	r1, [r2, #0]
    fd70:	4644      	mov	r4, r8
    fd72:	f7fe bdd9 	b.w	e928 <_svfprintf_r+0x5c>
    fd76:	9b08      	ldr	r3, [sp, #32]
    fd78:	930a      	str	r3, [sp, #40]	; 0x28
    fd7a:	2302      	movs	r3, #2
    fd7c:	a92a      	add	r1, sp, #168	; 0xa8
    fd7e:	9104      	str	r1, [sp, #16]
    fd80:	a925      	add	r1, sp, #148	; 0x94
    fd82:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fd84:	9103      	str	r1, [sp, #12]
    fd86:	a923      	add	r1, sp, #140	; 0x8c
    fd88:	9300      	str	r3, [sp, #0]
    fd8a:	463a      	mov	r2, r7
    fd8c:	4633      	mov	r3, r6
    fd8e:	9501      	str	r5, [sp, #4]
    fd90:	9102      	str	r1, [sp, #8]
    fd92:	4650      	mov	r0, sl
    fd94:	f000 fe60 	bl	10a58 <_dtoa_r>
    fd98:	9b07      	ldr	r3, [sp, #28]
    fd9a:	2b47      	cmp	r3, #71	; 0x47
    fd9c:	4604      	mov	r4, r0
    fd9e:	f000 81a3 	beq.w	100e8 <_svfprintf_r+0x181c>
    fda2:	2b46      	cmp	r3, #70	; 0x46
    fda4:	4405      	add	r5, r0
    fda6:	d105      	bne.n	fdb4 <_svfprintf_r+0x14e8>
    fda8:	7803      	ldrb	r3, [r0, #0]
    fdaa:	2b30      	cmp	r3, #48	; 0x30
    fdac:	f000 82b8 	beq.w	10320 <_svfprintf_r+0x1a54>
    fdb0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fdb2:	441d      	add	r5, r3
    fdb4:	4638      	mov	r0, r7
    fdb6:	4631      	mov	r1, r6
    fdb8:	2200      	movs	r2, #0
    fdba:	2300      	movs	r3, #0
    fdbc:	f7fc fcb4 	bl	c728 <__aeabi_dcmpeq>
    fdc0:	2800      	cmp	r0, #0
    fdc2:	f000 8166 	beq.w	10092 <_svfprintf_r+0x17c6>
    fdc6:	462b      	mov	r3, r5
    fdc8:	1b1b      	subs	r3, r3, r4
    fdca:	9313      	str	r3, [sp, #76]	; 0x4c
    fdcc:	9b07      	ldr	r3, [sp, #28]
    fdce:	2b47      	cmp	r3, #71	; 0x47
    fdd0:	f000 814a 	beq.w	10068 <_svfprintf_r+0x179c>
    fdd4:	9b07      	ldr	r3, [sp, #28]
    fdd6:	2b46      	cmp	r3, #70	; 0x46
    fdd8:	f000 8200 	beq.w	101dc <_svfprintf_r+0x1910>
    fddc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    fdde:	9311      	str	r3, [sp, #68]	; 0x44
    fde0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fde2:	9a07      	ldr	r2, [sp, #28]
    fde4:	3b01      	subs	r3, #1
    fde6:	2a41      	cmp	r2, #65	; 0x41
    fde8:	9323      	str	r3, [sp, #140]	; 0x8c
    fdea:	f000 8223 	beq.w	10234 <_svfprintf_r+0x1968>
    fdee:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    fdf2:	2100      	movs	r1, #0
    fdf4:	2b00      	cmp	r3, #0
    fdf6:	bfb8      	it	lt
    fdf8:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
    fdfa:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    fdfe:	bfba      	itte	lt
    fe00:	f1c3 0301 	rsblt	r3, r3, #1
    fe04:	222d      	movlt	r2, #45	; 0x2d
    fe06:	222b      	movge	r2, #43	; 0x2b
    fe08:	2b09      	cmp	r3, #9
    fe0a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
    fe0e:	f340 824f 	ble.w	102b0 <_svfprintf_r+0x19e4>
    fe12:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
    fe16:	4e61      	ldr	r6, [pc, #388]	; (ff9c <_svfprintf_r+0x16d0>)
    fe18:	462a      	mov	r2, r5
    fe1a:	4610      	mov	r0, r2
    fe1c:	fb86 2103 	smull	r2, r1, r6, r3
    fe20:	17da      	asrs	r2, r3, #31
    fe22:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    fe26:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    fe2a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
    fe2e:	3130      	adds	r1, #48	; 0x30
    fe30:	f800 1c01 	strb.w	r1, [r0, #-1]
    fe34:	4619      	mov	r1, r3
    fe36:	2963      	cmp	r1, #99	; 0x63
    fe38:	4613      	mov	r3, r2
    fe3a:	f100 32ff 	add.w	r2, r0, #4294967295
    fe3e:	dcec      	bgt.n	fe1a <_svfprintf_r+0x154e>
    fe40:	3330      	adds	r3, #48	; 0x30
    fe42:	b2d9      	uxtb	r1, r3
    fe44:	1e83      	subs	r3, r0, #2
    fe46:	429d      	cmp	r5, r3
    fe48:	f802 1c01 	strb.w	r1, [r2, #-1]
    fe4c:	f240 82e9 	bls.w	10422 <_svfprintf_r+0x1b56>
    fe50:	4613      	mov	r3, r2
    fe52:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    fe56:	e001      	b.n	fe5c <_svfprintf_r+0x1590>
    fe58:	f813 1b01 	ldrb.w	r1, [r3], #1
    fe5c:	f802 1b01 	strb.w	r1, [r2], #1
    fe60:	429d      	cmp	r5, r3
    fe62:	d1f9      	bne.n	fe58 <_svfprintf_r+0x158c>
    fe64:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
    fe68:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
    fe6c:	1a1b      	subs	r3, r3, r0
    fe6e:	4413      	add	r3, r2
    fe70:	aa26      	add	r2, sp, #152	; 0x98
    fe72:	1a9b      	subs	r3, r3, r2
    fe74:	931b      	str	r3, [sp, #108]	; 0x6c
    fe76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe78:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
    fe7a:	2b01      	cmp	r3, #1
    fe7c:	441a      	add	r2, r3
    fe7e:	920a      	str	r2, [sp, #40]	; 0x28
    fe80:	f340 8249 	ble.w	10316 <_svfprintf_r+0x1a4a>
    fe84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    fe86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    fe88:	4413      	add	r3, r2
    fe8a:	930a      	str	r3, [sp, #40]	; 0x28
    fe8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    fe8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fe90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    fe94:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
    fe98:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    fe9c:	2300      	movs	r3, #0
    fe9e:	9312      	str	r3, [sp, #72]	; 0x48
    fea0:	9207      	str	r2, [sp, #28]
    fea2:	9316      	str	r3, [sp, #88]	; 0x58
    fea4:	9311      	str	r3, [sp, #68]	; 0x44
    fea6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    fea8:	2b00      	cmp	r3, #0
    feaa:	f040 80eb 	bne.w	10084 <_svfprintf_r+0x17b8>
    feae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    feb2:	9308      	str	r3, [sp, #32]
    feb4:	f7fe beee 	b.w	ec94 <_svfprintf_r+0x3c8>
    feb8:	4620      	mov	r0, r4
    feba:	970e      	str	r7, [sp, #56]	; 0x38
    febc:	f7fd ff60 	bl	dd80 <strlen>
    fec0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fec2:	9308      	str	r3, [sp, #32]
    fec4:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    fec8:	9312      	str	r3, [sp, #72]	; 0x48
    feca:	9316      	str	r3, [sp, #88]	; 0x58
    fecc:	930d      	str	r3, [sp, #52]	; 0x34
    fece:	2373      	movs	r3, #115	; 0x73
    fed0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    fed4:	900a      	str	r0, [sp, #40]	; 0x28
    fed6:	9107      	str	r1, [sp, #28]
    fed8:	9310      	str	r3, [sp, #64]	; 0x40
    feda:	f7fe bedb 	b.w	ec94 <_svfprintf_r+0x3c8>
    fede:	990c      	ldr	r1, [sp, #48]	; 0x30
    fee0:	aa2c      	add	r2, sp, #176	; 0xb0
    fee2:	4650      	mov	r0, sl
    fee4:	f001 fd5c 	bl	119a0 <__ssprint_r>
    fee8:	f7fe bdf8 	b.w	eadc <_svfprintf_r+0x210>
    feec:	1c59      	adds	r1, r3, #1
    feee:	4650      	mov	r0, sl
    fef0:	f7fc ffa4 	bl	ce3c <_malloc_r>
    fef4:	4604      	mov	r4, r0
    fef6:	2800      	cmp	r0, #0
    fef8:	f000 81b0 	beq.w	1025c <_svfprintf_r+0x1990>
    fefc:	900d      	str	r0, [sp, #52]	; 0x34
    fefe:	e6cf      	b.n	fca0 <_svfprintf_r+0x13d4>
    ff00:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff02:	aa2c      	add	r2, sp, #176	; 0xb0
    ff04:	4650      	mov	r0, sl
    ff06:	f001 fd4b 	bl	119a0 <__ssprint_r>
    ff0a:	2800      	cmp	r0, #0
    ff0c:	f47f a949 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    ff10:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ff12:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ff16:	f7ff ba60 	b.w	f3da <_svfprintf_r+0xb0e>
    ff1a:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff1c:	aa2c      	add	r2, sp, #176	; 0xb0
    ff1e:	4650      	mov	r0, sl
    ff20:	f001 fd3e 	bl	119a0 <__ssprint_r>
    ff24:	2800      	cmp	r0, #0
    ff26:	f47f a93c 	bne.w	f1a2 <_svfprintf_r+0x8d6>
    ff2a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    ff2e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    ff30:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ff34:	e63d      	b.n	fbb2 <_svfprintf_r+0x12e6>
    ff36:	2306      	movs	r3, #6
    ff38:	9308      	str	r3, [sp, #32]
    ff3a:	f7ff bba0 	b.w	f67e <_svfprintf_r+0xdb2>
    ff3e:	9b08      	ldr	r3, [sp, #32]
    ff40:	3301      	adds	r3, #1
    ff42:	930a      	str	r3, [sp, #40]	; 0x28
    ff44:	2302      	movs	r3, #2
    ff46:	e719      	b.n	fd7c <_svfprintf_r+0x14b0>
    ff48:	9b08      	ldr	r3, [sp, #32]
    ff4a:	930a      	str	r3, [sp, #40]	; 0x28
    ff4c:	2303      	movs	r3, #3
    ff4e:	e715      	b.n	fd7c <_svfprintf_r+0x14b0>
    ff50:	4638      	mov	r0, r7
    ff52:	4631      	mov	r1, r6
    ff54:	aa23      	add	r2, sp, #140	; 0x8c
    ff56:	f000 fc13 	bl	10780 <frexp>
    ff5a:	2200      	movs	r2, #0
    ff5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    ff60:	f003 f9ba 	bl	132d8 <__aeabi_dmul>
    ff64:	2200      	movs	r2, #0
    ff66:	2300      	movs	r3, #0
    ff68:	4606      	mov	r6, r0
    ff6a:	460f      	mov	r7, r1
    ff6c:	f7fc fbdc 	bl	c728 <__aeabi_dcmpeq>
    ff70:	b108      	cbz	r0, ff76 <_svfprintf_r+0x16aa>
    ff72:	2301      	movs	r3, #1
    ff74:	9323      	str	r3, [sp, #140]	; 0x8c
    ff76:	4b0a      	ldr	r3, [pc, #40]	; (ffa0 <_svfprintf_r+0x16d4>)
    ff78:	930a      	str	r3, [sp, #40]	; 0x28
    ff7a:	9b08      	ldr	r3, [sp, #32]
    ff7c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    ff80:	3b01      	subs	r3, #1
    ff82:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
    ff86:	4625      	mov	r5, r4
    ff88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    ff8c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
    ff90:	4698      	mov	r8, r3
    ff92:	941f      	str	r4, [sp, #124]	; 0x7c
    ff94:	e00d      	b.n	ffb2 <_svfprintf_r+0x16e6>
    ff96:	bf00      	nop
    ff98:	cccccccd 	.word	0xcccccccd
    ff9c:	66666667 	.word	0x66666667
    ffa0:	00015500 	.word	0x00015500
    ffa4:	2200      	movs	r2, #0
    ffa6:	2300      	movs	r3, #0
    ffa8:	f108 38ff 	add.w	r8, r8, #4294967295
    ffac:	f7fc fbbc 	bl	c728 <__aeabi_dcmpeq>
    ffb0:	b9e8      	cbnz	r0, ffee <_svfprintf_r+0x1722>
    ffb2:	4bae      	ldr	r3, [pc, #696]	; (1026c <_svfprintf_r+0x19a0>)
    ffb4:	2200      	movs	r2, #0
    ffb6:	4630      	mov	r0, r6
    ffb8:	4639      	mov	r1, r7
    ffba:	f003 f98d 	bl	132d8 <__aeabi_dmul>
    ffbe:	460f      	mov	r7, r1
    ffc0:	4606      	mov	r6, r0
    ffc2:	f003 fb9b 	bl	136fc <__aeabi_d2iz>
    ffc6:	4604      	mov	r4, r0
    ffc8:	f7fc faee 	bl	c5a8 <__aeabi_i2d>
    ffcc:	460b      	mov	r3, r1
    ffce:	4602      	mov	r2, r0
    ffd0:	4639      	mov	r1, r7
    ffd2:	4630      	mov	r0, r6
    ffd4:	f7fc f99a 	bl	c30c <__aeabi_dsub>
    ffd8:	f81b 3004 	ldrb.w	r3, [fp, r4]
    ffdc:	f1b8 3fff 	cmp.w	r8, #4294967295
    ffe0:	46aa      	mov	sl, r5
    ffe2:	46c1      	mov	r9, r8
    ffe4:	f805 3b01 	strb.w	r3, [r5], #1
    ffe8:	4606      	mov	r6, r0
    ffea:	460f      	mov	r7, r1
    ffec:	d1da      	bne.n	ffa4 <_svfprintf_r+0x16d8>
    ffee:	4ba0      	ldr	r3, [pc, #640]	; (10270 <_svfprintf_r+0x19a4>)
    fff0:	2200      	movs	r2, #0
    fff2:	4630      	mov	r0, r6
    fff4:	4639      	mov	r1, r7
    fff6:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
    fffa:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
    fffe:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10002:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   10006:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   1000a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1000c:	f7fc fbb4 	bl	c778 <__aeabi_dcmpgt>
   10010:	2800      	cmp	r0, #0
   10012:	f040 8131 	bne.w	10278 <_svfprintf_r+0x19ac>
   10016:	4b96      	ldr	r3, [pc, #600]	; (10270 <_svfprintf_r+0x19a4>)
   10018:	4630      	mov	r0, r6
   1001a:	4639      	mov	r1, r7
   1001c:	2200      	movs	r2, #0
   1001e:	f7fc fb83 	bl	c728 <__aeabi_dcmpeq>
   10022:	b118      	cbz	r0, 1002c <_svfprintf_r+0x1760>
   10024:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10026:	07de      	lsls	r6, r3, #31
   10028:	f100 8126 	bmi.w	10278 <_svfprintf_r+0x19ac>
   1002c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1002e:	2b00      	cmp	r3, #0
   10030:	db07      	blt.n	10042 <_svfprintf_r+0x1776>
   10032:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10034:	3301      	adds	r3, #1
   10036:	442b      	add	r3, r5
   10038:	2230      	movs	r2, #48	; 0x30
   1003a:	f805 2b01 	strb.w	r2, [r5], #1
   1003e:	42ab      	cmp	r3, r5
   10040:	d1fb      	bne.n	1003a <_svfprintf_r+0x176e>
   10042:	1b2b      	subs	r3, r5, r4
   10044:	9313      	str	r3, [sp, #76]	; 0x4c
   10046:	e6c1      	b.n	fdcc <_svfprintf_r+0x1500>
   10048:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1004a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1004c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10050:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10054:	971a      	str	r7, [sp, #104]	; 0x68
   10056:	18e3      	adds	r3, r4, r3
   10058:	429d      	cmp	r5, r3
   1005a:	bf28      	it	cs
   1005c:	461d      	movcs	r5, r3
   1005e:	4691      	mov	r9, r2
   10060:	460e      	mov	r6, r1
   10062:	950a      	str	r5, [sp, #40]	; 0x28
   10064:	f7ff b9c0 	b.w	f3e8 <_svfprintf_r+0xb1c>
   10068:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1006a:	9311      	str	r3, [sp, #68]	; 0x44
   1006c:	1cdd      	adds	r5, r3, #3
   1006e:	db02      	blt.n	10076 <_svfprintf_r+0x17aa>
   10070:	9a08      	ldr	r2, [sp, #32]
   10072:	4293      	cmp	r3, r2
   10074:	dd19      	ble.n	100aa <_svfprintf_r+0x17de>
   10076:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10078:	3b02      	subs	r3, #2
   1007a:	9310      	str	r3, [sp, #64]	; 0x40
   1007c:	f023 0320 	bic.w	r3, r3, #32
   10080:	9307      	str	r3, [sp, #28]
   10082:	e6ad      	b.n	fde0 <_svfprintf_r+0x1514>
   10084:	222d      	movs	r2, #45	; 0x2d
   10086:	2300      	movs	r3, #0
   10088:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   1008c:	9308      	str	r3, [sp, #32]
   1008e:	f7fe be04 	b.w	ec9a <_svfprintf_r+0x3ce>
   10092:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10094:	42ab      	cmp	r3, r5
   10096:	f4bf ae97 	bcs.w	fdc8 <_svfprintf_r+0x14fc>
   1009a:	2130      	movs	r1, #48	; 0x30
   1009c:	1c5a      	adds	r2, r3, #1
   1009e:	922a      	str	r2, [sp, #168]	; 0xa8
   100a0:	7019      	strb	r1, [r3, #0]
   100a2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   100a4:	429d      	cmp	r5, r3
   100a6:	d8f9      	bhi.n	1009c <_svfprintf_r+0x17d0>
   100a8:	e68e      	b.n	fdc8 <_svfprintf_r+0x14fc>
   100aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   100ae:	4293      	cmp	r3, r2
   100b0:	f2c0 80c5 	blt.w	1023e <_svfprintf_r+0x1972>
   100b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   100b6:	f013 0f01 	tst.w	r3, #1
   100ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100bc:	f000 814d 	beq.w	1035a <_svfprintf_r+0x1a8e>
   100c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   100c2:	4413      	add	r3, r2
   100c4:	930a      	str	r3, [sp, #40]	; 0x28
   100c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   100c8:	0559      	lsls	r1, r3, #21
   100ca:	d503      	bpl.n	100d4 <_svfprintf_r+0x1808>
   100cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   100ce:	2b00      	cmp	r3, #0
   100d0:	f300 8156 	bgt.w	10380 <_svfprintf_r+0x1ab4>
   100d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   100da:	9307      	str	r3, [sp, #28]
   100dc:	2367      	movs	r3, #103	; 0x67
   100de:	9310      	str	r3, [sp, #64]	; 0x40
   100e0:	2300      	movs	r3, #0
   100e2:	9312      	str	r3, [sp, #72]	; 0x48
   100e4:	9316      	str	r3, [sp, #88]	; 0x58
   100e6:	e6de      	b.n	fea6 <_svfprintf_r+0x15da>
   100e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   100ea:	07db      	lsls	r3, r3, #31
   100ec:	f100 809f 	bmi.w	1022e <_svfprintf_r+0x1962>
   100f0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   100f2:	e669      	b.n	fdc8 <_svfprintf_r+0x14fc>
   100f4:	aa2c      	add	r2, sp, #176	; 0xb0
   100f6:	4641      	mov	r1, r8
   100f8:	4650      	mov	r0, sl
   100fa:	f001 fc51 	bl	119a0 <__ssprint_r>
   100fe:	2800      	cmp	r0, #0
   10100:	f47f a84f 	bne.w	f1a2 <_svfprintf_r+0x8d6>
   10104:	7838      	ldrb	r0, [r7, #0]
   10106:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10108:	aa2f      	add	r2, sp, #188	; 0xbc
   1010a:	4405      	add	r5, r0
   1010c:	f7ff bbc1 	b.w	f892 <_svfprintf_r+0xfc6>
   10110:	2378      	movs	r3, #120	; 0x78
   10112:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10116:	2330      	movs	r3, #48	; 0x30
   10118:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1011c:	f04b 0302 	orr.w	r3, fp, #2
   10120:	930f      	str	r3, [sp, #60]	; 0x3c
   10122:	9b08      	ldr	r3, [sp, #32]
   10124:	2b63      	cmp	r3, #99	; 0x63
   10126:	f300 80ed 	bgt.w	10304 <_svfprintf_r+0x1a38>
   1012a:	2300      	movs	r3, #0
   1012c:	930d      	str	r3, [sp, #52]	; 0x34
   1012e:	ac3f      	add	r4, sp, #252	; 0xfc
   10130:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   10134:	4613      	mov	r3, r2
   10136:	2b00      	cmp	r3, #0
   10138:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   1013c:	db67      	blt.n	1020e <_svfprintf_r+0x1942>
   1013e:	461e      	mov	r6, r3
   10140:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10142:	f023 0320 	bic.w	r3, r3, #32
   10146:	9307      	str	r3, [sp, #28]
   10148:	2300      	movs	r3, #0
   1014a:	460f      	mov	r7, r1
   1014c:	931e      	str	r3, [sp, #120]	; 0x78
   1014e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10150:	2b61      	cmp	r3, #97	; 0x61
   10152:	f47f aaa4 	bne.w	f69e <_svfprintf_r+0xdd2>
   10156:	4638      	mov	r0, r7
   10158:	4631      	mov	r1, r6
   1015a:	aa23      	add	r2, sp, #140	; 0x8c
   1015c:	f000 fb10 	bl	10780 <frexp>
   10160:	2200      	movs	r2, #0
   10162:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   10166:	f003 f8b7 	bl	132d8 <__aeabi_dmul>
   1016a:	2200      	movs	r2, #0
   1016c:	2300      	movs	r3, #0
   1016e:	4606      	mov	r6, r0
   10170:	460f      	mov	r7, r1
   10172:	f7fc fad9 	bl	c728 <__aeabi_dcmpeq>
   10176:	b108      	cbz	r0, 1017c <_svfprintf_r+0x18b0>
   10178:	2301      	movs	r3, #1
   1017a:	9323      	str	r3, [sp, #140]	; 0x8c
   1017c:	4b3d      	ldr	r3, [pc, #244]	; (10274 <_svfprintf_r+0x19a8>)
   1017e:	930a      	str	r3, [sp, #40]	; 0x28
   10180:	e6fb      	b.n	ff7a <_svfprintf_r+0x16ae>
   10182:	990c      	ldr	r1, [sp, #48]	; 0x30
   10184:	aa2c      	add	r2, sp, #176	; 0xb0
   10186:	4650      	mov	r0, sl
   10188:	f001 fc0a 	bl	119a0 <__ssprint_r>
   1018c:	2800      	cmp	r0, #0
   1018e:	f47f a808 	bne.w	f1a2 <_svfprintf_r+0x8d6>
   10192:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10194:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10198:	f7ff b918 	b.w	f3cc <_svfprintf_r+0xb00>
   1019c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1019e:	aa2c      	add	r2, sp, #176	; 0xb0
   101a0:	4650      	mov	r0, sl
   101a2:	f001 fbfd 	bl	119a0 <__ssprint_r>
   101a6:	2800      	cmp	r0, #0
   101a8:	f47e affb 	bne.w	f1a2 <_svfprintf_r+0x8d6>
   101ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   101ae:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   101b0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   101b4:	f7ff b92e 	b.w	f414 <_svfprintf_r+0xb48>
   101b8:	2358      	movs	r3, #88	; 0x58
   101ba:	e7aa      	b.n	10112 <_svfprintf_r+0x1846>
   101bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   101be:	aa2c      	add	r2, sp, #176	; 0xb0
   101c0:	4650      	mov	r0, sl
   101c2:	f001 fbed 	bl	119a0 <__ssprint_r>
   101c6:	2800      	cmp	r0, #0
   101c8:	f47e afeb 	bne.w	f1a2 <_svfprintf_r+0x8d6>
   101cc:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   101ce:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   101d0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   101d2:	1b1c      	subs	r4, r3, r4
   101d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   101d8:	f7ff b934 	b.w	f444 <_svfprintf_r+0xb78>
   101dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   101de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   101e0:	9211      	str	r2, [sp, #68]	; 0x44
   101e2:	2a00      	cmp	r2, #0
   101e4:	f003 0301 	and.w	r3, r3, #1
   101e8:	f340 8108 	ble.w	103fc <_svfprintf_r+0x1b30>
   101ec:	9908      	ldr	r1, [sp, #32]
   101ee:	430b      	orrs	r3, r1
   101f0:	f040 80fd 	bne.w	103ee <_svfprintf_r+0x1b22>
   101f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   101f6:	930a      	str	r3, [sp, #40]	; 0x28
   101f8:	2366      	movs	r3, #102	; 0x66
   101fa:	9310      	str	r3, [sp, #64]	; 0x40
   101fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   101fe:	055a      	lsls	r2, r3, #21
   10200:	f100 80c0 	bmi.w	10384 <_svfprintf_r+0x1ab8>
   10204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10206:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1020a:	9307      	str	r3, [sp, #28]
   1020c:	e768      	b.n	100e0 <_svfprintf_r+0x1814>
   1020e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10210:	f023 0320 	bic.w	r3, r3, #32
   10214:	9307      	str	r3, [sp, #28]
   10216:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1021a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   1021e:	232d      	movs	r3, #45	; 0x2d
   10220:	4617      	mov	r7, r2
   10222:	931e      	str	r3, [sp, #120]	; 0x78
   10224:	e793      	b.n	1014e <_svfprintf_r+0x1882>
   10226:	2200      	movs	r2, #0
   10228:	9208      	str	r2, [sp, #32]
   1022a:	f7fe bbaa 	b.w	e982 <_svfprintf_r+0xb6>
   1022e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10230:	4425      	add	r5, r4
   10232:	e5bf      	b.n	fdb4 <_svfprintf_r+0x14e8>
   10234:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10236:	320f      	adds	r2, #15
   10238:	b2d2      	uxtb	r2, r2
   1023a:	2101      	movs	r1, #1
   1023c:	e5da      	b.n	fdf4 <_svfprintf_r+0x1528>
   1023e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10240:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10242:	189a      	adds	r2, r3, r2
   10244:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10246:	920a      	str	r2, [sp, #40]	; 0x28
   10248:	2b00      	cmp	r3, #0
   1024a:	f340 808f 	ble.w	1036c <_svfprintf_r+0x1aa0>
   1024e:	2367      	movs	r3, #103	; 0x67
   10250:	9310      	str	r3, [sp, #64]	; 0x40
   10252:	e7d3      	b.n	101fc <_svfprintf_r+0x1930>
   10254:	469b      	mov	fp, r3
   10256:	2300      	movs	r3, #0
   10258:	930d      	str	r3, [sp, #52]	; 0x34
   1025a:	e7dc      	b.n	10216 <_svfprintf_r+0x194a>
   1025c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1025e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10266:	8193      	strh	r3, [r2, #12]
   10268:	f7fe bc3b 	b.w	eae2 <_svfprintf_r+0x216>
   1026c:	40300000 	.word	0x40300000
   10270:	3fe00000 	.word	0x3fe00000
   10274:	000154ec 	.word	0x000154ec
   10278:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1027a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1027c:	932a      	str	r3, [sp, #168]	; 0xa8
   1027e:	7bd1      	ldrb	r1, [r2, #15]
   10280:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10284:	428b      	cmp	r3, r1
   10286:	462a      	mov	r2, r5
   10288:	d109      	bne.n	1029e <_svfprintf_r+0x19d2>
   1028a:	2030      	movs	r0, #48	; 0x30
   1028c:	f802 0c01 	strb.w	r0, [r2, #-1]
   10290:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   10292:	1e53      	subs	r3, r2, #1
   10294:	932a      	str	r3, [sp, #168]	; 0xa8
   10296:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1029a:	4299      	cmp	r1, r3
   1029c:	d0f6      	beq.n	1028c <_svfprintf_r+0x19c0>
   1029e:	2b39      	cmp	r3, #57	; 0x39
   102a0:	bf0b      	itete	eq
   102a2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   102a4:	3301      	addne	r3, #1
   102a6:	7a9b      	ldrbeq	r3, [r3, #10]
   102a8:	b2db      	uxtbne	r3, r3
   102aa:	f802 3c01 	strb.w	r3, [r2, #-1]
   102ae:	e6c8      	b.n	10042 <_svfprintf_r+0x1776>
   102b0:	2900      	cmp	r1, #0
   102b2:	f040 808c 	bne.w	103ce <_svfprintf_r+0x1b02>
   102b6:	2230      	movs	r2, #48	; 0x30
   102b8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   102bc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   102c0:	3330      	adds	r3, #48	; 0x30
   102c2:	f802 3b01 	strb.w	r3, [r2], #1
   102c6:	ab26      	add	r3, sp, #152	; 0x98
   102c8:	1ad3      	subs	r3, r2, r3
   102ca:	931b      	str	r3, [sp, #108]	; 0x6c
   102cc:	e5d3      	b.n	fe76 <_svfprintf_r+0x15aa>
   102ce:	464c      	mov	r4, r9
   102d0:	4689      	mov	r9, r1
   102d2:	3301      	adds	r3, #1
   102d4:	443a      	add	r2, r7
   102d6:	2b07      	cmp	r3, #7
   102d8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   102dc:	f8c9 5000 	str.w	r5, [r9]
   102e0:	f8c9 7004 	str.w	r7, [r9, #4]
   102e4:	f77f abab 	ble.w	fa3e <_svfprintf_r+0x1172>
   102e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   102ea:	aa2c      	add	r2, sp, #176	; 0xb0
   102ec:	4650      	mov	r0, sl
   102ee:	f001 fb57 	bl	119a0 <__ssprint_r>
   102f2:	2800      	cmp	r0, #0
   102f4:	f47e af55 	bne.w	f1a2 <_svfprintf_r+0x8d6>
   102f8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   102fc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10300:	f7ff bb9f 	b.w	fa42 <_svfprintf_r+0x1176>
   10304:	1c59      	adds	r1, r3, #1
   10306:	4650      	mov	r0, sl
   10308:	f7fc fd98 	bl	ce3c <_malloc_r>
   1030c:	4604      	mov	r4, r0
   1030e:	2800      	cmp	r0, #0
   10310:	d0a4      	beq.n	1025c <_svfprintf_r+0x1990>
   10312:	900d      	str	r0, [sp, #52]	; 0x34
   10314:	e70c      	b.n	10130 <_svfprintf_r+0x1864>
   10316:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10318:	07d8      	lsls	r0, r3, #31
   1031a:	f57f adb7 	bpl.w	fe8c <_svfprintf_r+0x15c0>
   1031e:	e5b1      	b.n	fe84 <_svfprintf_r+0x15b8>
   10320:	4638      	mov	r0, r7
   10322:	4631      	mov	r1, r6
   10324:	2200      	movs	r2, #0
   10326:	2300      	movs	r3, #0
   10328:	f7fc f9fe 	bl	c728 <__aeabi_dcmpeq>
   1032c:	2800      	cmp	r0, #0
   1032e:	f47f ad3f 	bne.w	fdb0 <_svfprintf_r+0x14e4>
   10332:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10334:	f1c3 0301 	rsb	r3, r3, #1
   10338:	9323      	str	r3, [sp, #140]	; 0x8c
   1033a:	e53a      	b.n	fdb2 <_svfprintf_r+0x14e6>
   1033c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1033e:	4c4a      	ldr	r4, [pc, #296]	; (10468 <_svfprintf_r+0x1b9c>)
   10340:	2b00      	cmp	r3, #0
   10342:	bfb4      	ite	lt
   10344:	222d      	movlt	r2, #45	; 0x2d
   10346:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1034a:	4b48      	ldr	r3, [pc, #288]	; (1046c <_svfprintf_r+0x1ba0>)
   1034c:	bfb8      	it	lt
   1034e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10352:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10356:	f7fe bc90 	b.w	ec7a <_svfprintf_r+0x3ae>
   1035a:	930a      	str	r3, [sp, #40]	; 0x28
   1035c:	e6b3      	b.n	100c6 <_svfprintf_r+0x17fa>
   1035e:	9b08      	ldr	r3, [sp, #32]
   10360:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10364:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10368:	930a      	str	r3, [sp, #40]	; 0x28
   1036a:	e490      	b.n	fc8e <_svfprintf_r+0x13c2>
   1036c:	f1c3 0301 	rsb	r3, r3, #1
   10370:	441a      	add	r2, r3
   10372:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10376:	9307      	str	r3, [sp, #28]
   10378:	2367      	movs	r3, #103	; 0x67
   1037a:	920a      	str	r2, [sp, #40]	; 0x28
   1037c:	9310      	str	r3, [sp, #64]	; 0x40
   1037e:	e6af      	b.n	100e0 <_svfprintf_r+0x1814>
   10380:	2367      	movs	r3, #103	; 0x67
   10382:	9310      	str	r3, [sp, #64]	; 0x40
   10384:	991a      	ldr	r1, [sp, #104]	; 0x68
   10386:	780b      	ldrb	r3, [r1, #0]
   10388:	2bff      	cmp	r3, #255	; 0xff
   1038a:	d059      	beq.n	10440 <_svfprintf_r+0x1b74>
   1038c:	2500      	movs	r5, #0
   1038e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10390:	4628      	mov	r0, r5
   10392:	e003      	b.n	1039c <_svfprintf_r+0x1ad0>
   10394:	3001      	adds	r0, #1
   10396:	3101      	adds	r1, #1
   10398:	2bff      	cmp	r3, #255	; 0xff
   1039a:	d008      	beq.n	103ae <_svfprintf_r+0x1ae2>
   1039c:	4293      	cmp	r3, r2
   1039e:	da06      	bge.n	103ae <_svfprintf_r+0x1ae2>
   103a0:	1ad2      	subs	r2, r2, r3
   103a2:	784b      	ldrb	r3, [r1, #1]
   103a4:	2b00      	cmp	r3, #0
   103a6:	d1f5      	bne.n	10394 <_svfprintf_r+0x1ac8>
   103a8:	780b      	ldrb	r3, [r1, #0]
   103aa:	3501      	adds	r5, #1
   103ac:	e7f4      	b.n	10398 <_svfprintf_r+0x1acc>
   103ae:	9211      	str	r2, [sp, #68]	; 0x44
   103b0:	911a      	str	r1, [sp, #104]	; 0x68
   103b2:	9016      	str	r0, [sp, #88]	; 0x58
   103b4:	9512      	str	r5, [sp, #72]	; 0x48
   103b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   103b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   103ba:	991d      	ldr	r1, [sp, #116]	; 0x74
   103bc:	4413      	add	r3, r2
   103be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103c0:	fb01 2303 	mla	r3, r1, r3, r2
   103c4:	930a      	str	r3, [sp, #40]	; 0x28
   103c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   103ca:	9307      	str	r3, [sp, #28]
   103cc:	e56b      	b.n	fea6 <_svfprintf_r+0x15da>
   103ce:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   103d2:	e775      	b.n	102c0 <_svfprintf_r+0x19f4>
   103d4:	9b08      	ldr	r3, [sp, #32]
   103d6:	9307      	str	r3, [sp, #28]
   103d8:	930a      	str	r3, [sp, #40]	; 0x28
   103da:	2373      	movs	r3, #115	; 0x73
   103dc:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   103e0:	970e      	str	r7, [sp, #56]	; 0x38
   103e2:	9008      	str	r0, [sp, #32]
   103e4:	9012      	str	r0, [sp, #72]	; 0x48
   103e6:	9016      	str	r0, [sp, #88]	; 0x58
   103e8:	9310      	str	r3, [sp, #64]	; 0x40
   103ea:	f7fe bc53 	b.w	ec94 <_svfprintf_r+0x3c8>
   103ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   103f0:	18d5      	adds	r5, r2, r3
   103f2:	4429      	add	r1, r5
   103f4:	2366      	movs	r3, #102	; 0x66
   103f6:	910a      	str	r1, [sp, #40]	; 0x28
   103f8:	9310      	str	r3, [sp, #64]	; 0x40
   103fa:	e6ff      	b.n	101fc <_svfprintf_r+0x1930>
   103fc:	9a08      	ldr	r2, [sp, #32]
   103fe:	4313      	orrs	r3, r2
   10400:	d105      	bne.n	1040e <_svfprintf_r+0x1b42>
   10402:	2301      	movs	r3, #1
   10404:	2266      	movs	r2, #102	; 0x66
   10406:	9307      	str	r3, [sp, #28]
   10408:	9210      	str	r2, [sp, #64]	; 0x40
   1040a:	930a      	str	r3, [sp, #40]	; 0x28
   1040c:	e668      	b.n	100e0 <_svfprintf_r+0x1814>
   1040e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10410:	1c5d      	adds	r5, r3, #1
   10412:	442a      	add	r2, r5
   10414:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10418:	9307      	str	r3, [sp, #28]
   1041a:	2366      	movs	r3, #102	; 0x66
   1041c:	920a      	str	r2, [sp, #40]	; 0x28
   1041e:	9310      	str	r3, [sp, #64]	; 0x40
   10420:	e65e      	b.n	100e0 <_svfprintf_r+0x1814>
   10422:	2302      	movs	r3, #2
   10424:	931b      	str	r3, [sp, #108]	; 0x6c
   10426:	e526      	b.n	fe76 <_svfprintf_r+0x15aa>
   10428:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1042a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1042e:	4688      	mov	r8, r1
   10430:	f852 1b04 	ldr.w	r1, [r2], #4
   10434:	920e      	str	r2, [sp, #56]	; 0x38
   10436:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1043a:	9108      	str	r1, [sp, #32]
   1043c:	f7fe ba9f 	b.w	e97e <_svfprintf_r+0xb2>
   10440:	2300      	movs	r3, #0
   10442:	9312      	str	r3, [sp, #72]	; 0x48
   10444:	9316      	str	r3, [sp, #88]	; 0x58
   10446:	e7b6      	b.n	103b6 <_svfprintf_r+0x1aea>
   10448:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1044a:	8993      	ldrh	r3, [r2, #12]
   1044c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10450:	8193      	strh	r3, [r2, #12]
   10452:	f7fe bea6 	b.w	f1a2 <_svfprintf_r+0x8d6>
   10456:	230c      	movs	r3, #12
   10458:	f8ca 3000 	str.w	r3, [sl]
   1045c:	f04f 33ff 	mov.w	r3, #4294967295
   10460:	9309      	str	r3, [sp, #36]	; 0x24
   10462:	f7fe bb45 	b.w	eaf0 <_svfprintf_r+0x224>
   10466:	bf00      	nop
   10468:	000154e8 	.word	0x000154e8
   1046c:	00015058 	.word	0x00015058

00010470 <_fclose_r>:
   10470:	b570      	push	{r4, r5, r6, lr}
   10472:	2900      	cmp	r1, #0
   10474:	d04b      	beq.n	1050e <_fclose_r+0x9e>
   10476:	4606      	mov	r6, r0
   10478:	460c      	mov	r4, r1
   1047a:	b110      	cbz	r0, 10482 <_fclose_r+0x12>
   1047c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1047e:	2b00      	cmp	r3, #0
   10480:	d048      	beq.n	10514 <_fclose_r+0xa4>
   10482:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10484:	07d8      	lsls	r0, r3, #31
   10486:	d534      	bpl.n	104f2 <_fclose_r+0x82>
   10488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1048c:	2b00      	cmp	r3, #0
   1048e:	d03e      	beq.n	1050e <_fclose_r+0x9e>
   10490:	4621      	mov	r1, r4
   10492:	4630      	mov	r0, r6
   10494:	f000 f850 	bl	10538 <__sflush_r>
   10498:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1049a:	4605      	mov	r5, r0
   1049c:	b133      	cbz	r3, 104ac <_fclose_r+0x3c>
   1049e:	69e1      	ldr	r1, [r4, #28]
   104a0:	4630      	mov	r0, r6
   104a2:	4798      	blx	r3
   104a4:	2800      	cmp	r0, #0
   104a6:	bfb8      	it	lt
   104a8:	f04f 35ff 	movlt.w	r5, #4294967295
   104ac:	89a3      	ldrh	r3, [r4, #12]
   104ae:	061a      	lsls	r2, r3, #24
   104b0:	d43c      	bmi.n	1052c <_fclose_r+0xbc>
   104b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   104b4:	b141      	cbz	r1, 104c8 <_fclose_r+0x58>
   104b6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   104ba:	4299      	cmp	r1, r3
   104bc:	d002      	beq.n	104c4 <_fclose_r+0x54>
   104be:	4630      	mov	r0, r6
   104c0:	f7fd fd2c 	bl	df1c <_free_r>
   104c4:	2300      	movs	r3, #0
   104c6:	6323      	str	r3, [r4, #48]	; 0x30
   104c8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   104ca:	b121      	cbz	r1, 104d6 <_fclose_r+0x66>
   104cc:	4630      	mov	r0, r6
   104ce:	f7fd fd25 	bl	df1c <_free_r>
   104d2:	2300      	movs	r3, #0
   104d4:	6463      	str	r3, [r4, #68]	; 0x44
   104d6:	f7fd fa0d 	bl	d8f4 <__sfp_lock_acquire>
   104da:	6e63      	ldr	r3, [r4, #100]	; 0x64
   104dc:	2200      	movs	r2, #0
   104de:	07db      	lsls	r3, r3, #31
   104e0:	81a2      	strh	r2, [r4, #12]
   104e2:	d51f      	bpl.n	10524 <_fclose_r+0xb4>
   104e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   104e6:	f7fd fc33 	bl	dd50 <__retarget_lock_close_recursive>
   104ea:	f7fd fa09 	bl	d900 <__sfp_lock_release>
   104ee:	4628      	mov	r0, r5
   104f0:	bd70      	pop	{r4, r5, r6, pc}
   104f2:	89a3      	ldrh	r3, [r4, #12]
   104f4:	0599      	lsls	r1, r3, #22
   104f6:	d4cb      	bmi.n	10490 <_fclose_r+0x20>
   104f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   104fa:	f7fd fc2b 	bl	dd54 <__retarget_lock_acquire_recursive>
   104fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10502:	2b00      	cmp	r3, #0
   10504:	d1c4      	bne.n	10490 <_fclose_r+0x20>
   10506:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10508:	f015 0501 	ands.w	r5, r5, #1
   1050c:	d005      	beq.n	1051a <_fclose_r+0xaa>
   1050e:	2500      	movs	r5, #0
   10510:	4628      	mov	r0, r5
   10512:	bd70      	pop	{r4, r5, r6, pc}
   10514:	f7fd f9d0 	bl	d8b8 <__sinit>
   10518:	e7b3      	b.n	10482 <_fclose_r+0x12>
   1051a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1051c:	f7fd fc1c 	bl	dd58 <__retarget_lock_release_recursive>
   10520:	4628      	mov	r0, r5
   10522:	bd70      	pop	{r4, r5, r6, pc}
   10524:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10526:	f7fd fc17 	bl	dd58 <__retarget_lock_release_recursive>
   1052a:	e7db      	b.n	104e4 <_fclose_r+0x74>
   1052c:	6921      	ldr	r1, [r4, #16]
   1052e:	4630      	mov	r0, r6
   10530:	f7fd fcf4 	bl	df1c <_free_r>
   10534:	e7bd      	b.n	104b2 <_fclose_r+0x42>
   10536:	bf00      	nop

00010538 <__sflush_r>:
   10538:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1053e:	460c      	mov	r4, r1
   10540:	0711      	lsls	r1, r2, #28
   10542:	4607      	mov	r7, r0
   10544:	d442      	bmi.n	105cc <__sflush_r+0x94>
   10546:	6863      	ldr	r3, [r4, #4]
   10548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1054c:	2b00      	cmp	r3, #0
   1054e:	81a2      	strh	r2, [r4, #12]
   10550:	dd59      	ble.n	10606 <__sflush_r+0xce>
   10552:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10554:	2d00      	cmp	r5, #0
   10556:	d054      	beq.n	10602 <__sflush_r+0xca>
   10558:	2300      	movs	r3, #0
   1055a:	683e      	ldr	r6, [r7, #0]
   1055c:	603b      	str	r3, [r7, #0]
   1055e:	b293      	uxth	r3, r2
   10560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10564:	d153      	bne.n	1060e <__sflush_r+0xd6>
   10566:	69e1      	ldr	r1, [r4, #28]
   10568:	2301      	movs	r3, #1
   1056a:	4638      	mov	r0, r7
   1056c:	47a8      	blx	r5
   1056e:	1c42      	adds	r2, r0, #1
   10570:	d063      	beq.n	1063a <__sflush_r+0x102>
   10572:	89a3      	ldrh	r3, [r4, #12]
   10574:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10576:	075b      	lsls	r3, r3, #29
   10578:	d505      	bpl.n	10586 <__sflush_r+0x4e>
   1057a:	6863      	ldr	r3, [r4, #4]
   1057c:	1ac0      	subs	r0, r0, r3
   1057e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10580:	b10b      	cbz	r3, 10586 <__sflush_r+0x4e>
   10582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10584:	1ac0      	subs	r0, r0, r3
   10586:	69e1      	ldr	r1, [r4, #28]
   10588:	4602      	mov	r2, r0
   1058a:	2300      	movs	r3, #0
   1058c:	4638      	mov	r0, r7
   1058e:	47a8      	blx	r5
   10590:	1c41      	adds	r1, r0, #1
   10592:	d13e      	bne.n	10612 <__sflush_r+0xda>
   10594:	683b      	ldr	r3, [r7, #0]
   10596:	2b00      	cmp	r3, #0
   10598:	d03b      	beq.n	10612 <__sflush_r+0xda>
   1059a:	2b1d      	cmp	r3, #29
   1059c:	d001      	beq.n	105a2 <__sflush_r+0x6a>
   1059e:	2b16      	cmp	r3, #22
   105a0:	d152      	bne.n	10648 <__sflush_r+0x110>
   105a2:	89a3      	ldrh	r3, [r4, #12]
   105a4:	6922      	ldr	r2, [r4, #16]
   105a6:	6022      	str	r2, [r4, #0]
   105a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   105ac:	2100      	movs	r1, #0
   105ae:	6061      	str	r1, [r4, #4]
   105b0:	81a3      	strh	r3, [r4, #12]
   105b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   105b4:	603e      	str	r6, [r7, #0]
   105b6:	b321      	cbz	r1, 10602 <__sflush_r+0xca>
   105b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   105bc:	4299      	cmp	r1, r3
   105be:	d002      	beq.n	105c6 <__sflush_r+0x8e>
   105c0:	4638      	mov	r0, r7
   105c2:	f7fd fcab 	bl	df1c <_free_r>
   105c6:	2000      	movs	r0, #0
   105c8:	6320      	str	r0, [r4, #48]	; 0x30
   105ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   105cc:	6926      	ldr	r6, [r4, #16]
   105ce:	b1c6      	cbz	r6, 10602 <__sflush_r+0xca>
   105d0:	b293      	uxth	r3, r2
   105d2:	6825      	ldr	r5, [r4, #0]
   105d4:	6026      	str	r6, [r4, #0]
   105d6:	079a      	lsls	r2, r3, #30
   105d8:	bf0c      	ite	eq
   105da:	6963      	ldreq	r3, [r4, #20]
   105dc:	2300      	movne	r3, #0
   105de:	1bad      	subs	r5, r5, r6
   105e0:	60a3      	str	r3, [r4, #8]
   105e2:	e00c      	b.n	105fe <__sflush_r+0xc6>
   105e4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   105e8:	69e1      	ldr	r1, [r4, #28]
   105ea:	462b      	mov	r3, r5
   105ec:	4632      	mov	r2, r6
   105ee:	4638      	mov	r0, r7
   105f0:	47e0      	blx	ip
   105f2:	f1b0 0c00 	subs.w	ip, r0, #0
   105f6:	eba5 050c 	sub.w	r5, r5, ip
   105fa:	4466      	add	r6, ip
   105fc:	dd16      	ble.n	1062c <__sflush_r+0xf4>
   105fe:	2d00      	cmp	r5, #0
   10600:	dcf0      	bgt.n	105e4 <__sflush_r+0xac>
   10602:	2000      	movs	r0, #0
   10604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10606:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10608:	2b00      	cmp	r3, #0
   1060a:	dca2      	bgt.n	10552 <__sflush_r+0x1a>
   1060c:	e7f9      	b.n	10602 <__sflush_r+0xca>
   1060e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10610:	e7b1      	b.n	10576 <__sflush_r+0x3e>
   10612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10616:	6922      	ldr	r2, [r4, #16]
   10618:	6022      	str	r2, [r4, #0]
   1061a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   1061e:	81a3      	strh	r3, [r4, #12]
   10620:	2200      	movs	r2, #0
   10622:	04db      	lsls	r3, r3, #19
   10624:	6062      	str	r2, [r4, #4]
   10626:	d5c4      	bpl.n	105b2 <__sflush_r+0x7a>
   10628:	6520      	str	r0, [r4, #80]	; 0x50
   1062a:	e7c2      	b.n	105b2 <__sflush_r+0x7a>
   1062c:	89a3      	ldrh	r3, [r4, #12]
   1062e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10632:	f04f 30ff 	mov.w	r0, #4294967295
   10636:	81a3      	strh	r3, [r4, #12]
   10638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1063a:	683b      	ldr	r3, [r7, #0]
   1063c:	2b00      	cmp	r3, #0
   1063e:	d098      	beq.n	10572 <__sflush_r+0x3a>
   10640:	2b1d      	cmp	r3, #29
   10642:	d006      	beq.n	10652 <__sflush_r+0x11a>
   10644:	2b16      	cmp	r3, #22
   10646:	d004      	beq.n	10652 <__sflush_r+0x11a>
   10648:	89a3      	ldrh	r3, [r4, #12]
   1064a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1064e:	81a3      	strh	r3, [r4, #12]
   10650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10652:	603e      	str	r6, [r7, #0]
   10654:	e7d5      	b.n	10602 <__sflush_r+0xca>
   10656:	bf00      	nop

00010658 <_fflush_r>:
   10658:	b538      	push	{r3, r4, r5, lr}
   1065a:	460c      	mov	r4, r1
   1065c:	4605      	mov	r5, r0
   1065e:	b108      	cbz	r0, 10664 <_fflush_r+0xc>
   10660:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10662:	b303      	cbz	r3, 106a6 <_fflush_r+0x4e>
   10664:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10668:	b188      	cbz	r0, 1068e <_fflush_r+0x36>
   1066a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1066c:	07db      	lsls	r3, r3, #31
   1066e:	d401      	bmi.n	10674 <_fflush_r+0x1c>
   10670:	0581      	lsls	r1, r0, #22
   10672:	d50f      	bpl.n	10694 <_fflush_r+0x3c>
   10674:	4628      	mov	r0, r5
   10676:	4621      	mov	r1, r4
   10678:	f7ff ff5e 	bl	10538 <__sflush_r>
   1067c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1067e:	07da      	lsls	r2, r3, #31
   10680:	4605      	mov	r5, r0
   10682:	d402      	bmi.n	1068a <_fflush_r+0x32>
   10684:	89a3      	ldrh	r3, [r4, #12]
   10686:	059b      	lsls	r3, r3, #22
   10688:	d508      	bpl.n	1069c <_fflush_r+0x44>
   1068a:	4628      	mov	r0, r5
   1068c:	bd38      	pop	{r3, r4, r5, pc}
   1068e:	4605      	mov	r5, r0
   10690:	4628      	mov	r0, r5
   10692:	bd38      	pop	{r3, r4, r5, pc}
   10694:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10696:	f7fd fb5d 	bl	dd54 <__retarget_lock_acquire_recursive>
   1069a:	e7eb      	b.n	10674 <_fflush_r+0x1c>
   1069c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1069e:	f7fd fb5b 	bl	dd58 <__retarget_lock_release_recursive>
   106a2:	4628      	mov	r0, r5
   106a4:	bd38      	pop	{r3, r4, r5, pc}
   106a6:	f7fd f907 	bl	d8b8 <__sinit>
   106aa:	e7db      	b.n	10664 <_fflush_r+0xc>

000106ac <_localeconv_r>:
   106ac:	4800      	ldr	r0, [pc, #0]	; (106b0 <_localeconv_r+0x4>)
   106ae:	4770      	bx	lr
   106b0:	1fff8fcc 	.word	0x1fff8fcc

000106b4 <__libc_fini_array>:
   106b4:	b538      	push	{r3, r4, r5, lr}
   106b6:	4d07      	ldr	r5, [pc, #28]	; (106d4 <__libc_fini_array+0x20>)
   106b8:	4c07      	ldr	r4, [pc, #28]	; (106d8 <__libc_fini_array+0x24>)
   106ba:	1b2c      	subs	r4, r5, r4
   106bc:	10a4      	asrs	r4, r4, #2
   106be:	d005      	beq.n	106cc <__libc_fini_array+0x18>
   106c0:	3c01      	subs	r4, #1
   106c2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   106c6:	4798      	blx	r3
   106c8:	2c00      	cmp	r4, #0
   106ca:	d1f9      	bne.n	106c0 <__libc_fini_array+0xc>
   106cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   106d0:	f004 bfaa 	b.w	15628 <__init_array_end>
	...
   106dc:	ffffffff 	.word	0xffffffff

000106e0 <memchr>:
   106e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   106e4:	2a10      	cmp	r2, #16
   106e6:	db2b      	blt.n	10740 <memchr+0x60>
   106e8:	f010 0f07 	tst.w	r0, #7
   106ec:	d008      	beq.n	10700 <memchr+0x20>
   106ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   106f2:	3a01      	subs	r2, #1
   106f4:	428b      	cmp	r3, r1
   106f6:	d02d      	beq.n	10754 <memchr+0x74>
   106f8:	f010 0f07 	tst.w	r0, #7
   106fc:	b342      	cbz	r2, 10750 <memchr+0x70>
   106fe:	d1f6      	bne.n	106ee <memchr+0xe>
   10700:	b4f0      	push	{r4, r5, r6, r7}
   10702:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10706:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1070a:	f022 0407 	bic.w	r4, r2, #7
   1070e:	f07f 0700 	mvns.w	r7, #0
   10712:	2300      	movs	r3, #0
   10714:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   10718:	3c08      	subs	r4, #8
   1071a:	ea85 0501 	eor.w	r5, r5, r1
   1071e:	ea86 0601 	eor.w	r6, r6, r1
   10722:	fa85 f547 	uadd8	r5, r5, r7
   10726:	faa3 f587 	sel	r5, r3, r7
   1072a:	fa86 f647 	uadd8	r6, r6, r7
   1072e:	faa5 f687 	sel	r6, r5, r7
   10732:	b98e      	cbnz	r6, 10758 <memchr+0x78>
   10734:	d1ee      	bne.n	10714 <memchr+0x34>
   10736:	bcf0      	pop	{r4, r5, r6, r7}
   10738:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   1073c:	f002 0207 	and.w	r2, r2, #7
   10740:	b132      	cbz	r2, 10750 <memchr+0x70>
   10742:	f810 3b01 	ldrb.w	r3, [r0], #1
   10746:	3a01      	subs	r2, #1
   10748:	ea83 0301 	eor.w	r3, r3, r1
   1074c:	b113      	cbz	r3, 10754 <memchr+0x74>
   1074e:	d1f8      	bne.n	10742 <memchr+0x62>
   10750:	2000      	movs	r0, #0
   10752:	4770      	bx	lr
   10754:	3801      	subs	r0, #1
   10756:	4770      	bx	lr
   10758:	2d00      	cmp	r5, #0
   1075a:	bf06      	itte	eq
   1075c:	4635      	moveq	r5, r6
   1075e:	3803      	subeq	r0, #3
   10760:	3807      	subne	r0, #7
   10762:	f015 0f01 	tst.w	r5, #1
   10766:	d107      	bne.n	10778 <memchr+0x98>
   10768:	3001      	adds	r0, #1
   1076a:	f415 7f80 	tst.w	r5, #256	; 0x100
   1076e:	bf02      	ittt	eq
   10770:	3001      	addeq	r0, #1
   10772:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   10776:	3001      	addeq	r0, #1
   10778:	bcf0      	pop	{r4, r5, r6, r7}
   1077a:	3801      	subs	r0, #1
   1077c:	4770      	bx	lr
   1077e:	bf00      	nop

00010780 <frexp>:
   10780:	f8df c060 	ldr.w	ip, [pc, #96]	; 107e4 <frexp+0x64>
   10784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10786:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   1078a:	2700      	movs	r7, #0
   1078c:	4563      	cmp	r3, ip
   1078e:	4604      	mov	r4, r0
   10790:	460d      	mov	r5, r1
   10792:	4616      	mov	r6, r2
   10794:	6017      	str	r7, [r2, #0]
   10796:	dc22      	bgt.n	107de <frexp+0x5e>
   10798:	4684      	mov	ip, r0
   1079a:	ea53 0c0c 	orrs.w	ip, r3, ip
   1079e:	d01e      	beq.n	107de <frexp+0x5e>
   107a0:	f8df c044 	ldr.w	ip, [pc, #68]	; 107e8 <frexp+0x68>
   107a4:	ea01 0c0c 	and.w	ip, r1, ip
   107a8:	460a      	mov	r2, r1
   107aa:	f1bc 0f00 	cmp.w	ip, #0
   107ae:	d109      	bne.n	107c4 <frexp+0x44>
   107b0:	4b0e      	ldr	r3, [pc, #56]	; (107ec <frexp+0x6c>)
   107b2:	2200      	movs	r2, #0
   107b4:	f002 fd90 	bl	132d8 <__aeabi_dmul>
   107b8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   107bc:	4604      	mov	r4, r0
   107be:	460a      	mov	r2, r1
   107c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   107c4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   107c8:	151b      	asrs	r3, r3, #20
   107ca:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   107ce:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   107d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   107d6:	443b      	add	r3, r7
   107d8:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   107dc:	6033      	str	r3, [r6, #0]
   107de:	4620      	mov	r0, r4
   107e0:	4629      	mov	r1, r5
   107e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   107e4:	7fefffff 	.word	0x7fefffff
   107e8:	7ff00000 	.word	0x7ff00000
   107ec:	43500000 	.word	0x43500000

000107f0 <__register_exitproc>:
   107f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   107f4:	f8df a074 	ldr.w	sl, [pc, #116]	; 1086c <__register_exitproc+0x7c>
   107f8:	4606      	mov	r6, r0
   107fa:	f8da 0000 	ldr.w	r0, [sl]
   107fe:	4698      	mov	r8, r3
   10800:	460f      	mov	r7, r1
   10802:	4691      	mov	r9, r2
   10804:	f7fd faa6 	bl	dd54 <__retarget_lock_acquire_recursive>
   10808:	4b19      	ldr	r3, [pc, #100]	; (10870 <__register_exitproc+0x80>)
   1080a:	681c      	ldr	r4, [r3, #0]
   1080c:	b324      	cbz	r4, 10858 <__register_exitproc+0x68>
   1080e:	6865      	ldr	r5, [r4, #4]
   10810:	2d1f      	cmp	r5, #31
   10812:	dc24      	bgt.n	1085e <__register_exitproc+0x6e>
   10814:	b95e      	cbnz	r6, 1082e <__register_exitproc+0x3e>
   10816:	1c6b      	adds	r3, r5, #1
   10818:	3502      	adds	r5, #2
   1081a:	f8da 0000 	ldr.w	r0, [sl]
   1081e:	6063      	str	r3, [r4, #4]
   10820:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   10824:	f7fd fa98 	bl	dd58 <__retarget_lock_release_recursive>
   10828:	2000      	movs	r0, #0
   1082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1082e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10832:	2301      	movs	r3, #1
   10834:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10838:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   1083c:	40ab      	lsls	r3, r5
   1083e:	431a      	orrs	r2, r3
   10840:	2e02      	cmp	r6, #2
   10842:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   10846:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   1084a:	d1e4      	bne.n	10816 <__register_exitproc+0x26>
   1084c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   10850:	431a      	orrs	r2, r3
   10852:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   10856:	e7de      	b.n	10816 <__register_exitproc+0x26>
   10858:	4c06      	ldr	r4, [pc, #24]	; (10874 <__register_exitproc+0x84>)
   1085a:	601c      	str	r4, [r3, #0]
   1085c:	e7d7      	b.n	1080e <__register_exitproc+0x1e>
   1085e:	f8da 0000 	ldr.w	r0, [sl]
   10862:	f7fd fa79 	bl	dd58 <__retarget_lock_release_recursive>
   10866:	f04f 30ff 	mov.w	r0, #4294967295
   1086a:	e7de      	b.n	1082a <__register_exitproc+0x3a>
   1086c:	1fff916c 	.word	0x1fff916c
   10870:	1fffd49c 	.word	0x1fffd49c
   10874:	1fffd4a0 	.word	0x1fffd4a0

00010878 <__assert_func>:
   10878:	b500      	push	{lr}
   1087a:	4c0b      	ldr	r4, [pc, #44]	; (108a8 <__assert_func+0x30>)
   1087c:	6825      	ldr	r5, [r4, #0]
   1087e:	4614      	mov	r4, r2
   10880:	68ee      	ldr	r6, [r5, #12]
   10882:	461a      	mov	r2, r3
   10884:	b085      	sub	sp, #20
   10886:	4603      	mov	r3, r0
   10888:	460d      	mov	r5, r1
   1088a:	b14c      	cbz	r4, 108a0 <__assert_func+0x28>
   1088c:	4907      	ldr	r1, [pc, #28]	; (108ac <__assert_func+0x34>)
   1088e:	9500      	str	r5, [sp, #0]
   10890:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10894:	4630      	mov	r0, r6
   10896:	4906      	ldr	r1, [pc, #24]	; (108b0 <__assert_func+0x38>)
   10898:	f001 f86e 	bl	11978 <fiprintf>
   1089c:	f7f9 f8a0 	bl	99e0 <abort>
   108a0:	4904      	ldr	r1, [pc, #16]	; (108b4 <__assert_func+0x3c>)
   108a2:	460c      	mov	r4, r1
   108a4:	e7f3      	b.n	1088e <__assert_func+0x16>
   108a6:	bf00      	nop
   108a8:	1fff9168 	.word	0x1fff9168
   108ac:	0001553c 	.word	0x0001553c
   108b0:	0001554c 	.word	0x0001554c
   108b4:	00014b70 	.word	0x00014b70

000108b8 <_calloc_r>:
   108b8:	b538      	push	{r3, r4, r5, lr}
   108ba:	fba1 1402 	umull	r1, r4, r1, r2
   108be:	bb8c      	cbnz	r4, 10924 <_calloc_r+0x6c>
   108c0:	f7fc fabc 	bl	ce3c <_malloc_r>
   108c4:	4605      	mov	r5, r0
   108c6:	b1e0      	cbz	r0, 10902 <_calloc_r+0x4a>
   108c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
   108cc:	f022 0203 	bic.w	r2, r2, #3
   108d0:	3a04      	subs	r2, #4
   108d2:	2a24      	cmp	r2, #36	; 0x24
   108d4:	d817      	bhi.n	10906 <_calloc_r+0x4e>
   108d6:	2a13      	cmp	r2, #19
   108d8:	d91a      	bls.n	10910 <_calloc_r+0x58>
   108da:	2a1b      	cmp	r2, #27
   108dc:	e9c0 4400 	strd	r4, r4, [r0]
   108e0:	d91d      	bls.n	1091e <_calloc_r+0x66>
   108e2:	2a24      	cmp	r2, #36	; 0x24
   108e4:	bf14      	ite	ne
   108e6:	f100 0210 	addne.w	r2, r0, #16
   108ea:	f100 0218 	addeq.w	r2, r0, #24
   108ee:	f04f 0300 	mov.w	r3, #0
   108f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   108f6:	bf04      	itt	eq
   108f8:	6104      	streq	r4, [r0, #16]
   108fa:	6144      	streq	r4, [r0, #20]
   108fc:	e9c2 3300 	strd	r3, r3, [r2]
   10900:	6093      	str	r3, [r2, #8]
   10902:	4628      	mov	r0, r5
   10904:	bd38      	pop	{r3, r4, r5, pc}
   10906:	4621      	mov	r1, r4
   10908:	f7fd f906 	bl	db18 <memset>
   1090c:	4628      	mov	r0, r5
   1090e:	bd38      	pop	{r3, r4, r5, pc}
   10910:	4602      	mov	r2, r0
   10912:	2300      	movs	r3, #0
   10914:	e9c2 3300 	strd	r3, r3, [r2]
   10918:	6093      	str	r3, [r2, #8]
   1091a:	4628      	mov	r0, r5
   1091c:	bd38      	pop	{r3, r4, r5, pc}
   1091e:	f100 0208 	add.w	r2, r0, #8
   10922:	e7f6      	b.n	10912 <_calloc_r+0x5a>
   10924:	f7fd f9e8 	bl	dcf8 <__errno>
   10928:	230c      	movs	r3, #12
   1092a:	2500      	movs	r5, #0
   1092c:	6003      	str	r3, [r0, #0]
   1092e:	e7e8      	b.n	10902 <_calloc_r+0x4a>

00010930 <quorem>:
   10930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10934:	6903      	ldr	r3, [r0, #16]
   10936:	690c      	ldr	r4, [r1, #16]
   10938:	42a3      	cmp	r3, r4
   1093a:	b083      	sub	sp, #12
   1093c:	f2c0 8088 	blt.w	10a50 <quorem+0x120>
   10940:	3c01      	subs	r4, #1
   10942:	f101 0514 	add.w	r5, r1, #20
   10946:	00a3      	lsls	r3, r4, #2
   10948:	f100 0814 	add.w	r8, r0, #20
   1094c:	9300      	str	r3, [sp, #0]
   1094e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10952:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10956:	3301      	adds	r3, #1
   10958:	468a      	mov	sl, r1
   1095a:	429a      	cmp	r2, r3
   1095c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   10960:	4681      	mov	r9, r0
   10962:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10966:	9101      	str	r1, [sp, #4]
   10968:	fbb2 f6f3 	udiv	r6, r2, r3
   1096c:	d33a      	bcc.n	109e4 <quorem+0xb4>
   1096e:	f04f 0c00 	mov.w	ip, #0
   10972:	46ae      	mov	lr, r5
   10974:	4640      	mov	r0, r8
   10976:	4662      	mov	r2, ip
   10978:	4663      	mov	r3, ip
   1097a:	f85e bb04 	ldr.w	fp, [lr], #4
   1097e:	6801      	ldr	r1, [r0, #0]
   10980:	fa1f fc8b 	uxth.w	ip, fp
   10984:	fb06 330c 	mla	r3, r6, ip, r3
   10988:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   1098c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10990:	fb06 cc0b 	mla	ip, r6, fp, ip
   10994:	b29b      	uxth	r3, r3
   10996:	1ad3      	subs	r3, r2, r3
   10998:	fa1f f28c 	uxth.w	r2, ip
   1099c:	fa13 f381 	uxtah	r3, r3, r1
   109a0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   109a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   109a8:	b29b      	uxth	r3, r3
   109aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   109ae:	4577      	cmp	r7, lr
   109b0:	f840 3b04 	str.w	r3, [r0], #4
   109b4:	ea4f 4222 	mov.w	r2, r2, asr #16
   109b8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   109bc:	d2dd      	bcs.n	1097a <quorem+0x4a>
   109be:	9b00      	ldr	r3, [sp, #0]
   109c0:	f858 3003 	ldr.w	r3, [r8, r3]
   109c4:	b973      	cbnz	r3, 109e4 <quorem+0xb4>
   109c6:	9b01      	ldr	r3, [sp, #4]
   109c8:	3b04      	subs	r3, #4
   109ca:	4598      	cmp	r8, r3
   109cc:	d304      	bcc.n	109d8 <quorem+0xa8>
   109ce:	e007      	b.n	109e0 <quorem+0xb0>
   109d0:	4598      	cmp	r8, r3
   109d2:	f104 34ff 	add.w	r4, r4, #4294967295
   109d6:	d203      	bcs.n	109e0 <quorem+0xb0>
   109d8:	f853 2904 	ldr.w	r2, [r3], #-4
   109dc:	2a00      	cmp	r2, #0
   109de:	d0f7      	beq.n	109d0 <quorem+0xa0>
   109e0:	f8c9 4010 	str.w	r4, [r9, #16]
   109e4:	4651      	mov	r1, sl
   109e6:	4648      	mov	r0, r9
   109e8:	f7fd fe38 	bl	e65c <__mcmp>
   109ec:	2800      	cmp	r0, #0
   109ee:	db2b      	blt.n	10a48 <quorem+0x118>
   109f0:	3601      	adds	r6, #1
   109f2:	4641      	mov	r1, r8
   109f4:	2300      	movs	r3, #0
   109f6:	f855 0b04 	ldr.w	r0, [r5], #4
   109fa:	f8d1 c000 	ldr.w	ip, [r1]
   109fe:	b282      	uxth	r2, r0
   10a00:	1a9a      	subs	r2, r3, r2
   10a02:	0c03      	lsrs	r3, r0, #16
   10a04:	fa12 f28c 	uxtah	r2, r2, ip
   10a08:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10a0c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10a10:	b292      	uxth	r2, r2
   10a12:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10a16:	42af      	cmp	r7, r5
   10a18:	f841 2b04 	str.w	r2, [r1], #4
   10a1c:	ea4f 4323 	mov.w	r3, r3, asr #16
   10a20:	d2e9      	bcs.n	109f6 <quorem+0xc6>
   10a22:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10a26:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10a2a:	b96a      	cbnz	r2, 10a48 <quorem+0x118>
   10a2c:	3b04      	subs	r3, #4
   10a2e:	4598      	cmp	r8, r3
   10a30:	d304      	bcc.n	10a3c <quorem+0x10c>
   10a32:	e007      	b.n	10a44 <quorem+0x114>
   10a34:	4598      	cmp	r8, r3
   10a36:	f104 34ff 	add.w	r4, r4, #4294967295
   10a3a:	d203      	bcs.n	10a44 <quorem+0x114>
   10a3c:	f853 2904 	ldr.w	r2, [r3], #-4
   10a40:	2a00      	cmp	r2, #0
   10a42:	d0f7      	beq.n	10a34 <quorem+0x104>
   10a44:	f8c9 4010 	str.w	r4, [r9, #16]
   10a48:	4630      	mov	r0, r6
   10a4a:	b003      	add	sp, #12
   10a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a50:	2000      	movs	r0, #0
   10a52:	b003      	add	sp, #12
   10a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a58 <_dtoa_r>:
   10a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a5c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10a5e:	b099      	sub	sp, #100	; 0x64
   10a60:	4690      	mov	r8, r2
   10a62:	4699      	mov	r9, r3
   10a64:	e9cd 8904 	strd	r8, r9, [sp, #16]
   10a68:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10a6a:	4604      	mov	r4, r0
   10a6c:	b141      	cbz	r1, 10a80 <_dtoa_r+0x28>
   10a6e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10a70:	604a      	str	r2, [r1, #4]
   10a72:	2301      	movs	r3, #1
   10a74:	4093      	lsls	r3, r2
   10a76:	608b      	str	r3, [r1, #8]
   10a78:	f7fd fb92 	bl	e1a0 <_Bfree>
   10a7c:	2300      	movs	r3, #0
   10a7e:	63a3      	str	r3, [r4, #56]	; 0x38
   10a80:	f1b9 0a00 	subs.w	sl, r9, #0
   10a84:	bfb4      	ite	lt
   10a86:	2301      	movlt	r3, #1
   10a88:	2300      	movge	r3, #0
   10a8a:	602b      	str	r3, [r5, #0]
   10a8c:	4b76      	ldr	r3, [pc, #472]	; (10c68 <_dtoa_r+0x210>)
   10a8e:	bfbc      	itt	lt
   10a90:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   10a94:	f8cd a014 	strlt.w	sl, [sp, #20]
   10a98:	ea33 030a 	bics.w	r3, r3, sl
   10a9c:	f000 80ab 	beq.w	10bf6 <_dtoa_r+0x19e>
   10aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10aa4:	4610      	mov	r0, r2
   10aa6:	4619      	mov	r1, r3
   10aa8:	2200      	movs	r2, #0
   10aaa:	2300      	movs	r3, #0
   10aac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10ab0:	f7fb fe3a 	bl	c728 <__aeabi_dcmpeq>
   10ab4:	4607      	mov	r7, r0
   10ab6:	b178      	cbz	r0, 10ad8 <_dtoa_r+0x80>
   10ab8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10aba:	2301      	movs	r3, #1
   10abc:	6013      	str	r3, [r2, #0]
   10abe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10ac0:	2b00      	cmp	r3, #0
   10ac2:	f000 83ae 	beq.w	11222 <_dtoa_r+0x7ca>
   10ac6:	4b69      	ldr	r3, [pc, #420]	; (10c6c <_dtoa_r+0x214>)
   10ac8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10aca:	6013      	str	r3, [r2, #0]
   10acc:	3b01      	subs	r3, #1
   10ace:	9303      	str	r3, [sp, #12]
   10ad0:	9803      	ldr	r0, [sp, #12]
   10ad2:	b019      	add	sp, #100	; 0x64
   10ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ad8:	ab16      	add	r3, sp, #88	; 0x58
   10ada:	9301      	str	r3, [sp, #4]
   10adc:	ab17      	add	r3, sp, #92	; 0x5c
   10ade:	9300      	str	r3, [sp, #0]
   10ae0:	4620      	mov	r0, r4
   10ae2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10ae6:	f7fd fe83 	bl	e7f0 <__d2b>
   10aea:	ea5f 561a 	movs.w	r6, sl, lsr #20
   10aee:	4605      	mov	r5, r0
   10af0:	f040 8097 	bne.w	10c22 <_dtoa_r+0x1ca>
   10af4:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   10af8:	443e      	add	r6, r7
   10afa:	f206 4332 	addw	r3, r6, #1074	; 0x432
   10afe:	2b20      	cmp	r3, #32
   10b00:	f340 83a6 	ble.w	11250 <_dtoa_r+0x7f8>
   10b04:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   10b08:	fa0a fa03 	lsl.w	sl, sl, r3
   10b0c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   10b10:	fa28 f003 	lsr.w	r0, r8, r3
   10b14:	ea4a 0000 	orr.w	r0, sl, r0
   10b18:	f7fb fd36 	bl	c588 <__aeabi_ui2d>
   10b1c:	2301      	movs	r3, #1
   10b1e:	3e01      	subs	r6, #1
   10b20:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10b24:	930f      	str	r3, [sp, #60]	; 0x3c
   10b26:	4b52      	ldr	r3, [pc, #328]	; (10c70 <_dtoa_r+0x218>)
   10b28:	2200      	movs	r2, #0
   10b2a:	f7fb fbef 	bl	c30c <__aeabi_dsub>
   10b2e:	a348      	add	r3, pc, #288	; (adr r3, 10c50 <_dtoa_r+0x1f8>)
   10b30:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b34:	f002 fbd0 	bl	132d8 <__aeabi_dmul>
   10b38:	a347      	add	r3, pc, #284	; (adr r3, 10c58 <_dtoa_r+0x200>)
   10b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b3e:	f7fb fbe7 	bl	c310 <__adddf3>
   10b42:	4680      	mov	r8, r0
   10b44:	4630      	mov	r0, r6
   10b46:	4689      	mov	r9, r1
   10b48:	f7fb fd2e 	bl	c5a8 <__aeabi_i2d>
   10b4c:	a344      	add	r3, pc, #272	; (adr r3, 10c60 <_dtoa_r+0x208>)
   10b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b52:	f002 fbc1 	bl	132d8 <__aeabi_dmul>
   10b56:	4602      	mov	r2, r0
   10b58:	460b      	mov	r3, r1
   10b5a:	4640      	mov	r0, r8
   10b5c:	4649      	mov	r1, r9
   10b5e:	f7fb fbd7 	bl	c310 <__adddf3>
   10b62:	4680      	mov	r8, r0
   10b64:	4689      	mov	r9, r1
   10b66:	f002 fdc9 	bl	136fc <__aeabi_d2iz>
   10b6a:	2200      	movs	r2, #0
   10b6c:	4683      	mov	fp, r0
   10b6e:	2300      	movs	r3, #0
   10b70:	4640      	mov	r0, r8
   10b72:	4649      	mov	r1, r9
   10b74:	f7fb fde2 	bl	c73c <__aeabi_dcmplt>
   10b78:	2800      	cmp	r0, #0
   10b7a:	f040 8345 	bne.w	11208 <_dtoa_r+0x7b0>
   10b7e:	f1bb 0f16 	cmp.w	fp, #22
   10b82:	f200 8334 	bhi.w	111ee <_dtoa_r+0x796>
   10b86:	4b3b      	ldr	r3, [pc, #236]	; (10c74 <_dtoa_r+0x21c>)
   10b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10b94:	f7fb fdd2 	bl	c73c <__aeabi_dcmplt>
   10b98:	2800      	cmp	r0, #0
   10b9a:	d071      	beq.n	10c80 <_dtoa_r+0x228>
   10b9c:	2300      	movs	r3, #0
   10b9e:	1bbf      	subs	r7, r7, r6
   10ba0:	930e      	str	r3, [sp, #56]	; 0x38
   10ba2:	1e7b      	subs	r3, r7, #1
   10ba4:	f10b 3bff 	add.w	fp, fp, #4294967295
   10ba8:	9306      	str	r3, [sp, #24]
   10baa:	f100 8327 	bmi.w	111fc <_dtoa_r+0x7a4>
   10bae:	2300      	movs	r3, #0
   10bb0:	9309      	str	r3, [sp, #36]	; 0x24
   10bb2:	f1bb 0f00 	cmp.w	fp, #0
   10bb6:	da6a      	bge.n	10c8e <_dtoa_r+0x236>
   10bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10bba:	f8cd b01c 	str.w	fp, [sp, #28]
   10bbe:	eba3 030b 	sub.w	r3, r3, fp
   10bc2:	9309      	str	r3, [sp, #36]	; 0x24
   10bc4:	f1cb 0300 	rsb	r3, fp, #0
   10bc8:	930d      	str	r3, [sp, #52]	; 0x34
   10bca:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10bcc:	2b09      	cmp	r3, #9
   10bce:	f04f 0b00 	mov.w	fp, #0
   10bd2:	d865      	bhi.n	10ca0 <_dtoa_r+0x248>
   10bd4:	2b05      	cmp	r3, #5
   10bd6:	f340 8339 	ble.w	1124c <_dtoa_r+0x7f4>
   10bda:	3b04      	subs	r3, #4
   10bdc:	9322      	str	r3, [sp, #136]	; 0x88
   10bde:	2600      	movs	r6, #0
   10be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10be2:	3b02      	subs	r3, #2
   10be4:	2b03      	cmp	r3, #3
   10be6:	f200 8667 	bhi.w	118b8 <_dtoa_r+0xe60>
   10bea:	e8df f013 	tbh	[pc, r3, lsl #1]
   10bee:	044e      	.short	0x044e
   10bf0:	0442044b 	.word	0x0442044b
   10bf4:	0425      	.short	0x0425
   10bf6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10bf8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   10bfc:	f242 730f 	movw	r3, #9999	; 0x270f
   10c00:	ea5a 0a08 	orrs.w	sl, sl, r8
   10c04:	6013      	str	r3, [r2, #0]
   10c06:	d11a      	bne.n	10c3e <_dtoa_r+0x1e6>
   10c08:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10c0a:	2b00      	cmp	r3, #0
   10c0c:	f000 8663 	beq.w	118d6 <_dtoa_r+0xe7e>
   10c10:	4b19      	ldr	r3, [pc, #100]	; (10c78 <_dtoa_r+0x220>)
   10c12:	9303      	str	r3, [sp, #12]
   10c14:	3308      	adds	r3, #8
   10c16:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10c18:	9803      	ldr	r0, [sp, #12]
   10c1a:	6013      	str	r3, [r2, #0]
   10c1c:	b019      	add	sp, #100	; 0x64
   10c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c22:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   10c26:	f3c2 0313 	ubfx	r3, r2, #0, #20
   10c2a:	4608      	mov	r0, r1
   10c2c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   10c30:	970f      	str	r7, [sp, #60]	; 0x3c
   10c32:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   10c36:	9f16      	ldr	r7, [sp, #88]	; 0x58
   10c38:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   10c3c:	e773      	b.n	10b26 <_dtoa_r+0xce>
   10c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10c40:	2b00      	cmp	r3, #0
   10c42:	f040 83db 	bne.w	113fc <_dtoa_r+0x9a4>
   10c46:	4b0d      	ldr	r3, [pc, #52]	; (10c7c <_dtoa_r+0x224>)
   10c48:	9303      	str	r3, [sp, #12]
   10c4a:	e741      	b.n	10ad0 <_dtoa_r+0x78>
   10c4c:	f3af 8000 	nop.w
   10c50:	636f4361 	.word	0x636f4361
   10c54:	3fd287a7 	.word	0x3fd287a7
   10c58:	8b60c8b3 	.word	0x8b60c8b3
   10c5c:	3fc68a28 	.word	0x3fc68a28
   10c60:	509f79fb 	.word	0x509f79fb
   10c64:	3fd34413 	.word	0x3fd34413
   10c68:	7ff00000 	.word	0x7ff00000
   10c6c:	00013d35 	.word	0x00013d35
   10c70:	3ff80000 	.word	0x3ff80000
   10c74:	00015410 	.word	0x00015410
   10c78:	0001557c 	.word	0x0001557c
   10c7c:	00015588 	.word	0x00015588
   10c80:	1bbf      	subs	r7, r7, r6
   10c82:	1e7b      	subs	r3, r7, #1
   10c84:	9306      	str	r3, [sp, #24]
   10c86:	f100 847e 	bmi.w	11586 <_dtoa_r+0xb2e>
   10c8a:	900e      	str	r0, [sp, #56]	; 0x38
   10c8c:	9009      	str	r0, [sp, #36]	; 0x24
   10c8e:	9b06      	ldr	r3, [sp, #24]
   10c90:	445b      	add	r3, fp
   10c92:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   10c96:	2300      	movs	r3, #0
   10c98:	930d      	str	r3, [sp, #52]	; 0x34
   10c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   10c9c:	2b09      	cmp	r3, #9
   10c9e:	d999      	bls.n	10bd4 <_dtoa_r+0x17c>
   10ca0:	2300      	movs	r3, #0
   10ca2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   10ca6:	2601      	movs	r6, #1
   10ca8:	f04f 33ff 	mov.w	r3, #4294967295
   10cac:	960c      	str	r6, [sp, #48]	; 0x30
   10cae:	9308      	str	r3, [sp, #32]
   10cb0:	9b08      	ldr	r3, [sp, #32]
   10cb2:	9312      	str	r3, [sp, #72]	; 0x48
   10cb4:	2100      	movs	r1, #0
   10cb6:	63e1      	str	r1, [r4, #60]	; 0x3c
   10cb8:	4620      	mov	r0, r4
   10cba:	f7fd fa4b 	bl	e154 <_Balloc>
   10cbe:	9003      	str	r0, [sp, #12]
   10cc0:	2800      	cmp	r0, #0
   10cc2:	f000 8601 	beq.w	118c8 <_dtoa_r+0xe70>
   10cc6:	9b03      	ldr	r3, [sp, #12]
   10cc8:	63a3      	str	r3, [r4, #56]	; 0x38
   10cca:	9b08      	ldr	r3, [sp, #32]
   10ccc:	2b0e      	cmp	r3, #14
   10cce:	f200 8113 	bhi.w	10ef8 <_dtoa_r+0x4a0>
   10cd2:	2e00      	cmp	r6, #0
   10cd4:	f000 8110 	beq.w	10ef8 <_dtoa_r+0x4a0>
   10cd8:	9907      	ldr	r1, [sp, #28]
   10cda:	2900      	cmp	r1, #0
   10cdc:	f340 8455 	ble.w	1158a <_dtoa_r+0xb32>
   10ce0:	4bae      	ldr	r3, [pc, #696]	; (10f9c <_dtoa_r+0x544>)
   10ce2:	f001 020f 	and.w	r2, r1, #15
   10ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10cea:	ea4f 1821 	mov.w	r8, r1, asr #4
   10cee:	05c9      	lsls	r1, r1, #23
   10cf0:	e9d3 6700 	ldrd	r6, r7, [r3]
   10cf4:	f140 8411 	bpl.w	1151a <_dtoa_r+0xac2>
   10cf8:	4ba9      	ldr	r3, [pc, #676]	; (10fa0 <_dtoa_r+0x548>)
   10cfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10cfe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   10d02:	f002 fc13 	bl	1352c <__aeabi_ddiv>
   10d06:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10d0a:	f008 080f 	and.w	r8, r8, #15
   10d0e:	f04f 0a03 	mov.w	sl, #3
   10d12:	f1b8 0f00 	cmp.w	r8, #0
   10d16:	d013      	beq.n	10d40 <_dtoa_r+0x2e8>
   10d18:	f8df 9284 	ldr.w	r9, [pc, #644]	; 10fa0 <_dtoa_r+0x548>
   10d1c:	f018 0f01 	tst.w	r8, #1
   10d20:	d009      	beq.n	10d36 <_dtoa_r+0x2de>
   10d22:	4630      	mov	r0, r6
   10d24:	4639      	mov	r1, r7
   10d26:	e9d9 2300 	ldrd	r2, r3, [r9]
   10d2a:	f002 fad5 	bl	132d8 <__aeabi_dmul>
   10d2e:	f10a 0a01 	add.w	sl, sl, #1
   10d32:	4606      	mov	r6, r0
   10d34:	460f      	mov	r7, r1
   10d36:	ea5f 0868 	movs.w	r8, r8, asr #1
   10d3a:	f109 0908 	add.w	r9, r9, #8
   10d3e:	d1ed      	bne.n	10d1c <_dtoa_r+0x2c4>
   10d40:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10d44:	4632      	mov	r2, r6
   10d46:	463b      	mov	r3, r7
   10d48:	f002 fbf0 	bl	1352c <__aeabi_ddiv>
   10d4c:	4680      	mov	r8, r0
   10d4e:	4689      	mov	r9, r1
   10d50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10d52:	b143      	cbz	r3, 10d66 <_dtoa_r+0x30e>
   10d54:	4b93      	ldr	r3, [pc, #588]	; (10fa4 <_dtoa_r+0x54c>)
   10d56:	2200      	movs	r2, #0
   10d58:	4640      	mov	r0, r8
   10d5a:	4649      	mov	r1, r9
   10d5c:	f7fb fcee 	bl	c73c <__aeabi_dcmplt>
   10d60:	2800      	cmp	r0, #0
   10d62:	f040 852a 	bne.w	117ba <_dtoa_r+0xd62>
   10d66:	4650      	mov	r0, sl
   10d68:	f7fb fc1e 	bl	c5a8 <__aeabi_i2d>
   10d6c:	4642      	mov	r2, r8
   10d6e:	464b      	mov	r3, r9
   10d70:	f002 fab2 	bl	132d8 <__aeabi_dmul>
   10d74:	4b8c      	ldr	r3, [pc, #560]	; (10fa8 <_dtoa_r+0x550>)
   10d76:	2200      	movs	r2, #0
   10d78:	f7fb faca 	bl	c310 <__adddf3>
   10d7c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10d84:	9311      	str	r3, [sp, #68]	; 0x44
   10d86:	9b08      	ldr	r3, [sp, #32]
   10d88:	2b00      	cmp	r3, #0
   10d8a:	f000 8099 	beq.w	10ec0 <_dtoa_r+0x468>
   10d8e:	9b07      	ldr	r3, [sp, #28]
   10d90:	9314      	str	r3, [sp, #80]	; 0x50
   10d92:	9b08      	ldr	r3, [sp, #32]
   10d94:	9313      	str	r3, [sp, #76]	; 0x4c
   10d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10d98:	2b00      	cmp	r3, #0
   10d9a:	f000 84a5 	beq.w	116e8 <_dtoa_r+0xc90>
   10d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10da0:	4b7e      	ldr	r3, [pc, #504]	; (10f9c <_dtoa_r+0x544>)
   10da2:	4982      	ldr	r1, [pc, #520]	; (10fac <_dtoa_r+0x554>)
   10da4:	9e03      	ldr	r6, [sp, #12]
   10da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10daa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   10dae:	2000      	movs	r0, #0
   10db0:	f002 fbbc 	bl	1352c <__aeabi_ddiv>
   10db4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   10db8:	f7fb faa8 	bl	c30c <__aeabi_dsub>
   10dbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10dc0:	4649      	mov	r1, r9
   10dc2:	4640      	mov	r0, r8
   10dc4:	f002 fc9a 	bl	136fc <__aeabi_d2iz>
   10dc8:	4607      	mov	r7, r0
   10dca:	f7fb fbed 	bl	c5a8 <__aeabi_i2d>
   10dce:	4602      	mov	r2, r0
   10dd0:	460b      	mov	r3, r1
   10dd2:	4640      	mov	r0, r8
   10dd4:	4649      	mov	r1, r9
   10dd6:	f7fb fa99 	bl	c30c <__aeabi_dsub>
   10dda:	3730      	adds	r7, #48	; 0x30
   10ddc:	4680      	mov	r8, r0
   10dde:	4689      	mov	r9, r1
   10de0:	4602      	mov	r2, r0
   10de2:	460b      	mov	r3, r1
   10de4:	f806 7b01 	strb.w	r7, [r6], #1
   10de8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   10dec:	f7fb fcc4 	bl	c778 <__aeabi_dcmpgt>
   10df0:	2800      	cmp	r0, #0
   10df2:	f040 8527 	bne.w	11844 <_dtoa_r+0xdec>
   10df6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   10dfa:	2700      	movs	r7, #0
   10dfc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   10e00:	9510      	str	r5, [sp, #64]	; 0x40
   10e02:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   10e04:	9413      	str	r4, [sp, #76]	; 0x4c
   10e06:	e02a      	b.n	10e5e <_dtoa_r+0x406>
   10e08:	3701      	adds	r7, #1
   10e0a:	42af      	cmp	r7, r5
   10e0c:	f280 852a 	bge.w	11864 <_dtoa_r+0xe0c>
   10e10:	4b67      	ldr	r3, [pc, #412]	; (10fb0 <_dtoa_r+0x558>)
   10e12:	4650      	mov	r0, sl
   10e14:	4659      	mov	r1, fp
   10e16:	2200      	movs	r2, #0
   10e18:	f002 fa5e 	bl	132d8 <__aeabi_dmul>
   10e1c:	4b64      	ldr	r3, [pc, #400]	; (10fb0 <_dtoa_r+0x558>)
   10e1e:	2200      	movs	r2, #0
   10e20:	4682      	mov	sl, r0
   10e22:	468b      	mov	fp, r1
   10e24:	4640      	mov	r0, r8
   10e26:	4649      	mov	r1, r9
   10e28:	f002 fa56 	bl	132d8 <__aeabi_dmul>
   10e2c:	4689      	mov	r9, r1
   10e2e:	4680      	mov	r8, r0
   10e30:	f002 fc64 	bl	136fc <__aeabi_d2iz>
   10e34:	4604      	mov	r4, r0
   10e36:	f7fb fbb7 	bl	c5a8 <__aeabi_i2d>
   10e3a:	4602      	mov	r2, r0
   10e3c:	460b      	mov	r3, r1
   10e3e:	4640      	mov	r0, r8
   10e40:	4649      	mov	r1, r9
   10e42:	f7fb fa63 	bl	c30c <__aeabi_dsub>
   10e46:	3430      	adds	r4, #48	; 0x30
   10e48:	f806 4b01 	strb.w	r4, [r6], #1
   10e4c:	4652      	mov	r2, sl
   10e4e:	465b      	mov	r3, fp
   10e50:	4680      	mov	r8, r0
   10e52:	4689      	mov	r9, r1
   10e54:	f7fb fc72 	bl	c73c <__aeabi_dcmplt>
   10e58:	2800      	cmp	r0, #0
   10e5a:	f040 84f1 	bne.w	11840 <_dtoa_r+0xde8>
   10e5e:	4642      	mov	r2, r8
   10e60:	464b      	mov	r3, r9
   10e62:	4950      	ldr	r1, [pc, #320]	; (10fa4 <_dtoa_r+0x54c>)
   10e64:	2000      	movs	r0, #0
   10e66:	f7fb fa51 	bl	c30c <__aeabi_dsub>
   10e6a:	4652      	mov	r2, sl
   10e6c:	465b      	mov	r3, fp
   10e6e:	f7fb fc65 	bl	c73c <__aeabi_dcmplt>
   10e72:	2800      	cmp	r0, #0
   10e74:	d0c8      	beq.n	10e08 <_dtoa_r+0x3b0>
   10e76:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   10e7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   10e7c:	9a03      	ldr	r2, [sp, #12]
   10e7e:	9307      	str	r3, [sp, #28]
   10e80:	e002      	b.n	10e88 <_dtoa_r+0x430>
   10e82:	42b2      	cmp	r2, r6
   10e84:	f000 84c6 	beq.w	11814 <_dtoa_r+0xdbc>
   10e88:	46b1      	mov	r9, r6
   10e8a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   10e8e:	2b39      	cmp	r3, #57	; 0x39
   10e90:	d0f7      	beq.n	10e82 <_dtoa_r+0x42a>
   10e92:	3301      	adds	r3, #1
   10e94:	b2db      	uxtb	r3, r3
   10e96:	7033      	strb	r3, [r6, #0]
   10e98:	9b07      	ldr	r3, [sp, #28]
   10e9a:	3301      	adds	r3, #1
   10e9c:	9307      	str	r3, [sp, #28]
   10e9e:	e192      	b.n	111c6 <_dtoa_r+0x76e>
   10ea0:	4650      	mov	r0, sl
   10ea2:	f7fb fb81 	bl	c5a8 <__aeabi_i2d>
   10ea6:	4642      	mov	r2, r8
   10ea8:	464b      	mov	r3, r9
   10eaa:	f002 fa15 	bl	132d8 <__aeabi_dmul>
   10eae:	4b3e      	ldr	r3, [pc, #248]	; (10fa8 <_dtoa_r+0x550>)
   10eb0:	2200      	movs	r2, #0
   10eb2:	f7fb fa2d 	bl	c310 <__adddf3>
   10eb6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   10eba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   10ebe:	9311      	str	r3, [sp, #68]	; 0x44
   10ec0:	4b3c      	ldr	r3, [pc, #240]	; (10fb4 <_dtoa_r+0x55c>)
   10ec2:	4640      	mov	r0, r8
   10ec4:	4649      	mov	r1, r9
   10ec6:	2200      	movs	r2, #0
   10ec8:	f7fb fa20 	bl	c30c <__aeabi_dsub>
   10ecc:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   10ed0:	4642      	mov	r2, r8
   10ed2:	464b      	mov	r3, r9
   10ed4:	4606      	mov	r6, r0
   10ed6:	460f      	mov	r7, r1
   10ed8:	f7fb fc4e 	bl	c778 <__aeabi_dcmpgt>
   10edc:	4682      	mov	sl, r0
   10ede:	2800      	cmp	r0, #0
   10ee0:	f040 84a8 	bne.w	11834 <_dtoa_r+0xddc>
   10ee4:	4642      	mov	r2, r8
   10ee6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   10eea:	4630      	mov	r0, r6
   10eec:	4639      	mov	r1, r7
   10eee:	f7fb fc25 	bl	c73c <__aeabi_dcmplt>
   10ef2:	2800      	cmp	r0, #0
   10ef4:	f040 8345 	bne.w	11582 <_dtoa_r+0xb2a>
   10ef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10efa:	2b00      	cmp	r3, #0
   10efc:	f2c0 808c 	blt.w	11018 <_dtoa_r+0x5c0>
   10f00:	9a07      	ldr	r2, [sp, #28]
   10f02:	2a0e      	cmp	r2, #14
   10f04:	f300 8088 	bgt.w	11018 <_dtoa_r+0x5c0>
   10f08:	4b24      	ldr	r3, [pc, #144]	; (10f9c <_dtoa_r+0x544>)
   10f0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10f0e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   10f12:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10f14:	2b00      	cmp	r3, #0
   10f16:	da1b      	bge.n	10f50 <_dtoa_r+0x4f8>
   10f18:	9b08      	ldr	r3, [sp, #32]
   10f1a:	2b00      	cmp	r3, #0
   10f1c:	dc18      	bgt.n	10f50 <_dtoa_r+0x4f8>
   10f1e:	f040 832e 	bne.w	1157e <_dtoa_r+0xb26>
   10f22:	4b24      	ldr	r3, [pc, #144]	; (10fb4 <_dtoa_r+0x55c>)
   10f24:	4650      	mov	r0, sl
   10f26:	2200      	movs	r2, #0
   10f28:	4659      	mov	r1, fp
   10f2a:	f002 f9d5 	bl	132d8 <__aeabi_dmul>
   10f2e:	4602      	mov	r2, r0
   10f30:	460b      	mov	r3, r1
   10f32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10f36:	f7fb fc0b 	bl	c750 <__aeabi_dcmple>
   10f3a:	f8dd a020 	ldr.w	sl, [sp, #32]
   10f3e:	4656      	mov	r6, sl
   10f40:	2800      	cmp	r0, #0
   10f42:	f000 82b9 	beq.w	114b8 <_dtoa_r+0xa60>
   10f46:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10f48:	f8dd 800c 	ldr.w	r8, [sp, #12]
   10f4c:	43df      	mvns	r7, r3
   10f4e:	e2bb      	b.n	114c8 <_dtoa_r+0xa70>
   10f50:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   10f54:	4652      	mov	r2, sl
   10f56:	465b      	mov	r3, fp
   10f58:	4638      	mov	r0, r7
   10f5a:	4641      	mov	r1, r8
   10f5c:	f002 fae6 	bl	1352c <__aeabi_ddiv>
   10f60:	f002 fbcc 	bl	136fc <__aeabi_d2iz>
   10f64:	4681      	mov	r9, r0
   10f66:	9009      	str	r0, [sp, #36]	; 0x24
   10f68:	f7fb fb1e 	bl	c5a8 <__aeabi_i2d>
   10f6c:	4652      	mov	r2, sl
   10f6e:	465b      	mov	r3, fp
   10f70:	f002 f9b2 	bl	132d8 <__aeabi_dmul>
   10f74:	9e03      	ldr	r6, [sp, #12]
   10f76:	460b      	mov	r3, r1
   10f78:	4602      	mov	r2, r0
   10f7a:	4641      	mov	r1, r8
   10f7c:	4638      	mov	r0, r7
   10f7e:	f7fb f9c5 	bl	c30c <__aeabi_dsub>
   10f82:	f109 0330 	add.w	r3, r9, #48	; 0x30
   10f86:	f806 3b01 	strb.w	r3, [r6], #1
   10f8a:	9b08      	ldr	r3, [sp, #32]
   10f8c:	2b01      	cmp	r3, #1
   10f8e:	f000 835c 	beq.w	1164a <_dtoa_r+0xbf2>
   10f92:	9406      	str	r4, [sp, #24]
   10f94:	2701      	movs	r7, #1
   10f96:	9504      	str	r5, [sp, #16]
   10f98:	461c      	mov	r4, r3
   10f9a:	e02a      	b.n	10ff2 <_dtoa_r+0x59a>
   10f9c:	00015410 	.word	0x00015410
   10fa0:	000153e8 	.word	0x000153e8
   10fa4:	3ff00000 	.word	0x3ff00000
   10fa8:	401c0000 	.word	0x401c0000
   10fac:	3fe00000 	.word	0x3fe00000
   10fb0:	40240000 	.word	0x40240000
   10fb4:	40140000 	.word	0x40140000
   10fb8:	4652      	mov	r2, sl
   10fba:	465b      	mov	r3, fp
   10fbc:	4640      	mov	r0, r8
   10fbe:	4649      	mov	r1, r9
   10fc0:	f002 fab4 	bl	1352c <__aeabi_ddiv>
   10fc4:	f002 fb9a 	bl	136fc <__aeabi_d2iz>
   10fc8:	4605      	mov	r5, r0
   10fca:	f7fb faed 	bl	c5a8 <__aeabi_i2d>
   10fce:	4652      	mov	r2, sl
   10fd0:	465b      	mov	r3, fp
   10fd2:	f002 f981 	bl	132d8 <__aeabi_dmul>
   10fd6:	3701      	adds	r7, #1
   10fd8:	460b      	mov	r3, r1
   10fda:	4602      	mov	r2, r0
   10fdc:	4649      	mov	r1, r9
   10fde:	4640      	mov	r0, r8
   10fe0:	f7fb f994 	bl	c30c <__aeabi_dsub>
   10fe4:	f105 0330 	add.w	r3, r5, #48	; 0x30
   10fe8:	42a7      	cmp	r7, r4
   10fea:	f806 3b01 	strb.w	r3, [r6], #1
   10fee:	f000 8329 	beq.w	11644 <_dtoa_r+0xbec>
   10ff2:	4ba5      	ldr	r3, [pc, #660]	; (11288 <_dtoa_r+0x830>)
   10ff4:	2200      	movs	r2, #0
   10ff6:	f002 f96f 	bl	132d8 <__aeabi_dmul>
   10ffa:	2200      	movs	r2, #0
   10ffc:	2300      	movs	r3, #0
   10ffe:	4680      	mov	r8, r0
   11000:	4689      	mov	r9, r1
   11002:	f7fb fb91 	bl	c728 <__aeabi_dcmpeq>
   11006:	2800      	cmp	r0, #0
   11008:	d0d6      	beq.n	10fb8 <_dtoa_r+0x560>
   1100a:	9d04      	ldr	r5, [sp, #16]
   1100c:	9c06      	ldr	r4, [sp, #24]
   1100e:	9b07      	ldr	r3, [sp, #28]
   11010:	3301      	adds	r3, #1
   11012:	9307      	str	r3, [sp, #28]
   11014:	46b1      	mov	r9, r6
   11016:	e0d6      	b.n	111c6 <_dtoa_r+0x76e>
   11018:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1101a:	2a00      	cmp	r2, #0
   1101c:	f000 8107 	beq.w	1122e <_dtoa_r+0x7d6>
   11020:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11022:	2a01      	cmp	r2, #1
   11024:	f340 8294 	ble.w	11550 <_dtoa_r+0xaf8>
   11028:	9b08      	ldr	r3, [sp, #32]
   1102a:	f103 38ff 	add.w	r8, r3, #4294967295
   1102e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11030:	4543      	cmp	r3, r8
   11032:	f280 825e 	bge.w	114f2 <_dtoa_r+0xa9a>
   11036:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11038:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1103c:	eba8 0303 	sub.w	r3, r8, r3
   11040:	449b      	add	fp, r3
   11042:	f04f 0800 	mov.w	r8, #0
   11046:	9b08      	ldr	r3, [sp, #32]
   11048:	2b00      	cmp	r3, #0
   1104a:	f2c0 832f 	blt.w	116ac <_dtoa_r+0xc54>
   1104e:	9a06      	ldr	r2, [sp, #24]
   11050:	441a      	add	r2, r3
   11052:	9206      	str	r2, [sp, #24]
   11054:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11056:	4617      	mov	r7, r2
   11058:	441a      	add	r2, r3
   1105a:	9209      	str	r2, [sp, #36]	; 0x24
   1105c:	2101      	movs	r1, #1
   1105e:	4620      	mov	r0, r4
   11060:	f7fd f948 	bl	e2f4 <__i2b>
   11064:	4606      	mov	r6, r0
   11066:	b167      	cbz	r7, 11082 <_dtoa_r+0x62a>
   11068:	9906      	ldr	r1, [sp, #24]
   1106a:	2900      	cmp	r1, #0
   1106c:	460b      	mov	r3, r1
   1106e:	dd08      	ble.n	11082 <_dtoa_r+0x62a>
   11070:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11072:	42b9      	cmp	r1, r7
   11074:	bfa8      	it	ge
   11076:	463b      	movge	r3, r7
   11078:	1ad2      	subs	r2, r2, r3
   1107a:	1aff      	subs	r7, r7, r3
   1107c:	1acb      	subs	r3, r1, r3
   1107e:	9209      	str	r2, [sp, #36]	; 0x24
   11080:	9306      	str	r3, [sp, #24]
   11082:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11084:	b163      	cbz	r3, 110a0 <_dtoa_r+0x648>
   11086:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11088:	2b00      	cmp	r3, #0
   1108a:	f000 82b6 	beq.w	115fa <_dtoa_r+0xba2>
   1108e:	f1b8 0f00 	cmp.w	r8, #0
   11092:	f300 8231 	bgt.w	114f8 <_dtoa_r+0xaa0>
   11096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11098:	ebb3 0208 	subs.w	r2, r3, r8
   1109c:	f040 8316 	bne.w	116cc <_dtoa_r+0xc74>
   110a0:	2101      	movs	r1, #1
   110a2:	4620      	mov	r0, r4
   110a4:	f7fd f926 	bl	e2f4 <__i2b>
   110a8:	f1bb 0f00 	cmp.w	fp, #0
   110ac:	4682      	mov	sl, r0
   110ae:	f300 80d4 	bgt.w	1125a <_dtoa_r+0x802>
   110b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   110b4:	2b01      	cmp	r3, #1
   110b6:	f340 81a7 	ble.w	11408 <_dtoa_r+0x9b0>
   110ba:	f04f 0900 	mov.w	r9, #0
   110be:	2001      	movs	r0, #1
   110c0:	f1bb 0f00 	cmp.w	fp, #0
   110c4:	f040 80d5 	bne.w	11272 <_dtoa_r+0x81a>
   110c8:	9b06      	ldr	r3, [sp, #24]
   110ca:	4418      	add	r0, r3
   110cc:	f010 001f 	ands.w	r0, r0, #31
   110d0:	f000 8198 	beq.w	11404 <_dtoa_r+0x9ac>
   110d4:	f1c0 0320 	rsb	r3, r0, #32
   110d8:	2b04      	cmp	r3, #4
   110da:	f300 80ad 	bgt.w	11238 <_dtoa_r+0x7e0>
   110de:	f040 8224 	bne.w	1152a <_dtoa_r+0xad2>
   110e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110e4:	2b00      	cmp	r3, #0
   110e6:	dd05      	ble.n	110f4 <_dtoa_r+0x69c>
   110e8:	4629      	mov	r1, r5
   110ea:	461a      	mov	r2, r3
   110ec:	4620      	mov	r0, r4
   110ee:	f7fd fa3d 	bl	e56c <__lshift>
   110f2:	4605      	mov	r5, r0
   110f4:	9b06      	ldr	r3, [sp, #24]
   110f6:	2b00      	cmp	r3, #0
   110f8:	dd05      	ble.n	11106 <_dtoa_r+0x6ae>
   110fa:	4651      	mov	r1, sl
   110fc:	461a      	mov	r2, r3
   110fe:	4620      	mov	r0, r4
   11100:	f7fd fa34 	bl	e56c <__lshift>
   11104:	4682      	mov	sl, r0
   11106:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11108:	2b00      	cmp	r3, #0
   1110a:	f040 815c 	bne.w	113c6 <_dtoa_r+0x96e>
   1110e:	9b08      	ldr	r3, [sp, #32]
   11110:	2b00      	cmp	r3, #0
   11112:	f340 8143 	ble.w	1139c <_dtoa_r+0x944>
   11116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11118:	2b00      	cmp	r3, #0
   1111a:	f040 80c6 	bne.w	112aa <_dtoa_r+0x852>
   1111e:	9b07      	ldr	r3, [sp, #28]
   11120:	3301      	adds	r3, #1
   11122:	9307      	str	r3, [sp, #28]
   11124:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11128:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1112c:	2701      	movs	r7, #1
   1112e:	e007      	b.n	11140 <_dtoa_r+0x6e8>
   11130:	4629      	mov	r1, r5
   11132:	2300      	movs	r3, #0
   11134:	220a      	movs	r2, #10
   11136:	4620      	mov	r0, r4
   11138:	f7fd f83c 	bl	e1b4 <__multadd>
   1113c:	3701      	adds	r7, #1
   1113e:	4605      	mov	r5, r0
   11140:	4651      	mov	r1, sl
   11142:	4628      	mov	r0, r5
   11144:	f7ff fbf4 	bl	10930 <quorem>
   11148:	45b9      	cmp	r9, r7
   1114a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1114e:	f808 3b01 	strb.w	r3, [r8], #1
   11152:	dced      	bgt.n	11130 <_dtoa_r+0x6d8>
   11154:	9a08      	ldr	r2, [sp, #32]
   11156:	2a00      	cmp	r2, #0
   11158:	bfc8      	it	gt
   1115a:	4693      	movgt	fp, r2
   1115c:	9a03      	ldr	r2, [sp, #12]
   1115e:	bfd8      	it	le
   11160:	f04f 0b01 	movle.w	fp, #1
   11164:	4493      	add	fp, r2
   11166:	2700      	movs	r7, #0
   11168:	4629      	mov	r1, r5
   1116a:	2201      	movs	r2, #1
   1116c:	4620      	mov	r0, r4
   1116e:	9304      	str	r3, [sp, #16]
   11170:	f7fd f9fc 	bl	e56c <__lshift>
   11174:	4651      	mov	r1, sl
   11176:	4605      	mov	r5, r0
   11178:	f7fd fa70 	bl	e65c <__mcmp>
   1117c:	2800      	cmp	r0, #0
   1117e:	f340 81dc 	ble.w	1153a <_dtoa_r+0xae2>
   11182:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11186:	9a03      	ldr	r2, [sp, #12]
   11188:	f10b 3bff 	add.w	fp, fp, #4294967295
   1118c:	e004      	b.n	11198 <_dtoa_r+0x740>
   1118e:	455a      	cmp	r2, fp
   11190:	f000 81ee 	beq.w	11570 <_dtoa_r+0xb18>
   11194:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11198:	2b39      	cmp	r3, #57	; 0x39
   1119a:	f10b 0901 	add.w	r9, fp, #1
   1119e:	d0f6      	beq.n	1118e <_dtoa_r+0x736>
   111a0:	3301      	adds	r3, #1
   111a2:	f88b 3000 	strb.w	r3, [fp]
   111a6:	4651      	mov	r1, sl
   111a8:	4620      	mov	r0, r4
   111aa:	f7fc fff9 	bl	e1a0 <_Bfree>
   111ae:	b156      	cbz	r6, 111c6 <_dtoa_r+0x76e>
   111b0:	b12f      	cbz	r7, 111be <_dtoa_r+0x766>
   111b2:	42b7      	cmp	r7, r6
   111b4:	d003      	beq.n	111be <_dtoa_r+0x766>
   111b6:	4639      	mov	r1, r7
   111b8:	4620      	mov	r0, r4
   111ba:	f7fc fff1 	bl	e1a0 <_Bfree>
   111be:	4631      	mov	r1, r6
   111c0:	4620      	mov	r0, r4
   111c2:	f7fc ffed 	bl	e1a0 <_Bfree>
   111c6:	4629      	mov	r1, r5
   111c8:	4620      	mov	r0, r4
   111ca:	f7fc ffe9 	bl	e1a0 <_Bfree>
   111ce:	2300      	movs	r3, #0
   111d0:	f889 3000 	strb.w	r3, [r9]
   111d4:	9b24      	ldr	r3, [sp, #144]	; 0x90
   111d6:	9a07      	ldr	r2, [sp, #28]
   111d8:	601a      	str	r2, [r3, #0]
   111da:	9b26      	ldr	r3, [sp, #152]	; 0x98
   111dc:	2b00      	cmp	r3, #0
   111de:	f43f ac77 	beq.w	10ad0 <_dtoa_r+0x78>
   111e2:	9803      	ldr	r0, [sp, #12]
   111e4:	f8c3 9000 	str.w	r9, [r3]
   111e8:	b019      	add	sp, #100	; 0x64
   111ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111ee:	2301      	movs	r3, #1
   111f0:	1bbf      	subs	r7, r7, r6
   111f2:	930e      	str	r3, [sp, #56]	; 0x38
   111f4:	1e7b      	subs	r3, r7, #1
   111f6:	9306      	str	r3, [sp, #24]
   111f8:	f57f acd9 	bpl.w	10bae <_dtoa_r+0x156>
   111fc:	f1c7 0301 	rsb	r3, r7, #1
   11200:	9309      	str	r3, [sp, #36]	; 0x24
   11202:	2300      	movs	r3, #0
   11204:	9306      	str	r3, [sp, #24]
   11206:	e4d4      	b.n	10bb2 <_dtoa_r+0x15a>
   11208:	4658      	mov	r0, fp
   1120a:	f7fb f9cd 	bl	c5a8 <__aeabi_i2d>
   1120e:	4642      	mov	r2, r8
   11210:	464b      	mov	r3, r9
   11212:	f7fb fa89 	bl	c728 <__aeabi_dcmpeq>
   11216:	2800      	cmp	r0, #0
   11218:	f47f acb1 	bne.w	10b7e <_dtoa_r+0x126>
   1121c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11220:	e4ad      	b.n	10b7e <_dtoa_r+0x126>
   11222:	4b1a      	ldr	r3, [pc, #104]	; (1128c <_dtoa_r+0x834>)
   11224:	9303      	str	r3, [sp, #12]
   11226:	9803      	ldr	r0, [sp, #12]
   11228:	b019      	add	sp, #100	; 0x64
   1122a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1122e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11232:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11234:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11236:	e716      	b.n	11066 <_dtoa_r+0x60e>
   11238:	f1c0 001c 	rsb	r0, r0, #28
   1123c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1123e:	4403      	add	r3, r0
   11240:	9309      	str	r3, [sp, #36]	; 0x24
   11242:	9b06      	ldr	r3, [sp, #24]
   11244:	4403      	add	r3, r0
   11246:	4407      	add	r7, r0
   11248:	9306      	str	r3, [sp, #24]
   1124a:	e74a      	b.n	110e2 <_dtoa_r+0x68a>
   1124c:	2601      	movs	r6, #1
   1124e:	e4c7      	b.n	10be0 <_dtoa_r+0x188>
   11250:	f1c3 0320 	rsb	r3, r3, #32
   11254:	fa08 f003 	lsl.w	r0, r8, r3
   11258:	e45e      	b.n	10b18 <_dtoa_r+0xc0>
   1125a:	4601      	mov	r1, r0
   1125c:	465a      	mov	r2, fp
   1125e:	4620      	mov	r0, r4
   11260:	f7fd f924 	bl	e4ac <__pow5mult>
   11264:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11266:	2b01      	cmp	r3, #1
   11268:	4682      	mov	sl, r0
   1126a:	f340 81ba 	ble.w	115e2 <_dtoa_r+0xb8a>
   1126e:	f04f 0900 	mov.w	r9, #0
   11272:	f8da 3010 	ldr.w	r3, [sl, #16]
   11276:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   1127a:	6918      	ldr	r0, [r3, #16]
   1127c:	f7fc ffea 	bl	e254 <__hi0bits>
   11280:	f1c0 0020 	rsb	r0, r0, #32
   11284:	e720      	b.n	110c8 <_dtoa_r+0x670>
   11286:	bf00      	nop
   11288:	40240000 	.word	0x40240000
   1128c:	00013d34 	.word	0x00013d34
   11290:	4631      	mov	r1, r6
   11292:	2300      	movs	r3, #0
   11294:	220a      	movs	r2, #10
   11296:	4620      	mov	r0, r4
   11298:	f7fc ff8c 	bl	e1b4 <__multadd>
   1129c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1129e:	2b00      	cmp	r3, #0
   112a0:	4606      	mov	r6, r0
   112a2:	f340 82f3 	ble.w	1188c <_dtoa_r+0xe34>
   112a6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   112aa:	2f00      	cmp	r7, #0
   112ac:	f300 811a 	bgt.w	114e4 <_dtoa_r+0xa8c>
   112b0:	f1b9 0f00 	cmp.w	r9, #0
   112b4:	f040 81e3 	bne.w	1167e <_dtoa_r+0xc26>
   112b8:	46b0      	mov	r8, r6
   112ba:	9b04      	ldr	r3, [sp, #16]
   112bc:	9f03      	ldr	r7, [sp, #12]
   112be:	9908      	ldr	r1, [sp, #32]
   112c0:	f003 0201 	and.w	r2, r3, #1
   112c4:	1e7b      	subs	r3, r7, #1
   112c6:	4419      	add	r1, r3
   112c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   112ca:	920c      	str	r2, [sp, #48]	; 0x30
   112cc:	4313      	orrs	r3, r2
   112ce:	9109      	str	r1, [sp, #36]	; 0x24
   112d0:	930a      	str	r3, [sp, #40]	; 0x28
   112d2:	4651      	mov	r1, sl
   112d4:	4628      	mov	r0, r5
   112d6:	f7ff fb2b 	bl	10930 <quorem>
   112da:	4631      	mov	r1, r6
   112dc:	4683      	mov	fp, r0
   112de:	4628      	mov	r0, r5
   112e0:	f7fd f9bc 	bl	e65c <__mcmp>
   112e4:	4642      	mov	r2, r8
   112e6:	4651      	mov	r1, sl
   112e8:	4681      	mov	r9, r0
   112ea:	4620      	mov	r0, r4
   112ec:	f7fd f9d6 	bl	e69c <__mdiff>
   112f0:	68c2      	ldr	r2, [r0, #12]
   112f2:	4601      	mov	r1, r0
   112f4:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   112f8:	2a00      	cmp	r2, #0
   112fa:	d142      	bne.n	11382 <_dtoa_r+0x92a>
   112fc:	9006      	str	r0, [sp, #24]
   112fe:	4628      	mov	r0, r5
   11300:	9308      	str	r3, [sp, #32]
   11302:	f7fd f9ab 	bl	e65c <__mcmp>
   11306:	9906      	ldr	r1, [sp, #24]
   11308:	9004      	str	r0, [sp, #16]
   1130a:	4620      	mov	r0, r4
   1130c:	f7fc ff48 	bl	e1a0 <_Bfree>
   11310:	9a04      	ldr	r2, [sp, #16]
   11312:	9b08      	ldr	r3, [sp, #32]
   11314:	b91a      	cbnz	r2, 1131e <_dtoa_r+0x8c6>
   11316:	990a      	ldr	r1, [sp, #40]	; 0x28
   11318:	2900      	cmp	r1, #0
   1131a:	f000 82a9 	beq.w	11870 <_dtoa_r+0xe18>
   1131e:	f1b9 0f00 	cmp.w	r9, #0
   11322:	f2c0 8171 	blt.w	11608 <_dtoa_r+0xbb0>
   11326:	9922      	ldr	r1, [sp, #136]	; 0x88
   11328:	ea49 0901 	orr.w	r9, r9, r1
   1132c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1132e:	ea51 0909 	orrs.w	r9, r1, r9
   11332:	f000 8169 	beq.w	11608 <_dtoa_r+0xbb0>
   11336:	2a00      	cmp	r2, #0
   11338:	f300 81bc 	bgt.w	116b4 <_dtoa_r+0xc5c>
   1133c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1133e:	703b      	strb	r3, [r7, #0]
   11340:	f107 0901 	add.w	r9, r7, #1
   11344:	4297      	cmp	r7, r2
   11346:	46cb      	mov	fp, r9
   11348:	f000 81ba 	beq.w	116c0 <_dtoa_r+0xc68>
   1134c:	4629      	mov	r1, r5
   1134e:	2300      	movs	r3, #0
   11350:	220a      	movs	r2, #10
   11352:	4620      	mov	r0, r4
   11354:	f7fc ff2e 	bl	e1b4 <__multadd>
   11358:	4546      	cmp	r6, r8
   1135a:	4605      	mov	r5, r0
   1135c:	4631      	mov	r1, r6
   1135e:	f04f 0300 	mov.w	r3, #0
   11362:	f04f 020a 	mov.w	r2, #10
   11366:	4620      	mov	r0, r4
   11368:	d012      	beq.n	11390 <_dtoa_r+0x938>
   1136a:	f7fc ff23 	bl	e1b4 <__multadd>
   1136e:	4641      	mov	r1, r8
   11370:	4606      	mov	r6, r0
   11372:	2300      	movs	r3, #0
   11374:	220a      	movs	r2, #10
   11376:	4620      	mov	r0, r4
   11378:	f7fc ff1c 	bl	e1b4 <__multadd>
   1137c:	464f      	mov	r7, r9
   1137e:	4680      	mov	r8, r0
   11380:	e7a7      	b.n	112d2 <_dtoa_r+0x87a>
   11382:	4620      	mov	r0, r4
   11384:	9304      	str	r3, [sp, #16]
   11386:	f7fc ff0b 	bl	e1a0 <_Bfree>
   1138a:	9b04      	ldr	r3, [sp, #16]
   1138c:	2201      	movs	r2, #1
   1138e:	e7c6      	b.n	1131e <_dtoa_r+0x8c6>
   11390:	f7fc ff10 	bl	e1b4 <__multadd>
   11394:	464f      	mov	r7, r9
   11396:	4606      	mov	r6, r0
   11398:	4680      	mov	r8, r0
   1139a:	e79a      	b.n	112d2 <_dtoa_r+0x87a>
   1139c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1139e:	2b02      	cmp	r3, #2
   113a0:	dc79      	bgt.n	11496 <_dtoa_r+0xa3e>
   113a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   113a4:	2b00      	cmp	r3, #0
   113a6:	d180      	bne.n	112aa <_dtoa_r+0x852>
   113a8:	9b07      	ldr	r3, [sp, #28]
   113aa:	4651      	mov	r1, sl
   113ac:	3301      	adds	r3, #1
   113ae:	4628      	mov	r0, r5
   113b0:	9307      	str	r3, [sp, #28]
   113b2:	f7ff fabd 	bl	10930 <quorem>
   113b6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   113ba:	f100 0330 	add.w	r3, r0, #48	; 0x30
   113be:	f80b 3b01 	strb.w	r3, [fp], #1
   113c2:	2700      	movs	r7, #0
   113c4:	e6d0      	b.n	11168 <_dtoa_r+0x710>
   113c6:	4651      	mov	r1, sl
   113c8:	4628      	mov	r0, r5
   113ca:	f7fd f947 	bl	e65c <__mcmp>
   113ce:	2800      	cmp	r0, #0
   113d0:	f6bf ae9d 	bge.w	1110e <_dtoa_r+0x6b6>
   113d4:	4629      	mov	r1, r5
   113d6:	2300      	movs	r3, #0
   113d8:	220a      	movs	r2, #10
   113da:	4620      	mov	r0, r4
   113dc:	f7fc feea 	bl	e1b4 <__multadd>
   113e0:	9b07      	ldr	r3, [sp, #28]
   113e2:	f103 38ff 	add.w	r8, r3, #4294967295
   113e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   113e8:	4605      	mov	r5, r0
   113ea:	2b00      	cmp	r3, #0
   113ec:	f47f af50 	bne.w	11290 <_dtoa_r+0x838>
   113f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   113f2:	2b00      	cmp	r3, #0
   113f4:	f340 8243 	ble.w	1187e <_dtoa_r+0xe26>
   113f8:	9308      	str	r3, [sp, #32]
   113fa:	e693      	b.n	11124 <_dtoa_r+0x6cc>
   113fc:	4bb6      	ldr	r3, [pc, #728]	; (116d8 <_dtoa_r+0xc80>)
   113fe:	9303      	str	r3, [sp, #12]
   11400:	3303      	adds	r3, #3
   11402:	e408      	b.n	10c16 <_dtoa_r+0x1be>
   11404:	201c      	movs	r0, #28
   11406:	e719      	b.n	1123c <_dtoa_r+0x7e4>
   11408:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1140c:	2900      	cmp	r1, #0
   1140e:	f47f ae54 	bne.w	110ba <_dtoa_r+0x662>
   11412:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11416:	2b00      	cmp	r3, #0
   11418:	f47f ae4f 	bne.w	110ba <_dtoa_r+0x662>
   1141c:	4baf      	ldr	r3, [pc, #700]	; (116dc <_dtoa_r+0xc84>)
   1141e:	4013      	ands	r3, r2
   11420:	2b00      	cmp	r3, #0
   11422:	f000 820b 	beq.w	1183c <_dtoa_r+0xde4>
   11426:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11428:	3301      	adds	r3, #1
   1142a:	9309      	str	r3, [sp, #36]	; 0x24
   1142c:	9b06      	ldr	r3, [sp, #24]
   1142e:	3301      	adds	r3, #1
   11430:	9306      	str	r3, [sp, #24]
   11432:	f04f 0901 	mov.w	r9, #1
   11436:	e642      	b.n	110be <_dtoa_r+0x666>
   11438:	2301      	movs	r3, #1
   1143a:	930c      	str	r3, [sp, #48]	; 0x30
   1143c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1143e:	9a07      	ldr	r2, [sp, #28]
   11440:	4413      	add	r3, r2
   11442:	9312      	str	r3, [sp, #72]	; 0x48
   11444:	3301      	adds	r3, #1
   11446:	2b01      	cmp	r3, #1
   11448:	461f      	mov	r7, r3
   1144a:	9308      	str	r3, [sp, #32]
   1144c:	bfb8      	it	lt
   1144e:	2701      	movlt	r7, #1
   11450:	2100      	movs	r1, #0
   11452:	2f17      	cmp	r7, #23
   11454:	63e1      	str	r1, [r4, #60]	; 0x3c
   11456:	f77f ac2f 	ble.w	10cb8 <_dtoa_r+0x260>
   1145a:	2201      	movs	r2, #1
   1145c:	2304      	movs	r3, #4
   1145e:	005b      	lsls	r3, r3, #1
   11460:	f103 0014 	add.w	r0, r3, #20
   11464:	42b8      	cmp	r0, r7
   11466:	4611      	mov	r1, r2
   11468:	f102 0201 	add.w	r2, r2, #1
   1146c:	d9f7      	bls.n	1145e <_dtoa_r+0xa06>
   1146e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11470:	e422      	b.n	10cb8 <_dtoa_r+0x260>
   11472:	2301      	movs	r3, #1
   11474:	930c      	str	r3, [sp, #48]	; 0x30
   11476:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11478:	2b00      	cmp	r3, #0
   1147a:	dd59      	ble.n	11530 <_dtoa_r+0xad8>
   1147c:	9312      	str	r3, [sp, #72]	; 0x48
   1147e:	9308      	str	r3, [sp, #32]
   11480:	461f      	mov	r7, r3
   11482:	e7e5      	b.n	11450 <_dtoa_r+0x9f8>
   11484:	2300      	movs	r3, #0
   11486:	930c      	str	r3, [sp, #48]	; 0x30
   11488:	e7d8      	b.n	1143c <_dtoa_r+0x9e4>
   1148a:	2300      	movs	r3, #0
   1148c:	930c      	str	r3, [sp, #48]	; 0x30
   1148e:	e7f2      	b.n	11476 <_dtoa_r+0xa1e>
   11490:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11492:	e9cd 8307 	strd	r8, r3, [sp, #28]
   11496:	9b08      	ldr	r3, [sp, #32]
   11498:	2b00      	cmp	r3, #0
   1149a:	f47f ad54 	bne.w	10f46 <_dtoa_r+0x4ee>
   1149e:	4651      	mov	r1, sl
   114a0:	2205      	movs	r2, #5
   114a2:	4620      	mov	r0, r4
   114a4:	f7fc fe86 	bl	e1b4 <__multadd>
   114a8:	4601      	mov	r1, r0
   114aa:	4682      	mov	sl, r0
   114ac:	4628      	mov	r0, r5
   114ae:	f7fd f8d5 	bl	e65c <__mcmp>
   114b2:	2800      	cmp	r0, #0
   114b4:	f77f ad47 	ble.w	10f46 <_dtoa_r+0x4ee>
   114b8:	9b03      	ldr	r3, [sp, #12]
   114ba:	9f07      	ldr	r7, [sp, #28]
   114bc:	2231      	movs	r2, #49	; 0x31
   114be:	4698      	mov	r8, r3
   114c0:	f803 2b01 	strb.w	r2, [r3], #1
   114c4:	3701      	adds	r7, #1
   114c6:	9303      	str	r3, [sp, #12]
   114c8:	4651      	mov	r1, sl
   114ca:	4620      	mov	r0, r4
   114cc:	f7fc fe68 	bl	e1a0 <_Bfree>
   114d0:	1c7b      	adds	r3, r7, #1
   114d2:	f8dd 900c 	ldr.w	r9, [sp, #12]
   114d6:	9307      	str	r3, [sp, #28]
   114d8:	f8cd 800c 	str.w	r8, [sp, #12]
   114dc:	2e00      	cmp	r6, #0
   114de:	f47f ae6e 	bne.w	111be <_dtoa_r+0x766>
   114e2:	e670      	b.n	111c6 <_dtoa_r+0x76e>
   114e4:	4631      	mov	r1, r6
   114e6:	463a      	mov	r2, r7
   114e8:	4620      	mov	r0, r4
   114ea:	f7fd f83f 	bl	e56c <__lshift>
   114ee:	4606      	mov	r6, r0
   114f0:	e6de      	b.n	112b0 <_dtoa_r+0x858>
   114f2:	eba3 0808 	sub.w	r8, r3, r8
   114f6:	e5a6      	b.n	11046 <_dtoa_r+0x5ee>
   114f8:	4631      	mov	r1, r6
   114fa:	4642      	mov	r2, r8
   114fc:	4620      	mov	r0, r4
   114fe:	f7fc ffd5 	bl	e4ac <__pow5mult>
   11502:	462a      	mov	r2, r5
   11504:	4601      	mov	r1, r0
   11506:	4606      	mov	r6, r0
   11508:	4620      	mov	r0, r4
   1150a:	f7fc ff21 	bl	e350 <__multiply>
   1150e:	4629      	mov	r1, r5
   11510:	4605      	mov	r5, r0
   11512:	4620      	mov	r0, r4
   11514:	f7fc fe44 	bl	e1a0 <_Bfree>
   11518:	e5bd      	b.n	11096 <_dtoa_r+0x63e>
   1151a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1151e:	f04f 0a02 	mov.w	sl, #2
   11522:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11526:	f7ff bbf4 	b.w	10d12 <_dtoa_r+0x2ba>
   1152a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1152e:	e685      	b.n	1123c <_dtoa_r+0x7e4>
   11530:	2301      	movs	r3, #1
   11532:	9323      	str	r3, [sp, #140]	; 0x8c
   11534:	9308      	str	r3, [sp, #32]
   11536:	f7ff bbbb 	b.w	10cb0 <_dtoa_r+0x258>
   1153a:	d103      	bne.n	11544 <_dtoa_r+0xaec>
   1153c:	9b04      	ldr	r3, [sp, #16]
   1153e:	07db      	lsls	r3, r3, #31
   11540:	f53f ae1f 	bmi.w	11182 <_dtoa_r+0x72a>
   11544:	46d9      	mov	r9, fp
   11546:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1154a:	2b30      	cmp	r3, #48	; 0x30
   1154c:	d0fa      	beq.n	11544 <_dtoa_r+0xaec>
   1154e:	e62a      	b.n	111a6 <_dtoa_r+0x74e>
   11550:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11552:	2a00      	cmp	r2, #0
   11554:	f000 812d 	beq.w	117b2 <_dtoa_r+0xd5a>
   11558:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1155c:	9a06      	ldr	r2, [sp, #24]
   1155e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11562:	441a      	add	r2, r3
   11564:	9206      	str	r2, [sp, #24]
   11566:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11568:	4617      	mov	r7, r2
   1156a:	441a      	add	r2, r3
   1156c:	9209      	str	r2, [sp, #36]	; 0x24
   1156e:	e575      	b.n	1105c <_dtoa_r+0x604>
   11570:	9b07      	ldr	r3, [sp, #28]
   11572:	9a03      	ldr	r2, [sp, #12]
   11574:	3301      	adds	r3, #1
   11576:	9307      	str	r3, [sp, #28]
   11578:	2331      	movs	r3, #49	; 0x31
   1157a:	7013      	strb	r3, [r2, #0]
   1157c:	e613      	b.n	111a6 <_dtoa_r+0x74e>
   1157e:	f04f 0a00 	mov.w	sl, #0
   11582:	4656      	mov	r6, sl
   11584:	e4df      	b.n	10f46 <_dtoa_r+0x4ee>
   11586:	900e      	str	r0, [sp, #56]	; 0x38
   11588:	e638      	b.n	111fc <_dtoa_r+0x7a4>
   1158a:	f000 813d 	beq.w	11808 <_dtoa_r+0xdb0>
   1158e:	9a07      	ldr	r2, [sp, #28]
   11590:	4b53      	ldr	r3, [pc, #332]	; (116e0 <_dtoa_r+0xc88>)
   11592:	4256      	negs	r6, r2
   11594:	f006 020f 	and.w	r2, r6, #15
   11598:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1159c:	e9d3 2300 	ldrd	r2, r3, [r3]
   115a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   115a4:	f001 fe98 	bl	132d8 <__aeabi_dmul>
   115a8:	1136      	asrs	r6, r6, #4
   115aa:	4680      	mov	r8, r0
   115ac:	4689      	mov	r9, r1
   115ae:	f000 8178 	beq.w	118a2 <_dtoa_r+0xe4a>
   115b2:	4f4c      	ldr	r7, [pc, #304]	; (116e4 <_dtoa_r+0xc8c>)
   115b4:	2300      	movs	r3, #0
   115b6:	f04f 0a02 	mov.w	sl, #2
   115ba:	07f2      	lsls	r2, r6, #31
   115bc:	d506      	bpl.n	115cc <_dtoa_r+0xb74>
   115be:	e9d7 2300 	ldrd	r2, r3, [r7]
   115c2:	f001 fe89 	bl	132d8 <__aeabi_dmul>
   115c6:	f10a 0a01 	add.w	sl, sl, #1
   115ca:	2301      	movs	r3, #1
   115cc:	1076      	asrs	r6, r6, #1
   115ce:	f107 0708 	add.w	r7, r7, #8
   115d2:	d1f2      	bne.n	115ba <_dtoa_r+0xb62>
   115d4:	2b00      	cmp	r3, #0
   115d6:	f43f abbb 	beq.w	10d50 <_dtoa_r+0x2f8>
   115da:	4680      	mov	r8, r0
   115dc:	4689      	mov	r9, r1
   115de:	f7ff bbb7 	b.w	10d50 <_dtoa_r+0x2f8>
   115e2:	9b04      	ldr	r3, [sp, #16]
   115e4:	2b00      	cmp	r3, #0
   115e6:	f47f ae42 	bne.w	1126e <_dtoa_r+0x816>
   115ea:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   115ee:	f3c2 0313 	ubfx	r3, r2, #0, #20
   115f2:	2b00      	cmp	r3, #0
   115f4:	f43f af12 	beq.w	1141c <_dtoa_r+0x9c4>
   115f8:	e639      	b.n	1126e <_dtoa_r+0x816>
   115fa:	4629      	mov	r1, r5
   115fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   115fe:	4620      	mov	r0, r4
   11600:	f7fc ff54 	bl	e4ac <__pow5mult>
   11604:	4605      	mov	r5, r0
   11606:	e54b      	b.n	110a0 <_dtoa_r+0x648>
   11608:	2a00      	cmp	r2, #0
   1160a:	dd12      	ble.n	11632 <_dtoa_r+0xbda>
   1160c:	4629      	mov	r1, r5
   1160e:	2201      	movs	r2, #1
   11610:	4620      	mov	r0, r4
   11612:	9304      	str	r3, [sp, #16]
   11614:	f7fc ffaa 	bl	e56c <__lshift>
   11618:	4651      	mov	r1, sl
   1161a:	4605      	mov	r5, r0
   1161c:	f7fd f81e 	bl	e65c <__mcmp>
   11620:	2800      	cmp	r0, #0
   11622:	9b04      	ldr	r3, [sp, #16]
   11624:	f340 8118 	ble.w	11858 <_dtoa_r+0xe00>
   11628:	2b39      	cmp	r3, #57	; 0x39
   1162a:	f000 80f9 	beq.w	11820 <_dtoa_r+0xdc8>
   1162e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11632:	46b9      	mov	r9, r7
   11634:	f809 3b01 	strb.w	r3, [r9], #1
   11638:	9b07      	ldr	r3, [sp, #28]
   1163a:	3301      	adds	r3, #1
   1163c:	4637      	mov	r7, r6
   1163e:	9307      	str	r3, [sp, #28]
   11640:	4646      	mov	r6, r8
   11642:	e5b0      	b.n	111a6 <_dtoa_r+0x74e>
   11644:	9509      	str	r5, [sp, #36]	; 0x24
   11646:	9c06      	ldr	r4, [sp, #24]
   11648:	9d04      	ldr	r5, [sp, #16]
   1164a:	4602      	mov	r2, r0
   1164c:	460b      	mov	r3, r1
   1164e:	f7fa fe5f 	bl	c310 <__adddf3>
   11652:	4652      	mov	r2, sl
   11654:	465b      	mov	r3, fp
   11656:	4680      	mov	r8, r0
   11658:	4689      	mov	r9, r1
   1165a:	f7fb f88d 	bl	c778 <__aeabi_dcmpgt>
   1165e:	b960      	cbnz	r0, 1167a <_dtoa_r+0xc22>
   11660:	4652      	mov	r2, sl
   11662:	465b      	mov	r3, fp
   11664:	4640      	mov	r0, r8
   11666:	4649      	mov	r1, r9
   11668:	f7fb f85e 	bl	c728 <__aeabi_dcmpeq>
   1166c:	2800      	cmp	r0, #0
   1166e:	f43f acce 	beq.w	1100e <_dtoa_r+0x5b6>
   11672:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11674:	07d9      	lsls	r1, r3, #31
   11676:	f57f acca 	bpl.w	1100e <_dtoa_r+0x5b6>
   1167a:	9a03      	ldr	r2, [sp, #12]
   1167c:	e404      	b.n	10e88 <_dtoa_r+0x430>
   1167e:	6871      	ldr	r1, [r6, #4]
   11680:	4620      	mov	r0, r4
   11682:	f7fc fd67 	bl	e154 <_Balloc>
   11686:	4607      	mov	r7, r0
   11688:	2800      	cmp	r0, #0
   1168a:	f000 810e 	beq.w	118aa <_dtoa_r+0xe52>
   1168e:	6933      	ldr	r3, [r6, #16]
   11690:	3302      	adds	r3, #2
   11692:	009a      	lsls	r2, r3, #2
   11694:	f106 010c 	add.w	r1, r6, #12
   11698:	300c      	adds	r0, #12
   1169a:	f7f8 f877 	bl	978c <memcpy>
   1169e:	4639      	mov	r1, r7
   116a0:	2201      	movs	r2, #1
   116a2:	4620      	mov	r0, r4
   116a4:	f7fc ff62 	bl	e56c <__lshift>
   116a8:	4680      	mov	r8, r0
   116aa:	e606      	b.n	112ba <_dtoa_r+0x862>
   116ac:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   116b0:	1a9f      	subs	r7, r3, r2
   116b2:	e4d3      	b.n	1105c <_dtoa_r+0x604>
   116b4:	2b39      	cmp	r3, #57	; 0x39
   116b6:	f000 80b3 	beq.w	11820 <_dtoa_r+0xdc8>
   116ba:	46b9      	mov	r9, r7
   116bc:	3301      	adds	r3, #1
   116be:	e7b9      	b.n	11634 <_dtoa_r+0xbdc>
   116c0:	9a07      	ldr	r2, [sp, #28]
   116c2:	3201      	adds	r2, #1
   116c4:	4637      	mov	r7, r6
   116c6:	9207      	str	r2, [sp, #28]
   116c8:	4646      	mov	r6, r8
   116ca:	e54d      	b.n	11168 <_dtoa_r+0x710>
   116cc:	4629      	mov	r1, r5
   116ce:	4620      	mov	r0, r4
   116d0:	f7fc feec 	bl	e4ac <__pow5mult>
   116d4:	4605      	mov	r5, r0
   116d6:	e4e3      	b.n	110a0 <_dtoa_r+0x648>
   116d8:	00015588 	.word	0x00015588
   116dc:	7ff00000 	.word	0x7ff00000
   116e0:	00015410 	.word	0x00015410
   116e4:	000153e8 	.word	0x000153e8
   116e8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   116ec:	4981      	ldr	r1, [pc, #516]	; (118f4 <_dtoa_r+0xe9c>)
   116ee:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   116f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   116f6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   116fa:	f001 fded 	bl	132d8 <__aeabi_dmul>
   116fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11702:	4649      	mov	r1, r9
   11704:	4640      	mov	r0, r8
   11706:	f001 fff9 	bl	136fc <__aeabi_d2iz>
   1170a:	4606      	mov	r6, r0
   1170c:	f7fa ff4c 	bl	c5a8 <__aeabi_i2d>
   11710:	460b      	mov	r3, r1
   11712:	4602      	mov	r2, r0
   11714:	4649      	mov	r1, r9
   11716:	4640      	mov	r0, r8
   11718:	f7fa fdf8 	bl	c30c <__aeabi_dsub>
   1171c:	9f03      	ldr	r7, [sp, #12]
   1171e:	4653      	mov	r3, sl
   11720:	3630      	adds	r6, #48	; 0x30
   11722:	2b01      	cmp	r3, #1
   11724:	f807 6b01 	strb.w	r6, [r7], #1
   11728:	4680      	mov	r8, r0
   1172a:	4689      	mov	r9, r1
   1172c:	f000 80b7 	beq.w	1189e <_dtoa_r+0xe46>
   11730:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11732:	9b03      	ldr	r3, [sp, #12]
   11734:	441e      	add	r6, r3
   11736:	4b70      	ldr	r3, [pc, #448]	; (118f8 <_dtoa_r+0xea0>)
   11738:	2200      	movs	r2, #0
   1173a:	4640      	mov	r0, r8
   1173c:	4649      	mov	r1, r9
   1173e:	f001 fdcb 	bl	132d8 <__aeabi_dmul>
   11742:	4689      	mov	r9, r1
   11744:	4680      	mov	r8, r0
   11746:	f001 ffd9 	bl	136fc <__aeabi_d2iz>
   1174a:	4682      	mov	sl, r0
   1174c:	f7fa ff2c 	bl	c5a8 <__aeabi_i2d>
   11750:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   11754:	4602      	mov	r2, r0
   11756:	460b      	mov	r3, r1
   11758:	4640      	mov	r0, r8
   1175a:	4649      	mov	r1, r9
   1175c:	f7fa fdd6 	bl	c30c <__aeabi_dsub>
   11760:	f807 ab01 	strb.w	sl, [r7], #1
   11764:	42be      	cmp	r6, r7
   11766:	4680      	mov	r8, r0
   11768:	4689      	mov	r9, r1
   1176a:	d1e4      	bne.n	11736 <_dtoa_r+0xcde>
   1176c:	4b63      	ldr	r3, [pc, #396]	; (118fc <_dtoa_r+0xea4>)
   1176e:	2200      	movs	r2, #0
   11770:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11774:	f7fa fdcc 	bl	c310 <__adddf3>
   11778:	4642      	mov	r2, r8
   1177a:	464b      	mov	r3, r9
   1177c:	f7fa ffde 	bl	c73c <__aeabi_dcmplt>
   11780:	2800      	cmp	r0, #0
   11782:	d164      	bne.n	1184e <_dtoa_r+0xdf6>
   11784:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11788:	495c      	ldr	r1, [pc, #368]	; (118fc <_dtoa_r+0xea4>)
   1178a:	2000      	movs	r0, #0
   1178c:	f7fa fdbe 	bl	c30c <__aeabi_dsub>
   11790:	4642      	mov	r2, r8
   11792:	464b      	mov	r3, r9
   11794:	f7fa fff0 	bl	c778 <__aeabi_dcmpgt>
   11798:	2800      	cmp	r0, #0
   1179a:	f43f abad 	beq.w	10ef8 <_dtoa_r+0x4a0>
   1179e:	46b1      	mov	r9, r6
   117a0:	3e01      	subs	r6, #1
   117a2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   117a6:	2b30      	cmp	r3, #48	; 0x30
   117a8:	d0f9      	beq.n	1179e <_dtoa_r+0xd46>
   117aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
   117ac:	3301      	adds	r3, #1
   117ae:	9307      	str	r3, [sp, #28]
   117b0:	e509      	b.n	111c6 <_dtoa_r+0x76e>
   117b2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   117b4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   117b8:	e6d0      	b.n	1155c <_dtoa_r+0xb04>
   117ba:	9b08      	ldr	r3, [sp, #32]
   117bc:	2b00      	cmp	r3, #0
   117be:	f43f ab6f 	beq.w	10ea0 <_dtoa_r+0x448>
   117c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   117c4:	2b00      	cmp	r3, #0
   117c6:	f77f ab97 	ble.w	10ef8 <_dtoa_r+0x4a0>
   117ca:	9a07      	ldr	r2, [sp, #28]
   117cc:	3a01      	subs	r2, #1
   117ce:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   117d2:	4640      	mov	r0, r8
   117d4:	4b48      	ldr	r3, [pc, #288]	; (118f8 <_dtoa_r+0xea0>)
   117d6:	2200      	movs	r2, #0
   117d8:	4649      	mov	r1, r9
   117da:	f001 fd7d 	bl	132d8 <__aeabi_dmul>
   117de:	4680      	mov	r8, r0
   117e0:	4689      	mov	r9, r1
   117e2:	f10a 0001 	add.w	r0, sl, #1
   117e6:	f7fa fedf 	bl	c5a8 <__aeabi_i2d>
   117ea:	4642      	mov	r2, r8
   117ec:	464b      	mov	r3, r9
   117ee:	f001 fd73 	bl	132d8 <__aeabi_dmul>
   117f2:	4b43      	ldr	r3, [pc, #268]	; (11900 <_dtoa_r+0xea8>)
   117f4:	2200      	movs	r2, #0
   117f6:	f7fa fd8b 	bl	c310 <__adddf3>
   117fa:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   117fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11802:	9311      	str	r3, [sp, #68]	; 0x44
   11804:	f7ff bac7 	b.w	10d96 <_dtoa_r+0x33e>
   11808:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   1180c:	f04f 0a02 	mov.w	sl, #2
   11810:	f7ff ba9e 	b.w	10d50 <_dtoa_r+0x2f8>
   11814:	9b07      	ldr	r3, [sp, #28]
   11816:	3301      	adds	r3, #1
   11818:	9307      	str	r3, [sp, #28]
   1181a:	2331      	movs	r3, #49	; 0x31
   1181c:	f7ff bb3b 	b.w	10e96 <_dtoa_r+0x43e>
   11820:	9b07      	ldr	r3, [sp, #28]
   11822:	46bb      	mov	fp, r7
   11824:	3301      	adds	r3, #1
   11826:	9307      	str	r3, [sp, #28]
   11828:	2339      	movs	r3, #57	; 0x39
   1182a:	4637      	mov	r7, r6
   1182c:	f80b 3b01 	strb.w	r3, [fp], #1
   11830:	4646      	mov	r6, r8
   11832:	e4a8      	b.n	11186 <_dtoa_r+0x72e>
   11834:	f04f 0a00 	mov.w	sl, #0
   11838:	4656      	mov	r6, sl
   1183a:	e63d      	b.n	114b8 <_dtoa_r+0xa60>
   1183c:	4699      	mov	r9, r3
   1183e:	e43e      	b.n	110be <_dtoa_r+0x666>
   11840:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11842:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11844:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11846:	3301      	adds	r3, #1
   11848:	9307      	str	r3, [sp, #28]
   1184a:	46b1      	mov	r9, r6
   1184c:	e4bb      	b.n	111c6 <_dtoa_r+0x76e>
   1184e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11850:	9a03      	ldr	r2, [sp, #12]
   11852:	9307      	str	r3, [sp, #28]
   11854:	f7ff bb18 	b.w	10e88 <_dtoa_r+0x430>
   11858:	f47f aeeb 	bne.w	11632 <_dtoa_r+0xbda>
   1185c:	07da      	lsls	r2, r3, #31
   1185e:	f57f aee8 	bpl.w	11632 <_dtoa_r+0xbda>
   11862:	e6e1      	b.n	11628 <_dtoa_r+0xbd0>
   11864:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   11868:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1186a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   1186c:	f7ff bb44 	b.w	10ef8 <_dtoa_r+0x4a0>
   11870:	2b39      	cmp	r3, #57	; 0x39
   11872:	d0d5      	beq.n	11820 <_dtoa_r+0xdc8>
   11874:	f1b9 0f00 	cmp.w	r9, #0
   11878:	f73f aed9 	bgt.w	1162e <_dtoa_r+0xbd6>
   1187c:	e6d9      	b.n	11632 <_dtoa_r+0xbda>
   1187e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11880:	2b02      	cmp	r3, #2
   11882:	f73f ae05 	bgt.w	11490 <_dtoa_r+0xa38>
   11886:	f8cd 801c 	str.w	r8, [sp, #28]
   1188a:	e58d      	b.n	113a8 <_dtoa_r+0x950>
   1188c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1188e:	2b02      	cmp	r3, #2
   11890:	f73f adfe 	bgt.w	11490 <_dtoa_r+0xa38>
   11894:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11896:	f8cd 801c 	str.w	r8, [sp, #28]
   1189a:	9308      	str	r3, [sp, #32]
   1189c:	e505      	b.n	112aa <_dtoa_r+0x852>
   1189e:	463e      	mov	r6, r7
   118a0:	e764      	b.n	1176c <_dtoa_r+0xd14>
   118a2:	f04f 0a02 	mov.w	sl, #2
   118a6:	f7ff ba53 	b.w	10d50 <_dtoa_r+0x2f8>
   118aa:	4b16      	ldr	r3, [pc, #88]	; (11904 <_dtoa_r+0xeac>)
   118ac:	4816      	ldr	r0, [pc, #88]	; (11908 <_dtoa_r+0xeb0>)
   118ae:	463a      	mov	r2, r7
   118b0:	f240 21ef 	movw	r1, #751	; 0x2ef
   118b4:	f7fe ffe0 	bl	10878 <__assert_func>
   118b8:	2600      	movs	r6, #0
   118ba:	63e6      	str	r6, [r4, #60]	; 0x3c
   118bc:	4631      	mov	r1, r6
   118be:	4620      	mov	r0, r4
   118c0:	f7fc fc48 	bl	e154 <_Balloc>
   118c4:	9003      	str	r0, [sp, #12]
   118c6:	b950      	cbnz	r0, 118de <_dtoa_r+0xe86>
   118c8:	4b0e      	ldr	r3, [pc, #56]	; (11904 <_dtoa_r+0xeac>)
   118ca:	480f      	ldr	r0, [pc, #60]	; (11908 <_dtoa_r+0xeb0>)
   118cc:	2200      	movs	r2, #0
   118ce:	f240 11af 	movw	r1, #431	; 0x1af
   118d2:	f7fe ffd1 	bl	10878 <__assert_func>
   118d6:	4b0d      	ldr	r3, [pc, #52]	; (1190c <_dtoa_r+0xeb4>)
   118d8:	9303      	str	r3, [sp, #12]
   118da:	f7ff b8f9 	b.w	10ad0 <_dtoa_r+0x78>
   118de:	9b03      	ldr	r3, [sp, #12]
   118e0:	63a3      	str	r3, [r4, #56]	; 0x38
   118e2:	f04f 33ff 	mov.w	r3, #4294967295
   118e6:	9312      	str	r3, [sp, #72]	; 0x48
   118e8:	9308      	str	r3, [sp, #32]
   118ea:	2301      	movs	r3, #1
   118ec:	9623      	str	r6, [sp, #140]	; 0x8c
   118ee:	930c      	str	r3, [sp, #48]	; 0x30
   118f0:	f7ff bb02 	b.w	10ef8 <_dtoa_r+0x4a0>
   118f4:	00015410 	.word	0x00015410
   118f8:	40240000 	.word	0x40240000
   118fc:	3fe00000 	.word	0x3fe00000
   11900:	401c0000 	.word	0x401c0000
   11904:	00015378 	.word	0x00015378
   11908:	0001558c 	.word	0x0001558c
   1190c:	0001557c 	.word	0x0001557c

00011910 <_wcrtomb_r>:
   11910:	b570      	push	{r4, r5, r6, lr}
   11912:	4605      	mov	r5, r0
   11914:	b084      	sub	sp, #16
   11916:	b15b      	cbz	r3, 11930 <_wcrtomb_r+0x20>
   11918:	461c      	mov	r4, r3
   1191a:	b169      	cbz	r1, 11938 <_wcrtomb_r+0x28>
   1191c:	4b0e      	ldr	r3, [pc, #56]	; (11958 <_wcrtomb_r+0x48>)
   1191e:	4628      	mov	r0, r5
   11920:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11924:	4623      	mov	r3, r4
   11926:	47b0      	blx	r6
   11928:	1c43      	adds	r3, r0, #1
   1192a:	d00f      	beq.n	1194c <_wcrtomb_r+0x3c>
   1192c:	b004      	add	sp, #16
   1192e:	bd70      	pop	{r4, r5, r6, pc}
   11930:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11934:	2900      	cmp	r1, #0
   11936:	d1f1      	bne.n	1191c <_wcrtomb_r+0xc>
   11938:	4a07      	ldr	r2, [pc, #28]	; (11958 <_wcrtomb_r+0x48>)
   1193a:	4623      	mov	r3, r4
   1193c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11940:	4628      	mov	r0, r5
   11942:	460a      	mov	r2, r1
   11944:	a901      	add	r1, sp, #4
   11946:	47b0      	blx	r6
   11948:	1c43      	adds	r3, r0, #1
   1194a:	d1ef      	bne.n	1192c <_wcrtomb_r+0x1c>
   1194c:	2200      	movs	r2, #0
   1194e:	238a      	movs	r3, #138	; 0x8a
   11950:	6022      	str	r2, [r4, #0]
   11952:	602b      	str	r3, [r5, #0]
   11954:	b004      	add	sp, #16
   11956:	bd70      	pop	{r4, r5, r6, pc}
   11958:	1fff8edc 	.word	0x1fff8edc

0001195c <_wcsrtombs_r>:
   1195c:	b500      	push	{lr}
   1195e:	b083      	sub	sp, #12
   11960:	f8dd c010 	ldr.w	ip, [sp, #16]
   11964:	e9cd 3c00 	strd	r3, ip, [sp]
   11968:	f04f 33ff 	mov.w	r3, #4294967295
   1196c:	f001 fbb6 	bl	130dc <_wcsnrtombs_r>
   11970:	b003      	add	sp, #12
   11972:	f85d fb04 	ldr.w	pc, [sp], #4
   11976:	bf00      	nop

00011978 <fiprintf>:
   11978:	b40e      	push	{r1, r2, r3}
   1197a:	b510      	push	{r4, lr}
   1197c:	b083      	sub	sp, #12
   1197e:	ab05      	add	r3, sp, #20
   11980:	4c06      	ldr	r4, [pc, #24]	; (1199c <fiprintf+0x24>)
   11982:	f853 2b04 	ldr.w	r2, [r3], #4
   11986:	9301      	str	r3, [sp, #4]
   11988:	4601      	mov	r1, r0
   1198a:	6820      	ldr	r0, [r4, #0]
   1198c:	f000 f8c4 	bl	11b18 <_vfiprintf_r>
   11990:	b003      	add	sp, #12
   11992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11996:	b003      	add	sp, #12
   11998:	4770      	bx	lr
   1199a:	bf00      	nop
   1199c:	1fff9168 	.word	0x1fff9168

000119a0 <__ssprint_r>:
   119a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a4:	6893      	ldr	r3, [r2, #8]
   119a6:	6817      	ldr	r7, [r2, #0]
   119a8:	b083      	sub	sp, #12
   119aa:	4692      	mov	sl, r2
   119ac:	2b00      	cmp	r3, #0
   119ae:	d070      	beq.n	11a92 <__ssprint_r+0xf2>
   119b0:	4681      	mov	r9, r0
   119b2:	688a      	ldr	r2, [r1, #8]
   119b4:	6808      	ldr	r0, [r1, #0]
   119b6:	460c      	mov	r4, r1
   119b8:	3708      	adds	r7, #8
   119ba:	e043      	b.n	11a44 <__ssprint_r+0xa4>
   119bc:	89a3      	ldrh	r3, [r4, #12]
   119be:	f413 6f90 	tst.w	r3, #1152	; 0x480
   119c2:	d02e      	beq.n	11a22 <__ssprint_r+0x82>
   119c4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   119c8:	eba0 0801 	sub.w	r8, r0, r1
   119cc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   119d0:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   119d4:	f108 0001 	add.w	r0, r8, #1
   119d8:	1076      	asrs	r6, r6, #1
   119da:	4428      	add	r0, r5
   119dc:	42b0      	cmp	r0, r6
   119de:	4632      	mov	r2, r6
   119e0:	bf84      	itt	hi
   119e2:	4606      	movhi	r6, r0
   119e4:	4632      	movhi	r2, r6
   119e6:	055b      	lsls	r3, r3, #21
   119e8:	d537      	bpl.n	11a5a <__ssprint_r+0xba>
   119ea:	4611      	mov	r1, r2
   119ec:	4648      	mov	r0, r9
   119ee:	f7fb fa25 	bl	ce3c <_malloc_r>
   119f2:	9001      	str	r0, [sp, #4]
   119f4:	2800      	cmp	r0, #0
   119f6:	d03a      	beq.n	11a6e <__ssprint_r+0xce>
   119f8:	4642      	mov	r2, r8
   119fa:	6921      	ldr	r1, [r4, #16]
   119fc:	f7f7 fec6 	bl	978c <memcpy>
   11a00:	89a2      	ldrh	r2, [r4, #12]
   11a02:	9b01      	ldr	r3, [sp, #4]
   11a04:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11a0c:	81a2      	strh	r2, [r4, #12]
   11a0e:	eba6 0208 	sub.w	r2, r6, r8
   11a12:	eb03 0008 	add.w	r0, r3, r8
   11a16:	6166      	str	r6, [r4, #20]
   11a18:	60a2      	str	r2, [r4, #8]
   11a1a:	6123      	str	r3, [r4, #16]
   11a1c:	6020      	str	r0, [r4, #0]
   11a1e:	462e      	mov	r6, r5
   11a20:	46a8      	mov	r8, r5
   11a22:	4642      	mov	r2, r8
   11a24:	4659      	mov	r1, fp
   11a26:	f7fb fffb 	bl	da20 <memmove>
   11a2a:	f8da 3008 	ldr.w	r3, [sl, #8]
   11a2e:	68a2      	ldr	r2, [r4, #8]
   11a30:	6820      	ldr	r0, [r4, #0]
   11a32:	1b92      	subs	r2, r2, r6
   11a34:	4440      	add	r0, r8
   11a36:	1b5b      	subs	r3, r3, r5
   11a38:	60a2      	str	r2, [r4, #8]
   11a3a:	6020      	str	r0, [r4, #0]
   11a3c:	f8ca 3008 	str.w	r3, [sl, #8]
   11a40:	b33b      	cbz	r3, 11a92 <__ssprint_r+0xf2>
   11a42:	3708      	adds	r7, #8
   11a44:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11a48:	2d00      	cmp	r5, #0
   11a4a:	d0fa      	beq.n	11a42 <__ssprint_r+0xa2>
   11a4c:	42aa      	cmp	r2, r5
   11a4e:	4616      	mov	r6, r2
   11a50:	4690      	mov	r8, r2
   11a52:	d9b3      	bls.n	119bc <__ssprint_r+0x1c>
   11a54:	462e      	mov	r6, r5
   11a56:	46a8      	mov	r8, r5
   11a58:	e7e3      	b.n	11a22 <__ssprint_r+0x82>
   11a5a:	4648      	mov	r0, r9
   11a5c:	f7fb fcaa 	bl	d3b4 <_realloc_r>
   11a60:	4603      	mov	r3, r0
   11a62:	2800      	cmp	r0, #0
   11a64:	d1d3      	bne.n	11a0e <__ssprint_r+0x6e>
   11a66:	6921      	ldr	r1, [r4, #16]
   11a68:	4648      	mov	r0, r9
   11a6a:	f7fc fa57 	bl	df1c <_free_r>
   11a6e:	89a3      	ldrh	r3, [r4, #12]
   11a70:	220c      	movs	r2, #12
   11a72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11a76:	f8c9 2000 	str.w	r2, [r9]
   11a7a:	f04f 30ff 	mov.w	r0, #4294967295
   11a7e:	81a3      	strh	r3, [r4, #12]
   11a80:	2200      	movs	r2, #0
   11a82:	2300      	movs	r3, #0
   11a84:	f8ca 2008 	str.w	r2, [sl, #8]
   11a88:	f8ca 3004 	str.w	r3, [sl, #4]
   11a8c:	b003      	add	sp, #12
   11a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a92:	2000      	movs	r0, #0
   11a94:	2300      	movs	r3, #0
   11a96:	f8ca 3004 	str.w	r3, [sl, #4]
   11a9a:	b003      	add	sp, #12
   11a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011aa0 <__sprint_r.part.0>:
   11aa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11aa4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11aa6:	049c      	lsls	r4, r3, #18
   11aa8:	4690      	mov	r8, r2
   11aaa:	d52d      	bpl.n	11b08 <__sprint_r.part.0+0x68>
   11aac:	6893      	ldr	r3, [r2, #8]
   11aae:	6812      	ldr	r2, [r2, #0]
   11ab0:	b343      	cbz	r3, 11b04 <__sprint_r.part.0+0x64>
   11ab2:	468b      	mov	fp, r1
   11ab4:	4606      	mov	r6, r0
   11ab6:	f102 0908 	add.w	r9, r2, #8
   11aba:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   11abe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   11ac2:	d015      	beq.n	11af0 <__sprint_r.part.0+0x50>
   11ac4:	3d04      	subs	r5, #4
   11ac6:	2400      	movs	r4, #0
   11ac8:	e001      	b.n	11ace <__sprint_r.part.0+0x2e>
   11aca:	42a7      	cmp	r7, r4
   11acc:	d00e      	beq.n	11aec <__sprint_r.part.0+0x4c>
   11ace:	f855 1f04 	ldr.w	r1, [r5, #4]!
   11ad2:	465a      	mov	r2, fp
   11ad4:	4630      	mov	r0, r6
   11ad6:	f001 fa51 	bl	12f7c <_fputwc_r>
   11ada:	1c43      	adds	r3, r0, #1
   11adc:	f104 0401 	add.w	r4, r4, #1
   11ae0:	d1f3      	bne.n	11aca <__sprint_r.part.0+0x2a>
   11ae2:	2300      	movs	r3, #0
   11ae4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11ae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11aec:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11af0:	f02a 0a03 	bic.w	sl, sl, #3
   11af4:	eba3 030a 	sub.w	r3, r3, sl
   11af8:	f8c8 3008 	str.w	r3, [r8, #8]
   11afc:	f109 0908 	add.w	r9, r9, #8
   11b00:	2b00      	cmp	r3, #0
   11b02:	d1da      	bne.n	11aba <__sprint_r.part.0+0x1a>
   11b04:	2000      	movs	r0, #0
   11b06:	e7ec      	b.n	11ae2 <__sprint_r.part.0+0x42>
   11b08:	f001 f808 	bl	12b1c <__sfvwrite_r>
   11b0c:	2300      	movs	r3, #0
   11b0e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11b12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b16:	bf00      	nop

00011b18 <_vfiprintf_r>:
   11b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b1c:	b0c5      	sub	sp, #276	; 0x114
   11b1e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   11b22:	4683      	mov	fp, r0
   11b24:	9103      	str	r1, [sp, #12]
   11b26:	4616      	mov	r6, r2
   11b28:	2100      	movs	r1, #0
   11b2a:	2208      	movs	r2, #8
   11b2c:	4650      	mov	r0, sl
   11b2e:	461c      	mov	r4, r3
   11b30:	9307      	str	r3, [sp, #28]
   11b32:	f7fb fff1 	bl	db18 <memset>
   11b36:	f1bb 0f00 	cmp.w	fp, #0
   11b3a:	d004      	beq.n	11b46 <_vfiprintf_r+0x2e>
   11b3c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   11b40:	2b00      	cmp	r3, #0
   11b42:	f000 86a1 	beq.w	12888 <_vfiprintf_r+0xd70>
   11b46:	9a03      	ldr	r2, [sp, #12]
   11b48:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11b4a:	07db      	lsls	r3, r3, #31
   11b4c:	f140 851c 	bpl.w	12588 <_vfiprintf_r+0xa70>
   11b50:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11b54:	b28a      	uxth	r2, r1
   11b56:	0495      	lsls	r5, r2, #18
   11b58:	d409      	bmi.n	11b6e <_vfiprintf_r+0x56>
   11b5a:	9b03      	ldr	r3, [sp, #12]
   11b5c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   11b60:	8199      	strh	r1, [r3, #12]
   11b62:	b28a      	uxth	r2, r1
   11b64:	4619      	mov	r1, r3
   11b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11b6c:	664b      	str	r3, [r1, #100]	; 0x64
   11b6e:	0710      	lsls	r0, r2, #28
   11b70:	f140 8104 	bpl.w	11d7c <_vfiprintf_r+0x264>
   11b74:	9b03      	ldr	r3, [sp, #12]
   11b76:	691b      	ldr	r3, [r3, #16]
   11b78:	2b00      	cmp	r3, #0
   11b7a:	f000 80ff 	beq.w	11d7c <_vfiprintf_r+0x264>
   11b7e:	f002 031a 	and.w	r3, r2, #26
   11b82:	2b0a      	cmp	r3, #10
   11b84:	f000 8108 	beq.w	11d98 <_vfiprintf_r+0x280>
   11b88:	2300      	movs	r3, #0
   11b8a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   11b8e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   11b92:	aa1b      	add	r2, sp, #108	; 0x6c
   11b94:	930b      	str	r3, [sp, #44]	; 0x2c
   11b96:	9218      	str	r2, [sp, #96]	; 0x60
   11b98:	4691      	mov	r9, r2
   11b9a:	930c      	str	r3, [sp, #48]	; 0x30
   11b9c:	9305      	str	r3, [sp, #20]
   11b9e:	46b0      	mov	r8, r6
   11ba0:	4644      	mov	r4, r8
   11ba2:	4ba6      	ldr	r3, [pc, #664]	; (11e3c <_vfiprintf_r+0x324>)
   11ba4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   11ba8:	f7fc f83a 	bl	dc20 <__locale_mb_cur_max>
   11bac:	4622      	mov	r2, r4
   11bae:	4603      	mov	r3, r0
   11bb0:	a912      	add	r1, sp, #72	; 0x48
   11bb2:	f8cd a000 	str.w	sl, [sp]
   11bb6:	4658      	mov	r0, fp
   11bb8:	47a8      	blx	r5
   11bba:	2800      	cmp	r0, #0
   11bbc:	f000 8140 	beq.w	11e40 <_vfiprintf_r+0x328>
   11bc0:	f2c0 8133 	blt.w	11e2a <_vfiprintf_r+0x312>
   11bc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11bc6:	2a25      	cmp	r2, #37	; 0x25
   11bc8:	4603      	mov	r3, r0
   11bca:	d001      	beq.n	11bd0 <_vfiprintf_r+0xb8>
   11bcc:	441c      	add	r4, r3
   11bce:	e7e8      	b.n	11ba2 <_vfiprintf_r+0x8a>
   11bd0:	ebb4 0608 	subs.w	r6, r4, r8
   11bd4:	4605      	mov	r5, r0
   11bd6:	f040 8137 	bne.w	11e48 <_vfiprintf_r+0x330>
   11bda:	2300      	movs	r3, #0
   11bdc:	7861      	ldrb	r1, [r4, #1]
   11bde:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11be2:	f104 0801 	add.w	r8, r4, #1
   11be6:	9306      	str	r3, [sp, #24]
   11be8:	f04f 37ff 	mov.w	r7, #4294967295
   11bec:	461e      	mov	r6, r3
   11bee:	242b      	movs	r4, #43	; 0x2b
   11bf0:	f108 0801 	add.w	r8, r8, #1
   11bf4:	f1a1 0320 	sub.w	r3, r1, #32
   11bf8:	2b5a      	cmp	r3, #90	; 0x5a
   11bfa:	f200 8165 	bhi.w	11ec8 <_vfiprintf_r+0x3b0>
   11bfe:	e8df f013 	tbh	[pc, r3, lsl #1]
   11c02:	029f      	.short	0x029f
   11c04:	01630163 	.word	0x01630163
   11c08:	0163029a 	.word	0x0163029a
   11c0c:	01630163 	.word	0x01630163
   11c10:	0163006a 	.word	0x0163006a
   11c14:	02670163 	.word	0x02670163
   11c18:	01630277 	.word	0x01630277
   11c1c:	02810272 	.word	0x02810272
   11c20:	027c0163 	.word	0x027c0163
   11c24:	005b005b 	.word	0x005b005b
   11c28:	005b005b 	.word	0x005b005b
   11c2c:	005b005b 	.word	0x005b005b
   11c30:	005b005b 	.word	0x005b005b
   11c34:	0163005b 	.word	0x0163005b
   11c38:	01630163 	.word	0x01630163
   11c3c:	01630163 	.word	0x01630163
   11c40:	01630163 	.word	0x01630163
   11c44:	01630163 	.word	0x01630163
   11c48:	00840246 	.word	0x00840246
   11c4c:	01630163 	.word	0x01630163
   11c50:	01630163 	.word	0x01630163
   11c54:	01630163 	.word	0x01630163
   11c58:	01630163 	.word	0x01630163
   11c5c:	01630163 	.word	0x01630163
   11c60:	016300e2 	.word	0x016300e2
   11c64:	01630163 	.word	0x01630163
   11c68:	0163021d 	.word	0x0163021d
   11c6c:	016302c4 	.word	0x016302c4
   11c70:	05940163 	.word	0x05940163
   11c74:	01630163 	.word	0x01630163
   11c78:	01630163 	.word	0x01630163
   11c7c:	01630163 	.word	0x01630163
   11c80:	01630163 	.word	0x01630163
   11c84:	01630163 	.word	0x01630163
   11c88:	00860246 	.word	0x00860246
   11c8c:	01630163 	.word	0x01630163
   11c90:	02b70163 	.word	0x02b70163
   11c94:	007f0086 	.word	0x007f0086
   11c98:	02aa0163 	.word	0x02aa0163
   11c9c:	02e70163 	.word	0x02e70163
   11ca0:	02d700e4 	.word	0x02d700e4
   11ca4:	0163007f 	.word	0x0163007f
   11ca8:	007c021d 	.word	0x007c021d
   11cac:	01630572 	.word	0x01630572
   11cb0:	05740163 	.word	0x05740163
   11cb4:	007c0163 	.word	0x007c0163
   11cb8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11cbc:	2200      	movs	r2, #0
   11cbe:	f818 1b01 	ldrb.w	r1, [r8], #1
   11cc2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   11cc6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   11cca:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   11cce:	2b09      	cmp	r3, #9
   11cd0:	d9f5      	bls.n	11cbe <_vfiprintf_r+0x1a6>
   11cd2:	9206      	str	r2, [sp, #24]
   11cd4:	e78e      	b.n	11bf4 <_vfiprintf_r+0xdc>
   11cd6:	4658      	mov	r0, fp
   11cd8:	f7fe fce8 	bl	106ac <_localeconv_r>
   11cdc:	6843      	ldr	r3, [r0, #4]
   11cde:	930d      	str	r3, [sp, #52]	; 0x34
   11ce0:	4618      	mov	r0, r3
   11ce2:	f7fc f84d 	bl	dd80 <strlen>
   11ce6:	900e      	str	r0, [sp, #56]	; 0x38
   11ce8:	4605      	mov	r5, r0
   11cea:	4658      	mov	r0, fp
   11cec:	f7fe fcde 	bl	106ac <_localeconv_r>
   11cf0:	6883      	ldr	r3, [r0, #8]
   11cf2:	930c      	str	r3, [sp, #48]	; 0x30
   11cf4:	2d00      	cmp	r5, #0
   11cf6:	f040 84df 	bne.w	126b8 <_vfiprintf_r+0xba0>
   11cfa:	f898 1000 	ldrb.w	r1, [r8]
   11cfe:	e777      	b.n	11bf0 <_vfiprintf_r+0xd8>
   11d00:	f898 1000 	ldrb.w	r1, [r8]
   11d04:	f046 0620 	orr.w	r6, r6, #32
   11d08:	e772      	b.n	11bf0 <_vfiprintf_r+0xd8>
   11d0a:	f046 0610 	orr.w	r6, r6, #16
   11d0e:	06b4      	lsls	r4, r6, #26
   11d10:	f140 8178 	bpl.w	12004 <_vfiprintf_r+0x4ec>
   11d14:	9b07      	ldr	r3, [sp, #28]
   11d16:	3307      	adds	r3, #7
   11d18:	f023 0307 	bic.w	r3, r3, #7
   11d1c:	461a      	mov	r2, r3
   11d1e:	6859      	ldr	r1, [r3, #4]
   11d20:	f852 3b08 	ldr.w	r3, [r2], #8
   11d24:	9207      	str	r2, [sp, #28]
   11d26:	460a      	mov	r2, r1
   11d28:	2900      	cmp	r1, #0
   11d2a:	f2c0 847a 	blt.w	12622 <_vfiprintf_r+0xb0a>
   11d2e:	1c79      	adds	r1, r7, #1
   11d30:	f000 85a7 	beq.w	12882 <_vfiprintf_r+0xd6a>
   11d34:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   11d38:	9102      	str	r1, [sp, #8]
   11d3a:	ea53 0102 	orrs.w	r1, r3, r2
   11d3e:	f000 8448 	beq.w	125d2 <_vfiprintf_r+0xaba>
   11d42:	2b0a      	cmp	r3, #10
   11d44:	f172 0100 	sbcs.w	r1, r2, #0
   11d48:	f080 8549 	bcs.w	127de <_vfiprintf_r+0xcc6>
   11d4c:	3330      	adds	r3, #48	; 0x30
   11d4e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11d52:	9e02      	ldr	r6, [sp, #8]
   11d54:	2301      	movs	r3, #1
   11d56:	9304      	str	r3, [sp, #16]
   11d58:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11d5c:	9b04      	ldr	r3, [sp, #16]
   11d5e:	42bb      	cmp	r3, r7
   11d60:	bfb8      	it	lt
   11d62:	463b      	movlt	r3, r7
   11d64:	9302      	str	r3, [sp, #8]
   11d66:	2300      	movs	r3, #0
   11d68:	9308      	str	r3, [sp, #32]
   11d6a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   11d6e:	2b00      	cmp	r3, #0
   11d70:	f000 80b8 	beq.w	11ee4 <_vfiprintf_r+0x3cc>
   11d74:	9b02      	ldr	r3, [sp, #8]
   11d76:	3301      	adds	r3, #1
   11d78:	9302      	str	r3, [sp, #8]
   11d7a:	e0b3      	b.n	11ee4 <_vfiprintf_r+0x3cc>
   11d7c:	9d03      	ldr	r5, [sp, #12]
   11d7e:	4658      	mov	r0, fp
   11d80:	4629      	mov	r1, r5
   11d82:	f001 f83f 	bl	12e04 <__swsetup_r>
   11d86:	2800      	cmp	r0, #0
   11d88:	f040 8656 	bne.w	12a38 <_vfiprintf_r+0xf20>
   11d8c:	89aa      	ldrh	r2, [r5, #12]
   11d8e:	f002 031a 	and.w	r3, r2, #26
   11d92:	2b0a      	cmp	r3, #10
   11d94:	f47f aef8 	bne.w	11b88 <_vfiprintf_r+0x70>
   11d98:	9903      	ldr	r1, [sp, #12]
   11d9a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   11d9e:	2b00      	cmp	r3, #0
   11da0:	f6ff aef2 	blt.w	11b88 <_vfiprintf_r+0x70>
   11da4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11da6:	07db      	lsls	r3, r3, #31
   11da8:	d402      	bmi.n	11db0 <_vfiprintf_r+0x298>
   11daa:	0597      	lsls	r7, r2, #22
   11dac:	f140 8618 	bpl.w	129e0 <_vfiprintf_r+0xec8>
   11db0:	9903      	ldr	r1, [sp, #12]
   11db2:	4623      	mov	r3, r4
   11db4:	4632      	mov	r2, r6
   11db6:	4658      	mov	r0, fp
   11db8:	f000 fe70 	bl	12a9c <__sbprintf>
   11dbc:	9005      	str	r0, [sp, #20]
   11dbe:	9805      	ldr	r0, [sp, #20]
   11dc0:	b045      	add	sp, #276	; 0x114
   11dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11dc6:	f046 0610 	orr.w	r6, r6, #16
   11dca:	f016 0220 	ands.w	r2, r6, #32
   11dce:	f000 8126 	beq.w	1201e <_vfiprintf_r+0x506>
   11dd2:	9b07      	ldr	r3, [sp, #28]
   11dd4:	3307      	adds	r3, #7
   11dd6:	f023 0307 	bic.w	r3, r3, #7
   11dda:	4619      	mov	r1, r3
   11ddc:	685a      	ldr	r2, [r3, #4]
   11dde:	f851 3b08 	ldr.w	r3, [r1], #8
   11de2:	9107      	str	r1, [sp, #28]
   11de4:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   11de8:	9102      	str	r1, [sp, #8]
   11dea:	2100      	movs	r1, #0
   11dec:	2000      	movs	r0, #0
   11dee:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   11df2:	1c78      	adds	r0, r7, #1
   11df4:	f000 8200 	beq.w	121f8 <_vfiprintf_r+0x6e0>
   11df8:	9802      	ldr	r0, [sp, #8]
   11dfa:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   11dfe:	ea53 0002 	orrs.w	r0, r3, r2
   11e02:	f040 81f8 	bne.w	121f6 <_vfiprintf_r+0x6de>
   11e06:	2f00      	cmp	r7, #0
   11e08:	f040 8543 	bne.w	12892 <_vfiprintf_r+0xd7a>
   11e0c:	2900      	cmp	r1, #0
   11e0e:	f040 83e4 	bne.w	125da <_vfiprintf_r+0xac2>
   11e12:	9b02      	ldr	r3, [sp, #8]
   11e14:	f013 0301 	ands.w	r3, r3, #1
   11e18:	9304      	str	r3, [sp, #16]
   11e1a:	f000 8420 	beq.w	1265e <_vfiprintf_r+0xb46>
   11e1e:	2330      	movs	r3, #48	; 0x30
   11e20:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   11e24:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   11e28:	e798      	b.n	11d5c <_vfiprintf_r+0x244>
   11e2a:	2208      	movs	r2, #8
   11e2c:	2100      	movs	r1, #0
   11e2e:	4650      	mov	r0, sl
   11e30:	f7fb fe72 	bl	db18 <memset>
   11e34:	2301      	movs	r3, #1
   11e36:	441c      	add	r4, r3
   11e38:	e6b3      	b.n	11ba2 <_vfiprintf_r+0x8a>
   11e3a:	bf00      	nop
   11e3c:	1fff8edc 	.word	0x1fff8edc
   11e40:	ebb4 0608 	subs.w	r6, r4, r8
   11e44:	4605      	mov	r5, r0
   11e46:	d01a      	beq.n	11e7e <_vfiprintf_r+0x366>
   11e48:	9b19      	ldr	r3, [sp, #100]	; 0x64
   11e4a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   11e4c:	3301      	adds	r3, #1
   11e4e:	4432      	add	r2, r6
   11e50:	2b07      	cmp	r3, #7
   11e52:	e9c9 8600 	strd	r8, r6, [r9]
   11e56:	921a      	str	r2, [sp, #104]	; 0x68
   11e58:	9319      	str	r3, [sp, #100]	; 0x64
   11e5a:	dd1a      	ble.n	11e92 <_vfiprintf_r+0x37a>
   11e5c:	2a00      	cmp	r2, #0
   11e5e:	f000 83b4 	beq.w	125ca <_vfiprintf_r+0xab2>
   11e62:	9903      	ldr	r1, [sp, #12]
   11e64:	aa18      	add	r2, sp, #96	; 0x60
   11e66:	4658      	mov	r0, fp
   11e68:	f7ff fe1a 	bl	11aa0 <__sprint_r.part.0>
   11e6c:	b9d8      	cbnz	r0, 11ea6 <_vfiprintf_r+0x38e>
   11e6e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11e72:	9b05      	ldr	r3, [sp, #20]
   11e74:	4433      	add	r3, r6
   11e76:	9305      	str	r3, [sp, #20]
   11e78:	2d00      	cmp	r5, #0
   11e7a:	f47f aeae 	bne.w	11bda <_vfiprintf_r+0xc2>
   11e7e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11e80:	2b00      	cmp	r3, #0
   11e82:	f040 85ca 	bne.w	12a1a <_vfiprintf_r+0xf02>
   11e86:	9b03      	ldr	r3, [sp, #12]
   11e88:	2200      	movs	r2, #0
   11e8a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   11e8e:	9219      	str	r2, [sp, #100]	; 0x64
   11e90:	e00c      	b.n	11eac <_vfiprintf_r+0x394>
   11e92:	f109 0908 	add.w	r9, r9, #8
   11e96:	e7ec      	b.n	11e72 <_vfiprintf_r+0x35a>
   11e98:	46b3      	mov	fp, r6
   11e9a:	9b08      	ldr	r3, [sp, #32]
   11e9c:	b11b      	cbz	r3, 11ea6 <_vfiprintf_r+0x38e>
   11e9e:	9908      	ldr	r1, [sp, #32]
   11ea0:	4658      	mov	r0, fp
   11ea2:	f7fc f83b 	bl	df1c <_free_r>
   11ea6:	9b03      	ldr	r3, [sp, #12]
   11ea8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   11eac:	9a03      	ldr	r2, [sp, #12]
   11eae:	6e52      	ldr	r2, [r2, #100]	; 0x64
   11eb0:	f012 0f01 	tst.w	r2, #1
   11eb4:	b29a      	uxth	r2, r3
   11eb6:	f000 809c 	beq.w	11ff2 <_vfiprintf_r+0x4da>
   11eba:	0650      	lsls	r0, r2, #25
   11ebc:	f100 85c8 	bmi.w	12a50 <_vfiprintf_r+0xf38>
   11ec0:	9805      	ldr	r0, [sp, #20]
   11ec2:	b045      	add	sp, #276	; 0x114
   11ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ec8:	2900      	cmp	r1, #0
   11eca:	d0d8      	beq.n	11e7e <_vfiprintf_r+0x366>
   11ecc:	2300      	movs	r3, #0
   11ece:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   11ed2:	2301      	movs	r3, #1
   11ed4:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   11ed8:	9302      	str	r3, [sp, #8]
   11eda:	9304      	str	r3, [sp, #16]
   11edc:	ac2b      	add	r4, sp, #172	; 0xac
   11ede:	2300      	movs	r3, #0
   11ee0:	9308      	str	r3, [sp, #32]
   11ee2:	461f      	mov	r7, r3
   11ee4:	f016 0302 	ands.w	r3, r6, #2
   11ee8:	9309      	str	r3, [sp, #36]	; 0x24
   11eea:	d002      	beq.n	11ef2 <_vfiprintf_r+0x3da>
   11eec:	9b02      	ldr	r3, [sp, #8]
   11eee:	3302      	adds	r3, #2
   11ef0:	9302      	str	r3, [sp, #8]
   11ef2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   11ef6:	930a      	str	r3, [sp, #40]	; 0x28
   11ef8:	d105      	bne.n	11f06 <_vfiprintf_r+0x3ee>
   11efa:	9b06      	ldr	r3, [sp, #24]
   11efc:	9a02      	ldr	r2, [sp, #8]
   11efe:	1a9d      	subs	r5, r3, r2
   11f00:	2d00      	cmp	r5, #0
   11f02:	f300 8294 	bgt.w	1242e <_vfiprintf_r+0x916>
   11f06:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11f0a:	1c41      	adds	r1, r0, #1
   11f0c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   11f10:	b182      	cbz	r2, 11f34 <_vfiprintf_r+0x41c>
   11f12:	2201      	movs	r2, #1
   11f14:	3301      	adds	r3, #1
   11f16:	f8c9 2004 	str.w	r2, [r9, #4]
   11f1a:	2907      	cmp	r1, #7
   11f1c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   11f20:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11f24:	f8c9 2000 	str.w	r2, [r9]
   11f28:	f300 8264 	bgt.w	123f4 <_vfiprintf_r+0x8dc>
   11f2c:	4608      	mov	r0, r1
   11f2e:	f109 0908 	add.w	r9, r9, #8
   11f32:	3101      	adds	r1, #1
   11f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11f36:	b1da      	cbz	r2, 11f70 <_vfiprintf_r+0x458>
   11f38:	aa11      	add	r2, sp, #68	; 0x44
   11f3a:	3302      	adds	r3, #2
   11f3c:	f8c9 2000 	str.w	r2, [r9]
   11f40:	2907      	cmp	r1, #7
   11f42:	f04f 0202 	mov.w	r2, #2
   11f46:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11f4a:	f8c9 2004 	str.w	r2, [r9, #4]
   11f4e:	f340 8269 	ble.w	12424 <_vfiprintf_r+0x90c>
   11f52:	2b00      	cmp	r3, #0
   11f54:	f000 8358 	beq.w	12608 <_vfiprintf_r+0xaf0>
   11f58:	9903      	ldr	r1, [sp, #12]
   11f5a:	aa18      	add	r2, sp, #96	; 0x60
   11f5c:	4658      	mov	r0, fp
   11f5e:	f7ff fd9f 	bl	11aa0 <__sprint_r.part.0>
   11f62:	2800      	cmp	r0, #0
   11f64:	d199      	bne.n	11e9a <_vfiprintf_r+0x382>
   11f66:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   11f6a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11f6e:	1c41      	adds	r1, r0, #1
   11f70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   11f72:	2a80      	cmp	r2, #128	; 0x80
   11f74:	f000 8182 	beq.w	1227c <_vfiprintf_r+0x764>
   11f78:	9a04      	ldr	r2, [sp, #16]
   11f7a:	1abd      	subs	r5, r7, r2
   11f7c:	2d00      	cmp	r5, #0
   11f7e:	f300 81e0 	bgt.w	12342 <_vfiprintf_r+0x82a>
   11f82:	9a04      	ldr	r2, [sp, #16]
   11f84:	f8c9 4000 	str.w	r4, [r9]
   11f88:	4413      	add	r3, r2
   11f8a:	2907      	cmp	r1, #7
   11f8c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   11f90:	f8c9 2004 	str.w	r2, [r9, #4]
   11f94:	f340 816c 	ble.w	12270 <_vfiprintf_r+0x758>
   11f98:	2b00      	cmp	r3, #0
   11f9a:	f000 829e 	beq.w	124da <_vfiprintf_r+0x9c2>
   11f9e:	9903      	ldr	r1, [sp, #12]
   11fa0:	aa18      	add	r2, sp, #96	; 0x60
   11fa2:	4658      	mov	r0, fp
   11fa4:	f7ff fd7c 	bl	11aa0 <__sprint_r.part.0>
   11fa8:	2800      	cmp	r0, #0
   11faa:	f47f af76 	bne.w	11e9a <_vfiprintf_r+0x382>
   11fae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11fb0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11fb4:	0775      	lsls	r5, r6, #29
   11fb6:	d505      	bpl.n	11fc4 <_vfiprintf_r+0x4ac>
   11fb8:	9a06      	ldr	r2, [sp, #24]
   11fba:	9902      	ldr	r1, [sp, #8]
   11fbc:	1a54      	subs	r4, r2, r1
   11fbe:	2c00      	cmp	r4, #0
   11fc0:	f300 8295 	bgt.w	124ee <_vfiprintf_r+0x9d6>
   11fc4:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   11fc8:	9802      	ldr	r0, [sp, #8]
   11fca:	4281      	cmp	r1, r0
   11fcc:	bfac      	ite	ge
   11fce:	1852      	addge	r2, r2, r1
   11fd0:	1812      	addlt	r2, r2, r0
   11fd2:	9205      	str	r2, [sp, #20]
   11fd4:	2b00      	cmp	r3, #0
   11fd6:	f040 81fe 	bne.w	123d6 <_vfiprintf_r+0x8be>
   11fda:	9908      	ldr	r1, [sp, #32]
   11fdc:	2300      	movs	r3, #0
   11fde:	9319      	str	r3, [sp, #100]	; 0x64
   11fe0:	2900      	cmp	r1, #0
   11fe2:	f000 8148 	beq.w	12276 <_vfiprintf_r+0x75e>
   11fe6:	4658      	mov	r0, fp
   11fe8:	f7fb ff98 	bl	df1c <_free_r>
   11fec:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   11ff0:	e5d6      	b.n	11ba0 <_vfiprintf_r+0x88>
   11ff2:	059c      	lsls	r4, r3, #22
   11ff4:	f53f af61 	bmi.w	11eba <_vfiprintf_r+0x3a2>
   11ff8:	9c03      	ldr	r4, [sp, #12]
   11ffa:	6da0      	ldr	r0, [r4, #88]	; 0x58
   11ffc:	f7fb feac 	bl	dd58 <__retarget_lock_release_recursive>
   12000:	89a2      	ldrh	r2, [r4, #12]
   12002:	e75a      	b.n	11eba <_vfiprintf_r+0x3a2>
   12004:	06f0      	lsls	r0, r6, #27
   12006:	9a07      	ldr	r2, [sp, #28]
   12008:	f100 833e 	bmi.w	12688 <_vfiprintf_r+0xb70>
   1200c:	0671      	lsls	r1, r6, #25
   1200e:	f140 8338 	bpl.w	12682 <_vfiprintf_r+0xb6a>
   12012:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12016:	9207      	str	r2, [sp, #28]
   12018:	17da      	asrs	r2, r3, #31
   1201a:	4611      	mov	r1, r2
   1201c:	e684      	b.n	11d28 <_vfiprintf_r+0x210>
   1201e:	f016 0310 	ands.w	r3, r6, #16
   12022:	9907      	ldr	r1, [sp, #28]
   12024:	f040 8328 	bne.w	12678 <_vfiprintf_r+0xb60>
   12028:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1202c:	f000 8320 	beq.w	12670 <_vfiprintf_r+0xb58>
   12030:	461a      	mov	r2, r3
   12032:	f851 3b04 	ldr.w	r3, [r1], #4
   12036:	9107      	str	r1, [sp, #28]
   12038:	b29b      	uxth	r3, r3
   1203a:	e6d3      	b.n	11de4 <_vfiprintf_r+0x2cc>
   1203c:	9b07      	ldr	r3, [sp, #28]
   1203e:	461a      	mov	r2, r3
   12040:	2300      	movs	r3, #0
   12042:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12046:	4613      	mov	r3, r2
   12048:	f853 4b04 	ldr.w	r4, [r3], #4
   1204c:	9302      	str	r3, [sp, #8]
   1204e:	2c00      	cmp	r4, #0
   12050:	f000 842d 	beq.w	128ae <_vfiprintf_r+0xd96>
   12054:	2953      	cmp	r1, #83	; 0x53
   12056:	f000 838a 	beq.w	1276e <_vfiprintf_r+0xc56>
   1205a:	f016 0510 	ands.w	r5, r6, #16
   1205e:	f040 8386 	bne.w	1276e <_vfiprintf_r+0xc56>
   12062:	1c7b      	adds	r3, r7, #1
   12064:	f000 84cc 	beq.w	12a00 <_vfiprintf_r+0xee8>
   12068:	463a      	mov	r2, r7
   1206a:	4629      	mov	r1, r5
   1206c:	4620      	mov	r0, r4
   1206e:	f7fe fb37 	bl	106e0 <memchr>
   12072:	9008      	str	r0, [sp, #32]
   12074:	2800      	cmp	r0, #0
   12076:	f000 84b8 	beq.w	129ea <_vfiprintf_r+0xed2>
   1207a:	1b03      	subs	r3, r0, r4
   1207c:	9a02      	ldr	r2, [sp, #8]
   1207e:	9304      	str	r3, [sp, #16]
   12080:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12084:	462f      	mov	r7, r5
   12086:	9207      	str	r2, [sp, #28]
   12088:	9302      	str	r3, [sp, #8]
   1208a:	9508      	str	r5, [sp, #32]
   1208c:	e66d      	b.n	11d6a <_vfiprintf_r+0x252>
   1208e:	2943      	cmp	r1, #67	; 0x43
   12090:	d002      	beq.n	12098 <_vfiprintf_r+0x580>
   12092:	06f5      	lsls	r5, r6, #27
   12094:	f140 8352 	bpl.w	1273c <_vfiprintf_r+0xc24>
   12098:	9d07      	ldr	r5, [sp, #28]
   1209a:	2208      	movs	r2, #8
   1209c:	2100      	movs	r1, #0
   1209e:	a816      	add	r0, sp, #88	; 0x58
   120a0:	ac2b      	add	r4, sp, #172	; 0xac
   120a2:	f7fb fd39 	bl	db18 <memset>
   120a6:	ab16      	add	r3, sp, #88	; 0x58
   120a8:	f855 2b04 	ldr.w	r2, [r5], #4
   120ac:	4621      	mov	r1, r4
   120ae:	4658      	mov	r0, fp
   120b0:	f7ff fc2e 	bl	11910 <_wcrtomb_r>
   120b4:	4603      	mov	r3, r0
   120b6:	3301      	adds	r3, #1
   120b8:	9004      	str	r0, [sp, #16]
   120ba:	f000 84ce 	beq.w	12a5a <_vfiprintf_r+0xf42>
   120be:	9b04      	ldr	r3, [sp, #16]
   120c0:	9507      	str	r5, [sp, #28]
   120c2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   120c6:	9302      	str	r3, [sp, #8]
   120c8:	2300      	movs	r3, #0
   120ca:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   120ce:	e706      	b.n	11ede <_vfiprintf_r+0x3c6>
   120d0:	9b07      	ldr	r3, [sp, #28]
   120d2:	f853 2b04 	ldr.w	r2, [r3], #4
   120d6:	9206      	str	r2, [sp, #24]
   120d8:	2a00      	cmp	r2, #0
   120da:	f280 82bb 	bge.w	12654 <_vfiprintf_r+0xb3c>
   120de:	9a06      	ldr	r2, [sp, #24]
   120e0:	4252      	negs	r2, r2
   120e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   120e6:	f898 1000 	ldrb.w	r1, [r8]
   120ea:	f046 0604 	orr.w	r6, r6, #4
   120ee:	e57f      	b.n	11bf0 <_vfiprintf_r+0xd8>
   120f0:	f898 1000 	ldrb.w	r1, [r8]
   120f4:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   120f8:	e57a      	b.n	11bf0 <_vfiprintf_r+0xd8>
   120fa:	f898 1000 	ldrb.w	r1, [r8]
   120fe:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12102:	e575      	b.n	11bf0 <_vfiprintf_r+0xd8>
   12104:	4642      	mov	r2, r8
   12106:	f812 1b01 	ldrb.w	r1, [r2], #1
   1210a:	292a      	cmp	r1, #42	; 0x2a
   1210c:	f000 84b0 	beq.w	12a70 <_vfiprintf_r+0xf58>
   12110:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12114:	2b09      	cmp	r3, #9
   12116:	4690      	mov	r8, r2
   12118:	f04f 0700 	mov.w	r7, #0
   1211c:	f63f ad6a 	bhi.w	11bf4 <_vfiprintf_r+0xdc>
   12120:	f818 1b01 	ldrb.w	r1, [r8], #1
   12124:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12128:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1212c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12130:	2b09      	cmp	r3, #9
   12132:	d9f5      	bls.n	12120 <_vfiprintf_r+0x608>
   12134:	e55e      	b.n	11bf4 <_vfiprintf_r+0xdc>
   12136:	f898 1000 	ldrb.w	r1, [r8]
   1213a:	f046 0601 	orr.w	r6, r6, #1
   1213e:	e557      	b.n	11bf0 <_vfiprintf_r+0xd8>
   12140:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12144:	2b00      	cmp	r3, #0
   12146:	f47f add8 	bne.w	11cfa <_vfiprintf_r+0x1e2>
   1214a:	2320      	movs	r3, #32
   1214c:	f898 1000 	ldrb.w	r1, [r8]
   12150:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12154:	e54c      	b.n	11bf0 <_vfiprintf_r+0xd8>
   12156:	f898 1000 	ldrb.w	r1, [r8]
   1215a:	296c      	cmp	r1, #108	; 0x6c
   1215c:	bf03      	ittte	eq
   1215e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12162:	f046 0620 	orreq.w	r6, r6, #32
   12166:	f108 0801 	addeq.w	r8, r8, #1
   1216a:	f046 0610 	orrne.w	r6, r6, #16
   1216e:	e53f      	b.n	11bf0 <_vfiprintf_r+0xd8>
   12170:	f898 1000 	ldrb.w	r1, [r8]
   12174:	2968      	cmp	r1, #104	; 0x68
   12176:	bf03      	ittte	eq
   12178:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1217c:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12180:	f108 0801 	addeq.w	r8, r8, #1
   12184:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12188:	e532      	b.n	11bf0 <_vfiprintf_r+0xd8>
   1218a:	f046 0310 	orr.w	r3, r6, #16
   1218e:	9302      	str	r3, [sp, #8]
   12190:	9b02      	ldr	r3, [sp, #8]
   12192:	f013 0220 	ands.w	r2, r3, #32
   12196:	f000 8225 	beq.w	125e4 <_vfiprintf_r+0xacc>
   1219a:	9b07      	ldr	r3, [sp, #28]
   1219c:	3307      	adds	r3, #7
   1219e:	f023 0307 	bic.w	r3, r3, #7
   121a2:	4619      	mov	r1, r3
   121a4:	685a      	ldr	r2, [r3, #4]
   121a6:	f851 3b08 	ldr.w	r3, [r1], #8
   121aa:	9107      	str	r1, [sp, #28]
   121ac:	2101      	movs	r1, #1
   121ae:	e61d      	b.n	11dec <_vfiprintf_r+0x2d4>
   121b0:	9a07      	ldr	r2, [sp, #28]
   121b2:	f046 0302 	orr.w	r3, r6, #2
   121b6:	9302      	str	r3, [sp, #8]
   121b8:	f852 3b04 	ldr.w	r3, [r2], #4
   121bc:	9207      	str	r2, [sp, #28]
   121be:	f647 0230 	movw	r2, #30768	; 0x7830
   121c2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   121c6:	4aa1      	ldr	r2, [pc, #644]	; (1244c <_vfiprintf_r+0x934>)
   121c8:	920b      	str	r2, [sp, #44]	; 0x2c
   121ca:	2102      	movs	r1, #2
   121cc:	2200      	movs	r2, #0
   121ce:	e60d      	b.n	11dec <_vfiprintf_r+0x2d4>
   121d0:	06b7      	lsls	r7, r6, #26
   121d2:	f100 8267 	bmi.w	126a4 <_vfiprintf_r+0xb8c>
   121d6:	06f5      	lsls	r5, r6, #27
   121d8:	f100 8361 	bmi.w	1289e <_vfiprintf_r+0xd86>
   121dc:	0674      	lsls	r4, r6, #25
   121de:	f100 83ee 	bmi.w	129be <_vfiprintf_r+0xea6>
   121e2:	05b0      	lsls	r0, r6, #22
   121e4:	f140 835b 	bpl.w	1289e <_vfiprintf_r+0xd86>
   121e8:	9b07      	ldr	r3, [sp, #28]
   121ea:	9905      	ldr	r1, [sp, #20]
   121ec:	f853 2b04 	ldr.w	r2, [r3], #4
   121f0:	9307      	str	r3, [sp, #28]
   121f2:	7011      	strb	r1, [r2, #0]
   121f4:	e4d4      	b.n	11ba0 <_vfiprintf_r+0x88>
   121f6:	9602      	str	r6, [sp, #8]
   121f8:	2901      	cmp	r1, #1
   121fa:	f43f ada2 	beq.w	11d42 <_vfiprintf_r+0x22a>
   121fe:	2902      	cmp	r1, #2
   12200:	ac44      	add	r4, sp, #272	; 0x110
   12202:	d111      	bne.n	12228 <_vfiprintf_r+0x710>
   12204:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12206:	f003 010f 	and.w	r1, r3, #15
   1220a:	091b      	lsrs	r3, r3, #4
   1220c:	5c41      	ldrb	r1, [r0, r1]
   1220e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12212:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12216:	0912      	lsrs	r2, r2, #4
   12218:	ea53 0102 	orrs.w	r1, r3, r2
   1221c:	d1f3      	bne.n	12206 <_vfiprintf_r+0x6ee>
   1221e:	9e02      	ldr	r6, [sp, #8]
   12220:	ab44      	add	r3, sp, #272	; 0x110
   12222:	1b1b      	subs	r3, r3, r4
   12224:	9304      	str	r3, [sp, #16]
   12226:	e599      	b.n	11d5c <_vfiprintf_r+0x244>
   12228:	f003 0107 	and.w	r1, r3, #7
   1222c:	08db      	lsrs	r3, r3, #3
   1222e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12232:	08d2      	lsrs	r2, r2, #3
   12234:	3130      	adds	r1, #48	; 0x30
   12236:	ea53 0502 	orrs.w	r5, r3, r2
   1223a:	4620      	mov	r0, r4
   1223c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12240:	d1f2      	bne.n	12228 <_vfiprintf_r+0x710>
   12242:	9e02      	ldr	r6, [sp, #8]
   12244:	07f3      	lsls	r3, r6, #31
   12246:	d5eb      	bpl.n	12220 <_vfiprintf_r+0x708>
   12248:	2930      	cmp	r1, #48	; 0x30
   1224a:	d0e8      	beq.n	1221e <_vfiprintf_r+0x706>
   1224c:	2330      	movs	r3, #48	; 0x30
   1224e:	3802      	subs	r0, #2
   12250:	f804 3c01 	strb.w	r3, [r4, #-1]
   12254:	ab44      	add	r3, sp, #272	; 0x110
   12256:	1a1b      	subs	r3, r3, r0
   12258:	9e02      	ldr	r6, [sp, #8]
   1225a:	9304      	str	r3, [sp, #16]
   1225c:	4604      	mov	r4, r0
   1225e:	e57d      	b.n	11d5c <_vfiprintf_r+0x244>
   12260:	9b04      	ldr	r3, [sp, #16]
   12262:	941b      	str	r4, [sp, #108]	; 0x6c
   12264:	2201      	movs	r2, #1
   12266:	931c      	str	r3, [sp, #112]	; 0x70
   12268:	931a      	str	r3, [sp, #104]	; 0x68
   1226a:	9219      	str	r2, [sp, #100]	; 0x64
   1226c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12270:	f109 0908 	add.w	r9, r9, #8
   12274:	e69e      	b.n	11fb4 <_vfiprintf_r+0x49c>
   12276:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1227a:	e491      	b.n	11ba0 <_vfiprintf_r+0x88>
   1227c:	9a06      	ldr	r2, [sp, #24]
   1227e:	9d02      	ldr	r5, [sp, #8]
   12280:	1b55      	subs	r5, r2, r5
   12282:	2d00      	cmp	r5, #0
   12284:	f77f ae78 	ble.w	11f78 <_vfiprintf_r+0x460>
   12288:	2d10      	cmp	r5, #16
   1228a:	f340 83d3 	ble.w	12a34 <_vfiprintf_r+0xf1c>
   1228e:	4619      	mov	r1, r3
   12290:	4643      	mov	r3, r8
   12292:	9409      	str	r4, [sp, #36]	; 0x24
   12294:	46b8      	mov	r8, r7
   12296:	9c03      	ldr	r4, [sp, #12]
   12298:	4637      	mov	r7, r6
   1229a:	465e      	mov	r6, fp
   1229c:	469b      	mov	fp, r3
   1229e:	e007      	b.n	122b0 <_vfiprintf_r+0x798>
   122a0:	f100 0c02 	add.w	ip, r0, #2
   122a4:	f109 0908 	add.w	r9, r9, #8
   122a8:	4610      	mov	r0, r2
   122aa:	3d10      	subs	r5, #16
   122ac:	2d10      	cmp	r5, #16
   122ae:	dd1f      	ble.n	122f0 <_vfiprintf_r+0x7d8>
   122b0:	4b67      	ldr	r3, [pc, #412]	; (12450 <_vfiprintf_r+0x938>)
   122b2:	f8c9 3000 	str.w	r3, [r9]
   122b6:	1c42      	adds	r2, r0, #1
   122b8:	3110      	adds	r1, #16
   122ba:	2310      	movs	r3, #16
   122bc:	2a07      	cmp	r2, #7
   122be:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   122c2:	f8c9 3004 	str.w	r3, [r9, #4]
   122c6:	ddeb      	ble.n	122a0 <_vfiprintf_r+0x788>
   122c8:	aa18      	add	r2, sp, #96	; 0x60
   122ca:	2900      	cmp	r1, #0
   122cc:	f000 808c 	beq.w	123e8 <_vfiprintf_r+0x8d0>
   122d0:	4621      	mov	r1, r4
   122d2:	4630      	mov	r0, r6
   122d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   122d8:	f7ff fbe2 	bl	11aa0 <__sprint_r.part.0>
   122dc:	2800      	cmp	r0, #0
   122de:	f47f addb 	bne.w	11e98 <_vfiprintf_r+0x380>
   122e2:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   122e6:	3d10      	subs	r5, #16
   122e8:	2d10      	cmp	r5, #16
   122ea:	f100 0c01 	add.w	ip, r0, #1
   122ee:	dcdf      	bgt.n	122b0 <_vfiprintf_r+0x798>
   122f0:	465a      	mov	r2, fp
   122f2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   122f4:	46b3      	mov	fp, r6
   122f6:	460b      	mov	r3, r1
   122f8:	463e      	mov	r6, r7
   122fa:	4647      	mov	r7, r8
   122fc:	4690      	mov	r8, r2
   122fe:	4a54      	ldr	r2, [pc, #336]	; (12450 <_vfiprintf_r+0x938>)
   12300:	f8c9 5004 	str.w	r5, [r9, #4]
   12304:	442b      	add	r3, r5
   12306:	f1bc 0f07 	cmp.w	ip, #7
   1230a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   1230e:	f8c9 2000 	str.w	r2, [r9]
   12312:	f340 81a7 	ble.w	12664 <_vfiprintf_r+0xb4c>
   12316:	2b00      	cmp	r3, #0
   12318:	f000 832c 	beq.w	12974 <_vfiprintf_r+0xe5c>
   1231c:	9903      	ldr	r1, [sp, #12]
   1231e:	aa18      	add	r2, sp, #96	; 0x60
   12320:	4658      	mov	r0, fp
   12322:	f7ff fbbd 	bl	11aa0 <__sprint_r.part.0>
   12326:	2800      	cmp	r0, #0
   12328:	f47f adb7 	bne.w	11e9a <_vfiprintf_r+0x382>
   1232c:	9a04      	ldr	r2, [sp, #16]
   1232e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12332:	1abd      	subs	r5, r7, r2
   12334:	2d00      	cmp	r5, #0
   12336:	f100 0101 	add.w	r1, r0, #1
   1233a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1233e:	f77f ae20 	ble.w	11f82 <_vfiprintf_r+0x46a>
   12342:	2d10      	cmp	r5, #16
   12344:	dd32      	ble.n	123ac <_vfiprintf_r+0x894>
   12346:	4619      	mov	r1, r3
   12348:	4643      	mov	r3, r8
   1234a:	9409      	str	r4, [sp, #36]	; 0x24
   1234c:	46b0      	mov	r8, r6
   1234e:	9c03      	ldr	r4, [sp, #12]
   12350:	465e      	mov	r6, fp
   12352:	2710      	movs	r7, #16
   12354:	469b      	mov	fp, r3
   12356:	e007      	b.n	12368 <_vfiprintf_r+0x850>
   12358:	f100 0c02 	add.w	ip, r0, #2
   1235c:	f109 0908 	add.w	r9, r9, #8
   12360:	4610      	mov	r0, r2
   12362:	3d10      	subs	r5, #16
   12364:	2d10      	cmp	r5, #16
   12366:	dd1a      	ble.n	1239e <_vfiprintf_r+0x886>
   12368:	1c42      	adds	r2, r0, #1
   1236a:	4b39      	ldr	r3, [pc, #228]	; (12450 <_vfiprintf_r+0x938>)
   1236c:	3110      	adds	r1, #16
   1236e:	2a07      	cmp	r2, #7
   12370:	e9c9 3700 	strd	r3, r7, [r9]
   12374:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12378:	ddee      	ble.n	12358 <_vfiprintf_r+0x840>
   1237a:	aa18      	add	r2, sp, #96	; 0x60
   1237c:	b329      	cbz	r1, 123ca <_vfiprintf_r+0x8b2>
   1237e:	4621      	mov	r1, r4
   12380:	4630      	mov	r0, r6
   12382:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12386:	f7ff fb8b 	bl	11aa0 <__sprint_r.part.0>
   1238a:	2800      	cmp	r0, #0
   1238c:	f47f ad84 	bne.w	11e98 <_vfiprintf_r+0x380>
   12390:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12394:	3d10      	subs	r5, #16
   12396:	2d10      	cmp	r5, #16
   12398:	f100 0c01 	add.w	ip, r0, #1
   1239c:	dce4      	bgt.n	12368 <_vfiprintf_r+0x850>
   1239e:	465a      	mov	r2, fp
   123a0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   123a2:	460b      	mov	r3, r1
   123a4:	46b3      	mov	fp, r6
   123a6:	4661      	mov	r1, ip
   123a8:	4646      	mov	r6, r8
   123aa:	4690      	mov	r8, r2
   123ac:	4a28      	ldr	r2, [pc, #160]	; (12450 <_vfiprintf_r+0x938>)
   123ae:	f8c9 5004 	str.w	r5, [r9, #4]
   123b2:	442b      	add	r3, r5
   123b4:	2907      	cmp	r1, #7
   123b6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   123ba:	f8c9 2000 	str.w	r2, [r9]
   123be:	f300 80f3 	bgt.w	125a8 <_vfiprintf_r+0xa90>
   123c2:	f109 0908 	add.w	r9, r9, #8
   123c6:	3101      	adds	r1, #1
   123c8:	e5db      	b.n	11f82 <_vfiprintf_r+0x46a>
   123ca:	f04f 0c01 	mov.w	ip, #1
   123ce:	4608      	mov	r0, r1
   123d0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   123d4:	e7c5      	b.n	12362 <_vfiprintf_r+0x84a>
   123d6:	9903      	ldr	r1, [sp, #12]
   123d8:	aa18      	add	r2, sp, #96	; 0x60
   123da:	4658      	mov	r0, fp
   123dc:	f7ff fb60 	bl	11aa0 <__sprint_r.part.0>
   123e0:	2800      	cmp	r0, #0
   123e2:	f43f adfa 	beq.w	11fda <_vfiprintf_r+0x4c2>
   123e6:	e558      	b.n	11e9a <_vfiprintf_r+0x382>
   123e8:	f04f 0c01 	mov.w	ip, #1
   123ec:	4608      	mov	r0, r1
   123ee:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   123f2:	e75a      	b.n	122aa <_vfiprintf_r+0x792>
   123f4:	2b00      	cmp	r3, #0
   123f6:	f000 810c 	beq.w	12612 <_vfiprintf_r+0xafa>
   123fa:	9903      	ldr	r1, [sp, #12]
   123fc:	aa18      	add	r2, sp, #96	; 0x60
   123fe:	4658      	mov	r0, fp
   12400:	f7ff fb4e 	bl	11aa0 <__sprint_r.part.0>
   12404:	2800      	cmp	r0, #0
   12406:	f47f ad48 	bne.w	11e9a <_vfiprintf_r+0x382>
   1240a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1240e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12412:	1c41      	adds	r1, r0, #1
   12414:	e58e      	b.n	11f34 <_vfiprintf_r+0x41c>
   12416:	2302      	movs	r3, #2
   12418:	aa11      	add	r2, sp, #68	; 0x44
   1241a:	931c      	str	r3, [sp, #112]	; 0x70
   1241c:	921b      	str	r2, [sp, #108]	; 0x6c
   1241e:	2101      	movs	r1, #1
   12420:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12424:	4608      	mov	r0, r1
   12426:	f109 0908 	add.w	r9, r9, #8
   1242a:	1c41      	adds	r1, r0, #1
   1242c:	e5a0      	b.n	11f70 <_vfiprintf_r+0x458>
   1242e:	2d10      	cmp	r5, #16
   12430:	f340 82e2 	ble.w	129f8 <_vfiprintf_r+0xee0>
   12434:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12438:	4618      	mov	r0, r3
   1243a:	4643      	mov	r3, r8
   1243c:	940f      	str	r4, [sp, #60]	; 0x3c
   1243e:	46b8      	mov	r8, r7
   12440:	9c03      	ldr	r4, [sp, #12]
   12442:	4637      	mov	r7, r6
   12444:	465e      	mov	r6, fp
   12446:	469b      	mov	fp, r3
   12448:	e00c      	b.n	12464 <_vfiprintf_r+0x94c>
   1244a:	bf00      	nop
   1244c:	000154ec 	.word	0x000154ec
   12450:	000155f8 	.word	0x000155f8
   12454:	f101 0c02 	add.w	ip, r1, #2
   12458:	f109 0908 	add.w	r9, r9, #8
   1245c:	4611      	mov	r1, r2
   1245e:	3d10      	subs	r5, #16
   12460:	2d10      	cmp	r5, #16
   12462:	dd1d      	ble.n	124a0 <_vfiprintf_r+0x988>
   12464:	4bb2      	ldr	r3, [pc, #712]	; (12730 <_vfiprintf_r+0xc18>)
   12466:	f8c9 3000 	str.w	r3, [r9]
   1246a:	1c4a      	adds	r2, r1, #1
   1246c:	3010      	adds	r0, #16
   1246e:	2310      	movs	r3, #16
   12470:	2a07      	cmp	r2, #7
   12472:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   12476:	f8c9 3004 	str.w	r3, [r9, #4]
   1247a:	ddeb      	ble.n	12454 <_vfiprintf_r+0x93c>
   1247c:	aa18      	add	r2, sp, #96	; 0x60
   1247e:	b330      	cbz	r0, 124ce <_vfiprintf_r+0x9b6>
   12480:	4621      	mov	r1, r4
   12482:	4630      	mov	r0, r6
   12484:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12488:	f7ff fb0a 	bl	11aa0 <__sprint_r.part.0>
   1248c:	2800      	cmp	r0, #0
   1248e:	f47f ad03 	bne.w	11e98 <_vfiprintf_r+0x380>
   12492:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   12496:	3d10      	subs	r5, #16
   12498:	2d10      	cmp	r5, #16
   1249a:	f101 0c01 	add.w	ip, r1, #1
   1249e:	dce1      	bgt.n	12464 <_vfiprintf_r+0x94c>
   124a0:	465a      	mov	r2, fp
   124a2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   124a4:	4603      	mov	r3, r0
   124a6:	46b3      	mov	fp, r6
   124a8:	4660      	mov	r0, ip
   124aa:	463e      	mov	r6, r7
   124ac:	4647      	mov	r7, r8
   124ae:	4690      	mov	r8, r2
   124b0:	4a9f      	ldr	r2, [pc, #636]	; (12730 <_vfiprintf_r+0xc18>)
   124b2:	f8c9 5004 	str.w	r5, [r9, #4]
   124b6:	442b      	add	r3, r5
   124b8:	2807      	cmp	r0, #7
   124ba:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   124be:	f8c9 2000 	str.w	r2, [r9]
   124c2:	f300 80b6 	bgt.w	12632 <_vfiprintf_r+0xb1a>
   124c6:	f109 0908 	add.w	r9, r9, #8
   124ca:	1c41      	adds	r1, r0, #1
   124cc:	e51e      	b.n	11f0c <_vfiprintf_r+0x3f4>
   124ce:	4601      	mov	r1, r0
   124d0:	f04f 0c01 	mov.w	ip, #1
   124d4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124d8:	e7c1      	b.n	1245e <_vfiprintf_r+0x946>
   124da:	0776      	lsls	r6, r6, #29
   124dc:	9319      	str	r3, [sp, #100]	; 0x64
   124de:	d54a      	bpl.n	12576 <_vfiprintf_r+0xa5e>
   124e0:	9a06      	ldr	r2, [sp, #24]
   124e2:	9902      	ldr	r1, [sp, #8]
   124e4:	1a54      	subs	r4, r2, r1
   124e6:	2c00      	cmp	r4, #0
   124e8:	dd45      	ble.n	12576 <_vfiprintf_r+0xa5e>
   124ea:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124ee:	2c10      	cmp	r4, #16
   124f0:	f340 829d 	ble.w	12a2e <_vfiprintf_r+0xf16>
   124f4:	9919      	ldr	r1, [sp, #100]	; 0x64
   124f6:	9e03      	ldr	r6, [sp, #12]
   124f8:	2510      	movs	r5, #16
   124fa:	e006      	b.n	1250a <_vfiprintf_r+0x9f2>
   124fc:	1c88      	adds	r0, r1, #2
   124fe:	f109 0908 	add.w	r9, r9, #8
   12502:	4611      	mov	r1, r2
   12504:	3c10      	subs	r4, #16
   12506:	2c10      	cmp	r4, #16
   12508:	dd1a      	ble.n	12540 <_vfiprintf_r+0xa28>
   1250a:	1c4a      	adds	r2, r1, #1
   1250c:	4888      	ldr	r0, [pc, #544]	; (12730 <_vfiprintf_r+0xc18>)
   1250e:	3310      	adds	r3, #16
   12510:	2a07      	cmp	r2, #7
   12512:	e9c9 0500 	strd	r0, r5, [r9]
   12516:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1251a:	ddef      	ble.n	124fc <_vfiprintf_r+0x9e4>
   1251c:	aa18      	add	r2, sp, #96	; 0x60
   1251e:	b32b      	cbz	r3, 1256c <_vfiprintf_r+0xa54>
   12520:	4631      	mov	r1, r6
   12522:	4658      	mov	r0, fp
   12524:	f7ff fabc 	bl	11aa0 <__sprint_r.part.0>
   12528:	2800      	cmp	r0, #0
   1252a:	f47f acb6 	bne.w	11e9a <_vfiprintf_r+0x382>
   1252e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12532:	3c10      	subs	r4, #16
   12534:	2c10      	cmp	r4, #16
   12536:	f101 0001 	add.w	r0, r1, #1
   1253a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1253e:	dce4      	bgt.n	1250a <_vfiprintf_r+0x9f2>
   12540:	4a7b      	ldr	r2, [pc, #492]	; (12730 <_vfiprintf_r+0xc18>)
   12542:	f8c9 4004 	str.w	r4, [r9, #4]
   12546:	4423      	add	r3, r4
   12548:	2807      	cmp	r0, #7
   1254a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1254e:	f8c9 2000 	str.w	r2, [r9]
   12552:	f77f ad37 	ble.w	11fc4 <_vfiprintf_r+0x4ac>
   12556:	b173      	cbz	r3, 12576 <_vfiprintf_r+0xa5e>
   12558:	9903      	ldr	r1, [sp, #12]
   1255a:	aa18      	add	r2, sp, #96	; 0x60
   1255c:	4658      	mov	r0, fp
   1255e:	f7ff fa9f 	bl	11aa0 <__sprint_r.part.0>
   12562:	2800      	cmp	r0, #0
   12564:	f47f ac99 	bne.w	11e9a <_vfiprintf_r+0x382>
   12568:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1256a:	e52b      	b.n	11fc4 <_vfiprintf_r+0x4ac>
   1256c:	2001      	movs	r0, #1
   1256e:	4619      	mov	r1, r3
   12570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12574:	e7c6      	b.n	12504 <_vfiprintf_r+0x9ec>
   12576:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1257a:	9902      	ldr	r1, [sp, #8]
   1257c:	428a      	cmp	r2, r1
   1257e:	bfac      	ite	ge
   12580:	189b      	addge	r3, r3, r2
   12582:	185b      	addlt	r3, r3, r1
   12584:	9305      	str	r3, [sp, #20]
   12586:	e528      	b.n	11fda <_vfiprintf_r+0x4c2>
   12588:	9b03      	ldr	r3, [sp, #12]
   1258a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   1258e:	058f      	lsls	r7, r1, #22
   12590:	b28a      	uxth	r2, r1
   12592:	f53f aae0 	bmi.w	11b56 <_vfiprintf_r+0x3e>
   12596:	461d      	mov	r5, r3
   12598:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1259a:	f7fb fbdb 	bl	dd54 <__retarget_lock_acquire_recursive>
   1259e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   125a2:	b28a      	uxth	r2, r1
   125a4:	f7ff bad7 	b.w	11b56 <_vfiprintf_r+0x3e>
   125a8:	2b00      	cmp	r3, #0
   125aa:	f43f ae59 	beq.w	12260 <_vfiprintf_r+0x748>
   125ae:	9903      	ldr	r1, [sp, #12]
   125b0:	aa18      	add	r2, sp, #96	; 0x60
   125b2:	4658      	mov	r0, fp
   125b4:	f7ff fa74 	bl	11aa0 <__sprint_r.part.0>
   125b8:	2800      	cmp	r0, #0
   125ba:	f47f ac6e 	bne.w	11e9a <_vfiprintf_r+0x382>
   125be:	9919      	ldr	r1, [sp, #100]	; 0x64
   125c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   125c2:	3101      	adds	r1, #1
   125c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   125c8:	e4db      	b.n	11f82 <_vfiprintf_r+0x46a>
   125ca:	9219      	str	r2, [sp, #100]	; 0x64
   125cc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   125d0:	e44f      	b.n	11e72 <_vfiprintf_r+0x35a>
   125d2:	2f00      	cmp	r7, #0
   125d4:	f47f abba 	bne.w	11d4c <_vfiprintf_r+0x234>
   125d8:	9e02      	ldr	r6, [sp, #8]
   125da:	2700      	movs	r7, #0
   125dc:	9704      	str	r7, [sp, #16]
   125de:	ac44      	add	r4, sp, #272	; 0x110
   125e0:	f7ff bbbc 	b.w	11d5c <_vfiprintf_r+0x244>
   125e4:	9b02      	ldr	r3, [sp, #8]
   125e6:	f013 0310 	ands.w	r3, r3, #16
   125ea:	d154      	bne.n	12696 <_vfiprintf_r+0xb7e>
   125ec:	9a02      	ldr	r2, [sp, #8]
   125ee:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   125f2:	f000 8167 	beq.w	128c4 <_vfiprintf_r+0xdac>
   125f6:	9907      	ldr	r1, [sp, #28]
   125f8:	461a      	mov	r2, r3
   125fa:	f851 3b04 	ldr.w	r3, [r1], #4
   125fe:	9107      	str	r1, [sp, #28]
   12600:	b29b      	uxth	r3, r3
   12602:	2101      	movs	r1, #1
   12604:	f7ff bbf2 	b.w	11dec <_vfiprintf_r+0x2d4>
   12608:	2101      	movs	r1, #1
   1260a:	4618      	mov	r0, r3
   1260c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12610:	e4ae      	b.n	11f70 <_vfiprintf_r+0x458>
   12612:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12614:	2a00      	cmp	r2, #0
   12616:	d15e      	bne.n	126d6 <_vfiprintf_r+0xbbe>
   12618:	4618      	mov	r0, r3
   1261a:	2101      	movs	r1, #1
   1261c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12620:	e4a6      	b.n	11f70 <_vfiprintf_r+0x458>
   12622:	425b      	negs	r3, r3
   12624:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12628:	9602      	str	r6, [sp, #8]
   1262a:	202d      	movs	r0, #45	; 0x2d
   1262c:	2101      	movs	r1, #1
   1262e:	f7ff bbde 	b.w	11dee <_vfiprintf_r+0x2d6>
   12632:	2b00      	cmp	r3, #0
   12634:	f000 808d 	beq.w	12752 <_vfiprintf_r+0xc3a>
   12638:	9903      	ldr	r1, [sp, #12]
   1263a:	aa18      	add	r2, sp, #96	; 0x60
   1263c:	4658      	mov	r0, fp
   1263e:	f7ff fa2f 	bl	11aa0 <__sprint_r.part.0>
   12642:	2800      	cmp	r0, #0
   12644:	f47f ac29 	bne.w	11e9a <_vfiprintf_r+0x382>
   12648:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1264c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12650:	1c41      	adds	r1, r0, #1
   12652:	e45b      	b.n	11f0c <_vfiprintf_r+0x3f4>
   12654:	f898 1000 	ldrb.w	r1, [r8]
   12658:	9307      	str	r3, [sp, #28]
   1265a:	f7ff bac9 	b.w	11bf0 <_vfiprintf_r+0xd8>
   1265e:	ac44      	add	r4, sp, #272	; 0x110
   12660:	f7ff bb7c 	b.w	11d5c <_vfiprintf_r+0x244>
   12664:	f109 0908 	add.w	r9, r9, #8
   12668:	f10c 0101 	add.w	r1, ip, #1
   1266c:	4660      	mov	r0, ip
   1266e:	e483      	b.n	11f78 <_vfiprintf_r+0x460>
   12670:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12674:	f040 8191 	bne.w	1299a <_vfiprintf_r+0xe82>
   12678:	f851 3b04 	ldr.w	r3, [r1], #4
   1267c:	9107      	str	r1, [sp, #28]
   1267e:	f7ff bbb1 	b.w	11de4 <_vfiprintf_r+0x2cc>
   12682:	05b3      	lsls	r3, r6, #22
   12684:	f100 8182 	bmi.w	1298c <_vfiprintf_r+0xe74>
   12688:	f852 3b04 	ldr.w	r3, [r2], #4
   1268c:	9207      	str	r2, [sp, #28]
   1268e:	17da      	asrs	r2, r3, #31
   12690:	4611      	mov	r1, r2
   12692:	f7ff bb49 	b.w	11d28 <_vfiprintf_r+0x210>
   12696:	9907      	ldr	r1, [sp, #28]
   12698:	f851 3b04 	ldr.w	r3, [r1], #4
   1269c:	9107      	str	r1, [sp, #28]
   1269e:	2101      	movs	r1, #1
   126a0:	f7ff bba4 	b.w	11dec <_vfiprintf_r+0x2d4>
   126a4:	9b07      	ldr	r3, [sp, #28]
   126a6:	9805      	ldr	r0, [sp, #20]
   126a8:	f853 1b04 	ldr.w	r1, [r3], #4
   126ac:	9307      	str	r3, [sp, #28]
   126ae:	17c2      	asrs	r2, r0, #31
   126b0:	e9c1 0200 	strd	r0, r2, [r1]
   126b4:	f7ff ba74 	b.w	11ba0 <_vfiprintf_r+0x88>
   126b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126ba:	2b00      	cmp	r3, #0
   126bc:	f43f ab1d 	beq.w	11cfa <_vfiprintf_r+0x1e2>
   126c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	2b00      	cmp	r3, #0
   126c6:	f43f ab18 	beq.w	11cfa <_vfiprintf_r+0x1e2>
   126ca:	f898 1000 	ldrb.w	r1, [r8]
   126ce:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   126d2:	f7ff ba8d 	b.w	11bf0 <_vfiprintf_r+0xd8>
   126d6:	2302      	movs	r3, #2
   126d8:	aa11      	add	r2, sp, #68	; 0x44
   126da:	931c      	str	r3, [sp, #112]	; 0x70
   126dc:	921b      	str	r2, [sp, #108]	; 0x6c
   126de:	2001      	movs	r0, #1
   126e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   126e4:	e69f      	b.n	12426 <_vfiprintf_r+0x90e>
   126e6:	9602      	str	r6, [sp, #8]
   126e8:	e552      	b.n	12190 <_vfiprintf_r+0x678>
   126ea:	4b12      	ldr	r3, [pc, #72]	; (12734 <_vfiprintf_r+0xc1c>)
   126ec:	930b      	str	r3, [sp, #44]	; 0x2c
   126ee:	f016 0220 	ands.w	r2, r6, #32
   126f2:	d05f      	beq.n	127b4 <_vfiprintf_r+0xc9c>
   126f4:	9b07      	ldr	r3, [sp, #28]
   126f6:	3307      	adds	r3, #7
   126f8:	f023 0307 	bic.w	r3, r3, #7
   126fc:	4618      	mov	r0, r3
   126fe:	685a      	ldr	r2, [r3, #4]
   12700:	f850 3b08 	ldr.w	r3, [r0], #8
   12704:	9007      	str	r0, [sp, #28]
   12706:	07f4      	lsls	r4, r6, #31
   12708:	d509      	bpl.n	1271e <_vfiprintf_r+0xc06>
   1270a:	ea53 0002 	orrs.w	r0, r3, r2
   1270e:	d006      	beq.n	1271e <_vfiprintf_r+0xc06>
   12710:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12714:	2130      	movs	r1, #48	; 0x30
   12716:	f046 0602 	orr.w	r6, r6, #2
   1271a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   1271e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12722:	9102      	str	r1, [sp, #8]
   12724:	2102      	movs	r1, #2
   12726:	f7ff bb61 	b.w	11dec <_vfiprintf_r+0x2d4>
   1272a:	4b03      	ldr	r3, [pc, #12]	; (12738 <_vfiprintf_r+0xc20>)
   1272c:	930b      	str	r3, [sp, #44]	; 0x2c
   1272e:	e7de      	b.n	126ee <_vfiprintf_r+0xbd6>
   12730:	000155e8 	.word	0x000155e8
   12734:	000154ec 	.word	0x000154ec
   12738:	00015500 	.word	0x00015500
   1273c:	9b07      	ldr	r3, [sp, #28]
   1273e:	2101      	movs	r1, #1
   12740:	f853 2b04 	ldr.w	r2, [r3], #4
   12744:	9102      	str	r1, [sp, #8]
   12746:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   1274a:	9307      	str	r3, [sp, #28]
   1274c:	9104      	str	r1, [sp, #16]
   1274e:	ac2b      	add	r4, sp, #172	; 0xac
   12750:	e4ba      	b.n	120c8 <_vfiprintf_r+0x5b0>
   12752:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12756:	2a00      	cmp	r2, #0
   12758:	f040 8126 	bne.w	129a8 <_vfiprintf_r+0xe90>
   1275c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1275e:	2a00      	cmp	r2, #0
   12760:	f47f ae59 	bne.w	12416 <_vfiprintf_r+0x8fe>
   12764:	4618      	mov	r0, r3
   12766:	2101      	movs	r1, #1
   12768:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1276c:	e404      	b.n	11f78 <_vfiprintf_r+0x460>
   1276e:	2100      	movs	r1, #0
   12770:	2208      	movs	r2, #8
   12772:	a816      	add	r0, sp, #88	; 0x58
   12774:	9413      	str	r4, [sp, #76]	; 0x4c
   12776:	f7fb f9cf 	bl	db18 <memset>
   1277a:	1c79      	adds	r1, r7, #1
   1277c:	f000 80b2 	beq.w	128e4 <_vfiprintf_r+0xdcc>
   12780:	2500      	movs	r5, #0
   12782:	9407      	str	r4, [sp, #28]
   12784:	462c      	mov	r4, r5
   12786:	e00c      	b.n	127a2 <_vfiprintf_r+0xc8a>
   12788:	a92b      	add	r1, sp, #172	; 0xac
   1278a:	4658      	mov	r0, fp
   1278c:	f7ff f8c0 	bl	11910 <_wcrtomb_r>
   12790:	1c42      	adds	r2, r0, #1
   12792:	4420      	add	r0, r4
   12794:	f000 8161 	beq.w	12a5a <_vfiprintf_r+0xf42>
   12798:	42b8      	cmp	r0, r7
   1279a:	dc08      	bgt.n	127ae <_vfiprintf_r+0xc96>
   1279c:	f000 8165 	beq.w	12a6a <_vfiprintf_r+0xf52>
   127a0:	4604      	mov	r4, r0
   127a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   127a4:	5952      	ldr	r2, [r2, r5]
   127a6:	ab16      	add	r3, sp, #88	; 0x58
   127a8:	3504      	adds	r5, #4
   127aa:	2a00      	cmp	r2, #0
   127ac:	d1ec      	bne.n	12788 <_vfiprintf_r+0xc70>
   127ae:	9404      	str	r4, [sp, #16]
   127b0:	9c07      	ldr	r4, [sp, #28]
   127b2:	e0a5      	b.n	12900 <_vfiprintf_r+0xde8>
   127b4:	f016 0310 	ands.w	r3, r6, #16
   127b8:	9807      	ldr	r0, [sp, #28]
   127ba:	d10c      	bne.n	127d6 <_vfiprintf_r+0xcbe>
   127bc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   127c0:	d005      	beq.n	127ce <_vfiprintf_r+0xcb6>
   127c2:	461a      	mov	r2, r3
   127c4:	f850 3b04 	ldr.w	r3, [r0], #4
   127c8:	9007      	str	r0, [sp, #28]
   127ca:	b29b      	uxth	r3, r3
   127cc:	e79b      	b.n	12706 <_vfiprintf_r+0xbee>
   127ce:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   127d2:	f040 80d5 	bne.w	12980 <_vfiprintf_r+0xe68>
   127d6:	f850 3b04 	ldr.w	r3, [r0], #4
   127da:	9007      	str	r0, [sp, #28]
   127dc:	e793      	b.n	12706 <_vfiprintf_r+0xbee>
   127de:	9902      	ldr	r1, [sp, #8]
   127e0:	f8cd 8020 	str.w	r8, [sp, #32]
   127e4:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   127e8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   127ec:	9704      	str	r7, [sp, #16]
   127ee:	f04f 0c00 	mov.w	ip, #0
   127f2:	ac44      	add	r4, sp, #272	; 0x110
   127f4:	e005      	b.n	12802 <_vfiprintf_r+0xcea>
   127f6:	2b0a      	cmp	r3, #10
   127f8:	f172 0200 	sbcs.w	r2, r2, #0
   127fc:	d336      	bcc.n	1286c <_vfiprintf_r+0xd54>
   127fe:	463b      	mov	r3, r7
   12800:	462a      	mov	r2, r5
   12802:	f8df e290 	ldr.w	lr, [pc, #656]	; 12a94 <_vfiprintf_r+0xf7c>
   12806:	1899      	adds	r1, r3, r2
   12808:	f141 0100 	adc.w	r1, r1, #0
   1280c:	fbae 0501 	umull	r0, r5, lr, r1
   12810:	f025 0003 	bic.w	r0, r5, #3
   12814:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   12818:	1a09      	subs	r1, r1, r0
   1281a:	1a58      	subs	r0, r3, r1
   1281c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12820:	f162 0700 	sbc.w	r7, r2, #0
   12824:	fb05 f500 	mul.w	r5, r5, r0
   12828:	fb0e 5507 	mla	r5, lr, r7, r5
   1282c:	fba0 700e 	umull	r7, r0, r0, lr
   12830:	4405      	add	r5, r0
   12832:	f007 0e01 	and.w	lr, r7, #1
   12836:	2005      	movs	r0, #5
   12838:	fbae 0e00 	umull	r0, lr, lr, r0
   1283c:	1840      	adds	r0, r0, r1
   1283e:	087f      	lsrs	r7, r7, #1
   12840:	3030      	adds	r0, #48	; 0x30
   12842:	f804 0c01 	strb.w	r0, [r4, #-1]
   12846:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   1284a:	f10c 0c01 	add.w	ip, ip, #1
   1284e:	3c01      	subs	r4, #1
   12850:	086d      	lsrs	r5, r5, #1
   12852:	2e00      	cmp	r6, #0
   12854:	d0cf      	beq.n	127f6 <_vfiprintf_r+0xcde>
   12856:	f898 1000 	ldrb.w	r1, [r8]
   1285a:	4561      	cmp	r1, ip
   1285c:	d1cb      	bne.n	127f6 <_vfiprintf_r+0xcde>
   1285e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12862:	d0c8      	beq.n	127f6 <_vfiprintf_r+0xcde>
   12864:	2b0a      	cmp	r3, #10
   12866:	f172 0200 	sbcs.w	r2, r2, #0
   1286a:	d26c      	bcs.n	12946 <_vfiprintf_r+0xe2e>
   1286c:	ab44      	add	r3, sp, #272	; 0x110
   1286e:	1b1b      	subs	r3, r3, r4
   12870:	9f04      	ldr	r7, [sp, #16]
   12872:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   12876:	9e02      	ldr	r6, [sp, #8]
   12878:	f8dd 8020 	ldr.w	r8, [sp, #32]
   1287c:	9304      	str	r3, [sp, #16]
   1287e:	f7ff ba6d 	b.w	11d5c <_vfiprintf_r+0x244>
   12882:	9602      	str	r6, [sp, #8]
   12884:	f7ff ba5d 	b.w	11d42 <_vfiprintf_r+0x22a>
   12888:	4658      	mov	r0, fp
   1288a:	f7fb f815 	bl	d8b8 <__sinit>
   1288e:	f7ff b95a 	b.w	11b46 <_vfiprintf_r+0x2e>
   12892:	2901      	cmp	r1, #1
   12894:	9602      	str	r6, [sp, #8]
   12896:	f47f acb2 	bne.w	121fe <_vfiprintf_r+0x6e6>
   1289a:	f7ff ba57 	b.w	11d4c <_vfiprintf_r+0x234>
   1289e:	9b07      	ldr	r3, [sp, #28]
   128a0:	9905      	ldr	r1, [sp, #20]
   128a2:	f853 2b04 	ldr.w	r2, [r3], #4
   128a6:	6011      	str	r1, [r2, #0]
   128a8:	9307      	str	r3, [sp, #28]
   128aa:	f7ff b979 	b.w	11ba0 <_vfiprintf_r+0x88>
   128ae:	2f06      	cmp	r7, #6
   128b0:	463b      	mov	r3, r7
   128b2:	9a02      	ldr	r2, [sp, #8]
   128b4:	4c78      	ldr	r4, [pc, #480]	; (12a98 <_vfiprintf_r+0xf80>)
   128b6:	9207      	str	r2, [sp, #28]
   128b8:	bf28      	it	cs
   128ba:	2306      	movcs	r3, #6
   128bc:	9304      	str	r3, [sp, #16]
   128be:	9302      	str	r3, [sp, #8]
   128c0:	f7ff bb0d 	b.w	11ede <_vfiprintf_r+0x3c6>
   128c4:	9b02      	ldr	r3, [sp, #8]
   128c6:	9907      	ldr	r1, [sp, #28]
   128c8:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   128cc:	bf14      	ite	ne
   128ce:	f851 3b04 	ldrne.w	r3, [r1], #4
   128d2:	f851 3b04 	ldreq.w	r3, [r1], #4
   128d6:	9107      	str	r1, [sp, #28]
   128d8:	bf1c      	itt	ne
   128da:	4602      	movne	r2, r0
   128dc:	b2db      	uxtbne	r3, r3
   128de:	2101      	movs	r1, #1
   128e0:	f7ff ba84 	b.w	11dec <_vfiprintf_r+0x2d4>
   128e4:	ab16      	add	r3, sp, #88	; 0x58
   128e6:	9300      	str	r3, [sp, #0]
   128e8:	2300      	movs	r3, #0
   128ea:	4619      	mov	r1, r3
   128ec:	aa13      	add	r2, sp, #76	; 0x4c
   128ee:	4658      	mov	r0, fp
   128f0:	f7ff f834 	bl	1195c <_wcsrtombs_r>
   128f4:	4603      	mov	r3, r0
   128f6:	3301      	adds	r3, #1
   128f8:	9004      	str	r0, [sp, #16]
   128fa:	f000 80ae 	beq.w	12a5a <_vfiprintf_r+0xf42>
   128fe:	9413      	str	r4, [sp, #76]	; 0x4c
   12900:	9b04      	ldr	r3, [sp, #16]
   12902:	b37b      	cbz	r3, 12964 <_vfiprintf_r+0xe4c>
   12904:	2b63      	cmp	r3, #99	; 0x63
   12906:	dc62      	bgt.n	129ce <_vfiprintf_r+0xeb6>
   12908:	2300      	movs	r3, #0
   1290a:	9308      	str	r3, [sp, #32]
   1290c:	ac2b      	add	r4, sp, #172	; 0xac
   1290e:	2208      	movs	r2, #8
   12910:	2100      	movs	r1, #0
   12912:	a816      	add	r0, sp, #88	; 0x58
   12914:	f7fb f900 	bl	db18 <memset>
   12918:	9d04      	ldr	r5, [sp, #16]
   1291a:	ab16      	add	r3, sp, #88	; 0x58
   1291c:	9300      	str	r3, [sp, #0]
   1291e:	aa13      	add	r2, sp, #76	; 0x4c
   12920:	462b      	mov	r3, r5
   12922:	4621      	mov	r1, r4
   12924:	4658      	mov	r0, fp
   12926:	f7ff f819 	bl	1195c <_wcsrtombs_r>
   1292a:	4285      	cmp	r5, r0
   1292c:	f040 80ab 	bne.w	12a86 <_vfiprintf_r+0xf6e>
   12930:	9b02      	ldr	r3, [sp, #8]
   12932:	9a04      	ldr	r2, [sp, #16]
   12934:	9307      	str	r3, [sp, #28]
   12936:	2300      	movs	r3, #0
   12938:	54a3      	strb	r3, [r4, r2]
   1293a:	461f      	mov	r7, r3
   1293c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12940:	9302      	str	r3, [sp, #8]
   12942:	f7ff ba12 	b.w	11d6a <_vfiprintf_r+0x252>
   12946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12948:	990d      	ldr	r1, [sp, #52]	; 0x34
   1294a:	1ae4      	subs	r4, r4, r3
   1294c:	461a      	mov	r2, r3
   1294e:	4620      	mov	r0, r4
   12950:	f7fb f934 	bl	dbbc <strncpy>
   12954:	f898 3001 	ldrb.w	r3, [r8, #1]
   12958:	b10b      	cbz	r3, 1295e <_vfiprintf_r+0xe46>
   1295a:	f108 0801 	add.w	r8, r8, #1
   1295e:	f04f 0c00 	mov.w	ip, #0
   12962:	e74c      	b.n	127fe <_vfiprintf_r+0xce6>
   12964:	9b02      	ldr	r3, [sp, #8]
   12966:	9307      	str	r3, [sp, #28]
   12968:	9b04      	ldr	r3, [sp, #16]
   1296a:	9302      	str	r3, [sp, #8]
   1296c:	461f      	mov	r7, r3
   1296e:	9308      	str	r3, [sp, #32]
   12970:	f7ff b9fb 	b.w	11d6a <_vfiprintf_r+0x252>
   12974:	2101      	movs	r1, #1
   12976:	4618      	mov	r0, r3
   12978:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1297c:	f7ff bafc 	b.w	11f78 <_vfiprintf_r+0x460>
   12980:	f850 3b04 	ldr.w	r3, [r0], #4
   12984:	9007      	str	r0, [sp, #28]
   12986:	4622      	mov	r2, r4
   12988:	b2db      	uxtb	r3, r3
   1298a:	e6bc      	b.n	12706 <_vfiprintf_r+0xbee>
   1298c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   12990:	9207      	str	r2, [sp, #28]
   12992:	17da      	asrs	r2, r3, #31
   12994:	4611      	mov	r1, r2
   12996:	f7ff b9c7 	b.w	11d28 <_vfiprintf_r+0x210>
   1299a:	f851 3b04 	ldr.w	r3, [r1], #4
   1299e:	9107      	str	r1, [sp, #28]
   129a0:	4602      	mov	r2, r0
   129a2:	b2db      	uxtb	r3, r3
   129a4:	f7ff ba1e 	b.w	11de4 <_vfiprintf_r+0x2cc>
   129a8:	2301      	movs	r3, #1
   129aa:	931c      	str	r3, [sp, #112]	; 0x70
   129ac:	2101      	movs	r1, #1
   129ae:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   129b2:	931b      	str	r3, [sp, #108]	; 0x6c
   129b4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129b8:	460b      	mov	r3, r1
   129ba:	f7ff bab7 	b.w	11f2c <_vfiprintf_r+0x414>
   129be:	9b07      	ldr	r3, [sp, #28]
   129c0:	9905      	ldr	r1, [sp, #20]
   129c2:	f853 2b04 	ldr.w	r2, [r3], #4
   129c6:	9307      	str	r3, [sp, #28]
   129c8:	8011      	strh	r1, [r2, #0]
   129ca:	f7ff b8e9 	b.w	11ba0 <_vfiprintf_r+0x88>
   129ce:	1c59      	adds	r1, r3, #1
   129d0:	4658      	mov	r0, fp
   129d2:	f7fa fa33 	bl	ce3c <_malloc_r>
   129d6:	4604      	mov	r4, r0
   129d8:	2800      	cmp	r0, #0
   129da:	d03e      	beq.n	12a5a <_vfiprintf_r+0xf42>
   129dc:	9008      	str	r0, [sp, #32]
   129de:	e796      	b.n	1290e <_vfiprintf_r+0xdf6>
   129e0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   129e2:	f7fb f9b9 	bl	dd58 <__retarget_lock_release_recursive>
   129e6:	f7ff b9e3 	b.w	11db0 <_vfiprintf_r+0x298>
   129ea:	9b02      	ldr	r3, [sp, #8]
   129ec:	9704      	str	r7, [sp, #16]
   129ee:	9702      	str	r7, [sp, #8]
   129f0:	9307      	str	r3, [sp, #28]
   129f2:	9f08      	ldr	r7, [sp, #32]
   129f4:	f7ff b9b9 	b.w	11d6a <_vfiprintf_r+0x252>
   129f8:	9819      	ldr	r0, [sp, #100]	; 0x64
   129fa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   129fc:	3001      	adds	r0, #1
   129fe:	e557      	b.n	124b0 <_vfiprintf_r+0x998>
   12a00:	9b02      	ldr	r3, [sp, #8]
   12a02:	9307      	str	r3, [sp, #28]
   12a04:	4620      	mov	r0, r4
   12a06:	f7fb f9bb 	bl	dd80 <strlen>
   12a0a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   12a0e:	462f      	mov	r7, r5
   12a10:	9004      	str	r0, [sp, #16]
   12a12:	9302      	str	r3, [sp, #8]
   12a14:	9508      	str	r5, [sp, #32]
   12a16:	f7ff b9a8 	b.w	11d6a <_vfiprintf_r+0x252>
   12a1a:	9903      	ldr	r1, [sp, #12]
   12a1c:	aa18      	add	r2, sp, #96	; 0x60
   12a1e:	4658      	mov	r0, fp
   12a20:	f7ff f83e 	bl	11aa0 <__sprint_r.part.0>
   12a24:	2800      	cmp	r0, #0
   12a26:	f43f aa2e 	beq.w	11e86 <_vfiprintf_r+0x36e>
   12a2a:	f7ff ba3c 	b.w	11ea6 <_vfiprintf_r+0x38e>
   12a2e:	9819      	ldr	r0, [sp, #100]	; 0x64
   12a30:	3001      	adds	r0, #1
   12a32:	e585      	b.n	12540 <_vfiprintf_r+0xa28>
   12a34:	468c      	mov	ip, r1
   12a36:	e462      	b.n	122fe <_vfiprintf_r+0x7e6>
   12a38:	9b03      	ldr	r3, [sp, #12]
   12a3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12a3c:	07d9      	lsls	r1, r3, #31
   12a3e:	d407      	bmi.n	12a50 <_vfiprintf_r+0xf38>
   12a40:	9b03      	ldr	r3, [sp, #12]
   12a42:	899b      	ldrh	r3, [r3, #12]
   12a44:	059a      	lsls	r2, r3, #22
   12a46:	d403      	bmi.n	12a50 <_vfiprintf_r+0xf38>
   12a48:	9b03      	ldr	r3, [sp, #12]
   12a4a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12a4c:	f7fb f984 	bl	dd58 <__retarget_lock_release_recursive>
   12a50:	f04f 33ff 	mov.w	r3, #4294967295
   12a54:	9305      	str	r3, [sp, #20]
   12a56:	f7ff ba33 	b.w	11ec0 <_vfiprintf_r+0x3a8>
   12a5a:	9a03      	ldr	r2, [sp, #12]
   12a5c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a64:	8193      	strh	r3, [r2, #12]
   12a66:	f7ff ba21 	b.w	11eac <_vfiprintf_r+0x394>
   12a6a:	9c07      	ldr	r4, [sp, #28]
   12a6c:	9704      	str	r7, [sp, #16]
   12a6e:	e747      	b.n	12900 <_vfiprintf_r+0xde8>
   12a70:	9b07      	ldr	r3, [sp, #28]
   12a72:	f898 1001 	ldrb.w	r1, [r8, #1]
   12a76:	f853 7b04 	ldr.w	r7, [r3], #4
   12a7a:	9307      	str	r3, [sp, #28]
   12a7c:	4690      	mov	r8, r2
   12a7e:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   12a82:	f7ff b8b5 	b.w	11bf0 <_vfiprintf_r+0xd8>
   12a86:	9a03      	ldr	r2, [sp, #12]
   12a88:	8993      	ldrh	r3, [r2, #12]
   12a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12a8e:	8193      	strh	r3, [r2, #12]
   12a90:	f7ff ba03 	b.w	11e9a <_vfiprintf_r+0x382>
   12a94:	cccccccd 	.word	0xcccccccd
   12a98:	00015514 	.word	0x00015514

00012a9c <__sbprintf>:
   12a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a9e:	461f      	mov	r7, r3
   12aa0:	898b      	ldrh	r3, [r1, #12]
   12aa2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   12aa6:	f023 0302 	bic.w	r3, r3, #2
   12aaa:	f8ad 300c 	strh.w	r3, [sp, #12]
   12aae:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12ab0:	9319      	str	r3, [sp, #100]	; 0x64
   12ab2:	89cb      	ldrh	r3, [r1, #14]
   12ab4:	f8ad 300e 	strh.w	r3, [sp, #14]
   12ab8:	69cb      	ldr	r3, [r1, #28]
   12aba:	9307      	str	r3, [sp, #28]
   12abc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   12abe:	9309      	str	r3, [sp, #36]	; 0x24
   12ac0:	ab1a      	add	r3, sp, #104	; 0x68
   12ac2:	9300      	str	r3, [sp, #0]
   12ac4:	9304      	str	r3, [sp, #16]
   12ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   12aca:	4615      	mov	r5, r2
   12acc:	4606      	mov	r6, r0
   12ace:	9302      	str	r3, [sp, #8]
   12ad0:	9305      	str	r3, [sp, #20]
   12ad2:	a816      	add	r0, sp, #88	; 0x58
   12ad4:	2300      	movs	r3, #0
   12ad6:	460c      	mov	r4, r1
   12ad8:	9306      	str	r3, [sp, #24]
   12ada:	f7fb f937 	bl	dd4c <__retarget_lock_init_recursive>
   12ade:	462a      	mov	r2, r5
   12ae0:	463b      	mov	r3, r7
   12ae2:	4669      	mov	r1, sp
   12ae4:	4630      	mov	r0, r6
   12ae6:	f7ff f817 	bl	11b18 <_vfiprintf_r>
   12aea:	1e05      	subs	r5, r0, #0
   12aec:	db07      	blt.n	12afe <__sbprintf+0x62>
   12aee:	4669      	mov	r1, sp
   12af0:	4630      	mov	r0, r6
   12af2:	f7fd fdb1 	bl	10658 <_fflush_r>
   12af6:	2800      	cmp	r0, #0
   12af8:	bf18      	it	ne
   12afa:	f04f 35ff 	movne.w	r5, #4294967295
   12afe:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12b02:	065b      	lsls	r3, r3, #25
   12b04:	d503      	bpl.n	12b0e <__sbprintf+0x72>
   12b06:	89a3      	ldrh	r3, [r4, #12]
   12b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12b0c:	81a3      	strh	r3, [r4, #12]
   12b0e:	9816      	ldr	r0, [sp, #88]	; 0x58
   12b10:	f7fb f91e 	bl	dd50 <__retarget_lock_close_recursive>
   12b14:	4628      	mov	r0, r5
   12b16:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   12b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012b1c <__sfvwrite_r>:
   12b1c:	6893      	ldr	r3, [r2, #8]
   12b1e:	2b00      	cmp	r3, #0
   12b20:	f000 8081 	beq.w	12c26 <__sfvwrite_r+0x10a>
   12b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b28:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   12b2c:	460c      	mov	r4, r1
   12b2e:	0719      	lsls	r1, r3, #28
   12b30:	4680      	mov	r8, r0
   12b32:	b083      	sub	sp, #12
   12b34:	4617      	mov	r7, r2
   12b36:	b298      	uxth	r0, r3
   12b38:	d523      	bpl.n	12b82 <__sfvwrite_r+0x66>
   12b3a:	6923      	ldr	r3, [r4, #16]
   12b3c:	b30b      	cbz	r3, 12b82 <__sfvwrite_r+0x66>
   12b3e:	f010 0302 	ands.w	r3, r0, #2
   12b42:	683d      	ldr	r5, [r7, #0]
   12b44:	d02b      	beq.n	12b9e <__sfvwrite_r+0x82>
   12b46:	f04f 0a00 	mov.w	sl, #0
   12b4a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 12e00 <__sfvwrite_r+0x2e4>
   12b4e:	4656      	mov	r6, sl
   12b50:	455e      	cmp	r6, fp
   12b52:	4633      	mov	r3, r6
   12b54:	4652      	mov	r2, sl
   12b56:	bf28      	it	cs
   12b58:	465b      	movcs	r3, fp
   12b5a:	4640      	mov	r0, r8
   12b5c:	2e00      	cmp	r6, #0
   12b5e:	d04f      	beq.n	12c00 <__sfvwrite_r+0xe4>
   12b60:	69e1      	ldr	r1, [r4, #28]
   12b62:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12b66:	47e0      	blx	ip
   12b68:	2800      	cmp	r0, #0
   12b6a:	dd52      	ble.n	12c12 <__sfvwrite_r+0xf6>
   12b6c:	68bb      	ldr	r3, [r7, #8]
   12b6e:	1a1b      	subs	r3, r3, r0
   12b70:	4482      	add	sl, r0
   12b72:	1a36      	subs	r6, r6, r0
   12b74:	60bb      	str	r3, [r7, #8]
   12b76:	2b00      	cmp	r3, #0
   12b78:	d1ea      	bne.n	12b50 <__sfvwrite_r+0x34>
   12b7a:	2000      	movs	r0, #0
   12b7c:	b003      	add	sp, #12
   12b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12b82:	4621      	mov	r1, r4
   12b84:	4640      	mov	r0, r8
   12b86:	f000 f93d 	bl	12e04 <__swsetup_r>
   12b8a:	2800      	cmp	r0, #0
   12b8c:	f040 8134 	bne.w	12df8 <__sfvwrite_r+0x2dc>
   12b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12b94:	683d      	ldr	r5, [r7, #0]
   12b96:	b298      	uxth	r0, r3
   12b98:	f010 0302 	ands.w	r3, r0, #2
   12b9c:	d1d3      	bne.n	12b46 <__sfvwrite_r+0x2a>
   12b9e:	f010 0901 	ands.w	r9, r0, #1
   12ba2:	d142      	bne.n	12c2a <__sfvwrite_r+0x10e>
   12ba4:	464e      	mov	r6, r9
   12ba6:	b33e      	cbz	r6, 12bf8 <__sfvwrite_r+0xdc>
   12ba8:	0582      	lsls	r2, r0, #22
   12baa:	f8d4 b008 	ldr.w	fp, [r4, #8]
   12bae:	f140 8081 	bpl.w	12cb4 <__sfvwrite_r+0x198>
   12bb2:	45b3      	cmp	fp, r6
   12bb4:	465a      	mov	r2, fp
   12bb6:	f200 80b1 	bhi.w	12d1c <__sfvwrite_r+0x200>
   12bba:	f410 6f90 	tst.w	r0, #1152	; 0x480
   12bbe:	f040 80be 	bne.w	12d3e <__sfvwrite_r+0x222>
   12bc2:	6820      	ldr	r0, [r4, #0]
   12bc4:	9201      	str	r2, [sp, #4]
   12bc6:	4649      	mov	r1, r9
   12bc8:	f7fa ff2a 	bl	da20 <memmove>
   12bcc:	68a3      	ldr	r3, [r4, #8]
   12bce:	9a01      	ldr	r2, [sp, #4]
   12bd0:	eba3 010b 	sub.w	r1, r3, fp
   12bd4:	6823      	ldr	r3, [r4, #0]
   12bd6:	60a1      	str	r1, [r4, #8]
   12bd8:	4413      	add	r3, r2
   12bda:	46b2      	mov	sl, r6
   12bdc:	6023      	str	r3, [r4, #0]
   12bde:	2600      	movs	r6, #0
   12be0:	68bb      	ldr	r3, [r7, #8]
   12be2:	eba3 030a 	sub.w	r3, r3, sl
   12be6:	44d1      	add	r9, sl
   12be8:	60bb      	str	r3, [r7, #8]
   12bea:	2b00      	cmp	r3, #0
   12bec:	d0c5      	beq.n	12b7a <__sfvwrite_r+0x5e>
   12bee:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   12bf2:	b280      	uxth	r0, r0
   12bf4:	2e00      	cmp	r6, #0
   12bf6:	d1d7      	bne.n	12ba8 <__sfvwrite_r+0x8c>
   12bf8:	e9d5 9600 	ldrd	r9, r6, [r5]
   12bfc:	3508      	adds	r5, #8
   12bfe:	e7d2      	b.n	12ba6 <__sfvwrite_r+0x8a>
   12c00:	e9d5 a600 	ldrd	sl, r6, [r5]
   12c04:	3508      	adds	r5, #8
   12c06:	e7a3      	b.n	12b50 <__sfvwrite_r+0x34>
   12c08:	4621      	mov	r1, r4
   12c0a:	4640      	mov	r0, r8
   12c0c:	f7fd fd24 	bl	10658 <_fflush_r>
   12c10:	b380      	cbz	r0, 12c74 <__sfvwrite_r+0x158>
   12c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12c16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12c1a:	f04f 30ff 	mov.w	r0, #4294967295
   12c1e:	81a3      	strh	r3, [r4, #12]
   12c20:	b003      	add	sp, #12
   12c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c26:	2000      	movs	r0, #0
   12c28:	4770      	bx	lr
   12c2a:	461e      	mov	r6, r3
   12c2c:	46ba      	mov	sl, r7
   12c2e:	4699      	mov	r9, r3
   12c30:	4618      	mov	r0, r3
   12c32:	461f      	mov	r7, r3
   12c34:	b366      	cbz	r6, 12c90 <__sfvwrite_r+0x174>
   12c36:	b388      	cbz	r0, 12c9c <__sfvwrite_r+0x180>
   12c38:	464a      	mov	r2, r9
   12c3a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   12c3e:	6820      	ldr	r0, [r4, #0]
   12c40:	68a1      	ldr	r1, [r4, #8]
   12c42:	42b2      	cmp	r2, r6
   12c44:	bf28      	it	cs
   12c46:	4632      	movcs	r2, r6
   12c48:	4560      	cmp	r0, ip
   12c4a:	d904      	bls.n	12c56 <__sfvwrite_r+0x13a>
   12c4c:	eb01 0b03 	add.w	fp, r1, r3
   12c50:	455a      	cmp	r2, fp
   12c52:	f300 80a7 	bgt.w	12da4 <__sfvwrite_r+0x288>
   12c56:	4293      	cmp	r3, r2
   12c58:	dc64      	bgt.n	12d24 <__sfvwrite_r+0x208>
   12c5a:	69e1      	ldr	r1, [r4, #28]
   12c5c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12c60:	463a      	mov	r2, r7
   12c62:	4640      	mov	r0, r8
   12c64:	47e0      	blx	ip
   12c66:	f1b0 0b00 	subs.w	fp, r0, #0
   12c6a:	ddd2      	ble.n	12c12 <__sfvwrite_r+0xf6>
   12c6c:	ebb9 090b 	subs.w	r9, r9, fp
   12c70:	d0ca      	beq.n	12c08 <__sfvwrite_r+0xec>
   12c72:	2001      	movs	r0, #1
   12c74:	f8da 3008 	ldr.w	r3, [sl, #8]
   12c78:	eba3 030b 	sub.w	r3, r3, fp
   12c7c:	445f      	add	r7, fp
   12c7e:	eba6 060b 	sub.w	r6, r6, fp
   12c82:	f8ca 3008 	str.w	r3, [sl, #8]
   12c86:	2b00      	cmp	r3, #0
   12c88:	f43f af77 	beq.w	12b7a <__sfvwrite_r+0x5e>
   12c8c:	2e00      	cmp	r6, #0
   12c8e:	d1d2      	bne.n	12c36 <__sfvwrite_r+0x11a>
   12c90:	686e      	ldr	r6, [r5, #4]
   12c92:	462b      	mov	r3, r5
   12c94:	3508      	adds	r5, #8
   12c96:	2e00      	cmp	r6, #0
   12c98:	d0fa      	beq.n	12c90 <__sfvwrite_r+0x174>
   12c9a:	681f      	ldr	r7, [r3, #0]
   12c9c:	4632      	mov	r2, r6
   12c9e:	210a      	movs	r1, #10
   12ca0:	4638      	mov	r0, r7
   12ca2:	f7fd fd1d 	bl	106e0 <memchr>
   12ca6:	2800      	cmp	r0, #0
   12ca8:	f000 809d 	beq.w	12de6 <__sfvwrite_r+0x2ca>
   12cac:	3001      	adds	r0, #1
   12cae:	eba0 0907 	sub.w	r9, r0, r7
   12cb2:	e7c1      	b.n	12c38 <__sfvwrite_r+0x11c>
   12cb4:	6820      	ldr	r0, [r4, #0]
   12cb6:	6923      	ldr	r3, [r4, #16]
   12cb8:	4298      	cmp	r0, r3
   12cba:	d817      	bhi.n	12cec <__sfvwrite_r+0x1d0>
   12cbc:	6962      	ldr	r2, [r4, #20]
   12cbe:	42b2      	cmp	r2, r6
   12cc0:	d814      	bhi.n	12cec <__sfvwrite_r+0x1d0>
   12cc2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   12cc6:	42b3      	cmp	r3, r6
   12cc8:	bf28      	it	cs
   12cca:	4633      	movcs	r3, r6
   12ccc:	69e1      	ldr	r1, [r4, #28]
   12cce:	fb93 f3f2 	sdiv	r3, r3, r2
   12cd2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12cd6:	fb02 f303 	mul.w	r3, r2, r3
   12cda:	4640      	mov	r0, r8
   12cdc:	464a      	mov	r2, r9
   12cde:	47e0      	blx	ip
   12ce0:	f1b0 0a00 	subs.w	sl, r0, #0
   12ce4:	dd95      	ble.n	12c12 <__sfvwrite_r+0xf6>
   12ce6:	eba6 060a 	sub.w	r6, r6, sl
   12cea:	e779      	b.n	12be0 <__sfvwrite_r+0xc4>
   12cec:	45b3      	cmp	fp, r6
   12cee:	46da      	mov	sl, fp
   12cf0:	bf28      	it	cs
   12cf2:	46b2      	movcs	sl, r6
   12cf4:	4652      	mov	r2, sl
   12cf6:	4649      	mov	r1, r9
   12cf8:	f7fa fe92 	bl	da20 <memmove>
   12cfc:	68a3      	ldr	r3, [r4, #8]
   12cfe:	6822      	ldr	r2, [r4, #0]
   12d00:	eba3 030a 	sub.w	r3, r3, sl
   12d04:	4452      	add	r2, sl
   12d06:	60a3      	str	r3, [r4, #8]
   12d08:	6022      	str	r2, [r4, #0]
   12d0a:	2b00      	cmp	r3, #0
   12d0c:	d1eb      	bne.n	12ce6 <__sfvwrite_r+0x1ca>
   12d0e:	4621      	mov	r1, r4
   12d10:	4640      	mov	r0, r8
   12d12:	f7fd fca1 	bl	10658 <_fflush_r>
   12d16:	2800      	cmp	r0, #0
   12d18:	d0e5      	beq.n	12ce6 <__sfvwrite_r+0x1ca>
   12d1a:	e77a      	b.n	12c12 <__sfvwrite_r+0xf6>
   12d1c:	6820      	ldr	r0, [r4, #0]
   12d1e:	46b3      	mov	fp, r6
   12d20:	4632      	mov	r2, r6
   12d22:	e74f      	b.n	12bc4 <__sfvwrite_r+0xa8>
   12d24:	4639      	mov	r1, r7
   12d26:	9201      	str	r2, [sp, #4]
   12d28:	f7fa fe7a 	bl	da20 <memmove>
   12d2c:	9a01      	ldr	r2, [sp, #4]
   12d2e:	68a3      	ldr	r3, [r4, #8]
   12d30:	1a9b      	subs	r3, r3, r2
   12d32:	60a3      	str	r3, [r4, #8]
   12d34:	6823      	ldr	r3, [r4, #0]
   12d36:	4413      	add	r3, r2
   12d38:	6023      	str	r3, [r4, #0]
   12d3a:	4693      	mov	fp, r2
   12d3c:	e796      	b.n	12c6c <__sfvwrite_r+0x150>
   12d3e:	6823      	ldr	r3, [r4, #0]
   12d40:	6921      	ldr	r1, [r4, #16]
   12d42:	eba3 0b01 	sub.w	fp, r3, r1
   12d46:	6963      	ldr	r3, [r4, #20]
   12d48:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   12d4c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   12d50:	f10b 0301 	add.w	r3, fp, #1
   12d54:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   12d58:	4433      	add	r3, r6
   12d5a:	4553      	cmp	r3, sl
   12d5c:	4652      	mov	r2, sl
   12d5e:	bf84      	itt	hi
   12d60:	469a      	movhi	sl, r3
   12d62:	4652      	movhi	r2, sl
   12d64:	0543      	lsls	r3, r0, #21
   12d66:	d52c      	bpl.n	12dc2 <__sfvwrite_r+0x2a6>
   12d68:	4611      	mov	r1, r2
   12d6a:	4640      	mov	r0, r8
   12d6c:	f7fa f866 	bl	ce3c <_malloc_r>
   12d70:	2800      	cmp	r0, #0
   12d72:	d03b      	beq.n	12dec <__sfvwrite_r+0x2d0>
   12d74:	465a      	mov	r2, fp
   12d76:	6921      	ldr	r1, [r4, #16]
   12d78:	9001      	str	r0, [sp, #4]
   12d7a:	f7f6 fd07 	bl	978c <memcpy>
   12d7e:	89a2      	ldrh	r2, [r4, #12]
   12d80:	9b01      	ldr	r3, [sp, #4]
   12d82:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   12d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   12d8a:	81a2      	strh	r2, [r4, #12]
   12d8c:	eb03 000b 	add.w	r0, r3, fp
   12d90:	6123      	str	r3, [r4, #16]
   12d92:	ebaa 030b 	sub.w	r3, sl, fp
   12d96:	f8c4 a014 	str.w	sl, [r4, #20]
   12d9a:	60a3      	str	r3, [r4, #8]
   12d9c:	6020      	str	r0, [r4, #0]
   12d9e:	46b3      	mov	fp, r6
   12da0:	4632      	mov	r2, r6
   12da2:	e70f      	b.n	12bc4 <__sfvwrite_r+0xa8>
   12da4:	4639      	mov	r1, r7
   12da6:	465a      	mov	r2, fp
   12da8:	f7fa fe3a 	bl	da20 <memmove>
   12dac:	6823      	ldr	r3, [r4, #0]
   12dae:	445b      	add	r3, fp
   12db0:	6023      	str	r3, [r4, #0]
   12db2:	4621      	mov	r1, r4
   12db4:	4640      	mov	r0, r8
   12db6:	f7fd fc4f 	bl	10658 <_fflush_r>
   12dba:	2800      	cmp	r0, #0
   12dbc:	f43f af56 	beq.w	12c6c <__sfvwrite_r+0x150>
   12dc0:	e727      	b.n	12c12 <__sfvwrite_r+0xf6>
   12dc2:	4640      	mov	r0, r8
   12dc4:	f7fa faf6 	bl	d3b4 <_realloc_r>
   12dc8:	4603      	mov	r3, r0
   12dca:	2800      	cmp	r0, #0
   12dcc:	d1de      	bne.n	12d8c <__sfvwrite_r+0x270>
   12dce:	6921      	ldr	r1, [r4, #16]
   12dd0:	4640      	mov	r0, r8
   12dd2:	f7fb f8a3 	bl	df1c <_free_r>
   12dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12dda:	220c      	movs	r2, #12
   12ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   12de0:	f8c8 2000 	str.w	r2, [r8]
   12de4:	e717      	b.n	12c16 <__sfvwrite_r+0xfa>
   12de6:	1c72      	adds	r2, r6, #1
   12de8:	4691      	mov	r9, r2
   12dea:	e726      	b.n	12c3a <__sfvwrite_r+0x11e>
   12dec:	220c      	movs	r2, #12
   12dee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12df2:	f8c8 2000 	str.w	r2, [r8]
   12df6:	e70e      	b.n	12c16 <__sfvwrite_r+0xfa>
   12df8:	f04f 30ff 	mov.w	r0, #4294967295
   12dfc:	e6be      	b.n	12b7c <__sfvwrite_r+0x60>
   12dfe:	bf00      	nop
   12e00:	7ffffc00 	.word	0x7ffffc00

00012e04 <__swsetup_r>:
   12e04:	b538      	push	{r3, r4, r5, lr}
   12e06:	4b31      	ldr	r3, [pc, #196]	; (12ecc <__swsetup_r+0xc8>)
   12e08:	681b      	ldr	r3, [r3, #0]
   12e0a:	4605      	mov	r5, r0
   12e0c:	460c      	mov	r4, r1
   12e0e:	b113      	cbz	r3, 12e16 <__swsetup_r+0x12>
   12e10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   12e12:	2a00      	cmp	r2, #0
   12e14:	d04e      	beq.n	12eb4 <__swsetup_r+0xb0>
   12e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12e1a:	0718      	lsls	r0, r3, #28
   12e1c:	b29a      	uxth	r2, r3
   12e1e:	d51c      	bpl.n	12e5a <__swsetup_r+0x56>
   12e20:	6921      	ldr	r1, [r4, #16]
   12e22:	b329      	cbz	r1, 12e70 <__swsetup_r+0x6c>
   12e24:	f012 0001 	ands.w	r0, r2, #1
   12e28:	d007      	beq.n	12e3a <__swsetup_r+0x36>
   12e2a:	2000      	movs	r0, #0
   12e2c:	60a0      	str	r0, [r4, #8]
   12e2e:	6960      	ldr	r0, [r4, #20]
   12e30:	4240      	negs	r0, r0
   12e32:	61a0      	str	r0, [r4, #24]
   12e34:	b139      	cbz	r1, 12e46 <__swsetup_r+0x42>
   12e36:	2000      	movs	r0, #0
   12e38:	bd38      	pop	{r3, r4, r5, pc}
   12e3a:	0795      	lsls	r5, r2, #30
   12e3c:	bf58      	it	pl
   12e3e:	6960      	ldrpl	r0, [r4, #20]
   12e40:	60a0      	str	r0, [r4, #8]
   12e42:	2900      	cmp	r1, #0
   12e44:	d1f7      	bne.n	12e36 <__swsetup_r+0x32>
   12e46:	0612      	lsls	r2, r2, #24
   12e48:	bf58      	it	pl
   12e4a:	4608      	movpl	r0, r1
   12e4c:	d5f4      	bpl.n	12e38 <__swsetup_r+0x34>
   12e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12e52:	81a3      	strh	r3, [r4, #12]
   12e54:	f04f 30ff 	mov.w	r0, #4294967295
   12e58:	bd38      	pop	{r3, r4, r5, pc}
   12e5a:	06d1      	lsls	r1, r2, #27
   12e5c:	d52e      	bpl.n	12ebc <__swsetup_r+0xb8>
   12e5e:	0752      	lsls	r2, r2, #29
   12e60:	d414      	bmi.n	12e8c <__swsetup_r+0x88>
   12e62:	6921      	ldr	r1, [r4, #16]
   12e64:	f043 0308 	orr.w	r3, r3, #8
   12e68:	81a3      	strh	r3, [r4, #12]
   12e6a:	b29a      	uxth	r2, r3
   12e6c:	2900      	cmp	r1, #0
   12e6e:	d1d9      	bne.n	12e24 <__swsetup_r+0x20>
   12e70:	f402 7020 	and.w	r0, r2, #640	; 0x280
   12e74:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   12e78:	d0d4      	beq.n	12e24 <__swsetup_r+0x20>
   12e7a:	4621      	mov	r1, r4
   12e7c:	4628      	mov	r0, r5
   12e7e:	f000 f93f 	bl	13100 <__smakebuf_r>
   12e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12e86:	6921      	ldr	r1, [r4, #16]
   12e88:	b29a      	uxth	r2, r3
   12e8a:	e7cb      	b.n	12e24 <__swsetup_r+0x20>
   12e8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   12e8e:	b151      	cbz	r1, 12ea6 <__swsetup_r+0xa2>
   12e90:	f104 0240 	add.w	r2, r4, #64	; 0x40
   12e94:	4291      	cmp	r1, r2
   12e96:	d004      	beq.n	12ea2 <__swsetup_r+0x9e>
   12e98:	4628      	mov	r0, r5
   12e9a:	f7fb f83f 	bl	df1c <_free_r>
   12e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12ea2:	2200      	movs	r2, #0
   12ea4:	6322      	str	r2, [r4, #48]	; 0x30
   12ea6:	6921      	ldr	r1, [r4, #16]
   12ea8:	2200      	movs	r2, #0
   12eaa:	e9c4 1200 	strd	r1, r2, [r4]
   12eae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   12eb2:	e7d7      	b.n	12e64 <__swsetup_r+0x60>
   12eb4:	4618      	mov	r0, r3
   12eb6:	f7fa fcff 	bl	d8b8 <__sinit>
   12eba:	e7ac      	b.n	12e16 <__swsetup_r+0x12>
   12ebc:	2209      	movs	r2, #9
   12ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ec2:	602a      	str	r2, [r5, #0]
   12ec4:	f04f 30ff 	mov.w	r0, #4294967295
   12ec8:	81a3      	strh	r3, [r4, #12]
   12eca:	bd38      	pop	{r3, r4, r5, pc}
   12ecc:	1fff9168 	.word	0x1fff9168

00012ed0 <__fputwc>:
   12ed0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12ed4:	b083      	sub	sp, #12
   12ed6:	4607      	mov	r7, r0
   12ed8:	4688      	mov	r8, r1
   12eda:	4614      	mov	r4, r2
   12edc:	f7fa fea0 	bl	dc20 <__locale_mb_cur_max>
   12ee0:	2801      	cmp	r0, #1
   12ee2:	d103      	bne.n	12eec <__fputwc+0x1c>
   12ee4:	f108 33ff 	add.w	r3, r8, #4294967295
   12ee8:	2bfe      	cmp	r3, #254	; 0xfe
   12eea:	d937      	bls.n	12f5c <__fputwc+0x8c>
   12eec:	f10d 0904 	add.w	r9, sp, #4
   12ef0:	4642      	mov	r2, r8
   12ef2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   12ef6:	4649      	mov	r1, r9
   12ef8:	4638      	mov	r0, r7
   12efa:	f7fe fd09 	bl	11910 <_wcrtomb_r>
   12efe:	1c42      	adds	r2, r0, #1
   12f00:	4606      	mov	r6, r0
   12f02:	d033      	beq.n	12f6c <__fputwc+0x9c>
   12f04:	b328      	cbz	r0, 12f52 <__fputwc+0x82>
   12f06:	f89d c004 	ldrb.w	ip, [sp, #4]
   12f0a:	2500      	movs	r5, #0
   12f0c:	e009      	b.n	12f22 <__fputwc+0x52>
   12f0e:	6823      	ldr	r3, [r4, #0]
   12f10:	1c5a      	adds	r2, r3, #1
   12f12:	6022      	str	r2, [r4, #0]
   12f14:	f883 c000 	strb.w	ip, [r3]
   12f18:	3501      	adds	r5, #1
   12f1a:	42b5      	cmp	r5, r6
   12f1c:	d219      	bcs.n	12f52 <__fputwc+0x82>
   12f1e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   12f22:	68a3      	ldr	r3, [r4, #8]
   12f24:	3b01      	subs	r3, #1
   12f26:	2b00      	cmp	r3, #0
   12f28:	60a3      	str	r3, [r4, #8]
   12f2a:	daf0      	bge.n	12f0e <__fputwc+0x3e>
   12f2c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   12f30:	4573      	cmp	r3, lr
   12f32:	4661      	mov	r1, ip
   12f34:	4622      	mov	r2, r4
   12f36:	4638      	mov	r0, r7
   12f38:	db02      	blt.n	12f40 <__fputwc+0x70>
   12f3a:	f1bc 0f0a 	cmp.w	ip, #10
   12f3e:	d1e6      	bne.n	12f0e <__fputwc+0x3e>
   12f40:	f000 f94a 	bl	131d8 <__swbuf_r>
   12f44:	1c43      	adds	r3, r0, #1
   12f46:	d1e7      	bne.n	12f18 <__fputwc+0x48>
   12f48:	4606      	mov	r6, r0
   12f4a:	4630      	mov	r0, r6
   12f4c:	b003      	add	sp, #12
   12f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12f52:	4646      	mov	r6, r8
   12f54:	4630      	mov	r0, r6
   12f56:	b003      	add	sp, #12
   12f58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12f5c:	fa5f fc88 	uxtb.w	ip, r8
   12f60:	f88d c004 	strb.w	ip, [sp, #4]
   12f64:	4606      	mov	r6, r0
   12f66:	f10d 0904 	add.w	r9, sp, #4
   12f6a:	e7ce      	b.n	12f0a <__fputwc+0x3a>
   12f6c:	89a3      	ldrh	r3, [r4, #12]
   12f6e:	4630      	mov	r0, r6
   12f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12f74:	81a3      	strh	r3, [r4, #12]
   12f76:	b003      	add	sp, #12
   12f78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00012f7c <_fputwc_r>:
   12f7c:	b530      	push	{r4, r5, lr}
   12f7e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   12f80:	f013 0f01 	tst.w	r3, #1
   12f84:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12f88:	4614      	mov	r4, r2
   12f8a:	b083      	sub	sp, #12
   12f8c:	4605      	mov	r5, r0
   12f8e:	b29a      	uxth	r2, r3
   12f90:	d101      	bne.n	12f96 <_fputwc_r+0x1a>
   12f92:	0598      	lsls	r0, r3, #22
   12f94:	d51c      	bpl.n	12fd0 <_fputwc_r+0x54>
   12f96:	0490      	lsls	r0, r2, #18
   12f98:	d406      	bmi.n	12fa8 <_fputwc_r+0x2c>
   12f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   12f9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   12fa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   12fa4:	81a3      	strh	r3, [r4, #12]
   12fa6:	6662      	str	r2, [r4, #100]	; 0x64
   12fa8:	4622      	mov	r2, r4
   12faa:	4628      	mov	r0, r5
   12fac:	f7ff ff90 	bl	12ed0 <__fputwc>
   12fb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   12fb2:	07da      	lsls	r2, r3, #31
   12fb4:	4605      	mov	r5, r0
   12fb6:	d402      	bmi.n	12fbe <_fputwc_r+0x42>
   12fb8:	89a3      	ldrh	r3, [r4, #12]
   12fba:	059b      	lsls	r3, r3, #22
   12fbc:	d502      	bpl.n	12fc4 <_fputwc_r+0x48>
   12fbe:	4628      	mov	r0, r5
   12fc0:	b003      	add	sp, #12
   12fc2:	bd30      	pop	{r4, r5, pc}
   12fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12fc6:	f7fa fec7 	bl	dd58 <__retarget_lock_release_recursive>
   12fca:	4628      	mov	r0, r5
   12fcc:	b003      	add	sp, #12
   12fce:	bd30      	pop	{r4, r5, pc}
   12fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   12fd2:	9101      	str	r1, [sp, #4]
   12fd4:	f7fa febe 	bl	dd54 <__retarget_lock_acquire_recursive>
   12fd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12fdc:	9901      	ldr	r1, [sp, #4]
   12fde:	b29a      	uxth	r2, r3
   12fe0:	e7d9      	b.n	12f96 <_fputwc_r+0x1a>
   12fe2:	bf00      	nop

00012fe4 <_wcsnrtombs_l>:
   12fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fe8:	b089      	sub	sp, #36	; 0x24
   12fea:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   12fee:	9f12      	ldr	r7, [sp, #72]	; 0x48
   12ff0:	9101      	str	r1, [sp, #4]
   12ff2:	4681      	mov	r9, r0
   12ff4:	9203      	str	r2, [sp, #12]
   12ff6:	461e      	mov	r6, r3
   12ff8:	f1b8 0f00 	cmp.w	r8, #0
   12ffc:	d055      	beq.n	130aa <_wcsnrtombs_l+0xc6>
   12ffe:	9b01      	ldr	r3, [sp, #4]
   13000:	2b00      	cmp	r3, #0
   13002:	d057      	beq.n	130b4 <_wcsnrtombs_l+0xd0>
   13004:	9b03      	ldr	r3, [sp, #12]
   13006:	681d      	ldr	r5, [r3, #0]
   13008:	2f00      	cmp	r7, #0
   1300a:	d063      	beq.n	130d4 <_wcsnrtombs_l+0xf0>
   1300c:	1e74      	subs	r4, r6, #1
   1300e:	b32e      	cbz	r6, 1305c <_wcsnrtombs_l+0x78>
   13010:	9b01      	ldr	r3, [sp, #4]
   13012:	9302      	str	r3, [sp, #8]
   13014:	3d04      	subs	r5, #4
   13016:	2600      	movs	r6, #0
   13018:	e00a      	b.n	13030 <_wcsnrtombs_l+0x4c>
   1301a:	9b01      	ldr	r3, [sp, #4]
   1301c:	bb13      	cbnz	r3, 13064 <_wcsnrtombs_l+0x80>
   1301e:	682a      	ldr	r2, [r5, #0]
   13020:	2a00      	cmp	r2, #0
   13022:	d035      	beq.n	13090 <_wcsnrtombs_l+0xac>
   13024:	45bc      	cmp	ip, r7
   13026:	d257      	bcs.n	130d8 <_wcsnrtombs_l+0xf4>
   13028:	3c01      	subs	r4, #1
   1302a:	1c63      	adds	r3, r4, #1
   1302c:	4666      	mov	r6, ip
   1302e:	d015      	beq.n	1305c <_wcsnrtombs_l+0x78>
   13030:	f8d8 3000 	ldr.w	r3, [r8]
   13034:	f855 2f04 	ldr.w	r2, [r5, #4]!
   13038:	9300      	str	r3, [sp, #0]
   1303a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1303e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13042:	4643      	mov	r3, r8
   13044:	a905      	add	r1, sp, #20
   13046:	4648      	mov	r0, r9
   13048:	47e0      	blx	ip
   1304a:	1c42      	adds	r2, r0, #1
   1304c:	d037      	beq.n	130be <_wcsnrtombs_l+0xda>
   1304e:	eb00 0c06 	add.w	ip, r0, r6
   13052:	45bc      	cmp	ip, r7
   13054:	d9e1      	bls.n	1301a <_wcsnrtombs_l+0x36>
   13056:	9b00      	ldr	r3, [sp, #0]
   13058:	e9c8 3b00 	strd	r3, fp, [r8]
   1305c:	4630      	mov	r0, r6
   1305e:	b009      	add	sp, #36	; 0x24
   13060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13064:	2800      	cmp	r0, #0
   13066:	dd0c      	ble.n	13082 <_wcsnrtombs_l+0x9e>
   13068:	9b02      	ldr	r3, [sp, #8]
   1306a:	4418      	add	r0, r3
   1306c:	1e5a      	subs	r2, r3, #1
   1306e:	a905      	add	r1, sp, #20
   13070:	f100 3eff 	add.w	lr, r0, #4294967295
   13074:	f811 3b01 	ldrb.w	r3, [r1], #1
   13078:	f802 3f01 	strb.w	r3, [r2, #1]!
   1307c:	4572      	cmp	r2, lr
   1307e:	d1f9      	bne.n	13074 <_wcsnrtombs_l+0x90>
   13080:	9002      	str	r0, [sp, #8]
   13082:	9b03      	ldr	r3, [sp, #12]
   13084:	681a      	ldr	r2, [r3, #0]
   13086:	3204      	adds	r2, #4
   13088:	601a      	str	r2, [r3, #0]
   1308a:	682a      	ldr	r2, [r5, #0]
   1308c:	2a00      	cmp	r2, #0
   1308e:	d1c9      	bne.n	13024 <_wcsnrtombs_l+0x40>
   13090:	9b01      	ldr	r3, [sp, #4]
   13092:	b10b      	cbz	r3, 13098 <_wcsnrtombs_l+0xb4>
   13094:	9b03      	ldr	r3, [sp, #12]
   13096:	601a      	str	r2, [r3, #0]
   13098:	f10c 36ff 	add.w	r6, ip, #4294967295
   1309c:	2200      	movs	r2, #0
   1309e:	4630      	mov	r0, r6
   130a0:	f8c8 2000 	str.w	r2, [r8]
   130a4:	b009      	add	sp, #36	; 0x24
   130a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130aa:	9b01      	ldr	r3, [sp, #4]
   130ac:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   130b0:	2b00      	cmp	r3, #0
   130b2:	d1a7      	bne.n	13004 <_wcsnrtombs_l+0x20>
   130b4:	9b03      	ldr	r3, [sp, #12]
   130b6:	f04f 37ff 	mov.w	r7, #4294967295
   130ba:	681d      	ldr	r5, [r3, #0]
   130bc:	e7a6      	b.n	1300c <_wcsnrtombs_l+0x28>
   130be:	4606      	mov	r6, r0
   130c0:	218a      	movs	r1, #138	; 0x8a
   130c2:	2200      	movs	r2, #0
   130c4:	4630      	mov	r0, r6
   130c6:	f8c9 1000 	str.w	r1, [r9]
   130ca:	f8c8 2000 	str.w	r2, [r8]
   130ce:	b009      	add	sp, #36	; 0x24
   130d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130d4:	463e      	mov	r6, r7
   130d6:	e7c1      	b.n	1305c <_wcsnrtombs_l+0x78>
   130d8:	4666      	mov	r6, ip
   130da:	e7bf      	b.n	1305c <_wcsnrtombs_l+0x78>

000130dc <_wcsnrtombs_r>:
   130dc:	b510      	push	{r4, lr}
   130de:	b084      	sub	sp, #16
   130e0:	4c05      	ldr	r4, [pc, #20]	; (130f8 <_wcsnrtombs_r+0x1c>)
   130e2:	9806      	ldr	r0, [sp, #24]
   130e4:	9000      	str	r0, [sp, #0]
   130e6:	9807      	ldr	r0, [sp, #28]
   130e8:	9001      	str	r0, [sp, #4]
   130ea:	4804      	ldr	r0, [pc, #16]	; (130fc <_wcsnrtombs_r+0x20>)
   130ec:	6800      	ldr	r0, [r0, #0]
   130ee:	9402      	str	r4, [sp, #8]
   130f0:	f7ff ff78 	bl	12fe4 <_wcsnrtombs_l>
   130f4:	b004      	add	sp, #16
   130f6:	bd10      	pop	{r4, pc}
   130f8:	1fff8edc 	.word	0x1fff8edc
   130fc:	1fff9168 	.word	0x1fff9168

00013100 <__smakebuf_r>:
   13100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13104:	898b      	ldrh	r3, [r1, #12]
   13106:	460c      	mov	r4, r1
   13108:	0799      	lsls	r1, r3, #30
   1310a:	b096      	sub	sp, #88	; 0x58
   1310c:	d508      	bpl.n	13120 <__smakebuf_r+0x20>
   1310e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13112:	2201      	movs	r2, #1
   13114:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13118:	6023      	str	r3, [r4, #0]
   1311a:	b016      	add	sp, #88	; 0x58
   1311c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13124:	2900      	cmp	r1, #0
   13126:	4606      	mov	r6, r0
   13128:	db25      	blt.n	13176 <__smakebuf_r+0x76>
   1312a:	466a      	mov	r2, sp
   1312c:	f000 f8ac 	bl	13288 <_fstat_r>
   13130:	2800      	cmp	r0, #0
   13132:	db1f      	blt.n	13174 <__smakebuf_r+0x74>
   13134:	9d01      	ldr	r5, [sp, #4]
   13136:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1313a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1313e:	fab5 f585 	clz	r5, r5
   13142:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13146:	096d      	lsrs	r5, r5, #5
   13148:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1314c:	4641      	mov	r1, r8
   1314e:	4630      	mov	r0, r6
   13150:	f7f9 fe74 	bl	ce3c <_malloc_r>
   13154:	b1e0      	cbz	r0, 13190 <__smakebuf_r+0x90>
   13156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1315a:	f8c4 8014 	str.w	r8, [r4, #20]
   1315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13162:	6020      	str	r0, [r4, #0]
   13164:	6120      	str	r0, [r4, #16]
   13166:	81a3      	strh	r3, [r4, #12]
   13168:	bb35      	cbnz	r5, 131b8 <__smakebuf_r+0xb8>
   1316a:	433b      	orrs	r3, r7
   1316c:	81a3      	strh	r3, [r4, #12]
   1316e:	b016      	add	sp, #88	; 0x58
   13170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13174:	89a3      	ldrh	r3, [r4, #12]
   13176:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1317a:	d019      	beq.n	131b0 <__smakebuf_r+0xb0>
   1317c:	f04f 0840 	mov.w	r8, #64	; 0x40
   13180:	2500      	movs	r5, #0
   13182:	4641      	mov	r1, r8
   13184:	4630      	mov	r0, r6
   13186:	462f      	mov	r7, r5
   13188:	f7f9 fe58 	bl	ce3c <_malloc_r>
   1318c:	2800      	cmp	r0, #0
   1318e:	d1e2      	bne.n	13156 <__smakebuf_r+0x56>
   13190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13194:	059a      	lsls	r2, r3, #22
   13196:	d4c0      	bmi.n	1311a <__smakebuf_r+0x1a>
   13198:	f023 0303 	bic.w	r3, r3, #3
   1319c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   131a0:	f043 0302 	orr.w	r3, r3, #2
   131a4:	2101      	movs	r1, #1
   131a6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   131aa:	81a3      	strh	r3, [r4, #12]
   131ac:	6022      	str	r2, [r4, #0]
   131ae:	e7b4      	b.n	1311a <__smakebuf_r+0x1a>
   131b0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   131b4:	462f      	mov	r7, r5
   131b6:	e7c9      	b.n	1314c <__smakebuf_r+0x4c>
   131b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   131bc:	4630      	mov	r0, r6
   131be:	f000 f879 	bl	132b4 <_isatty_r>
   131c2:	b910      	cbnz	r0, 131ca <__smakebuf_r+0xca>
   131c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   131c8:	e7cf      	b.n	1316a <__smakebuf_r+0x6a>
   131ca:	89a3      	ldrh	r3, [r4, #12]
   131cc:	f023 0303 	bic.w	r3, r3, #3
   131d0:	f043 0301 	orr.w	r3, r3, #1
   131d4:	b21b      	sxth	r3, r3
   131d6:	e7c8      	b.n	1316a <__smakebuf_r+0x6a>

000131d8 <__swbuf_r>:
   131d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   131da:	460d      	mov	r5, r1
   131dc:	4614      	mov	r4, r2
   131de:	4606      	mov	r6, r0
   131e0:	b110      	cbz	r0, 131e8 <__swbuf_r+0x10>
   131e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   131e4:	2b00      	cmp	r3, #0
   131e6:	d04c      	beq.n	13282 <__swbuf_r+0xaa>
   131e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   131ec:	69a3      	ldr	r3, [r4, #24]
   131ee:	60a3      	str	r3, [r4, #8]
   131f0:	0717      	lsls	r7, r2, #28
   131f2:	b290      	uxth	r0, r2
   131f4:	d51b      	bpl.n	1322e <__swbuf_r+0x56>
   131f6:	6923      	ldr	r3, [r4, #16]
   131f8:	b1cb      	cbz	r3, 1322e <__swbuf_r+0x56>
   131fa:	b2ed      	uxtb	r5, r5
   131fc:	0481      	lsls	r1, r0, #18
   131fe:	462f      	mov	r7, r5
   13200:	d522      	bpl.n	13248 <__swbuf_r+0x70>
   13202:	6822      	ldr	r2, [r4, #0]
   13204:	6961      	ldr	r1, [r4, #20]
   13206:	1ad3      	subs	r3, r2, r3
   13208:	4299      	cmp	r1, r3
   1320a:	dd29      	ble.n	13260 <__swbuf_r+0x88>
   1320c:	3301      	adds	r3, #1
   1320e:	68a1      	ldr	r1, [r4, #8]
   13210:	3901      	subs	r1, #1
   13212:	60a1      	str	r1, [r4, #8]
   13214:	1c51      	adds	r1, r2, #1
   13216:	6021      	str	r1, [r4, #0]
   13218:	7015      	strb	r5, [r2, #0]
   1321a:	6962      	ldr	r2, [r4, #20]
   1321c:	429a      	cmp	r2, r3
   1321e:	d027      	beq.n	13270 <__swbuf_r+0x98>
   13220:	89a3      	ldrh	r3, [r4, #12]
   13222:	07db      	lsls	r3, r3, #31
   13224:	d501      	bpl.n	1322a <__swbuf_r+0x52>
   13226:	2d0a      	cmp	r5, #10
   13228:	d022      	beq.n	13270 <__swbuf_r+0x98>
   1322a:	4638      	mov	r0, r7
   1322c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1322e:	4621      	mov	r1, r4
   13230:	4630      	mov	r0, r6
   13232:	f7ff fde7 	bl	12e04 <__swsetup_r>
   13236:	bb08      	cbnz	r0, 1327c <__swbuf_r+0xa4>
   13238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1323c:	6923      	ldr	r3, [r4, #16]
   1323e:	b290      	uxth	r0, r2
   13240:	b2ed      	uxtb	r5, r5
   13242:	0481      	lsls	r1, r0, #18
   13244:	462f      	mov	r7, r5
   13246:	d4dc      	bmi.n	13202 <__swbuf_r+0x2a>
   13248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1324c:	81a2      	strh	r2, [r4, #12]
   1324e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13250:	6961      	ldr	r1, [r4, #20]
   13252:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13256:	6662      	str	r2, [r4, #100]	; 0x64
   13258:	6822      	ldr	r2, [r4, #0]
   1325a:	1ad3      	subs	r3, r2, r3
   1325c:	4299      	cmp	r1, r3
   1325e:	dcd5      	bgt.n	1320c <__swbuf_r+0x34>
   13260:	4621      	mov	r1, r4
   13262:	4630      	mov	r0, r6
   13264:	f7fd f9f8 	bl	10658 <_fflush_r>
   13268:	b940      	cbnz	r0, 1327c <__swbuf_r+0xa4>
   1326a:	6822      	ldr	r2, [r4, #0]
   1326c:	2301      	movs	r3, #1
   1326e:	e7ce      	b.n	1320e <__swbuf_r+0x36>
   13270:	4621      	mov	r1, r4
   13272:	4630      	mov	r0, r6
   13274:	f7fd f9f0 	bl	10658 <_fflush_r>
   13278:	2800      	cmp	r0, #0
   1327a:	d0d6      	beq.n	1322a <__swbuf_r+0x52>
   1327c:	f04f 37ff 	mov.w	r7, #4294967295
   13280:	e7d3      	b.n	1322a <__swbuf_r+0x52>
   13282:	f7fa fb19 	bl	d8b8 <__sinit>
   13286:	e7af      	b.n	131e8 <__swbuf_r+0x10>

00013288 <_fstat_r>:
   13288:	b570      	push	{r4, r5, r6, lr}
   1328a:	460c      	mov	r4, r1
   1328c:	4d08      	ldr	r5, [pc, #32]	; (132b0 <_fstat_r+0x28>)
   1328e:	4603      	mov	r3, r0
   13290:	2600      	movs	r6, #0
   13292:	4620      	mov	r0, r4
   13294:	4611      	mov	r1, r2
   13296:	461c      	mov	r4, r3
   13298:	602e      	str	r6, [r5, #0]
   1329a:	f7f6 fb95 	bl	99c8 <_fstat>
   1329e:	1c43      	adds	r3, r0, #1
   132a0:	d000      	beq.n	132a4 <_fstat_r+0x1c>
   132a2:	bd70      	pop	{r4, r5, r6, pc}
   132a4:	682b      	ldr	r3, [r5, #0]
   132a6:	2b00      	cmp	r3, #0
   132a8:	d0fb      	beq.n	132a2 <_fstat_r+0x1a>
   132aa:	6023      	str	r3, [r4, #0]
   132ac:	bd70      	pop	{r4, r5, r6, pc}
   132ae:	bf00      	nop
   132b0:	1fffd48c 	.word	0x1fffd48c

000132b4 <_isatty_r>:
   132b4:	b538      	push	{r3, r4, r5, lr}
   132b6:	4d07      	ldr	r5, [pc, #28]	; (132d4 <_isatty_r+0x20>)
   132b8:	2200      	movs	r2, #0
   132ba:	4604      	mov	r4, r0
   132bc:	4608      	mov	r0, r1
   132be:	602a      	str	r2, [r5, #0]
   132c0:	f7f6 fb88 	bl	99d4 <_isatty>
   132c4:	1c43      	adds	r3, r0, #1
   132c6:	d000      	beq.n	132ca <_isatty_r+0x16>
   132c8:	bd38      	pop	{r3, r4, r5, pc}
   132ca:	682b      	ldr	r3, [r5, #0]
   132cc:	2b00      	cmp	r3, #0
   132ce:	d0fb      	beq.n	132c8 <_isatty_r+0x14>
   132d0:	6023      	str	r3, [r4, #0]
   132d2:	bd38      	pop	{r3, r4, r5, pc}
   132d4:	1fffd48c 	.word	0x1fffd48c

000132d8 <__aeabi_dmul>:
   132d8:	b570      	push	{r4, r5, r6, lr}
   132da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   132de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   132e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   132e6:	bf1d      	ittte	ne
   132e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   132ec:	ea94 0f0c 	teqne	r4, ip
   132f0:	ea95 0f0c 	teqne	r5, ip
   132f4:	f000 f8de 	bleq	134b4 <__aeabi_dmul+0x1dc>
   132f8:	442c      	add	r4, r5
   132fa:	ea81 0603 	eor.w	r6, r1, r3
   132fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   13302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1330a:	bf18      	it	ne
   1330c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13318:	d038      	beq.n	1338c <__aeabi_dmul+0xb4>
   1331a:	fba0 ce02 	umull	ip, lr, r0, r2
   1331e:	f04f 0500 	mov.w	r5, #0
   13322:	fbe1 e502 	umlal	lr, r5, r1, r2
   13326:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1332a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1332e:	f04f 0600 	mov.w	r6, #0
   13332:	fbe1 5603 	umlal	r5, r6, r1, r3
   13336:	f09c 0f00 	teq	ip, #0
   1333a:	bf18      	it	ne
   1333c:	f04e 0e01 	orrne.w	lr, lr, #1
   13340:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13344:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13348:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1334c:	d204      	bcs.n	13358 <__aeabi_dmul+0x80>
   1334e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13352:	416d      	adcs	r5, r5
   13354:	eb46 0606 	adc.w	r6, r6, r6
   13358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1335c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   13360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   13364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   13368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1336c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13370:	bf88      	it	hi
   13372:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13376:	d81e      	bhi.n	133b6 <__aeabi_dmul+0xde>
   13378:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1337c:	bf08      	it	eq
   1337e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   13382:	f150 0000 	adcs.w	r0, r0, #0
   13386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1338a:	bd70      	pop	{r4, r5, r6, pc}
   1338c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   13390:	ea46 0101 	orr.w	r1, r6, r1
   13394:	ea40 0002 	orr.w	r0, r0, r2
   13398:	ea81 0103 	eor.w	r1, r1, r3
   1339c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   133a0:	bfc2      	ittt	gt
   133a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   133a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   133aa:	bd70      	popgt	{r4, r5, r6, pc}
   133ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   133b0:	f04f 0e00 	mov.w	lr, #0
   133b4:	3c01      	subs	r4, #1
   133b6:	f300 80ab 	bgt.w	13510 <__aeabi_dmul+0x238>
   133ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
   133be:	bfde      	ittt	le
   133c0:	2000      	movle	r0, #0
   133c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   133c6:	bd70      	pople	{r4, r5, r6, pc}
   133c8:	f1c4 0400 	rsb	r4, r4, #0
   133cc:	3c20      	subs	r4, #32
   133ce:	da35      	bge.n	1343c <__aeabi_dmul+0x164>
   133d0:	340c      	adds	r4, #12
   133d2:	dc1b      	bgt.n	1340c <__aeabi_dmul+0x134>
   133d4:	f104 0414 	add.w	r4, r4, #20
   133d8:	f1c4 0520 	rsb	r5, r4, #32
   133dc:	fa00 f305 	lsl.w	r3, r0, r5
   133e0:	fa20 f004 	lsr.w	r0, r0, r4
   133e4:	fa01 f205 	lsl.w	r2, r1, r5
   133e8:	ea40 0002 	orr.w	r0, r0, r2
   133ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   133f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   133f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   133f8:	fa21 f604 	lsr.w	r6, r1, r4
   133fc:	eb42 0106 	adc.w	r1, r2, r6
   13400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13404:	bf08      	it	eq
   13406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1340a:	bd70      	pop	{r4, r5, r6, pc}
   1340c:	f1c4 040c 	rsb	r4, r4, #12
   13410:	f1c4 0520 	rsb	r5, r4, #32
   13414:	fa00 f304 	lsl.w	r3, r0, r4
   13418:	fa20 f005 	lsr.w	r0, r0, r5
   1341c:	fa01 f204 	lsl.w	r2, r1, r4
   13420:	ea40 0002 	orr.w	r0, r0, r2
   13424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1342c:	f141 0100 	adc.w	r1, r1, #0
   13430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13434:	bf08      	it	eq
   13436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1343a:	bd70      	pop	{r4, r5, r6, pc}
   1343c:	f1c4 0520 	rsb	r5, r4, #32
   13440:	fa00 f205 	lsl.w	r2, r0, r5
   13444:	ea4e 0e02 	orr.w	lr, lr, r2
   13448:	fa20 f304 	lsr.w	r3, r0, r4
   1344c:	fa01 f205 	lsl.w	r2, r1, r5
   13450:	ea43 0302 	orr.w	r3, r3, r2
   13454:	fa21 f004 	lsr.w	r0, r1, r4
   13458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1345c:	fa21 f204 	lsr.w	r2, r1, r4
   13460:	ea20 0002 	bic.w	r0, r0, r2
   13464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   13468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   1346c:	bf08      	it	eq
   1346e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13472:	bd70      	pop	{r4, r5, r6, pc}
   13474:	f094 0f00 	teq	r4, #0
   13478:	d10f      	bne.n	1349a <__aeabi_dmul+0x1c2>
   1347a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   1347e:	0040      	lsls	r0, r0, #1
   13480:	eb41 0101 	adc.w	r1, r1, r1
   13484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13488:	bf08      	it	eq
   1348a:	3c01      	subeq	r4, #1
   1348c:	d0f7      	beq.n	1347e <__aeabi_dmul+0x1a6>
   1348e:	ea41 0106 	orr.w	r1, r1, r6
   13492:	f095 0f00 	teq	r5, #0
   13496:	bf18      	it	ne
   13498:	4770      	bxne	lr
   1349a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   1349e:	0052      	lsls	r2, r2, #1
   134a0:	eb43 0303 	adc.w	r3, r3, r3
   134a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   134a8:	bf08      	it	eq
   134aa:	3d01      	subeq	r5, #1
   134ac:	d0f7      	beq.n	1349e <__aeabi_dmul+0x1c6>
   134ae:	ea43 0306 	orr.w	r3, r3, r6
   134b2:	4770      	bx	lr
   134b4:	ea94 0f0c 	teq	r4, ip
   134b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   134bc:	bf18      	it	ne
   134be:	ea95 0f0c 	teqne	r5, ip
   134c2:	d00c      	beq.n	134de <__aeabi_dmul+0x206>
   134c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   134c8:	bf18      	it	ne
   134ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   134ce:	d1d1      	bne.n	13474 <__aeabi_dmul+0x19c>
   134d0:	ea81 0103 	eor.w	r1, r1, r3
   134d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   134d8:	f04f 0000 	mov.w	r0, #0
   134dc:	bd70      	pop	{r4, r5, r6, pc}
   134de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   134e2:	bf06      	itte	eq
   134e4:	4610      	moveq	r0, r2
   134e6:	4619      	moveq	r1, r3
   134e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   134ec:	d019      	beq.n	13522 <__aeabi_dmul+0x24a>
   134ee:	ea94 0f0c 	teq	r4, ip
   134f2:	d102      	bne.n	134fa <__aeabi_dmul+0x222>
   134f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   134f8:	d113      	bne.n	13522 <__aeabi_dmul+0x24a>
   134fa:	ea95 0f0c 	teq	r5, ip
   134fe:	d105      	bne.n	1350c <__aeabi_dmul+0x234>
   13500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13504:	bf1c      	itt	ne
   13506:	4610      	movne	r0, r2
   13508:	4619      	movne	r1, r3
   1350a:	d10a      	bne.n	13522 <__aeabi_dmul+0x24a>
   1350c:	ea81 0103 	eor.w	r1, r1, r3
   13510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13514:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1351c:	f04f 0000 	mov.w	r0, #0
   13520:	bd70      	pop	{r4, r5, r6, pc}
   13522:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13526:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1352a:	bd70      	pop	{r4, r5, r6, pc}

0001352c <__aeabi_ddiv>:
   1352c:	b570      	push	{r4, r5, r6, lr}
   1352e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1353a:	bf1d      	ittte	ne
   1353c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13540:	ea94 0f0c 	teqne	r4, ip
   13544:	ea95 0f0c 	teqne	r5, ip
   13548:	f000 f8a7 	bleq	1369a <__aeabi_ddiv+0x16e>
   1354c:	eba4 0405 	sub.w	r4, r4, r5
   13550:	ea81 0e03 	eor.w	lr, r1, r3
   13554:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13558:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1355c:	f000 8088 	beq.w	13670 <__aeabi_ddiv+0x144>
   13560:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13564:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   13568:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   1356c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13570:	ea4f 2202 	mov.w	r2, r2, lsl #8
   13574:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   13578:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   1357c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   13580:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   13584:	429d      	cmp	r5, r3
   13586:	bf08      	it	eq
   13588:	4296      	cmpeq	r6, r2
   1358a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   1358e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   13592:	d202      	bcs.n	1359a <__aeabi_ddiv+0x6e>
   13594:	085b      	lsrs	r3, r3, #1
   13596:	ea4f 0232 	mov.w	r2, r2, rrx
   1359a:	1ab6      	subs	r6, r6, r2
   1359c:	eb65 0503 	sbc.w	r5, r5, r3
   135a0:	085b      	lsrs	r3, r3, #1
   135a2:	ea4f 0232 	mov.w	r2, r2, rrx
   135a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   135aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   135ae:	ebb6 0e02 	subs.w	lr, r6, r2
   135b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   135b6:	bf22      	ittt	cs
   135b8:	1ab6      	subcs	r6, r6, r2
   135ba:	4675      	movcs	r5, lr
   135bc:	ea40 000c 	orrcs.w	r0, r0, ip
   135c0:	085b      	lsrs	r3, r3, #1
   135c2:	ea4f 0232 	mov.w	r2, r2, rrx
   135c6:	ebb6 0e02 	subs.w	lr, r6, r2
   135ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   135ce:	bf22      	ittt	cs
   135d0:	1ab6      	subcs	r6, r6, r2
   135d2:	4675      	movcs	r5, lr
   135d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   135d8:	085b      	lsrs	r3, r3, #1
   135da:	ea4f 0232 	mov.w	r2, r2, rrx
   135de:	ebb6 0e02 	subs.w	lr, r6, r2
   135e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   135e6:	bf22      	ittt	cs
   135e8:	1ab6      	subcs	r6, r6, r2
   135ea:	4675      	movcs	r5, lr
   135ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   135f0:	085b      	lsrs	r3, r3, #1
   135f2:	ea4f 0232 	mov.w	r2, r2, rrx
   135f6:	ebb6 0e02 	subs.w	lr, r6, r2
   135fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   135fe:	bf22      	ittt	cs
   13600:	1ab6      	subcs	r6, r6, r2
   13602:	4675      	movcs	r5, lr
   13604:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13608:	ea55 0e06 	orrs.w	lr, r5, r6
   1360c:	d018      	beq.n	13640 <__aeabi_ddiv+0x114>
   1360e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13612:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13616:	ea4f 1606 	mov.w	r6, r6, lsl #4
   1361a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   1361e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13622:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13626:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   1362a:	d1c0      	bne.n	135ae <__aeabi_ddiv+0x82>
   1362c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13630:	d10b      	bne.n	1364a <__aeabi_ddiv+0x11e>
   13632:	ea41 0100 	orr.w	r1, r1, r0
   13636:	f04f 0000 	mov.w	r0, #0
   1363a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   1363e:	e7b6      	b.n	135ae <__aeabi_ddiv+0x82>
   13640:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13644:	bf04      	itt	eq
   13646:	4301      	orreq	r1, r0
   13648:	2000      	moveq	r0, #0
   1364a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   1364e:	bf88      	it	hi
   13650:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13654:	f63f aeaf 	bhi.w	133b6 <__aeabi_dmul+0xde>
   13658:	ebb5 0c03 	subs.w	ip, r5, r3
   1365c:	bf04      	itt	eq
   1365e:	ebb6 0c02 	subseq.w	ip, r6, r2
   13662:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13666:	f150 0000 	adcs.w	r0, r0, #0
   1366a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1366e:	bd70      	pop	{r4, r5, r6, pc}
   13670:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13674:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13678:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   1367c:	bfc2      	ittt	gt
   1367e:	ebd4 050c 	rsbsgt	r5, r4, ip
   13682:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13686:	bd70      	popgt	{r4, r5, r6, pc}
   13688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   1368c:	f04f 0e00 	mov.w	lr, #0
   13690:	3c01      	subs	r4, #1
   13692:	e690      	b.n	133b6 <__aeabi_dmul+0xde>
   13694:	ea45 0e06 	orr.w	lr, r5, r6
   13698:	e68d      	b.n	133b6 <__aeabi_dmul+0xde>
   1369a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   1369e:	ea94 0f0c 	teq	r4, ip
   136a2:	bf08      	it	eq
   136a4:	ea95 0f0c 	teqeq	r5, ip
   136a8:	f43f af3b 	beq.w	13522 <__aeabi_dmul+0x24a>
   136ac:	ea94 0f0c 	teq	r4, ip
   136b0:	d10a      	bne.n	136c8 <__aeabi_ddiv+0x19c>
   136b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   136b6:	f47f af34 	bne.w	13522 <__aeabi_dmul+0x24a>
   136ba:	ea95 0f0c 	teq	r5, ip
   136be:	f47f af25 	bne.w	1350c <__aeabi_dmul+0x234>
   136c2:	4610      	mov	r0, r2
   136c4:	4619      	mov	r1, r3
   136c6:	e72c      	b.n	13522 <__aeabi_dmul+0x24a>
   136c8:	ea95 0f0c 	teq	r5, ip
   136cc:	d106      	bne.n	136dc <__aeabi_ddiv+0x1b0>
   136ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   136d2:	f43f aefd 	beq.w	134d0 <__aeabi_dmul+0x1f8>
   136d6:	4610      	mov	r0, r2
   136d8:	4619      	mov	r1, r3
   136da:	e722      	b.n	13522 <__aeabi_dmul+0x24a>
   136dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   136e0:	bf18      	it	ne
   136e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   136e6:	f47f aec5 	bne.w	13474 <__aeabi_dmul+0x19c>
   136ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   136ee:	f47f af0d 	bne.w	1350c <__aeabi_dmul+0x234>
   136f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   136f6:	f47f aeeb 	bne.w	134d0 <__aeabi_dmul+0x1f8>
   136fa:	e712      	b.n	13522 <__aeabi_dmul+0x24a>

000136fc <__aeabi_d2iz>:
   136fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13700:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13704:	d215      	bcs.n	13732 <__aeabi_d2iz+0x36>
   13706:	d511      	bpl.n	1372c <__aeabi_d2iz+0x30>
   13708:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   1370c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13710:	d912      	bls.n	13738 <__aeabi_d2iz+0x3c>
   13712:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13716:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1371a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   1371e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13722:	fa23 f002 	lsr.w	r0, r3, r2
   13726:	bf18      	it	ne
   13728:	4240      	negne	r0, r0
   1372a:	4770      	bx	lr
   1372c:	f04f 0000 	mov.w	r0, #0
   13730:	4770      	bx	lr
   13732:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13736:	d105      	bne.n	13744 <__aeabi_d2iz+0x48>
   13738:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   1373c:	bf08      	it	eq
   1373e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13742:	4770      	bx	lr
   13744:	f04f 0000 	mov.w	r0, #0
   13748:	4770      	bx	lr
   1374a:	bf00      	nop
   1374c:	6d655420 	.word	0x6d655420
   13750:	6f462070 	.word	0x6f462070
   13754:	00646e75 	.word	0x00646e75
   13758:	ffff002c 	.word	0xffff002c
   1375c:	75646f4d 	.word	0x75646f4d
   13760:	2520656c 	.word	0x2520656c
   13764:	78652069 	.word	0x78652069
   13768:	73747369 	.word	0x73747369
   1376c:	6552202e 	.word	0x6552202e
   13770:	6e696461 	.word	0x6e696461
   13774:	6f762067 	.word	0x6f762067
   13778:	6761746c 	.word	0x6761746c
   1377c:	6e612065 	.word	0x6e612065
   13780:	65742064 	.word	0x65742064
   13784:	7265706d 	.word	0x7265706d
   13788:	72757461 	.word	0x72757461
   1378c:	61762065 	.word	0x61762065
   13790:	7365756c 	.word	0x7365756c
   13794:	00000000 	.word	0x00000000
   13798:	75646f4d 	.word	0x75646f4d
   1379c:	7620656c 	.word	0x7620656c
   137a0:	61746c6f 	.word	0x61746c6f
   137a4:	203a6567 	.word	0x203a6567
   137a8:	00006625 	.word	0x00006625
   137ac:	65776f4c 	.word	0x65776f4c
   137b0:	43207473 	.word	0x43207473
   137b4:	206c6c65 	.word	0x206c6c65
   137b8:	25203a56 	.word	0x25203a56
   137bc:	20202066 	.word	0x20202066
   137c0:	69482020 	.word	0x69482020
   137c4:	73656867 	.word	0x73656867
   137c8:	65432074 	.word	0x65432074
   137cc:	56206c6c 	.word	0x56206c6c
   137d0:	6625203a 	.word	0x6625203a
   137d4:	00000000 	.word	0x00000000
   137d8:	706d6554 	.word	0x706d6554
   137dc:	25203a31 	.word	0x25203a31
   137e0:	20202066 	.word	0x20202066
   137e4:	20202020 	.word	0x20202020
   137e8:	706d6554 	.word	0x706d6554
   137ec:	25203a32 	.word	0x25203a32
   137f0:	00000066 	.word	0x00000066
   137f4:	20656e4f 	.word	0x20656e4f
   137f8:	6d20726f 	.word	0x6d20726f
   137fc:	2065726f 	.word	0x2065726f
   13800:	20534d42 	.word	0x20534d42
   13804:	75646f6d 	.word	0x75646f6d
   13808:	2073656c 	.word	0x2073656c
   1380c:	65766168 	.word	0x65766168
   13810:	746e6520 	.word	0x746e6520
   13814:	64657265 	.word	0x64657265
   13818:	65687420 	.word	0x65687420
   1381c:	75616620 	.word	0x75616620
   13820:	7320746c 	.word	0x7320746c
   13824:	65746174 	.word	0x65746174
   13828:	00000021 	.word	0x00000021
   1382c:	206c6c41 	.word	0x206c6c41
   13830:	75646f6d 	.word	0x75646f6d
   13834:	2073656c 	.word	0x2073656c
   13838:	65766168 	.word	0x65766168
   1383c:	69786520 	.word	0x69786520
   13840:	20646574 	.word	0x20646574
   13844:	61662061 	.word	0x61662061
   13848:	65746c75 	.word	0x65746c75
   1384c:	74732064 	.word	0x74732064
   13850:	00657461 	.word	0x00657461
   13854:	75646f4d 	.word	0x75646f4d
   13858:	3a73656c 	.word	0x3a73656c
   1385c:	20692520 	.word	0x20692520
   13860:	6c654320 	.word	0x6c654320
   13864:	203a736c 	.word	0x203a736c
   13868:	20206925 	.word	0x20206925
   1386c:	746c6f56 	.word	0x746c6f56
   13870:	3a656761 	.word	0x3a656761
   13874:	56662520 	.word	0x56662520
   13878:	41202020 	.word	0x41202020
   1387c:	43206776 	.word	0x43206776
   13880:	206c6c65 	.word	0x206c6c65
   13884:	746c6f56 	.word	0x746c6f56
   13888:	3a656761 	.word	0x3a656761
   1388c:	56662520 	.word	0x56662520
   13890:	20202020 	.word	0x20202020
   13894:	67764120 	.word	0x67764120
   13898:	6d655420 	.word	0x6d655420
   1389c:	25203a70 	.word	0x25203a70
   138a0:	00204366 	.word	0x00204366
   138a4:	20202020 	.word	0x20202020
   138a8:	20202020 	.word	0x20202020
   138ac:	20202020 	.word	0x20202020
   138b0:	20202020 	.word	0x20202020
   138b4:	20202020 	.word	0x20202020
   138b8:	20202020 	.word	0x20202020
   138bc:	20202020 	.word	0x20202020
   138c0:	4d202020 	.word	0x4d202020
   138c4:	6c75646f 	.word	0x6c75646f
   138c8:	25232065 	.word	0x25232065
   138cc:	00000069 	.word	0x00000069
   138d0:	6f562020 	.word	0x6f562020
   138d4:	6761746c 	.word	0x6761746c
   138d8:	25203a65 	.word	0x25203a65
   138dc:	20205666 	.word	0x20205666
   138e0:	66252820 	.word	0x66252820
   138e4:	66252d56 	.word	0x66252d56
   138e8:	20202956 	.word	0x20202956
   138ec:	54202020 	.word	0x54202020
   138f0:	65706d65 	.word	0x65706d65
   138f4:	75746172 	.word	0x75746172
   138f8:	3a736572 	.word	0x3a736572
   138fc:	66252820 	.word	0x66252820
   13900:	66252d43 	.word	0x66252d43
   13904:	00002943 	.word	0x00002943
   13908:	4f4d2020 	.word	0x4f4d2020
   1390c:	454c5544 	.word	0x454c5544
   13910:	20534920 	.word	0x20534920
   13914:	4c554146 	.word	0x4c554146
   13918:	3a444554 	.word	0x3a444554
   1391c:	00000000 	.word	0x00000000
   13920:	20202020 	.word	0x20202020
   13924:	7265764f 	.word	0x7265764f
   13928:	746c6f76 	.word	0x746c6f76
   1392c:	20656761 	.word	0x20656761
   13930:	6c6c6543 	.word	0x6c6c6543
   13934:	6d754e20 	.word	0x6d754e20
   13938:	73726562 	.word	0x73726562
   1393c:	2d312820 	.word	0x2d312820
   13940:	203a2936 	.word	0x203a2936
   13944:	00000000 	.word	0x00000000
   13948:	20202020 	.word	0x20202020
   1394c:	65646e55 	.word	0x65646e55
   13950:	6c6f7672 	.word	0x6c6f7672
   13954:	65676174 	.word	0x65676174
   13958:	6c654320 	.word	0x6c654320
   1395c:	754e206c 	.word	0x754e206c
   13960:	7265626d 	.word	0x7265626d
   13964:	31282073 	.word	0x31282073
   13968:	3a29362d 	.word	0x3a29362d
   1396c:	00000020 	.word	0x00000020
   13970:	20202020 	.word	0x20202020
   13974:	20435243 	.word	0x20435243
   13978:	6f727265 	.word	0x6f727265
   1397c:	6e692072 	.word	0x6e692072
   13980:	63657220 	.word	0x63657220
   13984:	65766965 	.word	0x65766965
   13988:	61702064 	.word	0x61702064
   1398c:	74656b63 	.word	0x74656b63
   13990:	00000000 	.word	0x00000000
   13994:	20202020 	.word	0x20202020
   13998:	65776f50 	.word	0x65776f50
   1399c:	6e6f2072 	.word	0x6e6f2072
   139a0:	73657220 	.word	0x73657220
   139a4:	68207465 	.word	0x68207465
   139a8:	6f207361 	.word	0x6f207361
   139ac:	72756363 	.word	0x72756363
   139b0:	00646572 	.word	0x00646572
   139b4:	20202020 	.word	0x20202020
   139b8:	74736554 	.word	0x74736554
   139bc:	75616620 	.word	0x75616620
   139c0:	6120746c 	.word	0x6120746c
   139c4:	76697463 	.word	0x76697463
   139c8:	00000065 	.word	0x00000065
   139cc:	20202020 	.word	0x20202020
   139d0:	65746e49 	.word	0x65746e49
   139d4:	6c616e72 	.word	0x6c616e72
   139d8:	67657220 	.word	0x67657220
   139dc:	65747369 	.word	0x65747369
   139e0:	69207372 	.word	0x69207372
   139e4:	6e6f636e 	.word	0x6e6f636e
   139e8:	74736973 	.word	0x74736973
   139ec:	00746e65 	.word	0x00746e65
   139f0:	4f4d2020 	.word	0x4f4d2020
   139f4:	454c5544 	.word	0x454c5544
   139f8:	53414820 	.word	0x53414820
   139fc:	454c4120 	.word	0x454c4120
   13a00:	3a535452 	.word	0x3a535452
   13a04:	00000000 	.word	0x00000000
   13a08:	20202020 	.word	0x20202020
   13a0c:	7265764f 	.word	0x7265764f
   13a10:	6d657420 	.word	0x6d657420
   13a14:	61726570 	.word	0x61726570
   13a18:	65727574 	.word	0x65727574
   13a1c:	206e6f20 	.word	0x206e6f20
   13a20:	00315354 	.word	0x00315354
   13a24:	20202020 	.word	0x20202020
   13a28:	7265764f 	.word	0x7265764f
   13a2c:	6d657420 	.word	0x6d657420
   13a30:	61726570 	.word	0x61726570
   13a34:	65727574 	.word	0x65727574
   13a38:	206e6f20 	.word	0x206e6f20
   13a3c:	00325354 	.word	0x00325354
   13a40:	20202020 	.word	0x20202020
   13a44:	65656c53 	.word	0x65656c53
   13a48:	6f6d2070 	.word	0x6f6d2070
   13a4c:	61206564 	.word	0x61206564
   13a50:	76697463 	.word	0x76697463
   13a54:	00000065 	.word	0x00000065
   13a58:	20202020 	.word	0x20202020
   13a5c:	72656854 	.word	0x72656854
   13a60:	206c616d 	.word	0x206c616d
   13a64:	74756873 	.word	0x74756873
   13a68:	6e776f64 	.word	0x6e776f64
   13a6c:	74636120 	.word	0x74636120
   13a70:	00657669 	.word	0x00657669
   13a74:	20202020 	.word	0x20202020
   13a78:	74736554 	.word	0x74736554
   13a7c:	656c4120 	.word	0x656c4120
   13a80:	00007472 	.word	0x00007472
   13a84:	20202020 	.word	0x20202020
   13a88:	2050544f 	.word	0x2050544f
   13a8c:	4f525045 	.word	0x4f525045
   13a90:	6e55204d 	.word	0x6e55204d
   13a94:	72726f63 	.word	0x72726f63
   13a98:	61746365 	.word	0x61746365
   13a9c:	20656c62 	.word	0x20656c62
   13aa0:	6f727245 	.word	0x6f727245
   13aa4:	00000072 	.word	0x00000072
   13aa8:	20202020 	.word	0x20202020
   13aac:	554f5247 	.word	0x554f5247
   13ab0:	52203350 	.word	0x52203350
   13ab4:	20736765 	.word	0x20736765
   13ab8:	61766e49 	.word	0x61766e49
   13abc:	0064696c 	.word	0x0064696c
   13ac0:	20202020 	.word	0x20202020
   13ac4:	72646441 	.word	0x72646441
   13ac8:	20737365 	.word	0x20737365
   13acc:	20746f6e 	.word	0x20746f6e
   13ad0:	69676572 	.word	0x69676572
   13ad4:	72657473 	.word	0x72657473
   13ad8:	ff006465 	.word	0xff006465
   13adc:	75646f4d 	.word	0x75646f4d
   13ae0:	3a73656c 	.word	0x3a73656c
   13ae4:	20692520 	.word	0x20692520
   13ae8:	6c6c6543 	.word	0x6c6c6543
   13aec:	25203a73 	.word	0x25203a73
   13af0:	74532069 	.word	0x74532069
   13af4:	676e6972 	.word	0x676e6972
   13af8:	25203a73 	.word	0x25203a73
   13afc:	56202069 	.word	0x56202069
   13b00:	61746c6f 	.word	0x61746c6f
   13b04:	203a6567 	.word	0x203a6567
   13b08:	20566625 	.word	0x20566625
   13b0c:	76412020 	.word	0x76412020
   13b10:	65432067 	.word	0x65432067
   13b14:	56206c6c 	.word	0x56206c6c
   13b18:	61746c6f 	.word	0x61746c6f
   13b1c:	203a6567 	.word	0x203a6567
   13b20:	20566625 	.word	0x20566625
   13b24:	776f4c20 	.word	0x776f4c20
   13b28:	6c654320 	.word	0x6c654320
   13b2c:	6f56206c 	.word	0x6f56206c
   13b30:	6761746c 	.word	0x6761746c
   13b34:	25203a65 	.word	0x25203a65
   13b38:	20205666 	.word	0x20205666
   13b3c:	67694820 	.word	0x67694820
   13b40:	65432068 	.word	0x65432068
   13b44:	56206c6c 	.word	0x56206c6c
   13b48:	61746c6f 	.word	0x61746c6f
   13b4c:	203a6567 	.word	0x203a6567
   13b50:	20566625 	.word	0x20566625
   13b54:	746c6544 	.word	0x746c6544
   13b58:	6f562061 	.word	0x6f562061
   13b5c:	6761746c 	.word	0x6761746c
   13b60:	25203a65 	.word	0x25203a65
   13b64:	20566d7a 	.word	0x20566d7a
   13b68:	76412020 	.word	0x76412020
   13b6c:	65542067 	.word	0x65542067
   13b70:	203a706d 	.word	0x203a706d
   13b74:	20436625 	.word	0x20436625
   13b78:	00000000 	.word	0x00000000
   13b7c:	75646f4d 	.word	0x75646f4d
   13b80:	2320656c 	.word	0x2320656c
   13b84:	00000000 	.word	0x00000000
   13b88:	00000056 	.word	0x00000056
   13b8c:	65432020 	.word	0x65432020
   13b90:	00006c6c 	.word	0x00006c6c
   13b94:	6d655420 	.word	0x6d655420
   13b98:	3a312070 	.word	0x3a312070
   13b9c:	00000020 	.word	0x00000020
   13ba0:	65542043 	.word	0x65542043
   13ba4:	3220706d 	.word	0x3220706d
   13ba8:	0000203a 	.word	0x0000203a
   13bac:	74532043 	.word	0x74532043
   13bb0:	73757461 	.word	0x73757461
   13bb4:	7830203a 	.word	0x7830203a
   13bb8:	00000000 	.word	0x00000000
   13bbc:	6c614220 	.word	0x6c614220
   13bc0:	7830203a 	.word	0x7830203a
   13bc4:	ffffff00 	.word	0xffffff00
   13bc8:	34333231 	.word	0x34333231
   13bcc:	ffff0035 	.word	0xffff0035
   13bd0:	65736552 	.word	0x65736552
   13bd4:	6e697474 	.word	0x6e697474
   13bd8:	6f742067 	.word	0x6f742067
   13bdc:	63616620 	.word	0x63616620
   13be0:	79726f74 	.word	0x79726f74
   13be4:	66656420 	.word	0x66656420
   13be8:	746c7561 	.word	0x746c7561
   13bec:	ffff0073 	.word	0xffff0073
   13bf0:	20434f53 	.word	0x20434f53
   13bf4:	0000203a 	.word	0x0000203a
   13bf8:	75662020 	.word	0x75662020
   13bfc:	70206c65 	.word	0x70206c65
   13c00:	3a206d77 	.word	0x3a206d77
   13c04:	ffff0020 	.word	0xffff0020
   13c08:	20534d42 	.word	0x20534d42
   13c0c:	74617453 	.word	0x74617453
   13c10:	3a207375 	.word	0x3a207375
   13c14:	00000020 	.word	0x00000020
   13c18:	20535345 	.word	0x20535345
   13c1c:	65646f4d 	.word	0x65646f4d
   13c20:	00000020 	.word	0x00000020
   13c24:	6e55203a 	.word	0x6e55203a
   13c28:	56726564 	.word	0x56726564
   13c2c:	61746c6f 	.word	0x61746c6f
   13c30:	00206567 	.word	0x00206567
   13c34:	764f203a 	.word	0x764f203a
   13c38:	6f567265 	.word	0x6f567265
   13c3c:	6761746c 	.word	0x6761746c
   13c40:	00002065 	.word	0x00002065
   13c44:	6543203a 	.word	0x6543203a
   13c48:	49206c6c 	.word	0x49206c6c
   13c4c:	6c61626d 	.word	0x6c61626d
   13c50:	65636e61 	.word	0x65636e61
   13c54:	00000020 	.word	0x00000020
   13c58:	764f203a 	.word	0x764f203a
   13c5c:	54207265 	.word	0x54207265
   13c60:	20706d65 	.word	0x20706d65
   13c64:	00000000 	.word	0x00000000
   13c68:	6e55203a 	.word	0x6e55203a
   13c6c:	20726564 	.word	0x20726564
   13c70:	706d6554 	.word	0x706d6554
   13c74:	00000020 	.word	0x00000020
   13c78:	764f203a 	.word	0x764f203a
   13c7c:	6f567265 	.word	0x6f567265
   13c80:	6761746c 	.word	0x6761746c
   13c84:	74532065 	.word	0x74532065
   13c88:	6761726f 	.word	0x6761726f
   13c8c:	00002065 	.word	0x00002065
   13c90:	4e55203a 	.word	0x4e55203a
   13c94:	70706168 	.word	0x70706168
   13c98:	00003a79 	.word	0x00003a79
   13c9c:	6148203a 	.word	0x6148203a
   13ca0:	20797070 	.word	0x20797070
   13ca4:	00000000 	.word	0x00000000
   13ca8:	6148203a 	.word	0x6148203a
   13cac:	3a797070 	.word	0x3a797070
   13cb0:	00000020 	.word	0x00000020
   13cb4:	6f6f4220 	.word	0x6f6f4220
   13cb8:	00002074 	.word	0x00002074
   13cbc:	61655220 	.word	0x61655220
   13cc0:	00207964 	.word	0x00207964
   13cc4:	65725020 	.word	0x65725020
   13cc8:	72616863 	.word	0x72616863
   13ccc:	00206567 	.word	0x00206567
   13cd0:	69724420 	.word	0x69724420
   13cd4:	00206576 	.word	0x00206576
   13cd8:	61684320 	.word	0x61684320
   13cdc:	20656772 	.word	0x20656772
   13ce0:	00000000 	.word	0x00000000
   13ce4:	72724520 	.word	0x72724520
   13ce8:	0020726f 	.word	0x0020726f
   13cec:	4341207c 	.word	0x4341207c
   13cf0:	65725020 	.word	0x65725020
   13cf4:	746e6573 	.word	0x746e6573
   13cf8:	00007c20 	.word	0x00007c20
   13cfc:	654b207c 	.word	0x654b207c
   13d00:	4e4f2079 	.word	0x4e4f2079
   13d04:	00007c20 	.word	0x00007c20
   13d08:	6c61427c 	.word	0x6c61427c
   13d0c:	69636e61 	.word	0x69636e61
   13d10:	4120676e 	.word	0x4120676e
   13d14:	76697463 	.word	0x76697463
   13d18:	00000065 	.word	0x00000065
   13d1c:	0000007c 	.word	0x0000007c
   13d20:	3a74754f 	.word	0x3a74754f
   13d24:	00000000 	.word	0x00000000
   13d28:	6e6f4320 	.word	0x6e6f4320
   13d2c:	00003a74 	.word	0x00003a74
   13d30:	00000031 	.word	0x00000031
   13d34:	00000030 	.word	0x00000030
   13d38:	3a6e4920 	.word	0x3a6e4920
   13d3c:	00000000 	.word	0x00000000
   13d40:	61684320 	.word	0x61684320
   13d44:	20656772 	.word	0x20656772
   13d48:	72727543 	.word	0x72727543
   13d4c:	20746e65 	.word	0x20746e65
   13d50:	696d694c 	.word	0x696d694c
   13d54:	203a2074 	.word	0x203a2074
   13d58:	00000000 	.word	0x00000000
   13d5c:	44204120 	.word	0x44204120
   13d60:	68437369 	.word	0x68437369
   13d64:	65677261 	.word	0x65677261
   13d68:	72754320 	.word	0x72754320
   13d6c:	746e6572 	.word	0x746e6572
   13d70:	6d694c20 	.word	0x6d694c20
   13d74:	3a207469 	.word	0x3a207469
   13d78:	00000020 	.word	0x00000020
   13d7c:	00004120 	.word	0x00004120
   13d80:	50432020 	.word	0x50432020
   13d84:	72754320 	.word	0x72754320
   13d88:	746e6572 	.word	0x746e6572
   13d8c:	6d694c20 	.word	0x6d694c20
   13d90:	203a7469 	.word	0x203a7469
   13d94:	ffffff00 	.word	0xffffff00
   13d98:	20776f4c 	.word	0x20776f4c
   13d9c:	676e6152 	.word	0x676e6152
   13da0:	00203a65 	.word	0x00203a65
   13da4:	676e6953 	.word	0x676e6953
   13da8:	4920656c 	.word	0x4920656c
   13dac:	00203a6e 	.word	0x00203a6e
   13db0:	756c6156 	.word	0x756c6156
   13db4:	44412065 	.word	0x44412065
   13db8:	203a3043 	.word	0x203a3043
   13dbc:	00000000 	.word	0x00000000
   13dc0:	00416d20 	.word	0x00416d20
   13dc4:	68676948 	.word	0x68676948
   13dc8:	6e615220 	.word	0x6e615220
   13dcc:	203a6567 	.word	0x203a6567
   13dd0:	00000000 	.word	0x00000000
   13dd4:	ff00416d 	.word	0xff00416d
   13dd8:	2f2f2f2f 	.word	0x2f2f2f2f
   13ddc:	2f2f2f2f 	.word	0x2f2f2f2f
   13de0:	2f2f2f2f 	.word	0x2f2f2f2f
   13de4:	2f2f2f2f 	.word	0x2f2f2f2f
   13de8:	2f2f2f2f 	.word	0x2f2f2f2f
   13dec:	2f2f2f2f 	.word	0x2f2f2f2f
   13df0:	2f2f2f2f 	.word	0x2f2f2f2f
   13df4:	2f2f2f2f 	.word	0x2f2f2f2f
   13df8:	2f2f2f2f 	.word	0x2f2f2f2f
   13dfc:	2f2f2f2f 	.word	0x2f2f2f2f
   13e00:	434f5320 	.word	0x434f5320
   13e04:	54455320 	.word	0x54455320
   13e08:	2f2f2f20 	.word	0x2f2f2f20
   13e0c:	2f2f2f2f 	.word	0x2f2f2f2f
   13e10:	2f2f2f2f 	.word	0x2f2f2f2f
   13e14:	2f2f2f2f 	.word	0x2f2f2f2f
   13e18:	2f2f2f2f 	.word	0x2f2f2f2f
   13e1c:	2f2f2f2f 	.word	0x2f2f2f2f
   13e20:	2f2f2f2f 	.word	0x2f2f2f2f
   13e24:	2f2f2f2f 	.word	0x2f2f2f2f
   13e28:	2f2f2f2f 	.word	0x2f2f2f2f
   13e2c:	2f2f2f2f 	.word	0x2f2f2f2f
   13e30:	0000002f 	.word	0x0000002f
   13e34:	20776f4c 	.word	0x20776f4c
   13e38:	676e6152 	.word	0x676e6152
   13e3c:	00002065 	.word	0x00002065
   13e40:	68676948 	.word	0x68676948
   13e44:	6e615220 	.word	0x6e615220
   13e48:	00006567 	.word	0x00006567
   13e4c:	6c616e41 	.word	0x6c616e41
   13e50:	6575676f 	.word	0x6575676f
   13e54:	6e695320 	.word	0x6e695320
   13e58:	20656c67 	.word	0x20656c67
   13e5c:	00000000 	.word	0x00000000
   13e60:	624e4143 	.word	0x624e4143
   13e64:	00207375 	.word	0x00207375
   13e68:	4f532025 	.word	0x4f532025
   13e6c:	00002043 	.word	0x00002043
   13e70:	0068416d 	.word	0x0068416d
   13e74:	6c6c7570 	.word	0x6c6c7570
   13e78:	206e6920 	.word	0x206e6920
   13e7c:	3654554f 	.word	0x3654554f
   13e80:	00000000 	.word	0x00000000
   13e84:	6c6c7570 	.word	0x6c6c7570
   13e88:	206e6920 	.word	0x206e6920
   13e8c:	3754554f 	.word	0x3754554f
   13e90:	ffffff00 	.word	0xffffff00
   13e94:	6c614320 	.word	0x6c614320
   13e98:	61726269 	.word	0x61726269
   13e9c:	676e6974 	.word	0x676e6974
   13ea0:	72754320 	.word	0x72754320
   13ea4:	746e6572 	.word	0x746e6572
   13ea8:	66664f20 	.word	0x66664f20
   13eac:	20746573 	.word	0x20746573
   13eb0:	3a3a3a3a 	.word	0x3a3a3a3a
   13eb4:	0000203a 	.word	0x0000203a
   13eb8:	0000002e 	.word	0x0000002e
   13ebc:	72756320 	.word	0x72756320
   13ec0:	746e6572 	.word	0x746e6572
   13ec4:	66666f20 	.word	0x66666f20
   13ec8:	20746573 	.word	0x20746573
   13ecc:	61632031 	.word	0x61632031
   13ed0:	7262696c 	.word	0x7262696c
   13ed4:	64657461 	.word	0x64657461
   13ed8:	00000020 	.word	0x00000020
   13edc:	72756320 	.word	0x72756320
   13ee0:	746e6572 	.word	0x746e6572
   13ee4:	66666f20 	.word	0x66666f20
   13ee8:	20746573 	.word	0x20746573
   13eec:	61632032 	.word	0x61632032
   13ef0:	7262696c 	.word	0x7262696c
   13ef4:	64657461 	.word	0x64657461
   13ef8:	ffff0020 	.word	0xffff0020
   13efc:	00000054 	.word	0x00000054
   13f00:	ffff0050 	.word	0xffff0050
   13f04:	646f4320 	.word	0x646f4320
   13f08:	53206465 	.word	0x53206465
   13f0c:	69747465 	.word	0x69747465
   13f10:	2073676e 	.word	0x2073676e
   13f14:	64616f4c 	.word	0x64616f4c
   13f18:	00206465 	.word	0x00206465
   13f1c:	68416d20 	.word	0x68416d20
   13f20:	73655220 	.word	0x73655220
   13f24:	00207465 	.word	0x00207465
   13f28:	202d2031 	.word	0x202d2031
   13f2c:	706d6554 	.word	0x706d6554
   13f30:	6e655320 	.word	0x6e655320
   13f34:	20726f73 	.word	0x20726f73
   13f38:	74746553 	.word	0x74746553
   13f3c:	3a676e69 	.word	0x3a676e69
   13f40:	00000000 	.word	0x00000000
   13f44:	202d2032 	.word	0x202d2032
   13f48:	746c6f56 	.word	0x746c6f56
   13f4c:	20656761 	.word	0x20656761
   13f50:	65646e55 	.word	0x65646e55
   13f54:	68572072 	.word	0x68572072
   13f58:	20686369 	.word	0x20686369
   13f5c:	49206f54 	.word	0x49206f54
   13f60:	726f6e67 	.word	0x726f6e67
   13f64:	65432065 	.word	0x65432065
   13f68:	3a736c6c 	.word	0x3a736c6c
   13f6c:	00000000 	.word	0x00000000
   13f70:	0000566d 	.word	0x0000566d
   13f74:	202d2034 	.word	0x202d2034
   13f78:	706d6554 	.word	0x706d6554
   13f7c:	66664f20 	.word	0x66664f20
   13f80:	20746573 	.word	0x20746573
   13f84:	74746553 	.word	0x74746553
   13f88:	3a676e69 	.word	0x3a676e69
   13f8c:	00000000 	.word	0x00000000
   13f90:	202d2071 	.word	0x202d2071
   13f94:	62206f47 	.word	0x62206f47
   13f98:	206b6361 	.word	0x206b6361
   13f9c:	6d206f74 	.word	0x6d206f74
   13fa0:	00756e65 	.word	0x00756e65
   13fa4:	202d2031 	.word	0x202d2031
   13fa8:	6c6c6543 	.word	0x6c6c6543
   13fac:	61684320 	.word	0x61684320
   13fb0:	20656772 	.word	0x20656772
   13fb4:	746c6f56 	.word	0x746c6f56
   13fb8:	20656761 	.word	0x20656761
   13fbc:	696d694c 	.word	0x696d694c
   13fc0:	65532074 	.word	0x65532074
   13fc4:	696f7074 	.word	0x696f7074
   13fc8:	203a746e 	.word	0x203a746e
   13fcc:	00000000 	.word	0x00000000
   13fd0:	202d2032 	.word	0x202d2032
   13fd4:	72616843 	.word	0x72616843
   13fd8:	48206567 	.word	0x48206567
   13fdc:	65747379 	.word	0x65747379
   13fe0:	73697372 	.word	0x73697372
   13fe4:	0000203a 	.word	0x0000203a
   13fe8:	202d2033 	.word	0x202d2033
   13fec:	6b636150 	.word	0x6b636150
   13ff0:	78614d20 	.word	0x78614d20
   13ff4:	61684320 	.word	0x61684320
   13ff8:	20656772 	.word	0x20656772
   13ffc:	72727543 	.word	0x72727543
   14000:	3a746e65 	.word	0x3a746e65
   14004:	00000020 	.word	0x00000020
   14008:	50202d34 	.word	0x50202d34
   1400c:	206b6361 	.word	0x206b6361
   14010:	20646e45 	.word	0x20646e45
   14014:	4320666f 	.word	0x4320666f
   14018:	67726168 	.word	0x67726168
   1401c:	75432065 	.word	0x75432065
   14020:	6e657272 	.word	0x6e657272
   14024:	00203a74 	.word	0x00203a74
   14028:	43202d35 	.word	0x43202d35
   1402c:	67726168 	.word	0x67726168
   14030:	54207265 	.word	0x54207265
   14034:	3a657079 	.word	0x3a657079
   14038:	00000020 	.word	0x00000020
   1403c:	616c6552 	.word	0x616c6552
   14040:	6f432079 	.word	0x6f432079
   14044:	6f72746e 	.word	0x6f72746e
   14048:	0000006c 	.word	0x0000006c
   1404c:	73757242 	.word	0x73757242
   14050:	4c4e2061 	.word	0x4c4e2061
   14054:	78783547 	.word	0x78783547
   14058:	00000000 	.word	0x00000000
   1405c:	746c6f56 	.word	0x746c6f56
   14060:	61684320 	.word	0x61684320
   14064:	72656772 	.word	0x72656772
   14068:	00000000 	.word	0x00000000
   1406c:	65746c45 	.word	0x65746c45
   14070:	6843206b 	.word	0x6843206b
   14074:	65677261 	.word	0x65677261
   14078:	00000072 	.word	0x00000072
   1407c:	6f636c45 	.word	0x6f636c45
   14080:	6843206e 	.word	0x6843206e
   14084:	65677261 	.word	0x65677261
   14088:	00000072 	.word	0x00000072
   1408c:	74636956 	.word	0x74636956
   14090:	2f6e6f72 	.word	0x2f6e6f72
   14094:	00414d53 	.word	0x00414d53
   14098:	53205648 	.word	0x53205648
   1409c:	2d205342 	.word	0x2d205342
   140a0:	53455420 	.word	0x53455420
   140a4:	474e4954 	.word	0x474e4954
   140a8:	4c4e4f20 	.word	0x4c4e4f20
   140ac:	00000059 	.word	0x00000059
   140b0:	6f6c7950 	.word	0x6f6c7950
   140b4:	202d206e 	.word	0x202d206e
   140b8:	54534554 	.word	0x54534554
   140bc:	20474e49 	.word	0x20474e49
   140c0:	594c4e4f 	.word	0x594c4e4f
   140c4:	00000000 	.word	0x00000000
   140c8:	43202d36 	.word	0x43202d36
   140cc:	67726168 	.word	0x67726168
   140d0:	43207265 	.word	0x43207265
   140d4:	4d206e61 	.word	0x4d206e61
   140d8:	53206773 	.word	0x53206773
   140dc:	203a6470 	.word	0x203a6470
   140e0:	00000000 	.word	0x00000000
   140e4:	0000536d 	.word	0x0000536d
   140e8:	202d2037 	.word	0x202d2037
   140ec:	72616843 	.word	0x72616843
   140f0:	20726567 	.word	0x20726567
   140f4:	43205648 	.word	0x43205648
   140f8:	656e6e6f 	.word	0x656e6e6f
   140fc:	6f697463 	.word	0x6f697463
   14100:	00203a6e 	.word	0x00203a6e
   14104:	68654220 	.word	0x68654220
   14108:	20646e69 	.word	0x20646e69
   1410c:	746e6f43 	.word	0x746e6f43
   14110:	6f746361 	.word	0x6f746361
   14114:	00007372 	.word	0x00007372
   14118:	65726944 	.word	0x65726944
   1411c:	54207463 	.word	0x54207463
   14120:	6142206f 	.word	0x6142206f
   14124:	72657474 	.word	0x72657474
   14128:	56482079 	.word	0x56482079
   1412c:	00000000 	.word	0x00000000
   14130:	202d2039 	.word	0x202d2039
   14134:	72616843 	.word	0x72616843
   14138:	43206567 	.word	0x43206567
   1413c:	65727275 	.word	0x65727275
   14140:	6420746e 	.word	0x6420746e
   14144:	74617265 	.word	0x74617265
   14148:	6f4c2065 	.word	0x6f4c2065
   1414c:	00203a77 	.word	0x00203a77
   14150:	00004320 	.word	0x00004320
   14154:	72616c41 	.word	0x72616c41
   14158:	6e61206d 	.word	0x6e61206d
   1415c:	61572064 	.word	0x61572064
   14160:	6e696e72 	.word	0x6e696e72
   14164:	65532067 	.word	0x65532067
   14168:	6e697474 	.word	0x6e697474
   1416c:	4d207367 	.word	0x4d207367
   14170:	00756e65 	.word	0x00756e65
   14174:	202d2031 	.word	0x202d2031
   14178:	746c6f56 	.word	0x746c6f56
   1417c:	20656761 	.word	0x20656761
   14180:	6e726157 	.word	0x6e726157
   14184:	20676e69 	.word	0x20676e69
   14188:	7366664f 	.word	0x7366664f
   1418c:	203a7465 	.word	0x203a7465
   14190:	00000000 	.word	0x00000000
   14194:	202d2032 	.word	0x202d2032
   14198:	6c6c6543 	.word	0x6c6c6543
   1419c:	6c6f5620 	.word	0x6c6f5620
   141a0:	65676174 	.word	0x65676174
   141a4:	66694420 	.word	0x66694420
   141a8:	65726566 	.word	0x65726566
   141ac:	2065636e 	.word	0x2065636e
   141b0:	72616c41 	.word	0x72616c41
   141b4:	00203a6d 	.word	0x00203a6d
   141b8:	202d2033 	.word	0x202d2033
   141bc:	706d6554 	.word	0x706d6554
   141c0:	72615720 	.word	0x72615720
   141c4:	676e696e 	.word	0x676e696e
   141c8:	66664f20 	.word	0x66664f20
   141cc:	3a746573 	.word	0x3a746573
   141d0:	00000020 	.word	0x00000020
   141d4:	202d2034 	.word	0x202d2034
   141d8:	7265764f 	.word	0x7265764f
   141dc:	646e6120 	.word	0x646e6120
   141e0:	646e5520 	.word	0x646e5520
   141e4:	56207265 	.word	0x56207265
   141e8:	61746c6f 	.word	0x61746c6f
   141ec:	44206567 	.word	0x44206567
   141f0:	79616c65 	.word	0x79616c65
   141f4:	0000203a 	.word	0x0000203a
   141f8:	00536d20 	.word	0x00536d20
   141fc:	746e6f43 	.word	0x746e6f43
   14200:	6f746361 	.word	0x6f746361
   14204:	6e612072 	.word	0x6e612072
   14208:	61472064 	.word	0x61472064
   1420c:	20656775 	.word	0x20656775
   14210:	74746553 	.word	0x74746553
   14214:	73676e69 	.word	0x73676e69
   14218:	6e654d20 	.word	0x6e654d20
   1421c:	00000075 	.word	0x00000075
   14220:	202d2031 	.word	0x202d2031
   14224:	43657250 	.word	0x43657250
   14228:	67726168 	.word	0x67726168
   1422c:	69542065 	.word	0x69542065
   14230:	3a72656d 	.word	0x3a72656d
   14234:	00000020 	.word	0x00000020
   14238:	202d2032 	.word	0x202d2032
   1423c:	43657250 	.word	0x43657250
   14240:	67726168 	.word	0x67726168
   14244:	69462065 	.word	0x69462065
   14248:	6873696e 	.word	0x6873696e
   1424c:	72754320 	.word	0x72754320
   14250:	746e6572 	.word	0x746e6572
   14254:	0000203a 	.word	0x0000203a
   14258:	202d2033 	.word	0x202d2033
   1425c:	204d5750 	.word	0x204d5750
   14260:	746e6f63 	.word	0x746e6f63
   14264:	6f746361 	.word	0x6f746361
   14268:	6f482072 	.word	0x6f482072
   1426c:	3020646c 	.word	0x3020646c
   14270:	3535322d 	.word	0x3535322d
   14274:	00003a20 	.word	0x00003a20
   14278:	202d2034 	.word	0x202d2034
   1427c:	204d5750 	.word	0x204d5750
   14280:	20726f66 	.word	0x20726f66
   14284:	67756147 	.word	0x67756147
   14288:	6f4c2065 	.word	0x6f4c2065
   1428c:	2d302077 	.word	0x2d302077
   14290:	20353532 	.word	0x20353532
   14294:	0000003a 	.word	0x0000003a
   14298:	202d2035 	.word	0x202d2035
   1429c:	204d5750 	.word	0x204d5750
   142a0:	20726f66 	.word	0x20726f66
   142a4:	67756147 	.word	0x67756147
   142a8:	69482065 	.word	0x69482065
   142ac:	30206867 	.word	0x30206867
   142b0:	3535322d 	.word	0x3535322d
   142b4:	00003a20 	.word	0x00003a20
   142b8:	202d2036 	.word	0x202d2036
   142bc:	20535345 	.word	0x20535345
   142c0:	6e69614d 	.word	0x6e69614d
   142c4:	6e6f4320 	.word	0x6e6f4320
   142c8:	74636174 	.word	0x74636174
   142cc:	6f20726f 	.word	0x6f20726f
   142d0:	72542072 	.word	0x72542072
   142d4:	3a207069 	.word	0x3a207069
   142d8:	00000000 	.word	0x00000000
   142dc:	70697254 	.word	0x70697254
   142e0:	75685320 	.word	0x75685320
   142e4:	0000746e 	.word	0x0000746e
   142e8:	6e69614d 	.word	0x6e69614d
   142ec:	6e6f4320 	.word	0x6e6f4320
   142f0:	74636174 	.word	0x74636174
   142f4:	6120726f 	.word	0x6120726f
   142f8:	5020646e 	.word	0x5020646e
   142fc:	68636572 	.word	0x68636572
   14300:	65677261 	.word	0x65677261
   14304:	00000000 	.word	0x00000000
   14308:	554e454d 	.word	0x554e454d
   1430c:	00000000 	.word	0x00000000
   14310:	75626544 	.word	0x75626544
   14314:	6e696767 	.word	0x6e696767
   14318:	61502067 	.word	0x61502067
   1431c:	64657375 	.word	0x64657375
   14320:	00000000 	.word	0x00000000
   14324:	6d726946 	.word	0x6d726946
   14328:	65726177 	.word	0x65726177
   1432c:	72655620 	.word	0x72655620
   14330:	6e6f6973 	.word	0x6e6f6973
   14334:	00203a20 	.word	0x00203a20
   14338:	202d2062 	.word	0x202d2062
   1433c:	74746142 	.word	0x74746142
   14340:	20797265 	.word	0x20797265
   14344:	74746553 	.word	0x74746553
   14348:	73676e69 	.word	0x73676e69
   1434c:	00000000 	.word	0x00000000
   14350:	202d2061 	.word	0x202d2061
   14354:	72616c41 	.word	0x72616c41
   14358:	6e61206d 	.word	0x6e61206d
   1435c:	61572064 	.word	0x61572064
   14360:	6e696e72 	.word	0x6e696e72
   14364:	65532067 	.word	0x65532067
   14368:	6e697474 	.word	0x6e697474
   1436c:	00007367 	.word	0x00007367
   14370:	202d2065 	.word	0x202d2065
   14374:	72616843 	.word	0x72616843
   14378:	676e6967 	.word	0x676e6967
   1437c:	74655320 	.word	0x74655320
   14380:	676e6974 	.word	0x676e6974
   14384:	00000073 	.word	0x00000073
   14388:	202d2063 	.word	0x202d2063
   1438c:	72727543 	.word	0x72727543
   14390:	20746e65 	.word	0x20746e65
   14394:	736e6553 	.word	0x736e6553
   14398:	4320726f 	.word	0x4320726f
   1439c:	62696c61 	.word	0x62696c61
   143a0:	69746172 	.word	0x69746172
   143a4:	00006e6f 	.word	0x00006e6f
   143a8:	202d206b 	.word	0x202d206b
   143ac:	746e6f43 	.word	0x746e6f43
   143b0:	6f746361 	.word	0x6f746361
   143b4:	6e612072 	.word	0x6e612072
   143b8:	61472064 	.word	0x61472064
   143bc:	20656775 	.word	0x20656775
   143c0:	74746553 	.word	0x74746553
   143c4:	73676e69 	.word	0x73676e69
   143c8:	00000000 	.word	0x00000000
   143cc:	202d2069 	.word	0x202d2069
   143d0:	6f6e6749 	.word	0x6f6e6749
   143d4:	56206572 	.word	0x56206572
   143d8:	65756c61 	.word	0x65756c61
   143dc:	74655320 	.word	0x74655320
   143e0:	676e6974 	.word	0x676e6974
   143e4:	00000073 	.word	0x00000073
   143e8:	202d2064 	.word	0x202d2064
   143ec:	75626544 	.word	0x75626544
   143f0:	65532067 	.word	0x65532067
   143f4:	6e697474 	.word	0x6e697474
   143f8:	00007367 	.word	0x00007367
   143fc:	202d2052 	.word	0x202d2052
   14400:	74736552 	.word	0x74736552
   14404:	20747261 	.word	0x20747261
   14408:	00534d42 	.word	0x00534d42
   1440c:	202d2071 	.word	0x202d2071
   14410:	74697865 	.word	0x74697865
   14414:	6e656d20 	.word	0x6e656d20
   14418:	00000075 	.word	0x00000075
   1441c:	75626544 	.word	0x75626544
   14420:	65532067 	.word	0x65532067
   14424:	6e697474 	.word	0x6e697474
   14428:	4d207367 	.word	0x4d207367
   1442c:	00756e65 	.word	0x00756e65
   14430:	67676f54 	.word	0x67676f54
   14434:	6f20656c 	.word	0x6f20656c
   14438:	666f2f6e 	.word	0x666f2f6e
   1443c:	00000066 	.word	0x00000066
   14440:	202d2031 	.word	0x202d2031
   14444:	206e6143 	.word	0x206e6143
   14448:	75626544 	.word	0x75626544
   1444c:	003a2067 	.word	0x003a2067
   14450:	202d2032 	.word	0x202d2032
   14454:	72727543 	.word	0x72727543
   14458:	20746e65 	.word	0x20746e65
   1445c:	75626544 	.word	0x75626544
   14460:	003a2067 	.word	0x003a2067
   14464:	202d2033 	.word	0x202d2033
   14468:	7074754f 	.word	0x7074754f
   1446c:	43207475 	.word	0x43207475
   14470:	6b636568 	.word	0x6b636568
   14474:	00003a20 	.word	0x00003a20
   14478:	202d2034 	.word	0x202d2034
   1447c:	75706e49 	.word	0x75706e49
   14480:	68432074 	.word	0x68432074
   14484:	206b6365 	.word	0x206b6365
   14488:	0000003a 	.word	0x0000003a
   1448c:	202d2035 	.word	0x202d2035
   14490:	20535345 	.word	0x20535345
   14494:	65646f6d 	.word	0x65646f6d
   14498:	00003a20 	.word	0x00003a20
   1449c:	202d2036 	.word	0x202d2036
   144a0:	6c6c6543 	.word	0x6c6c6543
   144a4:	72502073 	.word	0x72502073
   144a8:	6e657365 	.word	0x6e657365
   144ac:	65522074 	.word	0x65522074
   144b0:	20746573 	.word	0x20746573
   144b4:	0000003a 	.word	0x0000003a
   144b8:	202d2037 	.word	0x202d2037
   144bc:	67756147 	.word	0x67756147
   144c0:	65442065 	.word	0x65442065
   144c4:	20677562 	.word	0x20677562
   144c8:	0000003a 	.word	0x0000003a
   144cc:	202d2038 	.word	0x202d2038
   144d0:	20565343 	.word	0x20565343
   144d4:	7074754f 	.word	0x7074754f
   144d8:	3a207475 	.word	0x3a207475
   144dc:	00000000 	.word	0x00000000
   144e0:	202d2039 	.word	0x202d2039
   144e4:	69636544 	.word	0x69636544
   144e8:	206c616d 	.word	0x206c616d
   144ec:	63616c50 	.word	0x63616c50
   144f0:	74207365 	.word	0x74207365
   144f4:	6853206f 	.word	0x6853206f
   144f8:	3a20776f 	.word	0x3a20776f
   144fc:	00000000 	.word	0x00000000
   14500:	202d2062 	.word	0x202d2062
   14504:	616c6162 	.word	0x616c6162
   14508:	2065636e 	.word	0x2065636e
   1450c:	61727564 	.word	0x61727564
   14510:	6e6f6974 	.word	0x6e6f6974
   14514:	00003a20 	.word	0x00003a20
   14518:	74205320 	.word	0x74205320
   1451c:	20656d69 	.word	0x20656d69
   14520:	6f666562 	.word	0x6f666562
   14524:	73206572 	.word	0x73206572
   14528:	74726174 	.word	0x74726174
   1452c:	20676e69 	.word	0x20676e69
   14530:	36207369 	.word	0x36207369
   14534:	00007330 	.word	0x00007330
   14538:	202d2072 	.word	0x202d2072
   1453c:	65736572 	.word	0x65736572
   14540:	61622074 	.word	0x61622074
   14544:	636e616c 	.word	0x636e616c
   14548:	65642065 	.word	0x65642065
   1454c:	00677562 	.word	0x00677562
   14550:	72727543 	.word	0x72727543
   14554:	20746e65 	.word	0x20746e65
   14558:	736e6553 	.word	0x736e6553
   1455c:	4320726f 	.word	0x4320726f
   14560:	62696c61 	.word	0x62696c61
   14564:	69746172 	.word	0x69746172
   14568:	4d206e6f 	.word	0x4d206e6f
   1456c:	00756e65 	.word	0x00756e65
   14570:	202d2063 	.word	0x202d2063
   14574:	63206f54 	.word	0x63206f54
   14578:	62696c61 	.word	0x62696c61
   1457c:	65746172 	.word	0x65746172
   14580:	6e657320 	.word	0x6e657320
   14584:	20726f73 	.word	0x20726f73
   14588:	7366666f 	.word	0x7366666f
   1458c:	00007465 	.word	0x00007465
   14590:	202d2073 	.word	0x202d2073
   14594:	72727543 	.word	0x72727543
   14598:	20746e65 	.word	0x20746e65
   1459c:	736e6553 	.word	0x736e6553
   145a0:	5420726f 	.word	0x5420726f
   145a4:	20657079 	.word	0x20657079
   145a8:	0000203a 	.word	0x0000203a
   145ac:	616e4120 	.word	0x616e4120
   145b0:	75676f6c 	.word	0x75676f6c
   145b4:	75442065 	.word	0x75442065
   145b8:	43206c61 	.word	0x43206c61
   145bc:	65727275 	.word	0x65727275
   145c0:	5320746e 	.word	0x5320746e
   145c4:	6f736e65 	.word	0x6f736e65
   145c8:	00002072 	.word	0x00002072
   145cc:	616e4120 	.word	0x616e4120
   145d0:	75676f6c 	.word	0x75676f6c
   145d4:	69532065 	.word	0x69532065
   145d8:	656c676e 	.word	0x656c676e
   145dc:	72754320 	.word	0x72754320
   145e0:	746e6572 	.word	0x746e6572
   145e4:	6e655320 	.word	0x6e655320
   145e8:	20726f73 	.word	0x20726f73
   145ec:	00000000 	.word	0x00000000
   145f0:	6e614320 	.word	0x6e614320
   145f4:	20737562 	.word	0x20737562
   145f8:	72727543 	.word	0x72727543
   145fc:	20746e65 	.word	0x20746e65
   14600:	736e6553 	.word	0x736e6553
   14604:	0020726f 	.word	0x0020726f
   14608:	65646e55 	.word	0x65646e55
   1460c:	656e6966 	.word	0x656e6966
   14610:	00000064 	.word	0x00000064
   14614:	202d2031 	.word	0x202d2031
   14618:	65766e69 	.word	0x65766e69
   1461c:	63207472 	.word	0x63207472
   14620:	65727275 	.word	0x65727275
   14624:	3a20746e 	.word	0x3a20746e
   14628:	00000000 	.word	0x00000000
   1462c:	202d2032 	.word	0x202d2032
   14630:	65727550 	.word	0x65727550
   14634:	6c6f5620 	.word	0x6c6f5620
   14638:	65676174 	.word	0x65676174
   1463c:	73616220 	.word	0x73616220
   14640:	53206465 	.word	0x53206465
   14644:	3a20434f 	.word	0x3a20434f
   14648:	00000000 	.word	0x00000000
   1464c:	202d2033 	.word	0x202d2033
   14650:	72727543 	.word	0x72727543
   14654:	20746e65 	.word	0x20746e65
   14658:	746c754d 	.word	0x746c754d
   1465c:	696c7069 	.word	0x696c7069
   14660:	69746163 	.word	0x69746163
   14664:	3a206e6f 	.word	0x3a206e6f
   14668:	00000000 	.word	0x00000000
   1466c:	202d2034 	.word	0x202d2034
   14670:	6c616e41 	.word	0x6c616e41
   14674:	6575676f 	.word	0x6575676f
   14678:	776f4c20 	.word	0x776f4c20
   1467c:	6e615220 	.word	0x6e615220
   14680:	43206567 	.word	0x43206567
   14684:	3a766e6f 	.word	0x3a766e6f
   14688:	00000000 	.word	0x00000000
   1468c:	2f566d20 	.word	0x2f566d20
   14690:	00000041 	.word	0x00000041
   14694:	202d2035 	.word	0x202d2035
   14698:	6c616e41 	.word	0x6c616e41
   1469c:	6575676f 	.word	0x6575676f
   146a0:	67694820 	.word	0x67694820
   146a4:	61522068 	.word	0x61522068
   146a8:	2065676e 	.word	0x2065676e
   146ac:	766e6f43 	.word	0x766e6f43
   146b0:	0000003a 	.word	0x0000003a
   146b4:	202d2036 	.word	0x202d2036
   146b8:	72727543 	.word	0x72727543
   146bc:	20746e65 	.word	0x20746e65
   146c0:	736e6553 	.word	0x736e6553
   146c4:	4420726f 	.word	0x4420726f
   146c8:	62646165 	.word	0x62646165
   146cc:	3a646e61 	.word	0x3a646e61
   146d0:	00000000 	.word	0x00000000
   146d4:	00566d20 	.word	0x00566d20
   146d8:	202d2038 	.word	0x202d2038
   146dc:	72727543 	.word	0x72727543
   146e0:	20746e65 	.word	0x20746e65
   146e4:	6e616843 	.word	0x6e616843
   146e8:	206c656e 	.word	0x206c656e
   146ec:	6e616843 	.word	0x6e616843
   146f0:	764f6567 	.word	0x764f6567
   146f4:	003a7265 	.word	0x003a7265
   146f8:	432d2037 	.word	0x432d2037
   146fc:	43206e61 	.word	0x43206e61
   14700:	65727275 	.word	0x65727275
   14704:	5320746e 	.word	0x5320746e
   14708:	6f736e65 	.word	0x6f736e65
   1470c:	003a2072 	.word	0x003a2072
   14710:	4d454c20 	.word	0x4d454c20
   14714:	42414320 	.word	0x42414320
   14718:	2f303033 	.word	0x2f303033
   1471c:	20303035 	.word	0x20303035
   14720:	69726573 	.word	0x69726573
   14724:	00207365 	.word	0x00207365
   14728:	4d454c20 	.word	0x4d454c20
   1472c:	42414320 	.word	0x42414320
   14730:	20303035 	.word	0x20303035
   14734:	63657053 	.word	0x63657053
   14738:	206c6169 	.word	0x206c6169
   1473c:	00000000 	.word	0x00000000
   14740:	61734920 	.word	0x61734920
   14744:	6c616353 	.word	0x6c616353
   14748:	56492065 	.word	0x56492065
   1474c:	20532d54 	.word	0x20532d54
   14750:	00000000 	.word	0x00000000
   14754:	63695620 	.word	0x63695620
   14758:	6e6f7274 	.word	0x6e6f7274
   1475c:	6e794c20 	.word	0x6e794c20
   14760:	45562078 	.word	0x45562078
   14764:	4e41432e 	.word	0x4e41432e
   14768:	75685320 	.word	0x75685320
   1476c:	0000746e 	.word	0x0000746e
   14770:	74746142 	.word	0x74746142
   14774:	20797265 	.word	0x20797265
   14778:	74746553 	.word	0x74746553
   1477c:	73676e69 	.word	0x73676e69
   14780:	6e654d20 	.word	0x6e654d20
   14784:	00000075 	.word	0x00000075
   14788:	202d2072 	.word	0x202d2072
   1478c:	65736552 	.word	0x65736552
   14790:	48412074 	.word	0x48412074
   14794:	756f6320 	.word	0x756f6320
   14798:	7265746e 	.word	0x7265746e
   1479c:	00000000 	.word	0x00000000
   147a0:	202d2066 	.word	0x202d2066
   147a4:	65736552 	.word	0x65736552
   147a8:	6f742074 	.word	0x6f742074
   147ac:	646f4320 	.word	0x646f4320
   147b0:	53206465 	.word	0x53206465
   147b4:	69747465 	.word	0x69747465
   147b8:	0073676e 	.word	0x0073676e
   147bc:	202d2031 	.word	0x202d2031
   147c0:	6c6c6543 	.word	0x6c6c6543
   147c4:	65764f20 	.word	0x65764f20
   147c8:	6f562072 	.word	0x6f562072
   147cc:	6761746c 	.word	0x6761746c
   147d0:	65532065 	.word	0x65532065
   147d4:	696f7074 	.word	0x696f7074
   147d8:	203a746e 	.word	0x203a746e
   147dc:	00000000 	.word	0x00000000
   147e0:	202d2032 	.word	0x202d2032
   147e4:	6c6c6543 	.word	0x6c6c6543
   147e8:	646e5520 	.word	0x646e5520
   147ec:	56207265 	.word	0x56207265
   147f0:	61746c6f 	.word	0x61746c6f
   147f4:	53206567 	.word	0x53206567
   147f8:	6f707465 	.word	0x6f707465
   147fc:	3a746e69 	.word	0x3a746e69
   14800:	00000020 	.word	0x00000020
   14804:	202d2033 	.word	0x202d2033
   14808:	7265764f 	.word	0x7265764f
   1480c:	6d655420 	.word	0x6d655420
   14810:	61726570 	.word	0x61726570
   14814:	65727574 	.word	0x65727574
   14818:	74655320 	.word	0x74655320
   1481c:	6e696f70 	.word	0x6e696f70
   14820:	00203a74 	.word	0x00203a74
   14824:	00000043 	.word	0x00000043
   14828:	202d2034 	.word	0x202d2034
   1482c:	65646e55 	.word	0x65646e55
   14830:	65542072 	.word	0x65542072
   14834:	7265706d 	.word	0x7265706d
   14838:	72757461 	.word	0x72757461
   1483c:	65532065 	.word	0x65532065
   14840:	696f7074 	.word	0x696f7074
   14844:	203a746e 	.word	0x203a746e
   14848:	00000000 	.word	0x00000000
   1484c:	202d2035 	.word	0x202d2035
   14850:	6c6c6543 	.word	0x6c6c6543
   14854:	6c614220 	.word	0x6c614220
   14858:	65636e61 	.word	0x65636e61
   1485c:	6c6f5620 	.word	0x6c6f5620
   14860:	65676174 	.word	0x65676174
   14864:	74655320 	.word	0x74655320
   14868:	6e696f70 	.word	0x6e696f70
   1486c:	00203a74 	.word	0x00203a74
   14870:	202d2036 	.word	0x202d2036
   14874:	616c6142 	.word	0x616c6142
   14878:	2065636e 	.word	0x2065636e
   1487c:	746c6f56 	.word	0x746c6f56
   14880:	20656761 	.word	0x20656761
   14884:	74737948 	.word	0x74737948
   14888:	69737265 	.word	0x69737265
   1488c:	00203a73 	.word	0x00203a73
   14890:	202d2037 	.word	0x202d2037
   14894:	42206841 	.word	0x42206841
   14898:	65747461 	.word	0x65747461
   1489c:	43207972 	.word	0x43207972
   148a0:	63617061 	.word	0x63617061
   148a4:	3a797469 	.word	0x3a797469
   148a8:	00000020 	.word	0x00000020
   148ac:	00006841 	.word	0x00006841
   148b0:	202d2038 	.word	0x202d2038
   148b4:	6b636150 	.word	0x6b636150
   148b8:	78614d20 	.word	0x78614d20
   148bc:	73694420 	.word	0x73694420
   148c0:	72616863 	.word	0x72616863
   148c4:	203a6567 	.word	0x203a6567
   148c8:	00000000 	.word	0x00000000
   148cc:	202d2039 	.word	0x202d2039
   148d0:	6c6c6543 	.word	0x6c6c6543
   148d4:	73694420 	.word	0x73694420
   148d8:	72616863 	.word	0x72616863
   148dc:	56206567 	.word	0x56206567
   148e0:	61746c6f 	.word	0x61746c6f
   148e4:	4c206567 	.word	0x4c206567
   148e8:	74696d69 	.word	0x74696d69
   148ec:	74655320 	.word	0x74655320
   148f0:	6e696f70 	.word	0x6e696f70
   148f4:	00203a74 	.word	0x00203a74
   148f8:	202d2030 	.word	0x202d2030
   148fc:	76616c53 	.word	0x76616c53
   14900:	74732065 	.word	0x74732065
   14904:	676e6972 	.word	0x676e6972
   14908:	6e692073 	.word	0x6e692073
   1490c:	72617020 	.word	0x72617020
   14910:	656c6c61 	.word	0x656c6c61
   14914:	00203a6c 	.word	0x00203a6c
   14918:	202d2061 	.word	0x202d2061
   1491c:	6c6c6543 	.word	0x6c6c6543
   14920:	6e692073 	.word	0x6e692073
   14924:	72655320 	.word	0x72655320
   14928:	20736569 	.word	0x20736569
   1492c:	20726570 	.word	0x20726570
   14930:	69727453 	.word	0x69727453
   14934:	203a676e 	.word	0x203a676e
   14938:	00000000 	.word	0x00000000
   1493c:	202d2062 	.word	0x202d2062
   14940:	70746573 	.word	0x70746573
   14944:	746e696f 	.word	0x746e696f
   14948:	203a3120 	.word	0x203a3120
   1494c:	00000000 	.word	0x00000000
   14950:	202d2063 	.word	0x202d2063
   14954:	20434f53 	.word	0x20434f53
   14958:	70746573 	.word	0x70746573
   1495c:	746e696f 	.word	0x746e696f
   14960:	003a3120 	.word	0x003a3120
   14964:	00000025 	.word	0x00000025
   14968:	202d2064 	.word	0x202d2064
   1496c:	70746573 	.word	0x70746573
   14970:	746e696f 	.word	0x746e696f
   14974:	203a3220 	.word	0x203a3220
   14978:	00000000 	.word	0x00000000
   1497c:	202d2065 	.word	0x202d2065
   14980:	20434f53 	.word	0x20434f53
   14984:	70746573 	.word	0x70746573
   14988:	746e696f 	.word	0x746e696f
   1498c:	203a3220 	.word	0x203a3220
   14990:	00000000 	.word	0x00000000
   14994:	202d2067 	.word	0x202d2067
   14998:	726f7453 	.word	0x726f7453
   1499c:	20656761 	.word	0x20656761
   149a0:	70746553 	.word	0x70746553
   149a4:	746e696f 	.word	0x746e696f
   149a8:	0000203a 	.word	0x0000203a
   149ac:	202d2068 	.word	0x202d2068
   149b0:	63736944 	.word	0x63736944
   149b4:	67726168 	.word	0x67726168
   149b8:	75432065 	.word	0x75432065
   149bc:	6e657272 	.word	0x6e657272
   149c0:	61542074 	.word	0x61542074
   149c4:	20726570 	.word	0x20726570
   149c8:	7366664f 	.word	0x7366664f
   149cc:	203a7465 	.word	0x203a7465
   149d0:	00000000 	.word	0x00000000
   149d4:	202d206a 	.word	0x202d206a
   149d8:	63736944 	.word	0x63736944
   149dc:	67726168 	.word	0x67726168
   149e0:	75432065 	.word	0x75432065
   149e4:	6e657272 	.word	0x6e657272
   149e8:	65542074 	.word	0x65542074
   149ec:	7265706d 	.word	0x7265706d
   149f0:	72757461 	.word	0x72757461
   149f4:	65442065 	.word	0x65442065
   149f8:	65746172 	.word	0x65746172
   149fc:	00203a20 	.word	0x00203a20
   14a00:	202d206b 	.word	0x202d206b
   14a04:	6c6c6543 	.word	0x6c6c6543
   14a08:	73694420 	.word	0x73694420
   14a0c:	72616863 	.word	0x72616863
   14a10:	56206567 	.word	0x56206567
   14a14:	61746c6f 	.word	0x61746c6f
   14a18:	48206567 	.word	0x48206567
   14a1c:	65747379 	.word	0x65747379
   14a20:	69736572 	.word	0x69736572
   14a24:	00203a73 	.word	0x00203a73
   14a28:	202d2078 	.word	0x202d2078
   14a2c:	20435343 	.word	0x20435343
   14a30:	69726156 	.word	0x69726156
   14a34:	20746e61 	.word	0x20746e61
   14a38:	64657355 	.word	0x64657355
   14a3c:	0000203a 	.word	0x0000203a
   14a40:	20776d42 	.word	0x20776d42
   14a44:	00003349 	.word	0x00003349
   14a48:	696e694d 	.word	0x696e694d
   14a4c:	ff00452d 	.word	0xff00452d
   14a50:	0020416d 	.word	0x0020416d
   14a54:	00207c20 	.word	0x00207c20
   14a58:	75706e49 	.word	0x75706e49
   14a5c:	00203a74 	.word	0x00203a74
   14a60:	4e4f2031 	.word	0x4e4f2031
   14a64:	00002020 	.word	0x00002020
   14a68:	464f2031 	.word	0x464f2031
   14a6c:	00002046 	.word	0x00002046
   14a70:	4e4f2032 	.word	0x4e4f2032
   14a74:	00002020 	.word	0x00002020
   14a78:	464f2032 	.word	0x464f2032
   14a7c:	00002046 	.word	0x00002046
   14a80:	4e4f2033 	.word	0x4e4f2033
   14a84:	00002020 	.word	0x00002020
   14a88:	464f2033 	.word	0x464f2033
   14a8c:	00002046 	.word	0x00002046
   14a90:	4e4f2034 	.word	0x4e4f2034
   14a94:	00002020 	.word	0x00002020
   14a98:	464f2034 	.word	0x464f2034
   14a9c:	ff002046 	.word	0xff002046
   14aa0:	74617473 	.word	0x74617473
   14aa4:	7478742e 	.word	0x7478742e
   14aa8:	0000003d 	.word	0x0000003d
   14aac:	74634120 	.word	0x74634120
   14ab0:	20657669 	.word	0x20657669
   14ab4:	00000000 	.word	0x00000000
   14ab8:	2e636f73 	.word	0x2e636f73
   14abc:	3d6c6176 	.word	0x3d6c6176
   14ac0:	00000000 	.word	0x00000000
   14ac4:	31636f73 	.word	0x31636f73
   14ac8:	6c61762e 	.word	0x6c61762e
   14acc:	0000003d 	.word	0x0000003d
   14ad0:	72727563 	.word	0x72727563
   14ad4:	2e746e65 	.word	0x2e746e65
   14ad8:	3d6c6176 	.word	0x3d6c6176
   14adc:	00000000 	.word	0x00000000
   14ae0:	706d6574 	.word	0x706d6574
   14ae4:	6c61762e 	.word	0x6c61762e
   14ae8:	0000003d 	.word	0x0000003d
   14aec:	706d6574 	.word	0x706d6574
   14af0:	2e776f6c 	.word	0x2e776f6c
   14af4:	3d6c6176 	.word	0x3d6c6176
   14af8:	00000000 	.word	0x00000000
   14afc:	706d6574 	.word	0x706d6574
   14b00:	68676968 	.word	0x68676968
   14b04:	6c61762e 	.word	0x6c61762e
   14b08:	0000003d 	.word	0x0000003d
   14b0c:	746c6f76 	.word	0x746c6f76
   14b10:	6c61762e 	.word	0x6c61762e
   14b14:	0000003d 	.word	0x0000003d
   14b18:	63776f6c 	.word	0x63776f6c
   14b1c:	2e6c6c65 	.word	0x2e6c6c65
   14b20:	3d6c6176 	.word	0x3d6c6176
   14b24:	00000000 	.word	0x00000000
   14b28:	68676968 	.word	0x68676968
   14b2c:	6c6c6563 	.word	0x6c6c6563
   14b30:	6c61762e 	.word	0x6c61762e
   14b34:	0000003d 	.word	0x0000003d
   14b38:	6d726966 	.word	0x6d726966
   14b3c:	6c61762e 	.word	0x6c61762e
   14b40:	0000003d 	.word	0x0000003d
   14b44:	6c6c6563 	.word	0x6c6c6563
   14b48:	746c6564 	.word	0x746c6564
   14b4c:	61762e61 	.word	0x61762e61
   14b50:	00003d6c 	.word	0x00003d6c
   14b54:	6c6c6563 	.word	0x6c6c6563
   14b58:	2e6c6162 	.word	0x2e6c6162
   14b5c:	3d6c6176 	.word	0x3d6c6176
   14b60:	ffffff00 	.word	0xffffff00
   14b64:	20434420 	.word	0x20434420
   14b68:	65776f50 	.word	0x65776f50
   14b6c:	203a2072 	.word	0x203a2072
   14b70:	00000000 	.word	0x00000000
   14b74:	20434420 	.word	0x20434420
   14b78:	72616843 	.word	0x72616843
   14b7c:	3a206567 	.word	0x3a206567
   14b80:	ffff0020 	.word	0xffff0020
   14b84:	65736552 	.word	0x65736552
   14b88:	61422074 	.word	0x61422074
   14b8c:	636e616c 	.word	0x636e616c
   14b90:	69542065 	.word	0x69542065
   14b94:	0072656d 	.word	0x0072656d
   14b98:	65747845 	.word	0x65747845
   14b9c:	6465646e 	.word	0x6465646e
   14ba0:	3a444920 	.word	0x3a444920
   14ba4:	25783020 	.word	0x25783020
   14ba8:	586c382e 	.word	0x586c382e
   14bac:	4c442020 	.word	0x4c442020
   14bb0:	25203a43 	.word	0x25203a43
   14bb4:	20206431 	.word	0x20206431
   14bb8:	61746144 	.word	0x61746144
   14bbc:	0000003a 	.word	0x0000003a
   14bc0:	2578302c 	.word	0x2578302c
   14bc4:	586c332e 	.word	0x586c332e
   14bc8:	6c61662c 	.word	0x6c61662c
   14bcc:	252c6573 	.word	0x252c6573
   14bd0:	00006431 	.word	0x00006431
   14bd4:	4d455220 	.word	0x4d455220
   14bd8:	2045544f 	.word	0x2045544f
   14bdc:	55514552 	.word	0x55514552
   14be0:	20545345 	.word	0x20545345
   14be4:	4d415246 	.word	0x4d415246
   14be8:	00000045 	.word	0x00000045
   14bec:	7830202c 	.word	0x7830202c
   14bf0:	58322e25 	.word	0x58322e25
   14bf4:	ffffff00 	.word	0xffffff00
   14bf8:	63657250 	.word	0x63657250
   14bfc:	67726168 	.word	0x67726168
   14c00:	21212165 	.word	0x21212165
   14c04:	00000000 	.word	0x00000000
   14c08:	6e69614d 	.word	0x6e69614d
   14c0c:	216e4f20 	.word	0x216e4f20
   14c10:	00002121 	.word	0x00002121
   14c14:	7265764f 	.word	0x7265764f
   14c18:	6c6f5620 	.word	0x6c6f5620
   14c1c:	65676174 	.word	0x65676174
   14c20:	69725420 	.word	0x69725420
   14c24:	00000070 	.word	0x00000070
   14c28:	65736552 	.word	0x65736552
   14c2c:	764f2074 	.word	0x764f2074
   14c30:	56207265 	.word	0x56207265
   14c34:	61746c6f 	.word	0x61746c6f
   14c38:	54206567 	.word	0x54206567
   14c3c:	20706972 	.word	0x20706972
   14c40:	20746f4e 	.word	0x20746f4e
   14c44:	72616843 	.word	0x72616843
   14c48:	00646567 	.word	0x00646567
   14c4c:	65646e55 	.word	0x65646e55
   14c50:	6f562072 	.word	0x6f562072
   14c54:	6761746c 	.word	0x6761746c
   14c58:	72542065 	.word	0x72542065
   14c5c:	00007069 	.word	0x00007069
   14c60:	65736552 	.word	0x65736552
   14c64:	6e552074 	.word	0x6e552074
   14c68:	20726564 	.word	0x20726564
   14c6c:	746c6f56 	.word	0x746c6f56
   14c70:	20656761 	.word	0x20656761
   14c74:	70697254 	.word	0x70697254
   14c78:	00000000 	.word	0x00000000
   14c7c:	21202020 	.word	0x21202020
   14c80:	55202121 	.word	0x55202121
   14c84:	7265646e 	.word	0x7265646e
   14c88:	746c6f76 	.word	0x746c6f76
   14c8c:	20656761 	.word	0x20656761
   14c90:	6c756146 	.word	0x6c756146
   14c94:	21212074 	.word	0x21212074
   14c98:	00000021 	.word	0x00000021
   14c9c:	21202020 	.word	0x21202020
   14ca0:	53202121 	.word	0x53202121
   14ca4:	65697265 	.word	0x65697265
   14ca8:	65432073 	.word	0x65432073
   14cac:	20736c6c 	.word	0x20736c6c
   14cb0:	6c756146 	.word	0x6c756146
   14cb4:	21212074 	.word	0x21212074
   14cb8:	00000021 	.word	0x00000021
   14cbc:	21202020 	.word	0x21202020
   14cc0:	4d202121 	.word	0x4d202121
   14cc4:	4c55444f 	.word	0x4c55444f
   14cc8:	494d2045 	.word	0x494d2045
   14ccc:	4e495353 	.word	0x4e495353
   14cd0:	21212047 	.word	0x21212047
   14cd4:	ffff0021 	.word	0xffff0021
   14cd8:	72617453 	.word	0x72617453
   14cdc:	676e6974 	.word	0x676e6974
   14ce0:	21707520 	.word	0x21707520
   14ce4:	00000000 	.word	0x00000000
   14ce8:	706d6953 	.word	0x706d6953
   14cec:	20534d42 	.word	0x20534d42
   14cf0:	42203256 	.word	0x42203256
   14cf4:	4920574d 	.word	0x4920574d
   14cf8:	00000033 	.word	0x00000033
   14cfc:	73616552 	.word	0x73616552
   14d00:	66206e6f 	.word	0x66206e6f
   14d04:	6c20726f 	.word	0x6c20726f
   14d08:	20747361 	.word	0x20747361
   14d0c:	65736552 	.word	0x65736552
   14d10:	00203a74 	.word	0x00203a74
   14d14:	706f7453 	.word	0x706f7453
   14d18:	646f4d20 	.word	0x646f4d20
   14d1c:	63412065 	.word	0x63412065
   14d20:	776f6e6b 	.word	0x776f6e6b
   14d24:	6764656c 	.word	0x6764656c
   14d28:	72452065 	.word	0x72452065
   14d2c:	20726f72 	.word	0x20726f72
   14d30:	65736552 	.word	0x65736552
   14d34:	00000074 	.word	0x00000074
   14d38:	2d4d444d 	.word	0x2d4d444d
   14d3c:	52205041 	.word	0x52205041
   14d40:	74657365 	.word	0x74657365
   14d44:	00000000 	.word	0x00000000
   14d48:	74666f53 	.word	0x74666f53
   14d4c:	65726177 	.word	0x65726177
   14d50:	73655220 	.word	0x73655220
   14d54:	00007465 	.word	0x00007465
   14d58:	65726f43 	.word	0x65726f43
   14d5c:	636f4c20 	.word	0x636f4c20
   14d60:	2070756b 	.word	0x2070756b
   14d64:	6e657645 	.word	0x6e657645
   14d68:	65522074 	.word	0x65522074
   14d6c:	00746573 	.word	0x00746573
   14d70:	65776f50 	.word	0x65776f50
   14d74:	6e6f2d72 	.word	0x6e6f2d72
   14d78:	73655220 	.word	0x73655220
   14d7c:	00007465 	.word	0x00007465
   14d80:	65747845 	.word	0x65747845
   14d84:	6c616e72 	.word	0x6c616e72
   14d88:	6e695020 	.word	0x6e695020
   14d8c:	73655220 	.word	0x73655220
   14d90:	00007465 	.word	0x00007465
   14d94:	63746157 	.word	0x63746157
   14d98:	676f6468 	.word	0x676f6468
   14d9c:	504f4328 	.word	0x504f4328
   14da0:	65522029 	.word	0x65522029
   14da4:	00746573 	.word	0x00746573
   14da8:	73736f4c 	.word	0x73736f4c
   14dac:	20666f20 	.word	0x20666f20
   14db0:	65747845 	.word	0x65747845
   14db4:	6c616e72 	.word	0x6c616e72
   14db8:	6f6c4320 	.word	0x6f6c4320
   14dbc:	52206b63 	.word	0x52206b63
   14dc0:	74657365 	.word	0x74657365
   14dc4:	00000000 	.word	0x00000000
   14dc8:	73736f4c 	.word	0x73736f4c
   14dcc:	20666f20 	.word	0x20666f20
   14dd0:	6b636f4c 	.word	0x6b636f4c
   14dd4:	206e6920 	.word	0x206e6920
   14dd8:	204c4c50 	.word	0x204c4c50
   14ddc:	65736552 	.word	0x65736552
   14de0:	00000074 	.word	0x00000074
   14de4:	2d776f4c 	.word	0x2d776f4c
   14de8:	746c6f76 	.word	0x746c6f76
   14dec:	20656761 	.word	0x20656761
   14df0:	65746544 	.word	0x65746544
   14df4:	52207463 	.word	0x52207463
   14df8:	74657365 	.word	0x74657365
   14dfc:	00000000 	.word	0x00000000
   14e00:	72617453 	.word	0x72617453
   14e04:	20646574 	.word	0x20646574
   14e08:	69726573 	.word	0x69726573
   14e0c:	69206c61 	.word	0x69206c61
   14e10:	7265746e 	.word	0x7265746e
   14e14:	65636166 	.word	0x65636166
   14e18:	206f7420 	.word	0x206f7420
   14e1c:	2e534d42 	.word	0x2e534d42
   14e20:	ffffff00 	.word	0xffffff00

00014e24 <finalxor>:
   14e24:	81bbf5cf 69531d27 4c763802 00007830     ....'.Si.8vL0x..
   14e34:	00006230 00000046 45555254 00000000     0b..F...TRUE....
   14e44:	534c4146 ffff0045 00202d20 55424544     FALSE... - .DEBU
   14e54:	00000047 4f464e49 00000000 4e524157     G...INFO....WARN
   14e64:	00474e49 4f525245 ffff0052 726f6241     ING.ERROR...Abor
   14e74:	6e692074 4e414320 67656220 202e6e69     t in CAN begin. 
   14e84:	6c756f43 74276e64 6e696620 20612064     Couldn't find a 
   14e94:	74697573 656c6261 75616220 6f632064     suitable baud co
   14ea4:	6769666e ffff0021                       nfig!...

00014eac <ADC::diff_table_ADC0>:
   14eac:	03248022                                ".$.

00014eb0 <ADC::diff_table_ADC1>:
   14eb0:	80240322                                ".$.

00014eb4 <ADC::channel2sc1aADC0>:
   14eb4:	09080e05 07060c0d 1300040f 0e051f03     ................
   14ec4:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   14ed4:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00014ee0 <ADC::channel2sc1aADC1>:
   14ee0:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   14ef0:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   14f00:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

00014f0c <SPIClass::spi0_hardware>:
   14f0c:	4004803c 00001000 00001a04 00007fff     <..@............
   14f1c:	00001011 00008c39 0000080c 00000200     ....9...........
   14f2c:	00000200 0000070b 00000240 00000200     ........@.......
   14f3c:	00000e0d 00000240 00000200 0609020a     ....@...........
   14f4c:	16151714 0000000f 00000200 00000200     ................
   14f5c:	00000200 00000200 00000200 00000200     ................
   14f6c:	00000200 00000200 00000200 02020101     ................
   14f7c:	08080404 00000010                       ........

00014f84 <_serialEvent_default>:
   14f84:	ffffff00                                ....

00014f88 <vtable for HardwareSerial2>:
	...
   14f90:	00008e91 00008eb5 00008f45 00008f41     ........E...A...
   14fa0:	00008f3d 00008f39 00008f35 00008e59     =...9...5...Y...
   14fb0:	00008f15 00008f11 00008f09 00008f01     ................
   14fc0:	00008ef9 00008ee9 00008ed9 00008ed5     ................
   14fd0:	00008ecd 00008ec5 00008f69 00008f89     ........i.......
   14fe0:	00008fa9 00008f49 00008e9d 00008e85     ....I...........

00014ff0 <vtable for HardwareSerial3>:
	...
   14ff8:	00009001 00009025 000090b5 000090b1     ....%...........
   15008:	000090ad 000090a9 000090a5 00008fc9     ................
   15018:	00009085 00009081 00009079 00009071     ........y...q...
   15028:	00009069 00009059 00009049 00009045     i...Y...I...E...
   15038:	0000903d 00009035 000090d9 000090f9     =...5...........
   15048:	00009119 000090b9 0000900d 00008ff5     ................
   15058:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   15068:	78037003 0f80f013 4770d0fb              .p.x......pG

00015074 <CSWTCH.39>:
   15074:	00000008 0000000c 0000000a 00000009     ................
   15084:	0000000b                                ....

00015088 <digital_pin_to_info_PGM>:
   15088:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   15098:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   150a8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   150b8:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   150c8:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   150d8:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   150e8:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   150f8:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   15108:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15118:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15128:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15138:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15148:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   15158:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   15168:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   15178:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   15188:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00015198 <vtable for usb_serial_class>:
	...
   151a0:	0000bae1 0000bad9 0000bad5 0000bad1     ................
   151b0:	0000bacd 0000bac9 0000bac5 0000bac1     ................

000151c0 <usb_descriptor_list>:
   151c0:	00000100 1fff8a60 00000012 00000200     ....`...........
   151d0:	1fff8a1c 00000043 00000300 1fff8a74     ....C.......t...
   151e0:	00000000 04090301 1fff8a78 00000000     ........x.......
   151f0:	04090302 1fff8a90 00000000 04090303     ................
   15200:	1fff8aa8 00000000 00000000 00000000     ................
   15210:	00000000                                ....

00015214 <usb_endpoint_config_table>:
   15214:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   15224:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015230 <_ctype_>:
   15230:	20202000 20202020 28282020 20282828     .         ((((( 
   15240:	20202020 20202020 20202020 20202020                     
   15250:	10108820 10101010 10101010 10101010      ...............
   15260:	04040410 04040404 10040404 10101010     ................
   15270:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15280:	01010101 01010101 01010101 10101010     ................
   15290:	42421010 42424242 02020202 02020202     ..BBBBBB........
   152a0:	02020202 02020202 02020202 10101010     ................
   152b0:	00000020 00000000 00000000 00000000      ...............
	...
   15330:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15340:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   15350:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   15360:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   15370:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   15380:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   15390:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   153a0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   153b0:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   153c0:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   153d0:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   153e0:	2e636572 ffff0063                       rec.c...

000153e8 <__mprec_bigtens>:
   153e8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   153f8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15408:	7f73bf3c 75154fdd                       <.s..O.u

00015410 <__mprec_tens>:
   15410:	00000000 3ff00000 00000000 40240000     .......?......$@
   15420:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15430:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15440:	00000000 412e8480 00000000 416312d0     .......A......cA
   15450:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   15460:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   15470:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   15480:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   15490:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   154a0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   154b0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   154c0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   154d0:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   154e0:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   154f0:	37363534 62613938 66656463 00000000     456789abcdef....
   15500:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   15510:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15520:	20202020 20202020 20202020 30303030                 0000
   15530:	30303030 30303030 30303030 7566202c     000000000000, fu
   15540:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   15550:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   15560:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   15570:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   15580:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   15590:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   155a0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   155b0:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   155c0:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   155d0:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   155e0:	632e616f ffffff00 20202020 20202020     oa.c....        
   155f0:	20202020 20202020 30303030 30303030             00000000
   15600:	30303030 30303030                       00000000

00015608 <_init>:
   15608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1560a:	bf00      	nop
   1560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1560e:	bc08      	pop	{r3}
   15610:	469e      	mov	lr, r3
   15612:	4770      	bx	lr

00015614 <__init_array_start>:
   15614:	0000de5d 	.word	0x0000de5d

00015618 <__frame_dummy_init_array_entry>:
   15618:	00000435 0000715d 0000840d 00008c49     5...]q......I...

Disassembly of section .fini:

00015628 <_fini>:
   15628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1562a:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89d0 	.word	0x1fff89d0

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89b0 	.word	0x1fff89b0

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8980 	.word	0x1fff8980

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8930 	.word	0x1fff8930

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88f8 	.word	0x1fff88f8

1fff8824 <ACvolt>:
1fff8824:	                                         ..

1fff8826 <ChargerEff>:
1fff8826:	                                         U.

1fff8828 <SOC>:
1fff8828:	00000064                                d...

1fff882c <SOH>:
1fff882c:	00000064                                d...

1fff8830 <balstop>:
1fff8830:	0000000a                                ....

1fff8834 <bmsmanu>:
1fff8834:	204d4f54 42204544                       TOM DE B

1fff883c <bmsname>:
1fff883c:	504d4953 534d4220                       SIMP BMS

1fff8844 <chargerid1>:
1fff8844:	00000618                                ....

1fff8848 <chargerid2>:
1fff8848:	00000638                                8...

1fff884c <commandrate>:
1fff884c:	00000032                                2...

1fff8850 <debug>:
1fff8850:	00000001                                ....

1fff8854 <debugdigits>:
1fff8854:	00000002                                ....

1fff8858 <filterFrequency>:
1fff8858:	40a00000                                ...@

1fff885c <firmver>:
1fff885c:	0003846e                                n...

1fff8860 <maxac1>:
1fff8860:	00000010                                ....

1fff8864 <maxac2>:
1fff8864:	0000000a                                ....

1fff8868 <ncharger>:
1fff8868:	00000001                                ....

1fff886c <pulltime>:
1fff886c:	00000064                                d...

1fff8870 <pwmcurmax>:
1fff8870:	00000032                                2...

1fff8874 <pwmcurmid>:
1fff8874:	00000032                                2...

1fff8878 <pwmfreq>:
1fff8878:	000000c8                                ....

1fff887c <sensor>:
1fff887c:	00000001                                ....

1fff8880 <Logger::logLevel>:
1fff8880:	00000001                                ....

1fff8884 <bitTimingTable>:
1fff8884:	01010000 01010100 01010201 02010202     ................
1fff8894:	03020103 02040202 02020502 06020305     ................
1fff88a4:	03070203 03040702 07030407 05070405     ................
1fff88b4:	05060704 07060607 07070606 00070707     ................

1fff88c4 <Serial2>:
1fff88c4:	00014f90 00000000 000003e8 00000000     .O..............
1fff88d4:	0000b145                                E...

1fff88d8 <Serial3>:
1fff88d8:	00014ff8 00000000 000003e8 00000000     .O..............
1fff88e8:	0000b149                                I...

1fff88ec <analog_config_bits>:
1fff88ec:	                                         .

1fff88ed <analog_num_average>:
1fff88ed:	                                         ...

1fff88f0 <__brkval>:
1fff88f0:	1fffd630                                0...

1fff88f4 <analog_write_res>:
1fff88f4:	00000008                                ....

1fff88f8 <isr_table_portA>:
1fff88f8:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8908:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8918:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8928:	00009a8d 00009a8d                       ........

1fff8930 <isr_table_portB>:
1fff8930:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8940:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8950:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8960:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8970:	00009a8d 00009a8d 00009a8d 00009a8d     ................

1fff8980 <isr_table_portC>:
1fff8980:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff8990:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff89a0:	00009a8d 00009a8d 00009a8d 00009a8d     ................

1fff89b0 <isr_table_portD>:
1fff89b0:	00009a8d 00009a8d 00009a8d 00009a8d     ................
1fff89c0:	00009a8d 00009a8d 00009a8d 00009a8d     ................

1fff89d0 <isr_table_portE>:
1fff89d0:	00009a8d 00009a8d                       ........

1fff89d8 <rts_high_watermark_>:
1fff89d8:	00000028                                (...

1fff89dc <rts_low_watermark_>:
1fff89dc:	0000001a                                ....

1fff89e0 <rx_buffer_total_size_>:
1fff89e0:	00000040                                @...

1fff89e4 <rx_pin_num>:
1fff89e4:	00000009                                ....

1fff89e8 <tx_buffer_total_size_>:
1fff89e8:	00000028                                (...

1fff89ec <tx_pin_num>:
1fff89ec:	0000000a                                ....

1fff89f0 <rts_high_watermark_>:
1fff89f0:	00000028                                (...

1fff89f4 <rts_low_watermark_>:
1fff89f4:	0000001a                                ....

1fff89f8 <rx_buffer_total_size_>:
1fff89f8:	00000040                                @...

1fff89fc <tx_buffer_total_size_>:
1fff89fc:	00000028                                (...

1fff8a00 <tx_pin_num>:
1fff8a00:	                                         .

1fff8a01 <_serialEvent2_default>:
1fff8a01:	                                         .

1fff8a02 <_serialEvent3_default>:
1fff8a02:	                                         ..

1fff8a04 <Serial>:
1fff8a04:	000151a0 00000000 000003e8 00000000     .Q..............

1fff8a14 <usb_buffer_available>:
1fff8a14:	ffffffff                                ....

1fff8a18 <yield_active_check_flags>:
1fff8a18:	00000001                                ....

1fff8a1c <config_descriptor>:
1fff8a1c:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a2c:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a3c:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a4c:	00000a02 03050700 00004002 02840507     .........@......
1fff8a5c:	00000040                                @...

1fff8a60 <device_descriptor>:
1fff8a60:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a70:	00000103                                ....

1fff8a74 <string0>:
1fff8a74:	04090304                                ....

1fff8a78 <usb_string_manufacturer_name_default>:
1fff8a78:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a88:	00690075 006f006e                       u.i.n.o.

1fff8a90 <usb_string_product_name_default>:
1fff8a90:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8aa0:	00610069 0000006c                       i.a.l...

1fff8aa8 <usb_string_serial_number_default>:
1fff8aa8:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ac0 <__malloc_av_>:
	...
1fff8ac8:	1fff8ac0 1fff8ac0 1fff8ac8 1fff8ac8     ................
1fff8ad8:	1fff8ad0 1fff8ad0 1fff8ad8 1fff8ad8     ................
1fff8ae8:	1fff8ae0 1fff8ae0 1fff8ae8 1fff8ae8     ................
1fff8af8:	1fff8af0 1fff8af0 1fff8af8 1fff8af8     ................
1fff8b08:	1fff8b00 1fff8b00 1fff8b08 1fff8b08     ................
1fff8b18:	1fff8b10 1fff8b10 1fff8b18 1fff8b18     ................
1fff8b28:	1fff8b20 1fff8b20 1fff8b28 1fff8b28      ... ...(...(...
1fff8b38:	1fff8b30 1fff8b30 1fff8b38 1fff8b38     0...0...8...8...
1fff8b48:	1fff8b40 1fff8b40 1fff8b48 1fff8b48     @...@...H...H...
1fff8b58:	1fff8b50 1fff8b50 1fff8b58 1fff8b58     P...P...X...X...
1fff8b68:	1fff8b60 1fff8b60 1fff8b68 1fff8b68     `...`...h...h...
1fff8b78:	1fff8b70 1fff8b70 1fff8b78 1fff8b78     p...p...x...x...
1fff8b88:	1fff8b80 1fff8b80 1fff8b88 1fff8b88     ................
1fff8b98:	1fff8b90 1fff8b90 1fff8b98 1fff8b98     ................
1fff8ba8:	1fff8ba0 1fff8ba0 1fff8ba8 1fff8ba8     ................
1fff8bb8:	1fff8bb0 1fff8bb0 1fff8bb8 1fff8bb8     ................
1fff8bc8:	1fff8bc0 1fff8bc0 1fff8bc8 1fff8bc8     ................
1fff8bd8:	1fff8bd0 1fff8bd0 1fff8bd8 1fff8bd8     ................
1fff8be8:	1fff8be0 1fff8be0 1fff8be8 1fff8be8     ................
1fff8bf8:	1fff8bf0 1fff8bf0 1fff8bf8 1fff8bf8     ................
1fff8c08:	1fff8c00 1fff8c00 1fff8c08 1fff8c08     ................
1fff8c18:	1fff8c10 1fff8c10 1fff8c18 1fff8c18     ................
1fff8c28:	1fff8c20 1fff8c20 1fff8c28 1fff8c28      ... ...(...(...
1fff8c38:	1fff8c30 1fff8c30 1fff8c38 1fff8c38     0...0...8...8...
1fff8c48:	1fff8c40 1fff8c40 1fff8c48 1fff8c48     @...@...H...H...
1fff8c58:	1fff8c50 1fff8c50 1fff8c58 1fff8c58     P...P...X...X...
1fff8c68:	1fff8c60 1fff8c60 1fff8c68 1fff8c68     `...`...h...h...
1fff8c78:	1fff8c70 1fff8c70 1fff8c78 1fff8c78     p...p...x...x...
1fff8c88:	1fff8c80 1fff8c80 1fff8c88 1fff8c88     ................
1fff8c98:	1fff8c90 1fff8c90 1fff8c98 1fff8c98     ................
1fff8ca8:	1fff8ca0 1fff8ca0 1fff8ca8 1fff8ca8     ................
1fff8cb8:	1fff8cb0 1fff8cb0 1fff8cb8 1fff8cb8     ................
1fff8cc8:	1fff8cc0 1fff8cc0 1fff8cc8 1fff8cc8     ................
1fff8cd8:	1fff8cd0 1fff8cd0 1fff8cd8 1fff8cd8     ................
1fff8ce8:	1fff8ce0 1fff8ce0 1fff8ce8 1fff8ce8     ................
1fff8cf8:	1fff8cf0 1fff8cf0 1fff8cf8 1fff8cf8     ................
1fff8d08:	1fff8d00 1fff8d00 1fff8d08 1fff8d08     ................
1fff8d18:	1fff8d10 1fff8d10 1fff8d18 1fff8d18     ................
1fff8d28:	1fff8d20 1fff8d20 1fff8d28 1fff8d28      ... ...(...(...
1fff8d38:	1fff8d30 1fff8d30 1fff8d38 1fff8d38     0...0...8...8...
1fff8d48:	1fff8d40 1fff8d40 1fff8d48 1fff8d48     @...@...H...H...
1fff8d58:	1fff8d50 1fff8d50 1fff8d58 1fff8d58     P...P...X...X...
1fff8d68:	1fff8d60 1fff8d60 1fff8d68 1fff8d68     `...`...h...h...
1fff8d78:	1fff8d70 1fff8d70 1fff8d78 1fff8d78     p...p...x...x...
1fff8d88:	1fff8d80 1fff8d80 1fff8d88 1fff8d88     ................
1fff8d98:	1fff8d90 1fff8d90 1fff8d98 1fff8d98     ................
1fff8da8:	1fff8da0 1fff8da0 1fff8da8 1fff8da8     ................
1fff8db8:	1fff8db0 1fff8db0 1fff8db8 1fff8db8     ................
1fff8dc8:	1fff8dc0 1fff8dc0 1fff8dc8 1fff8dc8     ................
1fff8dd8:	1fff8dd0 1fff8dd0 1fff8dd8 1fff8dd8     ................
1fff8de8:	1fff8de0 1fff8de0 1fff8de8 1fff8de8     ................
1fff8df8:	1fff8df0 1fff8df0 1fff8df8 1fff8df8     ................
1fff8e08:	1fff8e00 1fff8e00 1fff8e08 1fff8e08     ................
1fff8e18:	1fff8e10 1fff8e10 1fff8e18 1fff8e18     ................
1fff8e28:	1fff8e20 1fff8e20 1fff8e28 1fff8e28      ... ...(...(...
1fff8e38:	1fff8e30 1fff8e30 1fff8e38 1fff8e38     0...0...8...8...
1fff8e48:	1fff8e40 1fff8e40 1fff8e48 1fff8e48     @...@...H...H...
1fff8e58:	1fff8e50 1fff8e50 1fff8e58 1fff8e58     P...P...X...X...
1fff8e68:	1fff8e60 1fff8e60 1fff8e68 1fff8e68     `...`...h...h...
1fff8e78:	1fff8e70 1fff8e70 1fff8e78 1fff8e78     p...p...x...x...
1fff8e88:	1fff8e80 1fff8e80 1fff8e88 1fff8e88     ................
1fff8e98:	1fff8e90 1fff8e90 1fff8e98 1fff8e98     ................
1fff8ea8:	1fff8ea0 1fff8ea0 1fff8ea8 1fff8ea8     ................
1fff8eb8:	1fff8eb0 1fff8eb0 1fff8eb8 1fff8eb8     ................

1fff8ec8 <__malloc_sbrk_base>:
1fff8ec8:	ffffffff                                ....

1fff8ecc <__malloc_trim_threshold>:
1fff8ecc:	00020000                                ....

1fff8ed0 <__sglue>:
1fff8ed0:	00000000 00000003 1fffd350              ........P...

1fff8edc <__global_locale>:
1fff8edc:	00000043 00000000 00000000 00000000     C...............
	...
1fff8efc:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f1c:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f3c:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f5c:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f7c:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f9c:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fbc:	0000e8b1 0000e129 00000000 00015230     ....).......0R..
1fff8fcc:	00013eb8 00014b70 00014b70 00014b70     .>..pK..pK..pK..
1fff8fdc:	00014b70 00014b70 00014b70 00014b70     pK..pK..pK..pK..
1fff8fec:	00014b70 00014b70 ffffffff ffffffff     pK..pK..........
1fff8ffc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff9024:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9048 <_impure_data>:
1fff9048:	00000000 1fffd350 1fffd3b8 1fffd420     ....P....... ...
	...
1fff90e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90f0:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9168 <_impure_ptr>:
1fff9168:	1fff9048                                H...

1fff916c <__atexit_recursive_mutex>:
1fff916c:	1fffd490                                ....
